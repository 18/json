	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 0
	.intel_syntax noprefix
	.file	"src.cpp"
	.def	 "??1undo_construct@array@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1undo_construct@array@json@boost@@QEAA@XZ"
	.globl	"??1undo_construct@array@json@boost@@QEAA@XZ" # -- Begin function ??1undo_construct@array@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1undo_construct@array@json@boost@@QEAA@XZ": # @"??1undo_construct@array@json@boost@@QEAA@XZ"
# %bb.0:
	cmp	byte ptr [rcx + 8], 0
	je	.LBB0_2
# %bb.1:
	ret
.LBB0_2:
	mov	rdx, qword ptr [rcx]
	lea	rcx, [rdx + 16]
	jmp	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # TAILCALL
                                        # -- End function
	.def	 "?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.globl	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # -- Begin function ?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z": # @"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
.Lfunc_begin0:
.seh_proc "?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rax, qword ptr [rcx]
	test	rax, rax
	je	.LBB1_15
# %bb.1:
	mov	rbx, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rdx]
	mov	ecx, edi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB1_15
# %bb.2:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB1_6
# %bb.3:
	lea	rcx, [rcx + 2*rcx]
	lea	rdi, [rax + 8*rcx]
	add	rdi, 8
	.p2align	4, 0x90
.LBB1_4:                                # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rsi]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rdi, rcx
	jne	.LBB1_4
# %bb.5:
	mov	rdi, qword ptr [rbx]
.LBB1_6:
	test	rdi, rdi
	je	.LBB1_8
# %bb.7:
	and	rdi, -4
	jmp	.LBB1_11
.LBB1_8:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB1_9
.LBB1_11:
	mov	rdx, qword ptr [rsi]
	test	rdx, rdx
	je	.LBB1_12
# %bb.13:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB1_14
.LBB1_12:
	mov	r8d, 16
.LBB1_14:
	mov	rax, qword ptr [rdi]
.Ltmp0:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp1:
.LBB1_15:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB1_9:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB1_11
# %bb.10:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB1_11
	.seh_handlerdata
	.long	("$cppxdata$?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL
	.section	.text,"xr",one_only,"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0??destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0??destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA":
.seh_proc "?dtor$16@?0??destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"
.LBB1_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end0:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.p2align	2
"$cppxdata$?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	-1                      # ToState
	.long	"?dtor$16@?0??destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # Action
"$ip2state$?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	.Lfunc_begin0@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp0@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp1@IMGREL+1         # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
                                        # -- End function
	.def	 "??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z"
	.globl	"??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z" # -- Begin function ??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z
	.p2align	4, 0x90
"??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z": # @"??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z"
.seh_proc "??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	qword ptr [rcx], r9
	mov	qword ptr [rcx + 8], r8
	mov	rax, qword ptr [r9 + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	sub	rdx, rcx
	sar	rdx, 3
	movabs	r10, -6148914691236517205
	imul	r10, rdx
	mov	qword ptr [rsi + 24], r10
	mov	byte ptr [rsi + 32], 0
	cmp	r8, 2147483647
	jae	.LBB2_14
# %bb.1:
	mov	rcx, qword ptr [r9 + 16]
	test	rcx, rcx
	je	.LBB2_2
# %bb.3:
	mov	edx, dword ptr [rcx]
	mov	eax, dword ptr [rcx + 4]
	add	r8, rdx
	cmp	rax, r8
	jae	.LBB2_6
.LBB2_5:
	mov	rcx, r9
	mov	rdx, r8
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	mov	r9, qword ptr [rsi]
	mov	r10, qword ptr [rsi + 24]
	mov	rcx, qword ptr [r9 + 16]
.LBB2_6:
	lea	rax, [rcx + 8]
	test	rcx, rcx
	cmove	rax, rcx
	lea	rcx, [r10 + 2*r10]
	lea	rdx, [rax + 8*rcx]
	mov	qword ptr [rsi + 16], rdx
	mov	rcx, qword ptr [r9 + 16]
	test	rcx, rcx
	je	.LBB2_7
# %bb.8:
	mov	eax, dword ptr [rcx]
	sub	rax, r10
	je	.LBB2_11
.LBB2_10:
	mov	rcx, qword ptr [rsi + 8]
	lea	rcx, [rcx + 2*rcx]
	lea	rcx, [rdx + 8*rcx]
	shl	rax, 3
	lea	r8, [rax + 2*rax]
	call	memmove
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rax + 16]
.LBB2_11:
	test	rcx, rcx
	je	.LBB2_13
# %bb.12:
	mov	eax, dword ptr [rsi + 8]
	add	dword ptr [rcx], eax
.LBB2_13:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
.LBB2_2:
	xor	eax, eax
	cmp	rax, r8
	jb	.LBB2_5
	jmp	.LBB2_6
.LBB2_7:
	xor	eax, eax
	sub	rax, r10
	jne	.LBB2_10
	jmp	.LBB2_11
.LBB2_14:
	call	"?raise@array_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0undo_insert@array@json@boost@@QEAA@PEBVvalue@23@_KAEAV123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?raise@array_too_large@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@array_too_large@json@boost@@SAXXZ"
	.globl	"?raise@array_too_large@json@boost@@SAXXZ" # -- Begin function ?raise@array_too_large@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@array_too_large@json@boost@@SAXXZ": # @"?raise@array_too_large@json@boost@@SAXXZ"
.Lfunc_begin1:
.seh_proc "?raise@array_too_large@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DC@LMNCGPKG@static?5void?5boost?3?3json?3?3array_t@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 79
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BA@DIOCNIJA@array?5too?5large?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp2:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp3:
# %bb.1:
	lea	rax, [rip + "??_7array_too_large@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp4:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp5:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@array_too_large@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@array_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@array_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@array_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@array_too_large@json@boost@@SAXXZ@4HA"
.LBB3_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@array_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@array_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@array_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@array_too_large@json@boost@@SAXXZ@4HA"
.LBB3_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end1:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@array_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@array_too_large@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@array_too_large@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@array_too_large@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@array_too_large@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@array_too_large@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@array_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@array_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@array_too_large@json@boost@@SAXXZ":
	.long	.Lfunc_begin1@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp2@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp4@IMGREL+1         # IP
	.long	1                       # ToState
	.long	.Ltmp5@IMGREL+1         # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@array_too_large@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "?relocate@array@json@boost@@CAXPEAVvalue@23@0_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?relocate@array@json@boost@@CAXPEAVvalue@23@0_K@Z"
	.globl	"?relocate@array@json@boost@@CAXPEAVvalue@23@0_K@Z" # -- Begin function ?relocate@array@json@boost@@CAXPEAVvalue@23@0_K@Z
	.p2align	4, 0x90
"?relocate@array@json@boost@@CAXPEAVvalue@23@0_K@Z": # @"?relocate@array@json@boost@@CAXPEAVvalue@23@0_K@Z"
# %bb.0:
	test	r8, r8
	je	.LBB4_1
# %bb.2:
	shl	r8, 3
	lea	r8, [r8 + 2*r8]
	jmp	memmove                 # TAILCALL
.LBB4_1:
	ret
                                        # -- End function
	.def	 "??1undo_insert@array@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1undo_insert@array@json@boost@@QEAA@XZ"
	.globl	"??1undo_insert@array@json@boost@@QEAA@XZ" # -- Begin function ??1undo_insert@array@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1undo_insert@array@json@boost@@QEAA@XZ": # @"??1undo_insert@array@json@boost@@QEAA@XZ"
.seh_proc "??1undo_insert@array@json@boost@@QEAA@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	cmp	byte ptr [rcx + 32], 0
	je	.LBB5_2
.LBB5_1:
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB5_2:
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx]
	mov	rax, qword ptr [rcx + 16]
	lea	rdx, [rax + 8]
	test	rax, rax
	cmove	rdx, rax
	mov	rbx, qword ptr [rsi + 24]
	lea	rbx, [rbx + 2*rbx]
	lea	rdi, [rdx + 8*rbx]
	mov	ecx, dword ptr [rcx]
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB5_6
# %bb.3:
	mov	rbx, qword ptr [rsi + 16]
	cmp	rbx, rdi
	je	.LBB5_6
	.p2align	4, 0x90
.LBB5_4:                                # =>This Inner Loop Header: Depth=1
	add	rbx, -24
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rdi, rbx
	jne	.LBB5_4
# %bb.5:
	mov	rax, qword ptr [rsi]
	mov	rax, qword ptr [rax + 16]
.LBB5_6:
	test	rax, rax
	je	.LBB5_9
# %bb.7:
	mov	ecx, dword ptr [rsi + 8]
	sub	dword ptr [rax], ecx
	lea	rax, [rsi + 8]
	mov	rcx, qword ptr [rsi]
	mov	rcx, qword ptr [rcx + 16]
	test	rcx, rcx
	je	.LBB5_10
# %bb.8:
	mov	ecx, dword ptr [rcx]
	sub	rcx, qword ptr [rsi + 24]
	jne	.LBB5_11
	jmp	.LBB5_1
.LBB5_9:
	lea	rax, [rsi + 8]
.LBB5_10:
	xor	ecx, ecx
	sub	rcx, qword ptr [rsi + 24]
	je	.LBB5_1
.LBB5_11:
	mov	rax, qword ptr [rax]
	lea	rax, [rax + 2*rax]
	lea	rdx, [rdi + 8*rax]
	shl	rcx, 3
	lea	r8, [rcx + 2*rcx]
	mov	rcx, rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	memmove                 # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",one_only,"??1undo_insert@array@json@boost@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
	.globl	"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z" # -- Begin function ??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z": # @"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
.Lfunc_begin2:
.seh_proc "??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rdx + 16]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rcx], rax
	test	al, 1
	je	.LBB6_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB6_2:
	mov	byte ptr [rdi + 8], 0
	mov	rbx, qword ptr [rsi + 8]
	mov	qword ptr [rdi + 16], 0
	cmp	rbx, 2147483647
	jae	.LBB6_3
# %bb.5:
	test	rbx, rbx
	je	.LBB6_24
# %bb.6:
	mov	qword ptr [rbp - 8], rdi # 8-byte Spill
	mov	rdi, qword ptr [rdi]
	test	rdi, rdi
	je	.LBB6_8
# %bb.7:
	and	rdi, -4
	jmp	.LBB6_11
.LBB6_24:
	mov	qword ptr [rdi + 16], 0
	xor	edx, edx
	jmp	.LBB6_15
.LBB6_8:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB6_9
.LBB6_11:
	lea	rax, [rbx + 2*rbx]
	lea	rdx, [8*rax + 17]
	and	rdx, -8
	mov	rax, qword ptr [rdi]
.Ltmp6:
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
.Ltmp7:
# %bb.12:
	mov	rdi, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rdi + 16], rax
	mov	dword ptr [rax + 4], ebx
	mov	rax, qword ptr [rdi + 16]
	mov	dword ptr [rax], 0
	mov	rcx, qword ptr [rdi + 16]
	mov	rax, qword ptr [rsi + 8]
	test	rcx, rcx
	je	.LBB6_13
# %bb.14:
	mov	dword ptr [rcx], eax
	mov	rdx, qword ptr [rdi + 16]
.LBB6_15:
	mov	rax, qword ptr [rsi + 8]
	test	rax, rax
	je	.LBB6_18
.LBB6_17:
	lea	rcx, [rdx + 8]
	test	rdx, rdx
	cmove	rcx, rdx
	mov	rdx, qword ptr [rsi]
	shl	rax, 3
	lea	r8, [rax + 2*rax]
	call	memcpy
.LBB6_18:
	mov	qword ptr [rsi], 0
	mov	rax, rdi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB6_13:
	xor	edx, edx
	test	rax, rax
	jne	.LBB6_17
	jmp	.LBB6_18
.LBB6_9:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB6_11
# %bb.10:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB6_11
.LBB6_3:
.Ltmp8:
	mov	qword ptr [rbp - 8], rdi # 8-byte Spill
	call	"?raise@array_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp9:
# %bb.4:
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$19@?0???0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z@4HA":
.seh_proc "?dtor$19@?0???0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z@4HA"
.LBB6_19:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB6_23
# %bb.20:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB6_23
# %bb.21:
	cmp	rax, 1
	jne	.LBB6_23
# %bb.22:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB6_23:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end2:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$19@?0???0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z":
	.long	.Lfunc_begin2@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp6@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp7@IMGREL+1         # IP
	.long	-1                      # ToState
	.long	.Ltmp8@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp9@IMGREL+1         # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
                                        # -- End function
	.def	 "??1storage_ptr@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1storage_ptr@json@boost@@QEAA@XZ"
	.globl	"??1storage_ptr@json@boost@@QEAA@XZ" # -- Begin function ??1storage_ptr@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1storage_ptr@json@boost@@QEAA@XZ":   # @"??1storage_ptr@json@boost@@QEAA@XZ"
# %bb.0:
	mov	rcx, qword ptr [rcx]
	test	cl, 1
	je	.LBB7_3
# %bb.1:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB7_3
# %bb.2:
	cmp	rax, 1
	jne	.LBB7_3
# %bb.4:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	edx, 1
	rex64 jmp	rax             # TAILCALL
.LBB7_3:
	ret
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z"
	.globl	"??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z" # -- Begin function ??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z": # @"??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z"
.seh_proc "??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rdx], 0
	mov	qword ptr [rcx], rax
	mov	qword ptr [rcx + 16], 0
	mov	byte ptr [rcx + 8], 0
	mov	rcx, qword ptr [rdx]
	test	cl, 1
	je	.LBB8_4
# %bb.1:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB8_4
# %bb.2:
	cmp	rax, 1
	jne	.LBB8_4
# %bb.3:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB8_4:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@Vstorage_ptr@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
	.globl	"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z" # -- Begin function ??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z": # @"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
.Lfunc_begin3:
.seh_proc "??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, r8
	mov	rdi, rdx
	mov	rax, qword ptr [r9]
	mov	qword ptr [rbp - 24], r9 # 8-byte Spill
	mov	qword ptr [r9], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 0
	lea	rax, [rcx + 16]
	mov	qword ptr [rbp - 16], rax # 8-byte Spill
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	test	rdx, rdx
	je	.LBB9_2
# %bb.1:
.Ltmp10:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rdx, rdi
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp11:
.LBB9_2:
	lea	rbx, [rbp - 32]
	.p2align	4, 0x90
.LBB9_3:                                # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax]
	test	rax, rax
	je	.LBB9_4
# %bb.5:                                #   in Loop: Header=BB9_3 Depth=1
	mov	ecx, dword ptr [rax]
	cmp	rcx, rdi
	jb	.LBB9_7
	jmp	.LBB9_15
	.p2align	4, 0x90
.LBB9_4:                                #   in Loop: Header=BB9_3 Depth=1
	xor	ecx, ecx
	cmp	rcx, rdi
	jae	.LBB9_15
.LBB9_7:                                #   in Loop: Header=BB9_3 Depth=1
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB9_8
# %bb.9:                                #   in Loop: Header=BB9_3 Depth=1
	mov	eax, dword ptr [rax]
	jmp	.LBB9_10
	.p2align	4, 0x90
.LBB9_8:                                #   in Loop: Header=BB9_3 Depth=1
	xor	eax, eax
.LBB9_10:                               #   in Loop: Header=BB9_3 Depth=1
	lea	rax, [rax + 2*rax]
	lea	rcx, [rcx + 8*rax]
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 32], rax
	test	al, 1
	je	.LBB9_12
# %bb.11:                               #   in Loop: Header=BB9_3 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB9_12:                               #   in Loop: Header=BB9_3 Depth=1
.Ltmp12:
	mov	rdx, rsi
	mov	r8, rbx
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp13:
# %bb.13:                               #   in Loop: Header=BB9_3 Depth=1
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax]
	test	rax, rax
	je	.LBB9_3
# %bb.14:                               #   in Loop: Header=BB9_3 Depth=1
	add	dword ptr [rax], 1
	jmp	.LBB9_3
.LBB9_15:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB9_19
# %bb.16:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB9_19
# %bb.17:
	cmp	rax, 1
	jne	.LBB9_19
# %bb.18:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB9_19:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$20@?0???0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$20@?0???0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z@4HA"
.LBB9_20:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB9_24
# %bb.21:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB9_24
# %bb.22:
	cmp	rax, 1
	jne	.LBB9_24
# %bb.23:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB9_24:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB9_28
# %bb.25:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB9_28
# %bb.26:
	cmp	rax, 1
	jne	.LBB9_28
# %bb.27:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB9_28:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end3:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$20@?0???0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin3@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp10@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp13@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KAEBVvalue@12@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.globl	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z" # -- Begin function ??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z": # @"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Lfunc_begin4:
.seh_proc "??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdi, rcx
	movzx	eax, byte ptr [rdx + 8]
	and	eax, 63
	cmp	al, 7
	ja	.LBB10_10
# %bb.1:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + .LJTI10_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB10_3:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rbp - 32], rax
.Ltmp16:
	lea	r8, [rbp - 32]
	mov	rcx, rdi
	call	"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp17:
	jmp	.LBB10_10
.LBB10_2:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rbp - 40], rax
.Ltmp18:
	lea	r8, [rbp - 40]
	mov	rcx, rdi
	call	"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp19:
	jmp	.LBB10_10
.LBB10_4:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rbp - 24], rax
.Ltmp14:
	lea	r8, [rbp - 24]
	mov	rcx, rdi
	call	"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp15:
	jmp	.LBB10_10
.LBB10_5:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 3
	mov	qword ptr [rdi + 16], rcx
	jmp	.LBB10_10
.LBB10_6:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 4
	mov	qword ptr [rdi + 16], rcx
	jmp	.LBB10_10
.LBB10_7:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 5
	mov	qword ptr [rdi + 16], rcx
	jmp	.LBB10_10
.LBB10_8:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	cl, byte ptr [rdx + 9]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 6
	mov	byte ptr [rdi + 9], cl
	jmp	.LBB10_10
.LBB10_9:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 7
.LBB10_10:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB10_14
# %bb.11:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB10_14
# %bb.12:
	cmp	rax, 1
	jne	.LBB10_14
# %bb.13:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB10_14:
	mov	rax, rdi
	add	rsp, 80
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$15@?0???0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$15@?0???0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"
.LBB10_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB10_19
# %bb.16:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB10_19
# %bb.17:
	cmp	rax, 1
	jne	.LBB10_19
# %bb.18:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB10_19:
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end4:
	.p2align	2, 0x90
.LJTI10_0:
	.long	.LBB10_3-.LJTI10_0
	.long	.LBB10_2-.LJTI10_0
	.long	.LBB10_4-.LJTI10_0
	.long	.LBB10_5-.LJTI10_0
	.long	.LBB10_6-.LJTI10_0
	.long	.LBB10_7-.LJTI10_0
	.long	.LBB10_8-.LJTI10_0
	.long	.LBB10_9-.LJTI10_0
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0???0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin4@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp16@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp15@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.globl	"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z" # -- Begin function ??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z": # @"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
.Lfunc_begin5:
.seh_proc "??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rdx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 32], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 0
	lea	rax, [rcx + 16]
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	test	rdx, rdx
	je	.LBB11_2
# %bb.1:
.Ltmp20:
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdx, rdi
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp21:
.LBB11_2:
	mov	r14, qword ptr [rbp - 16] # 8-byte Reload
	mov	rbx, qword ptr [rbp - 24] # 8-byte Reload
	.p2align	4, 0x90
.LBB11_3:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rbx]
	test	rcx, rcx
	je	.LBB11_4
# %bb.5:                                #   in Loop: Header=BB11_3 Depth=1
	mov	eax, dword ptr [rcx]
	cmp	rax, rdi
	jb	.LBB11_7
	jmp	.LBB11_14
	.p2align	4, 0x90
.LBB11_4:                               #   in Loop: Header=BB11_3 Depth=1
	xor	eax, eax
	cmp	rax, rdi
	jae	.LBB11_14
.LBB11_7:                               #   in Loop: Header=BB11_3 Depth=1
	lea	rax, [rcx + 8]
	test	rcx, rcx
	cmove	rax, rcx
	je	.LBB11_8
# %bb.9:                                #   in Loop: Header=BB11_3 Depth=1
	mov	ecx, dword ptr [rcx]
	jmp	.LBB11_10
	.p2align	4, 0x90
.LBB11_8:                               #   in Loop: Header=BB11_3 Depth=1
	xor	ecx, ecx
.LBB11_10:                              #   in Loop: Header=BB11_3 Depth=1
	mov	rsi, qword ptr [r14]
	test	sil, 1
	je	.LBB11_12
# %bb.11:                               #   in Loop: Header=BB11_3 Depth=1
	mov	rdx, rsi
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB11_12:                              #   in Loop: Header=BB11_3 Depth=1
	lea	rcx, [rcx + 2*rcx]
	mov	qword ptr [rax + 8*rcx], rsi
	mov	byte ptr [rax + 8*rcx + 8], 7
	mov	rax, qword ptr [rbx]
	test	rax, rax
	je	.LBB11_3
# %bb.13:                               #   in Loop: Header=BB11_3 Depth=1
	add	dword ptr [rax], 1
	jmp	.LBB11_3
.LBB11_14:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB11_18
# %bb.15:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB11_18
# %bb.16:
	cmp	rax, 1
	jne	.LBB11_18
# %bb.17:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB11_18:
	mov	rax, r14
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$19@?0???0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$19@?0???0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA"
.LBB11_19:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB11_23
# %bb.20:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB11_23
# %bb.21:
	cmp	rax, 1
	jne	.LBB11_23
# %bb.22:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB11_23:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB11_27
# %bb.24:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB11_27
# %bb.25:
	cmp	rax, 1
	jne	.LBB11_27
# %bb.26:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB11_27:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end5:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$19@?0???0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z":
	.long	.Lfunc_begin5@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp20@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp21@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@@Z"
	.globl	"??0array@json@boost@@QEAA@AEBV012@@Z" # -- Begin function ??0array@json@boost@@QEAA@AEBV012@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@AEBV012@@Z": # @"??0array@json@boost@@QEAA@AEBV012@@Z"
.Lfunc_begin6:
.seh_proc "??0array@json@boost@@QEAA@AEBV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rbx, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rcx], rax
	test	al, 1
	je	.LBB12_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB12_2:
	mov	byte ptr [rdi + 8], 0
	mov	qword ptr [rdi + 16], 0
	mov	rsi, qword ptr [rbx + 16]
	test	rsi, rsi
	je	.LBB12_17
# %bb.3:
	lea	rax, [rdi + 16]
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	mov	edx, dword ptr [rsi]
	test	rdx, rdx
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	je	.LBB12_6
# %bb.4:
.Ltmp22:
	mov	rcx, rdi
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp23:
# %bb.5:
	mov	rsi, qword ptr [rbx + 16]
	test	rsi, rsi
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	je	.LBB12_17
.LBB12_6:
	mov	eax, dword ptr [rsi]
	test	rax, rax
	je	.LBB12_17
# %bb.7:
	lea	rax, [rax + 2*rax]
	lea	rbx, [rsi + 8*rax]
	add	rbx, 8
	add	rsi, 8
	lea	r14, [rbp - 32]
	jmp	.LBB12_8
	.p2align	4, 0x90
.LBB12_16:                              #   in Loop: Header=BB12_8 Depth=1
	add	rsi, 24
	cmp	rsi, rbx
	je	.LBB12_17
.LBB12_8:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rdi + 16]
	lea	rax, [rcx + 8]
	test	rcx, rcx
	cmove	rax, rcx
	je	.LBB12_9
# %bb.10:                               #   in Loop: Header=BB12_8 Depth=1
	mov	ecx, dword ptr [rcx]
	jmp	.LBB12_11
	.p2align	4, 0x90
.LBB12_9:                               #   in Loop: Header=BB12_8 Depth=1
	xor	ecx, ecx
.LBB12_11:                              #   in Loop: Header=BB12_8 Depth=1
	lea	rcx, [rcx + 2*rcx]
	lea	rcx, [rax + 8*rcx]
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rbp - 32], rax
	test	al, 1
	je	.LBB12_13
# %bb.12:                               #   in Loop: Header=BB12_8 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB12_13:                              #   in Loop: Header=BB12_8 Depth=1
.Ltmp24:
	mov	rdx, rsi
	mov	r8, r14
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp25:
# %bb.14:                               #   in Loop: Header=BB12_8 Depth=1
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rdi + 16]
	test	rax, rax
	je	.LBB12_16
# %bb.15:                               #   in Loop: Header=BB12_8 Depth=1
	add	dword ptr [rax], 1
	jmp	.LBB12_16
.LBB12_17:
	mov	rax, rdi
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@QEAA@AEBV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$18@?0???0array@json@boost@@QEAA@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???0array@json@boost@@QEAA@AEBV012@@Z@4HA":
.seh_proc "?dtor$18@?0???0array@json@boost@@QEAA@AEBV012@@Z@4HA"
.LBB12_18:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB12_22
# %bb.19:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB12_22
# %bb.20:
	cmp	rax, 1
	jne	.LBB12_22
# %bb.21:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB12_22:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end6:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@QEAA@AEBV012@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@QEAA@AEBV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@QEAA@AEBV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@QEAA@AEBV012@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@QEAA@AEBV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$18@?0???0array@json@boost@@QEAA@AEBV012@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@QEAA@AEBV012@@Z":
	.long	.Lfunc_begin6@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp22@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp25@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@@Z"
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.globl	"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z" # -- Begin function ??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z": # @"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Lfunc_begin7:
.seh_proc "??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 32], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 0
	lea	rdi, [rcx + 16]
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	mov	rsi, qword ptr [rdx + 16]
	test	rsi, rsi
	mov	qword ptr [rbp - 24], rdi # 8-byte Spill
	je	.LBB13_1
# %bb.2:
	mov	rbx, rdx
	mov	edx, dword ptr [rsi]
	test	rdx, rdx
	je	.LBB13_5
# %bb.3:
.Ltmp26:
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp27:
# %bb.4:
	mov	rsi, qword ptr [rbx + 16]
	test	rsi, rsi
	mov	rdi, qword ptr [rbp - 24] # 8-byte Reload
	je	.LBB13_1
.LBB13_5:
	mov	eax, dword ptr [rsi]
	add	rsi, 8
	jmp	.LBB13_6
.LBB13_1:
	xor	esi, esi
	xor	eax, eax
.LBB13_6:
	lea	rax, [rax + 2*rax]
	lea	rbx, [rsi + 8*rax]
	lea	r14, [rbp - 40]
	jmp	.LBB13_7
	.p2align	4, 0x90
.LBB13_16:                              #   in Loop: Header=BB13_7 Depth=1
	add	rsi, 24
.LBB13_7:                               # =>This Inner Loop Header: Depth=1
	cmp	rsi, rbx
	je	.LBB13_17
# %bb.8:                                #   in Loop: Header=BB13_7 Depth=1
	mov	rcx, qword ptr [rdi]
	lea	rax, [rcx + 8]
	test	rcx, rcx
	cmove	rax, rcx
	je	.LBB13_9
# %bb.10:                               #   in Loop: Header=BB13_7 Depth=1
	mov	ecx, dword ptr [rcx]
	jmp	.LBB13_11
	.p2align	4, 0x90
.LBB13_9:                               #   in Loop: Header=BB13_7 Depth=1
	xor	ecx, ecx
.LBB13_11:                              #   in Loop: Header=BB13_7 Depth=1
	lea	rcx, [rcx + 2*rcx]
	lea	rcx, [rax + 8*rcx]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB13_13
# %bb.12:                               #   in Loop: Header=BB13_7 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB13_13:                              #   in Loop: Header=BB13_7 Depth=1
.Ltmp28:
	mov	rdx, rsi
	mov	r8, r14
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp29:
# %bb.14:                               #   in Loop: Header=BB13_7 Depth=1
	mov	rdi, qword ptr [rbp - 24] # 8-byte Reload
	mov	rax, qword ptr [rdi]
	test	rax, rax
	je	.LBB13_16
# %bb.15:                               #   in Loop: Header=BB13_7 Depth=1
	add	dword ptr [rax], 1
	jmp	.LBB13_16
.LBB13_17:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB13_21
# %bb.18:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB13_21
# %bb.19:
	cmp	rax, 1
	jne	.LBB13_21
# %bb.20:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB13_21:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 80
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0???0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0???0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$22@?0???0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"
.LBB13_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB13_26
# %bb.23:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB13_26
# %bb.24:
	cmp	rax, 1
	jne	.LBB13_26
# %bb.25:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB13_26:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB13_30
# %bb.27:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB13_30
# %bb.28:
	cmp	rax, 1
	jne	.LBB13_30
# %bb.29:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB13_30:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end7:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$22@?0???0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin7@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp26@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp29@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@V?$pilfered@Varray@json@boost@@@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@V?$pilfered@Varray@json@boost@@@2@@Z"
	.globl	"??0array@json@boost@@QEAA@V?$pilfered@Varray@json@boost@@@2@@Z" # -- Begin function ??0array@json@boost@@QEAA@V?$pilfered@Varray@json@boost@@@2@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@V?$pilfered@Varray@json@boost@@@2@@Z": # @"??0array@json@boost@@QEAA@V?$pilfered@Varray@json@boost@@@2@@Z"
# %bb.0:
	mov	rax, rcx
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rax], rcx
	mov	qword ptr [rdx], 0
	mov	byte ptr [rax + 8], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdx + 16], 0
	mov	qword ptr [rax + 16], rcx
	ret
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@$$QEAV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@$$QEAV012@@Z"
	.globl	"??0array@json@boost@@QEAA@$$QEAV012@@Z" # -- Begin function ??0array@json@boost@@QEAA@$$QEAV012@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@$$QEAV012@@Z": # @"??0array@json@boost@@QEAA@$$QEAV012@@Z"
# %bb.0:
	mov	rax, rcx
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rax], rcx
	test	cl, 1
	je	.LBB15_2
# %bb.1:
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
.LBB15_2:
	mov	byte ptr [rax + 8], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdx + 16], 0
	mov	qword ptr [rax + 16], rcx
	ret
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.globl	"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z" # -- Begin function ??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z": # @"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Lfunc_begin8:
.seh_proc "??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r14, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 0
	mov	qword ptr [rcx + 16], 0
	mov	rdi, qword ptr [rdx]
	test	rdi, rdi
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	qword ptr [rbp - 32], r8 # 8-byte Spill
	je	.LBB16_2
# %bb.1:
	and	rdi, -4
	jmp	.LBB16_6
.LBB16_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB16_3
.LBB16_6:
	mov	rbx, qword ptr [rsi]
	test	rbx, rbx
	je	.LBB16_8
# %bb.7:
	and	rbx, -4
	jmp	.LBB16_12
.LBB16_8:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB16_9
.LBB16_12:
	lea	rdx, [rsi + 16]
	cmp	rbx, rdi
	je	.LBB16_14
# %bb.13:
	mov	rax, qword ptr [rbx]
	mov	rcx, rbx
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	mov	rdx, rdi
	call	qword ptr [rax + 24]
	mov	rdx, qword ptr [rbp - 24] # 8-byte Reload
	test	al, al
	je	.LBB16_20
.LBB16_14:
	mov	rax, qword ptr [rdx]
	mov	rcx, qword ptr [r14 + 16]
	mov	qword ptr [rdx], rcx
	mov	qword ptr [r14 + 16], rax
.LBB16_15:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB16_19
# %bb.16:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB16_19
# %bb.17:
	cmp	rax, 1
	jne	.LBB16_19
# %bb.18:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB16_19:
	mov	rax, rsi
	add	rsp, 80
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB16_20:
	mov	rdi, qword ptr [r14 + 16]
	test	rdi, rdi
	je	.LBB16_21
# %bb.22:
	mov	edx, dword ptr [rdi]
	jmp	.LBB16_23
.LBB16_21:
	xor	edx, edx
.LBB16_23:
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB16_24
# %bb.25:
	mov	eax, dword ptr [rax + 4]
	cmp	rax, rdx
	jb	.LBB16_27
	jmp	.LBB16_29
.LBB16_24:
	xor	eax, eax
	cmp	rax, rdx
	jae	.LBB16_29
.LBB16_27:
.Ltmp30:
	mov	rcx, rsi
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp31:
# %bb.28:
	mov	rdi, qword ptr [r14 + 16]
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
.LBB16_29:
	test	rdi, rdi
	je	.LBB16_15
# %bb.30:
	mov	eax, dword ptr [rdi]
	test	rax, rax
	je	.LBB16_15
# %bb.31:
	add	rdi, 8
	lea	rax, [rax + 2*rax]
	lea	rbx, [rdi + 8*rax]
	lea	r14, [rbp - 40]
	jmp	.LBB16_32
	.p2align	4, 0x90
.LBB16_40:                              #   in Loop: Header=BB16_32 Depth=1
	add	rdi, 24
	cmp	rdi, rbx
	je	.LBB16_15
.LBB16_32:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi + 16]
	lea	rax, [rcx + 8]
	test	rcx, rcx
	cmove	rax, rcx
	je	.LBB16_33
# %bb.34:                               #   in Loop: Header=BB16_32 Depth=1
	mov	ecx, dword ptr [rcx]
	jmp	.LBB16_35
	.p2align	4, 0x90
.LBB16_33:                              #   in Loop: Header=BB16_32 Depth=1
	xor	ecx, ecx
.LBB16_35:                              #   in Loop: Header=BB16_32 Depth=1
	lea	rcx, [rcx + 2*rcx]
	lea	rcx, [rax + 8*rcx]
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB16_37
# %bb.36:                               #   in Loop: Header=BB16_32 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB16_37:                              #   in Loop: Header=BB16_32 Depth=1
.Ltmp32:
	mov	rdx, rdi
	mov	r8, r14
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp33:
# %bb.38:                               #   in Loop: Header=BB16_32 Depth=1
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB16_40
# %bb.39:                               #   in Loop: Header=BB16_32 Depth=1
	add	dword ptr [rax], 1
	jmp	.LBB16_40
.LBB16_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB16_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
.LBB16_5:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	jmp	.LBB16_6
.LBB16_9:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB16_11
# %bb.10:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
.LBB16_11:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	jmp	.LBB16_12
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$41@?0???0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$41@?0???0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$41@?0???0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"
.LBB16_41:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB16_45
# %bb.42:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB16_45
# %bb.43:
	cmp	rax, 1
	jne	.LBB16_45
# %bb.44:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB16_45:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB16_49
# %bb.46:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB16_49
# %bb.47:
	cmp	rax, 1
	jne	.LBB16_49
# %bb.48:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB16_49:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end8:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$41@?0???0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin8@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp30@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp33@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.globl	"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z" # -- Begin function ??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z": # @"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
.Lfunc_begin9:
.seh_proc "??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	r14, rdx
	mov	rbx, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 24], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 0
	lea	rax, [rcx + 16]
	mov	qword ptr [rbp - 16], rax # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	mov	rdi, qword ptr [rdx]
	mov	rsi, qword ptr [rdx + 8]
	mov	rax, rsi
	sub	rax, rdi
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	je	.LBB17_1
# %bb.2:
	sar	rax, 3
	movabs	rdx, -3689348814741910323
	imul	rdx, rax
.Ltmp34:
	mov	rcx, rbx
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp35:
# %bb.3:
	mov	rdi, qword ptr [r14]
	mov	rsi, qword ptr [r14 + 8]
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rbx + 16]
	jmp	.LBB17_4
.LBB17_1:
	xor	eax, eax
.LBB17_4:
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rdi, rsi
	je	.LBB17_11
# %bb.5:
	lea	r15, [rbp - 48]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rdx, rcx
	.p2align	4, 0x90
.LBB17_6:                               # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbp - 48], rax
	test	al, 1
	je	.LBB17_8
# %bb.7:                                #   in Loop: Header=BB17_6 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB17_8:                               #   in Loop: Header=BB17_6 Depth=1
.Ltmp36:
	mov	rcx, rdi
	mov	r8, r15
	mov	qword ptr [rbp - 32], rdx # 8-byte Spill
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
.Ltmp37:
# %bb.9:                                #   in Loop: Header=BB17_6 Depth=1
	mov	rdx, qword ptr [rbp - 32] # 8-byte Reload
	add	rdx, 24
	add	rdi, 40
	cmp	rsi, rdi
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	jne	.LBB17_6
# %bb.10:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax]
.LBB17_11:
	test	rax, rax
	je	.LBB17_13
# %bb.12:
	mov	rcx, qword ptr [r14 + 8]
	sub	rcx, qword ptr [r14]
	shr	rcx, 3
	imul	ecx, ecx, -858993459
	mov	dword ptr [rax], ecx
.LBB17_13:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB17_17
# %bb.14:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB17_17
# %bb.15:
	cmp	rax, 1
	jne	.LBB17_17
# %bb.16:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB17_17:
	mov	rax, rbx
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$18@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$18@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA"
.LBB17_18:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 40] # 8-byte Reload
	mov	rdi, qword ptr [rbp - 32] # 8-byte Reload
	cmp	rdi, rsi
	jbe	.LBB17_21
.LBB17_19:                              # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rdi, rsi
	ja	.LBB17_19
.LBB17_21:
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$22@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA"
.LBB17_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB17_26
# %bb.23:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB17_26
# %bb.24:
	cmp	rax, 1
	jne	.LBB17_26
# %bb.25:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB17_26:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB17_30
# %bb.27:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB17_30
# %bb.28:
	cmp	rax, 1
	jne	.LBB17_30
# %bb.29:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB17_30:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end9:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$22@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$18@?0???0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin9@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp34@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp36@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp37@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
	.globl	"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z" # -- Begin function ?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z
	.p2align	4, 0x90
"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z": # @"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
.Lfunc_begin10:
.seh_proc "?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	rdi, qword ptr [rdx]
	mov	rbx, qword ptr [rdx + 8]
	cmp	rdi, rbx
	je	.LBB18_6
# %bb.1:
	mov	rsi, r8
	lea	r14, [rbp - 32]
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	.p2align	4, 0x90
.LBB18_2:                               # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rbp - 32], rax
	test	al, 1
	je	.LBB18_4
# %bb.3:                                #   in Loop: Header=BB18_2 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB18_4:                               #   in Loop: Header=BB18_2 Depth=1
.Ltmp38:
	mov	rcx, rdi
	mov	r8, r14
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
.Ltmp39:
# %bb.5:                                #   in Loop: Header=BB18_2 Depth=1
	mov	rdx, qword ptr [rbp - 24] # 8-byte Reload
	add	rdx, 24
	add	rdi, 40
	cmp	rbx, rdi
	jne	.LBB18_2
.LBB18_6:
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$7@?0??write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$7@?0??write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z@4HA"
.LBB18_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdi, qword ptr [rbp - 24] # 8-byte Reload
	cmp	rdi, rsi
	jbe	.LBB18_10
.LBB18_8:                               # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rdi, rsi
	ja	.LBB18_8
.LBB18_10:
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end10:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
	.p2align	2
"$cppxdata$?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0??write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z@4HA"@IMGREL # Action
"$ip2state$?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z":
	.long	.Lfunc_begin10@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp38@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp39@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?write_array@value_ref@json@boost@@CAXPEAVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@AEBVstorage_ptr@23@@Z"
                                        # -- End function
	.def	 "??4array@json@boost@@QEAAAEAV012@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.globl	"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z" # -- Begin function ??4array@json@boost@@QEAAAEAV012@AEBV012@@Z
	.p2align	4, 0x90
"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z": # @"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
.Lfunc_begin11:
.seh_proc "??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	cmp	rcx, rdx
	je	.LBB19_23
# %bb.1:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rbp - 16], rax
	test	al, 1
	je	.LBB19_3
# %bb.2:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB19_3:
	lea	rcx, [rbp - 40]
	lea	r8, [rbp - 16]
	call	"??0array@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB19_18
# %bb.4:
	mov	rdi, qword ptr [rsi]
	mov	ecx, edi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB19_18
# %bb.5:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB19_9
# %bb.6:
	lea	rcx, [rcx + 2*rcx]
	lea	rdi, [rax + 8*rcx]
	add	rdi, 8
	.p2align	4, 0x90
.LBB19_7:                               # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rsi + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rdi, rcx
	jne	.LBB19_7
# %bb.8:
	mov	rdi, qword ptr [rsi]
.LBB19_9:
	test	rdi, rdi
	je	.LBB19_11
# %bb.10:
	and	rdi, -4
	jmp	.LBB19_14
.LBB19_11:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB19_12
.LBB19_14:
	mov	rdx, qword ptr [rsi + 16]
	test	rdx, rdx
	je	.LBB19_15
# %bb.16:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB19_17
.LBB19_15:
	mov	r8d, 16
.LBB19_17:
	mov	rax, qword ptr [rdi]
.Ltmp40:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp41:
.LBB19_18:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB19_22
# %bb.19:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB19_22
# %bb.20:
	cmp	rax, 1
	jne	.LBB19_22
# %bb.21:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB19_22:
	mov	rax, qword ptr [rbp - 40]
	mov	qword ptr [rsi], rax
	mov	qword ptr [rbp - 40], 0
	mov	byte ptr [rsi + 8], 0
	mov	rax, qword ptr [rbp - 24]
	mov	qword ptr [rsi + 16], rax
.LBB19_23:
	mov	rax, rsi
	add	rsp, 80
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB19_12:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB19_14
# %bb.13:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB19_14
	.seh_handlerdata
	.long	("$cppxdata$??4array@json@boost@@QEAAAEAV012@AEBV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$24@?0???4array@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$24@?0???4array@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA":
.seh_proc "?dtor$24@?0???4array@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA"
.LBB19_24:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end11:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.p2align	2
"$cppxdata$??4array@json@boost@@QEAAAEAV012@AEBV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??4array@json@boost@@QEAAAEAV012@AEBV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??4array@json@boost@@QEAAAEAV012@AEBV012@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??4array@json@boost@@QEAAAEAV012@AEBV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$24@?0???4array@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA"@IMGREL # Action
"$ip2state$??4array@json@boost@@QEAAAEAV012@AEBV012@@Z":
	.long	.Lfunc_begin11@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp40@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp41@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@AEBV012@@Z"
                                        # -- End function
	.def	 "??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.globl	"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z" # -- Begin function ??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z
	.p2align	4, 0x90
"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z": # @"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
.Lfunc_begin12:
.seh_proc "??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rbp - 16], rax
	test	al, 1
	je	.LBB20_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB20_2:
	lea	rcx, [rbp - 40]
	lea	r8, [rbp - 16]
	call	"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB20_17
# %bb.3:
	mov	rdi, qword ptr [rsi]
	mov	ecx, edi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB20_17
# %bb.4:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB20_8
# %bb.5:
	lea	rcx, [rcx + 2*rcx]
	lea	rdi, [rax + 8*rcx]
	add	rdi, 8
	.p2align	4, 0x90
.LBB20_6:                               # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rsi + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rdi, rcx
	jne	.LBB20_6
# %bb.7:
	mov	rdi, qword ptr [rsi]
.LBB20_8:
	test	rdi, rdi
	je	.LBB20_10
# %bb.9:
	and	rdi, -4
	jmp	.LBB20_13
.LBB20_10:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB20_11
.LBB20_13:
	mov	rdx, qword ptr [rsi + 16]
	test	rdx, rdx
	je	.LBB20_14
# %bb.15:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB20_16
.LBB20_14:
	mov	r8d, 16
.LBB20_16:
	mov	rax, qword ptr [rdi]
.Ltmp42:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp43:
.LBB20_17:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB20_21
# %bb.18:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB20_21
# %bb.19:
	cmp	rax, 1
	jne	.LBB20_21
# %bb.20:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB20_21:
	mov	rax, qword ptr [rbp - 40]
	mov	qword ptr [rsi], rax
	mov	qword ptr [rbp - 40], 0
	mov	byte ptr [rsi + 8], 0
	mov	rax, qword ptr [rbp - 24]
	mov	qword ptr [rsi + 16], rax
	mov	rax, rsi
	add	rsp, 80
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB20_11:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB20_13
# %bb.12:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB20_13
	.seh_handlerdata
	.long	("$cppxdata$??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0???4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0???4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA":
.seh_proc "?dtor$22@?0???4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA"
.LBB20_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end12:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.p2align	2
"$cppxdata$??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$22@?0???4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA"@IMGREL # Action
"$ip2state$??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z":
	.long	.Lfunc_begin12@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp42@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp43@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
                                        # -- End function
	.def	 "??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.globl	"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z" # -- Begin function ??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z
	.p2align	4, 0x90
"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z": # @"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
.Lfunc_begin13:
.seh_proc "??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rbp - 16], rax
	test	al, 1
	je	.LBB21_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB21_2:
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 64], xmm0
	lea	rcx, [rbp - 40]
	lea	rdx, [rbp - 64]
	lea	r8, [rbp - 16]
	call	"??0array@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB21_17
# %bb.3:
	mov	rdi, qword ptr [rsi]
	mov	ecx, edi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB21_17
# %bb.4:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB21_8
# %bb.5:
	lea	rcx, [rcx + 2*rcx]
	lea	rdi, [rax + 8*rcx]
	add	rdi, 8
	.p2align	4, 0x90
.LBB21_6:                               # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rsi + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rdi, rcx
	jne	.LBB21_6
# %bb.7:
	mov	rdi, qword ptr [rsi]
.LBB21_8:
	test	rdi, rdi
	je	.LBB21_10
# %bb.9:
	and	rdi, -4
	jmp	.LBB21_13
.LBB21_10:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB21_11
.LBB21_13:
	mov	rdx, qword ptr [rsi + 16]
	test	rdx, rdx
	je	.LBB21_14
# %bb.15:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB21_16
.LBB21_14:
	mov	r8d, 16
.LBB21_16:
	mov	rax, qword ptr [rdi]
.Ltmp44:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp45:
.LBB21_17:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB21_21
# %bb.18:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB21_21
# %bb.19:
	cmp	rax, 1
	jne	.LBB21_21
# %bb.20:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB21_21:
	mov	rax, qword ptr [rbp - 40]
	mov	qword ptr [rsi], rax
	mov	qword ptr [rbp - 40], 0
	mov	byte ptr [rsi + 8], 0
	mov	rax, qword ptr [rbp - 24]
	mov	qword ptr [rsi + 16], rax
	mov	rax, rsi
	add	rsp, 96
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB21_11:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB21_13
# %bb.12:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB21_13
	.seh_handlerdata
	.long	("$cppxdata$??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z")@IMGREL
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0???4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0???4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA":
.seh_proc "?dtor$22@?0???4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA"
.LBB21_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end13:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.p2align	2
"$cppxdata$??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z":
	.long	-1                      # ToState
	.long	"?dtor$22@?0???4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA"@IMGREL # Action
"$ip2state$??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z":
	.long	.Lfunc_begin13@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp44@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp45@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??4array@json@boost@@QEAAAEAV012@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
                                        # -- End function
	.def	 "?shrink_to_fit@array@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?shrink_to_fit@array@json@boost@@QEAAXXZ"
	.globl	"?shrink_to_fit@array@json@boost@@QEAAXXZ" # -- Begin function ?shrink_to_fit@array@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?shrink_to_fit@array@json@boost@@QEAAXXZ": # @"?shrink_to_fit@array@json@boost@@QEAAXXZ"
.Lfunc_begin14:
.seh_proc "?shrink_to_fit@array@json@boost@@QEAAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB22_25
# %bb.1:
	mov	edi, dword ptr [rax]
	mov	eax, dword ptr [rax + 4]
	cmp	eax, edi
	jbe	.LBB22_25
# %bb.2:
	mov	rsi, rcx
	lea	r14, [rcx + 16]
	test	edi, edi
	je	.LBB22_3
# %bb.4:
	cmp	edi, 15
	ja	.LBB22_6
# %bb.5:
	cmp	eax, 17
	jb	.LBB22_25
.LBB22_6:
	mov	qword ptr [rbp - 16], 0
	cmp	edi, 2147483647
	jae	.LBB22_7
# %bb.9:
	mov	rbx, qword ptr [rsi]
	test	rbx, rbx
	je	.LBB22_11
# %bb.10:
	and	rbx, -4
	jmp	.LBB22_14
.LBB22_3:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	qword ptr [rsi + 16], 0
	jmp	.LBB22_25
.LBB22_11:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB22_12
.LBB22_14:
	lea	rax, [rdi + 2*rdi]
	lea	rax, [8*rax + 17]
	movabs	rdx, 274877906936
	and	rdx, rax
	mov	rax, qword ptr [rbx]
.Ltmp46:
	mov	r8d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 8]
.Ltmp47:
# %bb.15:
	mov	rbx, rax
	mov	qword ptr [rbp - 16], rax
	mov	dword ptr [rax + 4], edi
	mov	dword ptr [rax], 0
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB22_20
# %bb.16:
	mov	eax, dword ptr [rdx]
	test	rax, rax
	je	.LBB22_18
# %bb.17:
	lea	rcx, [rbx + 8]
	add	rdx, 8
	test	rbx, rbx
	cmove	rcx, rbx
	shl	rax, 3
	lea	r8, [rax + 2*rax]
	call	memmove
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB22_20
.LBB22_18:
	test	rbx, rbx
	je	.LBB22_23
# %bb.19:
	mov	eax, dword ptr [rdx]
	jmp	.LBB22_21
.LBB22_20:
	xor	eax, eax
	test	rbx, rbx
	je	.LBB22_22
.LBB22_21:
	mov	dword ptr [rbx], eax
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB22_22
.LBB22_23:
	mov	dword ptr [rdx], 0
	mov	rax, qword ptr [r14]
	jmp	.LBB22_24
.LBB22_22:
	xor	eax, eax
.LBB22_24:
	mov	qword ptr [rsi + 16], rbx
	mov	qword ptr [rbp - 16], rax
	lea	rcx, [rbp - 16]
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
.LBB22_25:                              # Block address taken
	nop
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB22_12:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB22_14
# %bb.13:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB22_14
.LBB22_7:
.Ltmp48:
	call	"?raise@array_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp49:
# %bb.8:
	.seh_handlerdata
	.long	("$cppxdata$?shrink_to_fit@array@json@boost@@QEAAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?shrink_to_fit@array@json@boost@@QEAAXXZ"
	.seh_endproc
	.def	 "?dtor$26@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA":
.seh_proc "?dtor$26@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA"
.LBB22_26:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?shrink_to_fit@array@json@boost@@QEAAXXZ"
	.seh_endproc
	.def	 "?catch$27@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$27@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA":
.seh_proc "?catch$27@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA"
	.seh_handler __CxxFrameHandler3, @unwind, @except
.LBB22_27:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	lea	rax, [rip + .LBB22_25]
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CATCHRET
.Lfunc_end14:
	.seh_handlerdata
	.long	("$cppxdata$?shrink_to_fit@array@json@boost@@QEAAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?shrink_to_fit@array@json@boost@@QEAAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?shrink_to_fit@array@json@boost@@QEAAXXZ"
	.p2align	2
"$cppxdata$?shrink_to_fit@array@json@boost@@QEAAXXZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?shrink_to_fit@array@json@boost@@QEAAXXZ")@IMGREL # UnwindMap
	.long	1                       # NumTryBlocks
	.long	("$tryMap$?shrink_to_fit@array@json@boost@@QEAAXXZ")@IMGREL # TryBlockMap
	.long	6                       # IPMapEntries
	.long	("$ip2state$?shrink_to_fit@array@json@boost@@QEAAXXZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?shrink_to_fit@array@json@boost@@QEAAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$26@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	0                       # Action
	.long	0                       # ToState
	.long	0                       # Action
"$tryMap$?shrink_to_fit@array@json@boost@@QEAAXXZ":
	.long	1                       # TryLow
	.long	1                       # TryHigh
	.long	2                       # CatchHigh
	.long	1                       # NumCatches
	.long	("$handlerMap$0$?shrink_to_fit@array@json@boost@@QEAAXXZ")@IMGREL # HandlerArray
"$handlerMap$0$?shrink_to_fit@array@json@boost@@QEAAXXZ":
	.long	64                      # Adjectives
	.long	0                       # Type
	.long	0                       # CatchObjOffset
	.long	"?catch$27@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA"@IMGREL # Handler
	.long	88                      # ParentFrameOffset
"$ip2state$?shrink_to_fit@array@json@boost@@QEAAXXZ":
	.long	.Lfunc_begin14@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp46@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp47@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp48@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp49@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	"?catch$27@?0??shrink_to_fit@array@json@boost@@QEAAXXZ@4HA"@IMGREL # IP
	.long	2                       # ToState
	.section	.text,"xr",one_only,"?shrink_to_fit@array@json@boost@@QEAAXXZ"
                                        # -- End function
	.def	 "?clear@array@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?clear@array@json@boost@@QEAAXXZ"
	.globl	"?clear@array@json@boost@@QEAAXXZ" # -- Begin function ?clear@array@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?clear@array@json@boost@@QEAAXXZ":     # @"?clear@array@json@boost@@QEAAXXZ"
.seh_proc "?clear@array@json@boost@@QEAAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rdi, qword ptr [rcx + 16]
	test	rdi, rdi
	je	.LBB23_7
# %bb.1:
	mov	rsi, rcx
	mov	eax, dword ptr [rcx]
	and	eax, 3
	cmp	eax, 2
	je	.LBB23_6
# %bb.2:
	lea	rcx, [rdi + 8]
	mov	eax, dword ptr [rdi]
	lea	rdx, [rax + 2*rax]
	lea	rdx, [rcx + 8*rdx]
	cmp	rdx, rcx
	je	.LBB23_6
# %bb.3:
	shl	rax, 3
	lea	rbx, [rax + 2*rax]
	add	rdi, -16
	.p2align	4, 0x90
.LBB23_4:                               # =>This Inner Loop Header: Depth=1
	lea	rcx, [rdi + rbx]
	call	"??1value@json@boost@@QEAA@XZ"
	add	rbx, -24
	jne	.LBB23_4
# %bb.5:
	mov	rdi, qword ptr [rsi + 16]
	test	rdi, rdi
	je	.LBB23_7
.LBB23_6:
	mov	dword ptr [rdi], 0
.LBB23_7:
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?clear@array@json@boost@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
	.globl	"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z" # -- Begin function ?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z
	.p2align	4, 0x90
"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z": # @"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
.Lfunc_begin15:
.seh_proc "?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	rax, qword ptr [rcx + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	r8, 2147483647
	jae	.LBB24_20
# %bb.1:
	mov	r14, r9
	mov	r15, r8
	sub	rdx, rcx
	mov	qword ptr [rbp - 48], rdx # 8-byte Spill
	mov	rbx, rdx
	mov	rsi, rdx
	sar	rsi, 3
	movabs	rcx, -6148914691236517205
	test	rax, rax
	je	.LBB24_3
# %bb.2:
	mov	edx, dword ptr [rax]
	mov	edi, dword ptr [rax + 4]
	add	rdx, r15
	jmp	.LBB24_4
.LBB24_3:
	xor	edi, edi
	mov	rdx, r15
.LBB24_4:
	imul	rsi, rcx
	cmp	rdi, rdx
	jae	.LBB24_6
# %bb.5:
	mov	rdi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, rdi
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	mov	rax, qword ptr [rdi + 16]
.LBB24_6:
	lea	rbx, [rax + 8]
	lea	rdi, [rsi + 2*rsi]
	test	rax, rax
	cmove	rbx, rax
	je	.LBB24_8
# %bb.7:
	mov	edx, dword ptr [rax]
	jmp	.LBB24_9
.LBB24_8:
	xor	edx, edx
.LBB24_9:
	mov	rcx, rdi
	mov	qword ptr [rbp - 32], rdi # 8-byte Spill
	lea	rdi, [rbx + 8*rdi]
	sub	rdx, rsi
	je	.LBB24_11
# %bb.10:
	lea	rax, [r15 + 2*r15]
	lea	rcx, [rdi + 8*rax]
	shl	rdx, 3
	lea	r8, [rdx + 2*rdx]
	mov	rdx, rdi
	call	memmove
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
.LBB24_11:
	mov	qword ptr [rbp - 56], rsi # 8-byte Spill
	test	rax, rax
	je	.LBB24_13
# %bb.12:
	add	dword ptr [rax], r15d
.LBB24_13:
	mov	qword ptr [rbp - 16], r15 # 8-byte Spill
	test	r15, r15
	je	.LBB24_19
# %bb.14:
	mov	rax, rbx
	neg	rax
	lea	r15, [rbp - 64]
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	.p2align	4, 0x90
.LBB24_15:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	mov	qword ptr [rbp - 40], rbx # 8-byte Spill
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 64], rax
	test	al, 1
	je	.LBB24_17
# %bb.16:                               #   in Loop: Header=BB24_15 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB24_17:                              #   in Loop: Header=BB24_15 Depth=1
.Ltmp50:
	mov	rcx, rdi
	mov	rdx, r14
	mov	r8, r15
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp51:
# %bb.18:                               #   in Loop: Header=BB24_15 Depth=1
	add	rsi, -1
	add	rdi, 24
	mov	rbx, qword ptr [rbp - 40] # 8-byte Reload
	add	rbx, 24
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	add	rax, -24
	test	rsi, rsi
	jne	.LBB24_15
.LBB24_19:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	lea	rax, [rcx + 8*rax]
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB24_20:
	call	"?raise@array_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.long	("$cppxdata$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z")@IMGREL
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
	.seh_endproc
	.def	 "?dtor$21@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z@4HA":
.seh_proc "?dtor$21@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z@4HA"
.LBB24_21:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rcx + 16]
	lea	rsi, [rax + 8]
	test	rax, rax
	cmove	rsi, rax
	mov	ecx, dword ptr [rcx]
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB24_26
# %bb.22:
	mov	rcx, rsi
	add	rcx, qword ptr [rbp - 24] # 8-byte Folded Reload
	je	.LBB24_26
# %bb.23:
	mov	rbx, qword ptr [rbp - 48] # 8-byte Reload
	sub	rbx, qword ptr [rbp - 24] # 8-byte Folded Reload
	add	rbx, -24
	mov	rdi, rsi
	sub	rdi, qword ptr [rbp - 40] # 8-byte Folded Reload
.LBB24_24:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	add	rbx, -24
	add	rdi, 24
	jne	.LBB24_24
# %bb.25:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
.LBB24_26:
	test	rax, rax
	je	.LBB24_30
# %bb.27:
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	sub	dword ptr [rax], ecx
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
	test	rax, rax
	je	.LBB24_30
# %bb.28:
	mov	eax, dword ptr [rax]
	jmp	.LBB24_31
.LBB24_30:
	xor	eax, eax
.LBB24_31:
	sub	rax, qword ptr [rbp - 56] # 8-byte Folded Reload
	je	.LBB24_33
# %bb.32:
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	lea	rcx, [rsi + 8*rcx]
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	lea	rdx, [rdx + 2*rdx]
	lea	rdx, [rcx + 8*rdx]
	shl	rax, 3
	lea	r8, [rax + 2*rax]
	call	memmove
.LBB24_33:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end15:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
	.p2align	2
"$cppxdata$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z")@IMGREL # IPToStateXData
	.long	96                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z":
	.long	-1                      # ToState
	.long	"?dtor$21@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z@4HA"@IMGREL # Action
"$ip2state$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z":
	.long	.Lfunc_begin15@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp50@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp51@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@_KAEBV423@@Z"
                                        # -- End function
	.def	 "?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.globl	"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z" # -- Begin function ?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z
	.p2align	4, 0x90
"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z": # @"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
.Lfunc_begin16:
.seh_proc "?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rax, qword ptr [r8 + 8]
	sub	rax, qword ptr [r8]
	sar	rax, 3
	movabs	r15, -3689348814741910323
	imul	r15, rax
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	rax, qword ptr [rcx + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	r15, 2147483647
	jae	.LBB25_22
# %bb.1:
	mov	r14, r8
	mov	rsi, rdx
	sub	rsi, rcx
	test	rax, rax
	je	.LBB25_3
# %bb.2:
	mov	edx, dword ptr [rax]
	mov	ecx, dword ptr [rax + 4]
	add	rdx, r15
	jmp	.LBB25_4
.LBB25_3:
	xor	ecx, ecx
	mov	rdx, r15
.LBB25_4:
	sar	rsi, 3
	movabs	rdi, -6148914691236517205
	cmp	rcx, rdx
	jae	.LBB25_6
# %bb.5:
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, rbx
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	mov	rax, qword ptr [rbx + 16]
.LBB25_6:
	imul	rsi, rdi
	lea	r13, [rax + 8]
	test	rax, rax
	cmove	r13, rax
	je	.LBB25_8
# %bb.7:
	mov	ebx, dword ptr [rax]
	jmp	.LBB25_9
.LBB25_8:
	xor	ebx, ebx
.LBB25_9:
	lea	r12, [rsi + 2*rsi]
	sub	rbx, rsi
	je	.LBB25_11
# %bb.10:
	lea	rdx, [8*r12]
	add	rdx, r13
	lea	rax, [r15 + 2*r15]
	lea	rcx, [rdx + 8*rax]
	shl	rbx, 3
	lea	r8, [rbx + 2*rbx]
	call	memmove
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
.LBB25_11:
	test	rax, rax
	je	.LBB25_13
# %bb.12:
	add	dword ptr [rax], r15d
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
	jmp	.LBB25_14
.LBB25_13:
	xor	eax, eax
.LBB25_14:
	mov	rdi, qword ptr [r14]
	mov	rbx, qword ptr [r14 + 8]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rdi, rbx
	je	.LBB25_21
# %bb.15:
	mov	qword ptr [rbp - 24], r13 # 8-byte Spill
	mov	qword ptr [rbp - 32], r15 # 8-byte Spill
	mov	qword ptr [rbp - 56], rsi # 8-byte Spill
	mov	qword ptr [rbp - 16], r12 # 8-byte Spill
	lea	rax, [rcx + 8*r12]
	lea	rsi, [rbp - 64]
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	mov	rdx, rax
	.p2align	4, 0x90
.LBB25_16:                              # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 64], rax
	test	al, 1
	je	.LBB25_18
# %bb.17:                               #   in Loop: Header=BB25_16 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB25_18:                              #   in Loop: Header=BB25_16 Depth=1
.Ltmp52:
	mov	rcx, rdi
	mov	r8, rsi
	mov	qword ptr [rbp - 40], rdx # 8-byte Spill
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
.Ltmp53:
# %bb.19:                               #   in Loop: Header=BB25_16 Depth=1
	mov	rdx, qword ptr [rbp - 40] # 8-byte Reload
	add	rdx, 24
	add	rdi, 40
	cmp	rbx, rdi
	jne	.LBB25_16
# %bb.20:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
.LBB25_21:
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	lea	rax, [rcx + 8*r12]
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB25_22:
	call	"?raise@array_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.long	("$cppxdata$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z")@IMGREL
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.seh_endproc
	.def	 "?dtor$23@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA":
.seh_proc "?dtor$23@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA"
.LBB25_23:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 48] # 8-byte Reload
	mov	rdi, qword ptr [rbp - 40] # 8-byte Reload
	cmp	rdi, rsi
	jbe	.LBB25_25
.LBB25_24:                              # =>This Inner Loop Header: Depth=1
	add	rdi, -24
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rdi, rsi
	ja	.LBB25_24
.LBB25_25:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rcx + 16]
	lea	rdi, [rax + 8]
	test	rax, rax
	cmove	rdi, rax
	mov	ecx, dword ptr [rcx]
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB25_30
# %bb.26:
	cmp	qword ptr [rbp - 24], rdi # 8-byte Folded Reload
	je	.LBB25_30
# %bb.27:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	lea	rsi, [rcx + 8*rax]
	add	rsi, -24
	mov	rbx, rdi
	sub	rbx, rcx
.LBB25_28:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	add	rsi, -24
	add	rbx, 24
	jne	.LBB25_28
# %bb.29:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
.LBB25_30:
	test	rax, rax
	je	.LBB25_34
# %bb.31:
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	sub	dword ptr [rax], ecx
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
	test	rax, rax
	je	.LBB25_34
# %bb.32:
	mov	eax, dword ptr [rax]
	jmp	.LBB25_35
.LBB25_34:
	xor	eax, eax
.LBB25_35:
	sub	rax, qword ptr [rbp - 56] # 8-byte Folded Reload
	je	.LBB25_37
# %bb.36:
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rdi + 8*rcx]
	mov	rdx, qword ptr [rbp - 32] # 8-byte Reload
	lea	rdx, [rdx + 2*rdx]
	lea	rdx, [rcx + 8*rdx]
	shl	rax, 3
	lea	r8, [rax + 2*rax]
	call	memmove
.LBB25_37:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end16:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
	.p2align	2
"$cppxdata$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z")@IMGREL # IPToStateXData
	.long	96                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z":
	.long	-1                      # ToState
	.long	"?dtor$23@?0??insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z@4HA"@IMGREL # Action
"$ip2state$?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z":
	.long	.Lfunc_begin16@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp52@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp53@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?insert@array@json@boost@@QEAAPEAVvalue@23@PEBV423@V?$initializer_list@Vvalue_ref@json@boost@@@std@@@Z"
                                        # -- End function
	.def	 "?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z"
	.globl	"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z" # -- Begin function ?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z
	.p2align	4, 0x90
"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z": # @"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z"
.seh_proc "?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rbx, [rdx + 24]
	mov	eax, dword ptr [rcx]
	and	eax, 3
	cmp	eax, 2
	je	.LBB26_2
# %bb.1:
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
.LBB26_2:
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rsi + 16], rax
	movups	xmm0, xmmword ptr [rbx]
	movups	xmmword ptr [rsi], xmm0
	mov	rax, qword ptr [rdi + 16]
	test	rax, rax
	je	.LBB26_4
# %bb.3:
	add	dword ptr [rax], -1
.LBB26_4:
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z"
	.globl	"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z" # -- Begin function ?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z
	.p2align	4, 0x90
"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z": # @"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z"
.seh_proc "?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	r14, r8
	mov	r12, rdx
	mov	r13, rcx
	mov	rdx, r8
	sub	rdx, r12
	mov	rbx, rdx
	sar	rbx, 3
	movabs	r15, -6148914691236517205
	imul	rbx, r15
	mov	rax, qword ptr [rcx + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	test	rdx, rdx
	je	.LBB27_5
# %bb.1:
	mov	rdx, qword ptr [r13]
	and	edx, 3
	cmp	edx, 2
	je	.LBB27_5
# %bb.2:
	mov	rax, r12
	sub	rax, rcx
	sar	rax, 3
	imul	rax, r15
	lea	rdx, [8*rbx]
	lea	rsi, [rdx + 2*rdx]
	lea	rax, [rax + 2*rax]
	lea	rdi, [rcx + 8*rax]
	add	rdi, -24
	.p2align	4, 0x90
.LBB27_3:                               # =>This Inner Loop Header: Depth=1
	lea	rcx, [rdi + rsi]
	call	"??1value@json@boost@@QEAA@XZ"
	add	rsi, -24
	jne	.LBB27_3
# %bb.4:
	mov	rax, qword ptr [r13 + 16]
.LBB27_5:
	test	rax, rax
	je	.LBB27_6
# %bb.7:
	mov	ecx, dword ptr [rax]
	jmp	.LBB27_8
.LBB27_6:
	xor	ecx, ecx
.LBB27_8:
	lea	rdx, [rax + 8]
	test	rax, rax
	cmove	rdx, rax
	mov	rdi, r14
	sub	rdi, rdx
	sar	rdi, 3
	imul	rdi, r15
	sub	rcx, rdi
	je	.LBB27_10
# %bb.9:
	shl	rcx, 3
	lea	r8, [rcx + 2*rcx]
	mov	rcx, r12
	mov	rdx, r14
	call	memmove
	mov	rax, qword ptr [r13 + 16]
.LBB27_10:
	test	rax, rax
	je	.LBB27_12
# %bb.11:
	sub	dword ptr [rax], ebx
.LBB27_12:
	mov	rax, r12
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@array@json@boost@@QEAAPEAVvalue@23@PEBV423@0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?pop_back@array@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?pop_back@array@json@boost@@QEAAXXZ"
	.globl	"?pop_back@array@json@boost@@QEAAXXZ" # -- Begin function ?pop_back@array@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?pop_back@array@json@boost@@QEAAXXZ":  # @"?pop_back@array@json@boost@@QEAAXXZ"
.seh_proc "?pop_back@array@json@boost@@QEAAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rcx
	mov	rax, qword ptr [rcx + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB28_1
# %bb.2:
	mov	edx, dword ptr [rax]
	add	rdx, -1
	jmp	.LBB28_3
.LBB28_1:
	mov	rdx, -1
.LBB28_3:
	mov	esi, dword ptr [rdi]
	and	esi, 3
	cmp	esi, 2
	je	.LBB28_5
# %bb.4:
	lea	rax, [rdx + 2*rdx]
	lea	rcx, [rcx + 8*rax]
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rdi + 16]
.LBB28_5:
	test	rax, rax
	je	.LBB28_7
# %bb.6:
	add	dword ptr [rax], -1
.LBB28_7:
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?pop_back@array@json@boost@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?resize@array@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?resize@array@json@boost@@QEAAX_K@Z"
	.globl	"?resize@array@json@boost@@QEAAX_K@Z" # -- Begin function ?resize@array@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?resize@array@json@boost@@QEAAX_K@Z":  # @"?resize@array@json@boost@@QEAAX_K@Z"
.seh_proc "?resize@array@json@boost@@QEAAX_K@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	r14, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB29_1
# %bb.2:
	mov	ecx, dword ptr [rax]
	cmp	rcx, r14
	jae	.LBB29_4
.LBB29_11:
	test	rax, rax
	je	.LBB29_12
# %bb.13:
	mov	ecx, dword ptr [rax + 4]
	cmp	rcx, r14
	jae	.LBB29_16
.LBB29_15:
	mov	rcx, rdi
	mov	rdx, r14
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	mov	rax, qword ptr [rdi + 16]
.LBB29_16:
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB29_17
# %bb.18:
	mov	edx, dword ptr [rax]
	cmp	rdx, r14
	jne	.LBB29_20
	jmp	.LBB29_25
.LBB29_1:
	xor	ecx, ecx
	cmp	rcx, r14
	jb	.LBB29_11
.LBB29_4:
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB29_5
# %bb.6:
	mov	edx, dword ptr [rax]
	cmp	rdx, r14
	jne	.LBB29_8
	jmp	.LBB29_25
.LBB29_12:
	xor	ecx, ecx
	cmp	rcx, r14
	jb	.LBB29_15
	jmp	.LBB29_16
.LBB29_17:
	xor	edx, edx
	cmp	rdx, r14
	je	.LBB29_25
.LBB29_20:
	lea	rax, [r14 + 2*r14]
	lea	rax, [rcx + 8*rax]
	lea	rdx, [rdx + 2*rdx]
	lea	rcx, [rcx + 8*rdx]
	jmp	.LBB29_21
	.p2align	4, 0x90
.LBB29_23:                              #   in Loop: Header=BB29_21 Depth=1
	mov	qword ptr [rcx], rbx
	mov	byte ptr [rcx + 8], 7
	add	rcx, 24
	cmp	rcx, rax
	je	.LBB29_24
.LBB29_21:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, qword ptr [rdi]
	test	bl, 1
	je	.LBB29_23
# %bb.22:                               #   in Loop: Header=BB29_21 Depth=1
	mov	rdx, rbx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
	jmp	.LBB29_23
.LBB29_5:
	xor	edx, edx
	cmp	rdx, r14
	je	.LBB29_25
.LBB29_8:
	mov	rbx, qword ptr [rdi]
	and	ebx, 3
	cmp	ebx, 2
	je	.LBB29_25
# %bb.9:
	lea	rax, [8*r14]
	lea	rsi, [rax + 2*rax]
	shl	rdx, 3
	lea	rax, [rdx + 2*rdx]
	sub	rsi, rax
	lea	rbx, [rcx + rax]
	add	rbx, -24
	.p2align	4, 0x90
.LBB29_10:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	add	rbx, -24
	add	rsi, 24
	jne	.LBB29_10
.LBB29_24:
	mov	rax, qword ptr [rdi + 16]
.LBB29_25:
	test	rax, rax
	je	.LBB29_27
# %bb.26:
	mov	dword ptr [rax], r14d
.LBB29_27:
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?resize@array@json@boost@@QEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
	.globl	"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z" # -- Begin function ?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z
	.p2align	4, 0x90
"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z": # @"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
.Lfunc_begin17:
.seh_proc "?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, r8
	mov	r14, rdx
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB30_1
# %bb.2:
	mov	ecx, dword ptr [rax]
	cmp	rcx, r14
	jae	.LBB30_4
.LBB30_11:
	test	rax, rax
	je	.LBB30_12
# %bb.13:
	mov	ecx, dword ptr [rax + 4]
	cmp	rcx, r14
	jae	.LBB30_16
.LBB30_15:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rsi
	mov	rdx, r14
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	mov	rax, qword ptr [rsi + 16]
.LBB30_16:
	lea	rdx, [rax + 8]
	lea	rsi, [r14 + 2*r14]
	test	rax, rax
	cmove	rdx, rax
	je	.LBB30_17
# %bb.18:
	mov	eax, dword ptr [rax]
	lea	rbx, [rax + 2*rax]
	lea	rcx, [rdx + 8*rbx]
	jmp	.LBB30_19
.LBB30_1:
	xor	ecx, ecx
	cmp	rcx, r14
	jb	.LBB30_11
.LBB30_4:
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB30_5
# %bb.6:
	mov	edx, dword ptr [rax]
	cmp	rdx, r14
	jne	.LBB30_8
	jmp	.LBB30_25
.LBB30_12:
	xor	ecx, ecx
	cmp	rcx, r14
	jb	.LBB30_15
	jmp	.LBB30_16
.LBB30_17:
	xor	ecx, ecx
	xor	eax, eax
.LBB30_19:
	lea	rsi, [rdx + 8*rsi]
	lea	rax, [rax + 2*rax]
	lea	rax, [rdx + 8*rax]
	mov	qword ptr [rbp - 32], rax # 8-byte Spill
	lea	rbx, [rbp - 40]
	.p2align	4, 0x90
.LBB30_20:                              # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB30_22
# %bb.21:                               #   in Loop: Header=BB30_20 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB30_22:                              #   in Loop: Header=BB30_20 Depth=1
.Ltmp54:
	mov	rdx, rdi
	mov	r8, rbx
	mov	qword ptr [rbp - 24], rcx # 8-byte Spill
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp55:
# %bb.23:                               #   in Loop: Header=BB30_20 Depth=1
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	add	rcx, 24
	cmp	rsi, rcx
	jne	.LBB30_20
	jmp	.LBB30_24
.LBB30_5:
	xor	edx, edx
	cmp	rdx, r14
	je	.LBB30_25
.LBB30_8:
	mov	rbx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rbx, qword ptr [rbx]
	and	ebx, 3
	cmp	ebx, 2
	je	.LBB30_25
# %bb.9:
	lea	rax, [8*r14]
	lea	rsi, [rax + 2*rax]
	shl	rdx, 3
	lea	rax, [rdx + 2*rdx]
	sub	rsi, rax
	lea	rdi, [rcx + rax]
	add	rdi, -24
	.p2align	4, 0x90
.LBB30_10:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	add	rdi, -24
	add	rsi, 24
	jne	.LBB30_10
.LBB30_24:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax + 16]
.LBB30_25:
	test	rax, rax
	je	.LBB30_27
# %bb.26:
	mov	dword ptr [rax], r14d
.LBB30_27:
	add	rsp, 80
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
	.seh_endproc
	.def	 "?dtor$28@?0??resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$28@?0??resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z@4HA":
.seh_proc "?dtor$28@?0??resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z@4HA"
.LBB30_28:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 24] # 8-byte Reload
	test	rsi, rsi
	mov	rdi, qword ptr [rbp - 32] # 8-byte Reload
	je	.LBB30_32
# %bb.29:
	cmp	rdi, rsi
	je	.LBB30_32
# %bb.30:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB30_32
.LBB30_31:                              # =>This Inner Loop Header: Depth=1
	add	rsi, -24
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rdi, rsi
	jne	.LBB30_31
.LBB30_32:
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end17:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
	.p2align	2
"$cppxdata$?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$28@?0??resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z@4HA"@IMGREL # Action
"$ip2state$?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z":
	.long	.Lfunc_begin17@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp54@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp55@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?resize@array@json@boost@@QEAAX_KAEBVvalue@23@@Z"
                                        # -- End function
	.def	 "?swap@array@json@boost@@QEAAXAEAV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.globl	"?swap@array@json@boost@@QEAAXAEAV123@@Z" # -- Begin function ?swap@array@json@boost@@QEAAXAEAV123@@Z
	.p2align	4, 0x90
"?swap@array@json@boost@@QEAAXAEAV123@@Z": # @"?swap@array@json@boost@@QEAAXAEAV123@@Z"
.Lfunc_begin18:
.seh_proc "?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r14, rdx
	mov	rdi, rcx
	mov	rbx, qword ptr [rdx]
	test	rbx, rbx
	je	.LBB31_2
# %bb.1:
	and	rbx, -4
	jmp	.LBB31_5
.LBB31_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_3
.LBB31_5:
	mov	rsi, qword ptr [rdi]
	test	rsi, rsi
	je	.LBB31_7
# %bb.6:
	and	rsi, -4
	jmp	.LBB31_10
.LBB31_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_8
.LBB31_10:
	cmp	rsi, rbx
	je	.LBB31_12
# %bb.11:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	rdx, rbx
	call	qword ptr [rax + 24]
	test	al, al
	je	.LBB31_13
.LBB31_12:
	mov	rax, qword ptr [rdi + 16]
	mov	rcx, qword ptr [r14 + 16]
	mov	qword ptr [rdi + 16], rcx
	mov	qword ptr [r14 + 16], rax
.LBB31_94:
	add	rsp, 112
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB31_13:
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 72], rax
	test	al, 1
	je	.LBB31_15
# %bb.14:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB31_15:
	lea	rcx, [rbp - 32]
	lea	r8, [rbp - 72]
	mov	rdx, rdi
	call	"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rbp - 64], rax
	test	al, 1
	je	.LBB31_17
# %bb.16:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB31_17:
.Ltmp56:
	lea	rcx, [rbp - 56]
	lea	r8, [rbp - 64]
	mov	rdx, r14
	call	"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp57:
# %bb.18:
	mov	rax, qword ptr [rdi + 16]
	test	rax, rax
	je	.LBB31_33
# %bb.19:
	mov	rbx, qword ptr [rdi]
	mov	ecx, ebx
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB31_33
# %bb.20:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB31_24
# %bb.21:
	lea	rcx, [rcx + 2*rcx]
	lea	rsi, [rax + 8*rcx]
	add	rsi, 8
	.p2align	4, 0x90
.LBB31_22:                              # =>This Inner Loop Header: Depth=1
	add	rsi, -24
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rdi + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rsi, rcx
	jne	.LBB31_22
# %bb.23:
	mov	rbx, qword ptr [rdi]
.LBB31_24:
	test	rbx, rbx
	je	.LBB31_26
# %bb.25:
	and	rbx, -4
	jmp	.LBB31_29
.LBB31_26:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_27
.LBB31_29:
	mov	rdx, qword ptr [rdi + 16]
	test	rdx, rdx
	je	.LBB31_30
# %bb.31:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB31_32
.LBB31_30:
	mov	r8d, 16
.LBB31_32:
	mov	rax, qword ptr [rbx]
.Ltmp58:
	mov	r9d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 16]
.Ltmp59:
.LBB31_33:
	mov	rcx, qword ptr [rdi]
	test	cl, 1
	je	.LBB31_37
# %bb.34:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB31_37
# %bb.35:
	cmp	rax, 1
	jne	.LBB31_37
# %bb.36:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB31_37:
	mov	rax, qword ptr [rbp - 56]
	mov	qword ptr [rdi], rax
	mov	qword ptr [rbp - 56], 0
	mov	byte ptr [rdi + 8], 0
	mov	rax, qword ptr [rbp - 40]
	mov	qword ptr [rbp - 40], 0
	mov	qword ptr [rdi + 16], rax
	mov	rax, qword ptr [r14 + 16]
	test	rax, rax
	je	.LBB31_52
# %bb.38:
	mov	rdi, qword ptr [r14]
	mov	ecx, edi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB31_52
# %bb.39:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB31_43
# %bb.40:
	lea	rcx, [rcx + 2*rcx]
	lea	rsi, [rax + 8*rcx]
	add	rsi, 8
	.p2align	4, 0x90
.LBB31_41:                              # =>This Inner Loop Header: Depth=1
	add	rsi, -24
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [r14 + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rsi, rcx
	jne	.LBB31_41
# %bb.42:
	mov	rdi, qword ptr [r14]
.LBB31_43:
	test	rdi, rdi
	je	.LBB31_45
# %bb.44:
	and	rdi, -4
	jmp	.LBB31_48
.LBB31_45:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_46
.LBB31_48:
	mov	rdx, qword ptr [r14 + 16]
	test	rdx, rdx
	je	.LBB31_49
# %bb.50:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB31_51
.LBB31_49:
	mov	r8d, 16
.LBB31_51:
	mov	rax, qword ptr [rdi]
.Ltmp60:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp61:
.LBB31_52:
	mov	rcx, qword ptr [r14]
	test	cl, 1
	je	.LBB31_56
# %bb.53:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB31_56
# %bb.54:
	cmp	rax, 1
	jne	.LBB31_56
# %bb.55:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB31_56:
	mov	rax, qword ptr [rbp - 32]
	mov	qword ptr [r14], rax
	mov	qword ptr [rbp - 32], 0
	mov	byte ptr [r14 + 8], 0
	mov	rax, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 16], 0
	mov	qword ptr [r14 + 16], rax
	mov	rax, qword ptr [rbp - 40]
	test	rax, rax
	je	.LBB31_71
# %bb.57:
	mov	rsi, qword ptr [rbp - 56]
	mov	ecx, esi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB31_71
# %bb.58:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB31_62
# %bb.59:
	lea	rcx, [rcx + 2*rcx]
	lea	rsi, [rax + 8*rcx]
	add	rsi, 8
	.p2align	4, 0x90
.LBB31_60:                              # =>This Inner Loop Header: Depth=1
	add	rsi, -24
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp - 40]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rsi, rcx
	jne	.LBB31_60
# %bb.61:
	mov	rsi, qword ptr [rbp - 56]
.LBB31_62:
	test	rsi, rsi
	je	.LBB31_64
# %bb.63:
	and	rsi, -4
	jmp	.LBB31_67
.LBB31_64:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_65
.LBB31_67:
	mov	rdx, qword ptr [rbp - 40]
	test	rdx, rdx
	je	.LBB31_68
# %bb.69:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB31_70
.LBB31_68:
	mov	r8d, 16
.LBB31_70:
	mov	rax, qword ptr [rsi]
.Ltmp62:
	mov	r9d, 8
	mov	rcx, rsi
	call	qword ptr [rax + 16]
.Ltmp63:
.LBB31_71:
	mov	rcx, qword ptr [rbp - 56]
	test	cl, 1
	je	.LBB31_75
# %bb.72:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB31_75
# %bb.73:
	cmp	rax, 1
	jne	.LBB31_75
# %bb.74:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB31_75:
	mov	rax, qword ptr [rbp - 16]
	test	rax, rax
	je	.LBB31_90
# %bb.76:
	mov	rsi, qword ptr [rbp - 32]
	mov	ecx, esi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB31_90
# %bb.77:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB31_81
# %bb.78:
	lea	rcx, [rcx + 2*rcx]
	lea	rsi, [rax + 8*rcx]
	add	rsi, 8
	.p2align	4, 0x90
.LBB31_79:                              # =>This Inner Loop Header: Depth=1
	add	rsi, -24
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp - 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rsi, rcx
	jne	.LBB31_79
# %bb.80:
	mov	rsi, qword ptr [rbp - 32]
.LBB31_81:
	test	rsi, rsi
	je	.LBB31_83
# %bb.82:
	and	rsi, -4
	jmp	.LBB31_86
.LBB31_83:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_84
.LBB31_86:
	mov	rdx, qword ptr [rbp - 16]
	test	rdx, rdx
	je	.LBB31_87
# %bb.88:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB31_89
.LBB31_87:
	mov	r8d, 16
.LBB31_89:
	mov	rax, qword ptr [rsi]
.Ltmp64:
	mov	r9d, 8
	mov	rcx, rsi
	call	qword ptr [rax + 16]
.Ltmp65:
.LBB31_90:
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	je	.LBB31_94
# %bb.91:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB31_94
# %bb.92:
	cmp	rax, 1
	jne	.LBB31_94
# %bb.93:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
	jmp	.LBB31_94
.LBB31_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_5
.LBB31_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_10
.LBB31_27:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_29
# %bb.28:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_29
.LBB31_46:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_48
# %bb.47:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_48
.LBB31_65:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_67
# %bb.66:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_67
.LBB31_84:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_86
# %bb.85:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_86
	.seh_handlerdata
	.long	("$cppxdata$?swap@array@json@boost@@QEAAXAEAV123@@Z")@IMGREL
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$95@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$95@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$95@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB31_95:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16]
	test	rax, rax
	je	.LBB31_110
# %bb.96:
	mov	rsi, qword ptr [rbp - 32]
	mov	ecx, esi
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB31_110
# %bb.97:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB31_101
# %bb.98:
	lea	rcx, [rcx + 2*rcx]
	lea	rsi, [rax + 8*rcx]
	add	rsi, -16
.LBB31_99:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp - 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rsi, rcx
	lea	rsi, [rsi - 24]
	jne	.LBB31_99
# %bb.100:
	mov	rsi, qword ptr [rbp - 32]
.LBB31_101:
	test	rsi, rsi
	je	.LBB31_103
# %bb.102:
	and	rsi, -4
	jmp	.LBB31_106
.LBB31_103:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB31_104
.LBB31_106:
	mov	rdx, qword ptr [rbp - 16]
	test	rdx, rdx
	je	.LBB31_107
# %bb.108:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB31_109
.LBB31_107:
	mov	r8d, 16
.LBB31_109:
	mov	rax, qword ptr [rsi]
	mov	r9d, 8
	mov	rcx, rsi
	call	qword ptr [rax + 16]
.LBB31_110:
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	je	.LBB31_114
# %bb.111:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB31_114
# %bb.112:
	cmp	rax, 1
	jne	.LBB31_114
# %bb.113:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB31_114:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.LBB31_104:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB31_106
# %bb.105:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB31_106
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$115@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$115@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$115@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB31_115:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$116@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$116@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$116@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB31_116:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$117@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$117@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$117@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB31_117:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$118@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$118@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$118@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB31_118:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end18:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
	.p2align	2
"$cppxdata$?swap@array@json@boost@@QEAAXAEAV123@@Z":
	.long	429065506               # MagicNumber
	.long	5                       # MaxState
	.long	("$stateUnwindMap$?swap@array@json@boost@@QEAAXAEAV123@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	10                      # IPMapEntries
	.long	("$ip2state$?swap@array@json@boost@@QEAAXAEAV123@@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?swap@array@json@boost@@QEAAXAEAV123@@Z":
	.long	-1                      # ToState
	.long	"?dtor$115@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$116@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$117@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$118@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$95@?0??swap@array@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
"$ip2state$?swap@array@json@boost@@QEAAXAEAV123@@Z":
	.long	.Lfunc_begin18@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp56@IMGREL+1        # IP
	.long	4                       # ToState
	.long	.Ltmp58@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp59@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp60@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp61@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp62@IMGREL+1        # IP
	.long	2                       # ToState
	.long	.Ltmp63@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp64@IMGREL+1        # IP
	.long	3                       # ToState
	.long	.Ltmp65@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?swap@array@json@boost@@QEAAXAEAV123@@Z"
                                        # -- End function
	.def	 "?destroy@array@json@boost@@AEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?destroy@array@json@boost@@AEAAXXZ"
	.globl	"?destroy@array@json@boost@@AEAAXXZ" # -- Begin function ?destroy@array@json@boost@@AEAAXXZ
	.p2align	4, 0x90
"?destroy@array@json@boost@@AEAAXXZ":   # @"?destroy@array@json@boost@@AEAAXXZ"
# %bb.0:
	mov	rdx, rcx
	add	rcx, 16
	jmp	"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # TAILCALL
                                        # -- End function
	.def	 "?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.globl	"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # -- Begin function ?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z": # @"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
.Lfunc_begin19:
.seh_proc "?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rcx]
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB33_3
# %bb.1:
	lea	rdx, [rax + 8]
	test	rax, rax
	cmove	rdx, rax
	lea	rax, [rcx + 2*rcx]
	lea	rbx, [rdx + 8*rax]
	.p2align	4, 0x90
.LBB33_2:                               # =>This Inner Loop Header: Depth=1
	add	rbx, -24
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rsi]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rbx, rcx
	jne	.LBB33_2
.LBB33_3:
	mov	rdi, qword ptr [rdi]
	test	rdi, rdi
	je	.LBB33_5
# %bb.4:
	and	rdi, -4
	jmp	.LBB33_8
.LBB33_5:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB33_6
.LBB33_8:
	mov	rdx, qword ptr [rsi]
	test	rdx, rdx
	je	.LBB33_9
# %bb.10:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB33_11
.LBB33_9:
	mov	r8d, 16
.LBB33_11:
	mov	rax, qword ptr [rdi]
.Ltmp66:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp67:
# %bb.12:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB33_6:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB33_8
# %bb.7:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB33_8
	.seh_handlerdata
	.long	("$cppxdata$?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL
	.section	.text,"xr",discard,"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.def	 "?dtor$13@?0??destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0??destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA":
.seh_proc "?dtor$13@?0??destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"
.LBB33_13:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end19:
	.seh_handlerdata
	.section	.text,"xr",discard,"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.p2align	2
"$cppxdata$?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	-1                      # ToState
	.long	"?dtor$13@?0??destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # Action
"$ip2state$?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	.Lfunc_begin19@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp66@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp67@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
                                        # -- End function
	.def	 "?reserve_impl@array@json@boost@@AEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	.globl	"?reserve_impl@array@json@boost@@AEAAX_K@Z" # -- Begin function ?reserve_impl@array@json@boost@@AEAAX_K@Z
	.p2align	4, 0x90
"?reserve_impl@array@json@boost@@AEAAX_K@Z": # @"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.seh_proc "?reserve_impl@array@json@boost@@AEAAX_K@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB34_3
# %bb.1:
	mov	ecx, dword ptr [rax + 4]
	lea	rax, [rcx + rcx]
	mov	edi, 2147483646
	cmp	rax, rcx
	jb	.LBB34_5
# %bb.2:
	cmp	rax, rdx
	cmova	rdx, rax
.LBB34_3:
	mov	edi, 16
	cmp	rdx, 16
	jb	.LBB34_5
# %bb.4:
	mov	rdi, rdx
	cmp	rdx, 2147483647
	jae	.LBB34_19
.LBB34_5:
	lea	r14, [rsi + 16]
	mov	rbx, qword ptr [rsi]
	test	rbx, rbx
	je	.LBB34_7
# %bb.6:
	and	rbx, -4
	jmp	.LBB34_10
.LBB34_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB34_8
.LBB34_10:
	lea	rax, [rdi + 2*rdi]
	lea	rdx, [8*rax + 17]
	and	rdx, -8
	mov	rax, qword ptr [rbx]
	mov	r8d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 8]
	mov	rbx, rax
	mov	dword ptr [rax + 4], edi
	mov	dword ptr [rax], 0
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB34_15
# %bb.11:
	mov	eax, dword ptr [rdx]
	test	rax, rax
	je	.LBB34_13
# %bb.12:
	lea	rcx, [rbx + 8]
	add	rdx, 8
	test	rbx, rbx
	cmove	rcx, rbx
	shl	rax, 3
	lea	r8, [rax + 2*rax]
	call	memmove
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB34_15
.LBB34_13:
	test	rbx, rbx
	je	.LBB34_17
# %bb.14:
	mov	eax, dword ptr [rdx]
	jmp	.LBB34_16
.LBB34_15:
	xor	eax, eax
	test	rbx, rbx
	je	.LBB34_18
.LBB34_16:
	mov	dword ptr [rbx], eax
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB34_18
.LBB34_17:
	mov	dword ptr [rdx], 0
.LBB34_18:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?destroy@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	qword ptr [rsi + 16], rbx
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB34_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB34_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB34_10
.LBB34_19:
	call	"?raise@array_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?reserve_impl@array@json@boost@@AEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z"
	.globl	"?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z" # -- Begin function ?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z
	.p2align	4, 0x90
"?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z": # @"?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z"
.seh_proc "?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	dword ptr [rcx], edx
	lea	rdi, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rdi
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	byte ptr [rsi + 4], al
	mov	qword ptr [rsi + 8], rdi
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_error_code@json@boost@@YA?AVerror_code@system@2@W4error@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z"
	.globl	"?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z" # -- Begin function ?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z
	.p2align	4, 0x90
"?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z": # @"?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z"
.seh_proc "?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	dword ptr [rcx], edx
	lea	rdi, [rip + "?cat@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rdi
	call	qword ptr [rip + "??_7codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"+48]
	mov	byte ptr [rsi + 4], al
	mov	qword ptr [rsi + 8], rdi
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_error_condition@json@boost@@YA?AVerror_condition@system@2@W4condition@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0type_error@json@boost@@QEAA@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0type_error@json@boost@@QEAA@PEBD@Z"
	.globl	"??0type_error@json@boost@@QEAA@PEBD@Z" # -- Begin function ??0type_error@json@boost@@QEAA@PEBD@Z
	.p2align	4, 0x90
"??0type_error@json@boost@@QEAA@PEBD@Z": # @"??0type_error@json@boost@@QEAA@PEBD@Z"
.Lfunc_begin20:
.seh_proc "??0type_error@json@boost@@QEAA@PEBD@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	mov	qword ptr [rbp - 16], rdx
	mov	byte ptr [rbp - 8], 1
.Ltmp68:
	lea	rcx, [rbp - 16]
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp69:
# %bb.1:
	lea	rax, [rip + "??_7type_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0type_error@json@boost@@QEAA@PEBD@Z")@IMGREL
	.section	.text,"xr",one_only,"??0type_error@json@boost@@QEAA@PEBD@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0type_error@json@boost@@QEAA@PEBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0type_error@json@boost@@QEAA@PEBD@Z@4HA":
.seh_proc "?dtor$2@?0???0type_error@json@boost@@QEAA@PEBD@Z@4HA"
.LBB37_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end20:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0type_error@json@boost@@QEAA@PEBD@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0type_error@json@boost@@QEAA@PEBD@Z"
	.p2align	2
"$cppxdata$??0type_error@json@boost@@QEAA@PEBD@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0type_error@json@boost@@QEAA@PEBD@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0type_error@json@boost@@QEAA@PEBD@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0type_error@json@boost@@QEAA@PEBD@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0type_error@json@boost@@QEAA@PEBD@Z@4HA"@IMGREL # Action
"$ip2state$??0type_error@json@boost@@QEAA@PEBD@Z":
	.long	.Lfunc_begin20@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp68@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp69@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0type_error@json@boost@@QEAA@PEBD@Z"
                                        # -- End function
	.def	 "??0number_required_error@json@boost@@QEAA@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0number_required_error@json@boost@@QEAA@PEBD@Z"
	.globl	"??0number_required_error@json@boost@@QEAA@PEBD@Z" # -- Begin function ??0number_required_error@json@boost@@QEAA@PEBD@Z
	.p2align	4, 0x90
"??0number_required_error@json@boost@@QEAA@PEBD@Z": # @"??0number_required_error@json@boost@@QEAA@PEBD@Z"
.Lfunc_begin21:
.seh_proc "??0number_required_error@json@boost@@QEAA@PEBD@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	mov	qword ptr [rbp - 16], rdx
	mov	byte ptr [rbp - 8], 1
.Ltmp70:
	lea	rcx, [rbp - 16]
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp71:
# %bb.1:
	lea	rax, [rip + "??_7number_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0number_required_error@json@boost@@QEAA@PEBD@Z")@IMGREL
	.section	.text,"xr",one_only,"??0number_required_error@json@boost@@QEAA@PEBD@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0number_required_error@json@boost@@QEAA@PEBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0number_required_error@json@boost@@QEAA@PEBD@Z@4HA":
.seh_proc "?dtor$2@?0???0number_required_error@json@boost@@QEAA@PEBD@Z@4HA"
.LBB38_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end21:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0number_required_error@json@boost@@QEAA@PEBD@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0number_required_error@json@boost@@QEAA@PEBD@Z"
	.p2align	2
"$cppxdata$??0number_required_error@json@boost@@QEAA@PEBD@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0number_required_error@json@boost@@QEAA@PEBD@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0number_required_error@json@boost@@QEAA@PEBD@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0number_required_error@json@boost@@QEAA@PEBD@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0number_required_error@json@boost@@QEAA@PEBD@Z@4HA"@IMGREL # Action
"$ip2state$??0number_required_error@json@boost@@QEAA@PEBD@Z":
	.long	.Lfunc_begin21@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp70@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp71@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0number_required_error@json@boost@@QEAA@PEBD@Z"
                                        # -- End function
	.def	 "??0array_index_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array_index_error@json@boost@@QEAA@XZ"
	.globl	"??0array_index_error@json@boost@@QEAA@XZ" # -- Begin function ??0array_index_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0array_index_error@json@boost@@QEAA@XZ": # @"??0array_index_error@json@boost@@QEAA@XZ"
.Lfunc_begin22:
.seh_proc "??0array_index_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BC@PJIHPFPB@array?5index?5error?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp72:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp73:
# %bb.1:
	lea	rax, [rip + "??_7array_index_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array_index_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0array_index_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0array_index_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0array_index_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0array_index_error@json@boost@@QEAA@XZ@4HA"
.LBB39_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end22:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array_index_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array_index_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0array_index_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array_index_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array_index_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array_index_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0array_index_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0array_index_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin22@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp72@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp73@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array_index_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@array_index_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@array_index_error@json@boost@@SAXXZ"
	.globl	"?raise@array_index_error@json@boost@@SAXXZ" # -- Begin function ?raise@array_index_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@array_index_error@json@boost@@SAXXZ": # @"?raise@array_index_error@json@boost@@SAXXZ"
.Lfunc_begin23:
.seh_proc "?raise@array_index_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DE@NGCCBFGO@static?5void?5boost?3?3json?3?3array_i@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 45
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BC@PJIHPFPB@array?5index?5error?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp74:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp75:
# %bb.1:
	lea	rax, [rip + "??_7array_index_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp76:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp77:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@array_index_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@array_index_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@array_index_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@array_index_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@array_index_error@json@boost@@SAXXZ@4HA"
.LBB40_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@array_index_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@array_index_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@array_index_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@array_index_error@json@boost@@SAXXZ@4HA"
.LBB40_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end23:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@array_index_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@array_index_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@array_index_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@array_index_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@array_index_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@array_index_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@array_index_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@array_index_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@array_index_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin23@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp74@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp76@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp77@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@array_index_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uarray_index_error@json@boost@@@boost@@YAXAEBUarray_index_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0array_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array_required_error@json@boost@@QEAA@XZ"
	.globl	"??0array_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0array_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0array_required_error@json@boost@@QEAA@XZ": # @"??0array_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin24:
.seh_proc "??0array_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0P@DGLCELNH@array?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp78:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp79:
# %bb.1:
	lea	rax, [rip + "??_7array_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0array_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0array_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0array_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0array_required_error@json@boost@@QEAA@XZ@4HA"
.LBB42_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end24:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0array_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0array_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0array_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin24@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp78@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp79@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@array_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@array_required_error@json@boost@@SAXXZ"
	.globl	"?raise@array_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@array_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@array_required_error@json@boost@@SAXXZ": # @"?raise@array_required_error@json@boost@@SAXXZ"
.Lfunc_begin25:
.seh_proc "?raise@array_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DH@GOOMKIKE@static?5void?5boost?3?3json?3?3array_r@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 62
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0P@DGLCELNH@array?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp80:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp81:
# %bb.1:
	lea	rax, [rip + "??_7array_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp82:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp83:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@array_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@array_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@array_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@array_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@array_required_error@json@boost@@SAXXZ@4HA"
.LBB43_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@array_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@array_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@array_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@array_required_error@json@boost@@SAXXZ@4HA"
.LBB43_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end25:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@array_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@array_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@array_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@array_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@array_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@array_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@array_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@array_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@array_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin25@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp80@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp82@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp83@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@array_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uarray_required_error@json@boost@@@boost@@YAXAEBUarray_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0array_too_large@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0array_too_large@json@boost@@QEAA@XZ"
	.globl	"??0array_too_large@json@boost@@QEAA@XZ" # -- Begin function ??0array_too_large@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0array_too_large@json@boost@@QEAA@XZ": # @"??0array_too_large@json@boost@@QEAA@XZ"
.Lfunc_begin26:
.seh_proc "??0array_too_large@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BA@DIOCNIJA@array?5too?5large?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp84:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp85:
# %bb.1:
	lea	rax, [rip + "??_7array_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array_too_large@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0array_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0array_too_large@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0array_too_large@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0array_too_large@json@boost@@QEAA@XZ@4HA"
.LBB45_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end26:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0array_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array_too_large@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0array_too_large@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array_too_large@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array_too_large@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array_too_large@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0array_too_large@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0array_too_large@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin26@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp84@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp85@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0array_too_large@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uarray_too_large@json@boost@@@boost@@YAXAEBUarray_too_large@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0bool_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0bool_required_error@json@boost@@QEAA@XZ"
	.globl	"??0bool_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0bool_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0bool_required_error@json@boost@@QEAA@XZ": # @"??0bool_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin27:
.seh_proc "??0bool_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0O@GIBGOOKD@bool?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp86:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp87:
# %bb.1:
	lea	rax, [rip + "??_7bool_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0bool_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0bool_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0bool_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bool_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0bool_required_error@json@boost@@QEAA@XZ@4HA"
.LBB47_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end27:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0bool_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0bool_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0bool_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0bool_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0bool_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0bool_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0bool_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0bool_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin27@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp86@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp87@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0bool_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@bool_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@bool_required_error@json@boost@@SAXXZ"
	.globl	"?raise@bool_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@bool_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@bool_required_error@json@boost@@SAXXZ": # @"?raise@bool_required_error@json@boost@@SAXXZ"
.Lfunc_begin28:
.seh_proc "?raise@bool_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DG@DANAJAIK@static?5void?5boost?3?3json?3?3bool_re@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 96
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0O@GIBGOOKD@bool?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp88:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp89:
# %bb.1:
	lea	rax, [rip + "??_7bool_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp90:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp91:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@bool_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@bool_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA"
.LBB48_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@bool_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA"
.LBB48_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end28:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@bool_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@bool_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@bool_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@bool_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@bool_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@bool_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@bool_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@bool_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin28@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp88@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp90@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp91@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@bool_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ubool_required_error@json@boost@@@boost@@YAXAEBUbool_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0char_pos_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0char_pos_error@json@boost@@QEAA@XZ"
	.globl	"??0char_pos_error@json@boost@@QEAA@XZ" # -- Begin function ??0char_pos_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0char_pos_error@json@boost@@QEAA@XZ": # @"??0char_pos_error@json@boost@@QEAA@XZ"
.Lfunc_begin29:
.seh_proc "??0char_pos_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BB@JCLBFINB@char?5index?5error?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp92:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp93:
# %bb.1:
	lea	rax, [rip + "??_7char_pos_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0char_pos_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0char_pos_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0char_pos_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0char_pos_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0char_pos_error@json@boost@@QEAA@XZ@4HA"
.LBB50_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end29:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0char_pos_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0char_pos_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0char_pos_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0char_pos_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0char_pos_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0char_pos_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0char_pos_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0char_pos_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin29@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp92@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp93@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0char_pos_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@char_pos_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@char_pos_error@json@boost@@SAXXZ"
	.globl	"?raise@char_pos_error@json@boost@@SAXXZ" # -- Begin function ?raise@char_pos_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@char_pos_error@json@boost@@SAXXZ": # @"?raise@char_pos_error@json@boost@@SAXXZ"
.Lfunc_begin30:
.seh_proc "?raise@char_pos_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DB@EMIPGMFH@static?5void?5boost?3?3json?3?3char_po@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 113
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BB@JCLBFINB@char?5index?5error?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp94:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp95:
# %bb.1:
	lea	rax, [rip + "??_7char_pos_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp96:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp97:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@char_pos_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@char_pos_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA"
.LBB51_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@char_pos_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA"
.LBB51_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end30:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@char_pos_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@char_pos_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@char_pos_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@char_pos_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@char_pos_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@char_pos_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@char_pos_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@char_pos_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin30@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp94@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp96@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp97@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@char_pos_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uchar_pos_error@json@boost@@@boost@@YAXAEBUchar_pos_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0double_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0double_required_error@json@boost@@QEAA@XZ"
	.globl	"??0double_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0double_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0double_required_error@json@boost@@QEAA@XZ": # @"??0double_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin31:
.seh_proc "??0double_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BA@OGFAIBOI@double?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp98:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp99:
# %bb.1:
	lea	rax, [rip + "??_7double_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0double_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0double_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0double_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0double_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0double_required_error@json@boost@@QEAA@XZ@4HA"
.LBB53_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end31:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0double_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0double_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0double_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0double_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0double_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0double_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0double_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0double_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin31@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp98@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp99@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0double_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@double_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@double_required_error@json@boost@@SAXXZ"
	.globl	"?raise@double_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@double_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@double_required_error@json@boost@@SAXXZ": # @"?raise@double_required_error@json@boost@@SAXXZ"
.Lfunc_begin32:
.seh_proc "?raise@double_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DI@PCIKOKKJ@static?5void?5boost?3?3json?3?3double_@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 130
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BA@OGFAIBOI@double?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp100:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp101:
# %bb.1:
	lea	rax, [rip + "??_7double_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp102:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp103:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@double_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@double_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@double_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@double_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@double_required_error@json@boost@@SAXXZ@4HA"
.LBB54_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@double_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@double_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@double_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@double_required_error@json@boost@@SAXXZ@4HA"
.LBB54_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end32:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@double_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@double_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@double_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@double_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@double_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@double_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@double_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@double_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@double_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin32@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp100@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp102@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp103@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@double_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Udouble_required_error@json@boost@@@boost@@YAXAEBUdouble_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0int64_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0int64_required_error@json@boost@@QEAA@XZ"
	.globl	"??0int64_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0int64_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0int64_required_error@json@boost@@QEAA@XZ": # @"??0int64_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin33:
.seh_proc "??0int64_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0P@EAKGBCKH@int64?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp104:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp105:
# %bb.1:
	lea	rax, [rip + "??_7int64_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0int64_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0int64_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0int64_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0int64_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0int64_required_error@json@boost@@QEAA@XZ@4HA"
.LBB56_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end33:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0int64_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0int64_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0int64_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0int64_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0int64_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0int64_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0int64_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0int64_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin33@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp104@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp105@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0int64_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@int64_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@int64_required_error@json@boost@@SAXXZ"
	.globl	"?raise@int64_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@int64_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@int64_required_error@json@boost@@SAXXZ": # @"?raise@int64_required_error@json@boost@@SAXXZ"
.Lfunc_begin34:
.seh_proc "?raise@int64_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DH@FOCEKOIN@static?5void?5boost?3?3json?3?3int64_r@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 147
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0P@EAKGBCKH@int64?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp106:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp107:
# %bb.1:
	lea	rax, [rip + "??_7int64_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp108:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp109:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@int64_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@int64_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA"
.LBB57_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@int64_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA"
.LBB57_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end34:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@int64_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@int64_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@int64_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@int64_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@int64_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@int64_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@int64_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@int64_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin34@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp106@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp108@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp109@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@int64_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uint64_required_error@json@boost@@@boost@@YAXAEBUint64_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1exception@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.globl	"??1exception@std@@UEAA@XZ" # -- Begin function ??1exception@std@@UEAA@XZ
	.p2align	4, 0x90
"??1exception@std@@UEAA@XZ":            # @"??1exception@std@@UEAA@XZ"
.Lfunc_begin35:
.seh_proc "??1exception@std@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp110:
	call	__std_exception_destroy
.Ltmp111:
# %bb.1:
	nop
	add	rsp, 48
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1exception@std@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???1exception@std@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???1exception@std@@UEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???1exception@std@@UEAA@XZ@4HA"
.LBB59_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end35:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1exception@std@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1exception@std@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1exception@std@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1exception@std@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1exception@std@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???1exception@std@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1exception@std@@UEAA@XZ":
	.long	.Lfunc_begin35@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp110@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp111@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
                                        # -- End function
	.def	 "??0key_not_found@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0key_not_found@json@boost@@QEAA@XZ"
	.globl	"??0key_not_found@json@boost@@QEAA@XZ" # -- Begin function ??0key_not_found@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0key_not_found@json@boost@@QEAA@XZ": # @"??0key_not_found@json@boost@@QEAA@XZ"
.Lfunc_begin36:
.seh_proc "??0key_not_found@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0O@LAKHKHLP@key?5not?5found?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp112:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp113:
# %bb.1:
	lea	rax, [rip + "??_7key_not_found@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0key_not_found@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0key_not_found@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0key_not_found@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0key_not_found@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0key_not_found@json@boost@@QEAA@XZ@4HA"
.LBB60_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end36:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0key_not_found@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0key_not_found@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0key_not_found@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0key_not_found@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0key_not_found@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0key_not_found@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0key_not_found@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0key_not_found@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin36@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp112@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp113@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0key_not_found@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@key_not_found@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@key_not_found@json@boost@@SAXXZ"
	.globl	"?raise@key_not_found@json@boost@@SAXXZ" # -- Begin function ?raise@key_not_found@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@key_not_found@json@boost@@SAXXZ": # @"?raise@key_not_found@json@boost@@SAXXZ"
.Lfunc_begin37:
.seh_proc "?raise@key_not_found@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DA@HAJBCBLH@static?5void?5boost?3?3json?3?3key_not@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 164
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0O@LAKHKHLP@key?5not?5found?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp114:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp115:
# %bb.1:
	lea	rax, [rip + "??_7key_not_found@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp116:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp117:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@key_not_found@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@key_not_found@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@key_not_found@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@key_not_found@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@key_not_found@json@boost@@SAXXZ@4HA"
.LBB61_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@key_not_found@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@key_not_found@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@key_not_found@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@key_not_found@json@boost@@SAXXZ@4HA"
.LBB61_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end37:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@key_not_found@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@key_not_found@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@key_not_found@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@key_not_found@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@key_not_found@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@key_not_found@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@key_not_found@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@key_not_found@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@key_not_found@json@boost@@SAXXZ":
	.long	.Lfunc_begin37@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp114@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp116@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp117@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@key_not_found@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ukey_not_found@json@boost@@@boost@@YAXAEBUkey_not_found@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0key_too_large@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0key_too_large@json@boost@@QEAA@XZ"
	.globl	"??0key_too_large@json@boost@@QEAA@XZ" # -- Begin function ??0key_too_large@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0key_too_large@json@boost@@QEAA@XZ": # @"??0key_too_large@json@boost@@QEAA@XZ"
.Lfunc_begin38:
.seh_proc "??0key_too_large@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0O@DEEMDEJD@key?5too?5large?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp118:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp119:
# %bb.1:
	lea	rax, [rip + "??_7key_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0key_too_large@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0key_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0key_too_large@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0key_too_large@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0key_too_large@json@boost@@QEAA@XZ@4HA"
.LBB63_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end38:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0key_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0key_too_large@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0key_too_large@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0key_too_large@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0key_too_large@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0key_too_large@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0key_too_large@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0key_too_large@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin38@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp118@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp119@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0key_too_large@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@key_too_large@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@key_too_large@json@boost@@SAXXZ"
	.globl	"?raise@key_too_large@json@boost@@SAXXZ" # -- Begin function ?raise@key_too_large@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@key_too_large@json@boost@@SAXXZ": # @"?raise@key_too_large@json@boost@@SAXXZ"
.Lfunc_begin39:
.seh_proc "?raise@key_too_large@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DA@DBNNEHDB@static?5void?5boost?3?3json?3?3key_too@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 181
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0O@DEEMDEJD@key?5too?5large?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp120:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp121:
# %bb.1:
	lea	rax, [rip + "??_7key_too_large@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp122:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp123:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@key_too_large@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@key_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@key_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@key_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@key_too_large@json@boost@@SAXXZ@4HA"
.LBB64_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@key_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@key_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@key_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@key_too_large@json@boost@@SAXXZ@4HA"
.LBB64_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end39:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@key_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@key_too_large@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@key_too_large@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@key_too_large@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@key_too_large@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@key_too_large@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@key_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@key_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@key_too_large@json@boost@@SAXXZ":
	.long	.Lfunc_begin39@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp120@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp122@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp123@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@key_too_large@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ukey_too_large@json@boost@@@boost@@YAXAEBUkey_too_large@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0object_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object_required_error@json@boost@@QEAA@XZ"
	.globl	"??0object_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0object_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0object_required_error@json@boost@@QEAA@XZ": # @"??0object_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin40:
.seh_proc "??0object_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BA@BADMNCOB@object?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp124:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp125:
# %bb.1:
	lea	rax, [rip + "??_7object_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0object_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0object_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0object_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0object_required_error@json@boost@@QEAA@XZ@4HA"
.LBB66_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end40:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0object_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0object_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0object_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin40@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp124@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp125@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@object_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@object_required_error@json@boost@@SAXXZ"
	.globl	"?raise@object_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@object_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@object_required_error@json@boost@@SAXXZ": # @"?raise@object_required_error@json@boost@@SAXXZ"
.Lfunc_begin41:
.seh_proc "?raise@object_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DI@OAGLDLNB@static?5void?5boost?3?3json?3?3object_@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 198
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BA@BADMNCOB@object?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp126:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp127:
# %bb.1:
	lea	rax, [rip + "??_7object_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp128:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp129:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@object_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@object_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@object_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@object_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@object_required_error@json@boost@@SAXXZ@4HA"
.LBB67_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@object_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@object_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@object_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@object_required_error@json@boost@@SAXXZ@4HA"
.LBB67_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end41:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@object_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@object_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@object_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@object_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@object_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@object_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@object_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@object_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@object_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin41@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp126@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp128@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp129@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@object_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uobject_required_error@json@boost@@@boost@@YAXAEBUobject_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0object_too_large@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object_too_large@json@boost@@QEAA@XZ"
	.globl	"??0object_too_large@json@boost@@QEAA@XZ" # -- Begin function ??0object_too_large@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0object_too_large@json@boost@@QEAA@XZ": # @"??0object_too_large@json@boost@@QEAA@XZ"
.Lfunc_begin42:
.seh_proc "??0object_too_large@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp130:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp131:
# %bb.1:
	lea	rax, [rip + "??_7object_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object_too_large@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0object_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0object_too_large@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0object_too_large@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0object_too_large@json@boost@@QEAA@XZ@4HA"
.LBB69_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end42:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object_too_large@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0object_too_large@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object_too_large@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object_too_large@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object_too_large@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0object_too_large@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0object_too_large@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin42@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp130@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp131@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object_too_large@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@object_too_large@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@object_too_large@json@boost@@SAXXZ"
	.globl	"?raise@object_too_large@json@boost@@SAXXZ" # -- Begin function ?raise@object_too_large@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@object_too_large@json@boost@@SAXXZ": # @"?raise@object_too_large@json@boost@@SAXXZ"
.Lfunc_begin43:
.seh_proc "?raise@object_too_large@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DD@KKAEPNNC@static?5void?5boost?3?3json?3?3object_@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 215
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp132:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp133:
# %bb.1:
	lea	rax, [rip + "??_7object_too_large@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp134:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp135:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@object_too_large@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@object_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@object_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@object_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@object_too_large@json@boost@@SAXXZ@4HA"
.LBB70_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@object_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@object_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@object_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@object_too_large@json@boost@@SAXXZ@4HA"
.LBB70_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end43:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@object_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@object_too_large@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@object_too_large@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@object_too_large@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@object_too_large@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@object_too_large@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@object_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@object_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@object_too_large@json@boost@@SAXXZ":
	.long	.Lfunc_begin43@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp132@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp134@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp135@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@object_too_large@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uobject_too_large@json@boost@@@boost@@YAXAEBUobject_too_large@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0stack_overflow@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0stack_overflow@json@boost@@QEAA@XZ"
	.globl	"??0stack_overflow@json@boost@@QEAA@XZ" # -- Begin function ??0stack_overflow@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0stack_overflow@json@boost@@QEAA@XZ": # @"??0stack_overflow@json@boost@@QEAA@XZ"
.Lfunc_begin44:
.seh_proc "??0stack_overflow@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0P@EODJGPIM@stack?5overflow?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp136:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp137:
# %bb.1:
	lea	rax, [rip + "??_7stack_overflow@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0stack_overflow@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0stack_overflow@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0stack_overflow@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0stack_overflow@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0stack_overflow@json@boost@@QEAA@XZ@4HA"
.LBB72_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end44:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0stack_overflow@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0stack_overflow@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0stack_overflow@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0stack_overflow@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0stack_overflow@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0stack_overflow@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0stack_overflow@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0stack_overflow@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin44@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp136@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp137@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0stack_overflow@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@stack_overflow@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@stack_overflow@json@boost@@SAXXZ"
	.globl	"?raise@stack_overflow@json@boost@@SAXXZ" # -- Begin function ?raise@stack_overflow@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@stack_overflow@json@boost@@SAXXZ": # @"?raise@stack_overflow@json@boost@@SAXXZ"
.Lfunc_begin45:
.seh_proc "?raise@stack_overflow@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DB@FJEPCAAF@static?5void?5boost?3?3json?3?3stack_o@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 232
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0P@EODJGPIM@stack?5overflow?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp138:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp139:
# %bb.1:
	lea	rax, [rip + "??_7stack_overflow@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp140:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp141:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@stack_overflow@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@stack_overflow@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA"
.LBB73_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@stack_overflow@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA"
.LBB73_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end45:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@stack_overflow@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@stack_overflow@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@stack_overflow@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@stack_overflow@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@stack_overflow@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@stack_overflow@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@stack_overflow@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@stack_overflow@json@boost@@SAXXZ":
	.long	.Lfunc_begin45@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp138@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp140@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp141@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@stack_overflow@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ustack_overflow@json@boost@@@boost@@YAXAEBUstack_overflow@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0string_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0string_required_error@json@boost@@QEAA@XZ"
	.globl	"??0string_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0string_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0string_required_error@json@boost@@QEAA@XZ": # @"??0string_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin46:
.seh_proc "??0string_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BA@FBELEMIP@string?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp142:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp143:
# %bb.1:
	lea	rax, [rip + "??_7string_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0string_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0string_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0string_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0string_required_error@json@boost@@QEAA@XZ@4HA"
.LBB75_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end46:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0string_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0string_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0string_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0string_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin46@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp142@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp143@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0string_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@string_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@string_required_error@json@boost@@SAXXZ"
	.globl	"?raise@string_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@string_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@string_required_error@json@boost@@SAXXZ": # @"?raise@string_required_error@json@boost@@SAXXZ"
.Lfunc_begin47:
.seh_proc "?raise@string_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DI@NDNGBAK@static?5void?5boost?3?3json?3?3string_@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 249
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BA@FBELEMIP@string?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp144:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp145:
# %bb.1:
	lea	rax, [rip + "??_7string_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp146:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp147:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@string_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@string_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@string_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@string_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@string_required_error@json@boost@@SAXXZ@4HA"
.LBB76_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@string_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@string_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@string_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@string_required_error@json@boost@@SAXXZ@4HA"
.LBB76_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end47:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@string_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@string_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@string_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@string_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@string_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@string_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@string_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@string_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@string_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin47@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp144@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp146@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp147@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@string_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ustring_required_error@json@boost@@@boost@@YAXAEBUstring_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0string_too_large@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0string_too_large@json@boost@@QEAA@XZ"
	.globl	"??0string_too_large@json@boost@@QEAA@XZ" # -- Begin function ??0string_too_large@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0string_too_large@json@boost@@QEAA@XZ": # @"??0string_too_large@json@boost@@QEAA@XZ"
.Lfunc_begin48:
.seh_proc "??0string_too_large@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp148:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp149:
# %bb.1:
	lea	rax, [rip + "??_7string_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string_too_large@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0string_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0string_too_large@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0string_too_large@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0string_too_large@json@boost@@QEAA@XZ@4HA"
.LBB78_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end48:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0string_too_large@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string_too_large@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0string_too_large@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string_too_large@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string_too_large@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string_too_large@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0string_too_large@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0string_too_large@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin48@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp148@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp149@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0string_too_large@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@string_too_large@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@string_too_large@json@boost@@SAXXZ"
	.globl	"?raise@string_too_large@json@boost@@SAXXZ" # -- Begin function ?raise@string_too_large@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@string_too_large@json@boost@@SAXXZ": # @"?raise@string_too_large@json@boost@@SAXXZ"
.Lfunc_begin49:
.seh_proc "?raise@string_too_large@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DD@CDJELGPJ@static?5void?5boost?3?3json?3?3string_@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 266
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp150:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp151:
# %bb.1:
	lea	rax, [rip + "??_7string_too_large@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp152:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp153:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@string_too_large@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@string_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@string_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@string_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@string_too_large@json@boost@@SAXXZ@4HA"
.LBB79_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@string_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@string_too_large@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@string_too_large@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@string_too_large@json@boost@@SAXXZ@4HA"
.LBB79_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end49:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@string_too_large@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@string_too_large@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@string_too_large@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@string_too_large@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@string_too_large@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@string_too_large@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@string_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@string_too_large@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@string_too_large@json@boost@@SAXXZ":
	.long	.Lfunc_begin49@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp150@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp152@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp153@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@string_too_large@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ustring_too_large@json@boost@@@boost@@YAXAEBUstring_too_large@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0uint64_required_error@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0uint64_required_error@json@boost@@QEAA@XZ"
	.globl	"??0uint64_required_error@json@boost@@QEAA@XZ" # -- Begin function ??0uint64_required_error@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0uint64_required_error@json@boost@@QEAA@XZ": # @"??0uint64_required_error@json@boost@@QEAA@XZ"
.Lfunc_begin50:
.seh_proc "??0uint64_required_error@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rdx, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rax, [rip + "??_C@_0BA@NOPBDEBK@uint64?5required?$AA@"]
	mov	qword ptr [rbp - 16], rax
	mov	byte ptr [rbp - 8], 1
.Ltmp154:
	lea	rcx, [rbp - 16]
	call	__std_exception_copy
.Ltmp155:
# %bb.1:
	lea	rax, [rip + "??_7uint64_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0uint64_required_error@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??0uint64_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@XZ@4HA"
.LBB81_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end50:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0uint64_required_error@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0uint64_required_error@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??0uint64_required_error@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0uint64_required_error@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0uint64_required_error@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0uint64_required_error@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??0uint64_required_error@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin50@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp154@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp155@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0uint64_required_error@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?raise@uint64_required_error@json@boost@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?raise@uint64_required_error@json@boost@@SAXXZ"
	.globl	"?raise@uint64_required_error@json@boost@@SAXXZ" # -- Begin function ?raise@uint64_required_error@json@boost@@SAXXZ
	.p2align	4, 0x90
"?raise@uint64_required_error@json@boost@@SAXXZ": # @"?raise@uint64_required_error@json@boost@@SAXXZ"
.Lfunc_begin51:
.seh_proc "?raise@uint64_required_error@json@boost@@SAXXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	lea	rax, [rip + "??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"]
	mov	qword ptr [rbp - 72], rax
	lea	rax, [rip + "??_C@_0DI@GCHGEDIJ@static?5void?5boost?3?3json?3?3uint64_@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], 283
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rdx, [rbp - 24]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 24], xmm0
	lea	rax, [rip + "??_C@_0BA@NOPBDEBK@uint64?5required?$AA@"]
	mov	qword ptr [rbp - 48], rax
	mov	byte ptr [rbp - 40], 1
.Ltmp156:
	lea	rcx, [rbp - 48]
	call	__std_exception_copy
.Ltmp157:
# %bb.1:
	lea	rax, [rip + "??_7uint64_required_error@json@boost@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp158:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 72]
	call	"??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp159:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?raise@uint64_required_error@json@boost@@SAXXZ")@IMGREL
	.section	.text,"xr",one_only,"?raise@uint64_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$3@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$3@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA"
.LBB82_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@uint64_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.def	 "?dtor$4@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA":
.seh_proc "?dtor$4@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA"
.LBB82_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end51:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?raise@uint64_required_error@json@boost@@SAXXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?raise@uint64_required_error@json@boost@@SAXXZ"
	.p2align	2
"$cppxdata$?raise@uint64_required_error@json@boost@@SAXXZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?raise@uint64_required_error@json@boost@@SAXXZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?raise@uint64_required_error@json@boost@@SAXXZ")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?raise@uint64_required_error@json@boost@@SAXXZ":
	.long	-1                      # ToState
	.long	"?dtor$4@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$3@?0??raise@uint64_required_error@json@boost@@SAXXZ@4HA"@IMGREL # Action
"$ip2state$?raise@uint64_required_error@json@boost@@SAXXZ":
	.long	.Lfunc_begin51@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp156@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp158@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp159@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?raise@uint64_required_error@json@boost@@SAXXZ"
                                        # -- End function
	.def	 "??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Uuint64_required_error@json@boost@@@boost@@YAXAEBUuint64_required_error@json@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1monotonic_resource@json@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1monotonic_resource@json@boost@@UEAA@XZ"
	.globl	"??1monotonic_resource@json@boost@@UEAA@XZ" # -- Begin function ??1monotonic_resource@json@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1monotonic_resource@json@boost@@UEAA@XZ": # @"??1monotonic_resource@json@boost@@UEAA@XZ"
.seh_proc "??1monotonic_resource@json@boost@@UEAA@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	lea	rax, [rip + "??_7monotonic_resource@json@boost@@6B@"]
	mov	qword ptr [rcx], rax
	mov	rcx, qword ptr [rcx + 16]
	test	rcx, rcx
	je	.LBB84_2
	.p2align	4, 0x90
.LBB84_1:                               # =>This Inner Loop Header: Depth=1
	mov	rsi, qword ptr [rcx + 8]
	call	"??3@YAXPEAX@Z"
	mov	rcx, rsi
	test	rsi, rsi
	jne	.LBB84_1
.LBB84_2:
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??1monotonic_resource@json@boost@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0monotonic_resource@json@boost@@QEAA@_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0monotonic_resource@json@boost@@QEAA@_K@Z"
	.globl	"??0monotonic_resource@json@boost@@QEAA@_K@Z" # -- Begin function ??0monotonic_resource@json@boost@@QEAA@_K@Z
	.p2align	4, 0x90
"??0monotonic_resource@json@boost@@QEAA@_K@Z": # @"??0monotonic_resource@json@boost@@QEAA@_K@Z"
# %bb.0:
	mov	rax, rcx
	lea	rcx, [rip + "??_7monotonic_resource@json@boost@@6B@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rdx - 1]
	test	rdx, rcx
	je	.LBB85_1
# %bb.2:
	mov	r8, -1
	movabs	rcx, 9223372036854775806
	cmp	rdx, rcx
	ja	.LBB85_6
# %bb.3:
	mov	r8d, 1024
	cmp	rdx, 1025
	jb	.LBB85_6
# %bb.4:
	mov	r8d, 1
	.p2align	4, 0x90
.LBB85_5:                               # =>This Inner Loop Header: Depth=1
	shr	rdx
	add	r8, r8
	test	rdx, rdx
	jne	.LBB85_5
	jmp	.LBB85_6
.LBB85_1:
	mov	r8, rdx
.LBB85_6:
	mov	qword ptr [rax + 8], r8
	mov	qword ptr [rax + 16], 0
	mov	qword ptr [rax + 32], 0
	ret
                                        # -- End function
	.def	 "??0monotonic_resource@json@boost@@QEAA@PEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0monotonic_resource@json@boost@@QEAA@PEAX_K@Z"
	.globl	"??0monotonic_resource@json@boost@@QEAA@PEAX_K@Z" # -- Begin function ??0monotonic_resource@json@boost@@QEAA@PEAX_K@Z
	.p2align	4, 0x90
"??0monotonic_resource@json@boost@@QEAA@PEAX_K@Z": # @"??0monotonic_resource@json@boost@@QEAA@PEAX_K@Z"
# %bb.0:
	mov	rax, rcx
	lea	rcx, [rip + "??_7monotonic_resource@json@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	r9, -1
	movabs	rcx, 9223372036854775806
	cmp	r8, rcx
	ja	.LBB86_4
# %bb.1:
	mov	r9d, 1024
	cmp	r8, 1025
	jb	.LBB86_4
# %bb.2:
	mov	r9d, 1
	mov	rcx, r8
	.p2align	4, 0x90
.LBB86_3:                               # =>This Inner Loop Header: Depth=1
	shr	rcx
	add	r9, r9
	test	rcx, rcx
	jne	.LBB86_3
.LBB86_4:
	mov	qword ptr [rax + 8], r9
	mov	qword ptr [rax + 16], 0
	mov	qword ptr [rax + 24], r8
	mov	qword ptr [rax + 32], rdx
	mov	qword ptr [rax + 40], rdx
	ret
                                        # -- End function
	.def	 "?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z"
	.globl	"?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z" # -- Begin function ?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z
	.p2align	4, 0x90
"?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z": # @"?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z"
.seh_proc "?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rdi, r8
	mov	r15, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 32]
	test	rcx, rcx
	je	.LBB87_3
# %bb.1:
	mov	rax, qword ptr [rsi + 40]
	lea	rdx, [rdi + rax]
	add	rdx, -1
	mov	rax, rdi
	neg	rax
	and	rax, rdx
	lea	rdx, [rax + r15]
	add	rcx, qword ptr [rsi + 24]
	cmp	rdx, rcx
	ja	.LBB87_3
# %bb.2:
	mov	qword ptr [rsi + 40], rdx
	test	rax, rax
	jne	.LBB87_16
.LBB87_3:
	mov	rcx, qword ptr [rsi + 16]
	test	rcx, rcx
	je	.LBB87_6
# %bb.4:
	mov	rbx, qword ptr [rcx + 16]
	mov	rax, qword ptr [rcx + 24]
	lea	rdx, [rdi + rax]
	add	rdx, -1
	mov	rax, rdi
	neg	rax
	and	rax, rdx
	lea	rdx, [rax + r15]
	add	rbx, qword ptr [rcx]
	cmp	rdx, rbx
	ja	.LBB87_6
# %bb.5:
	mov	qword ptr [rcx + 24], rdx
	test	rax, rax
	jne	.LBB87_16
.LBB87_6:
	movabs	r14, 9223372036854775806
	mov	rbx, qword ptr [rsi + 8]
	cmp	rbx, r15
	jae	.LBB87_12
# %bb.7:
	lea	rax, [r15 - 1]
	mov	rbx, r15
	test	r15, rax
	je	.LBB87_12
# %bb.8:
	mov	rbx, -1
	cmp	r15, r14
	ja	.LBB87_12
# %bb.9:
	mov	ebx, 1024
	cmp	r15, 1025
	jb	.LBB87_12
# %bb.10:
	mov	ebx, 1
	mov	rax, r15
	.p2align	4, 0x90
.LBB87_11:                              # =>This Inner Loop Header: Depth=1
	shr	rax
	add	rbx, rbx
	test	rax, rax
	jne	.LBB87_11
.LBB87_12:
	lea	rcx, [rbx + 32]
	call	"??2@YAPEAX_K@Z"
	mov	rcx, qword ptr [rsi + 16]
	lea	rdx, [rax + 32]
	mov	qword ptr [rax], rbx
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [rax + 16], rdx
	mov	qword ptr [rax + 24], rdx
	mov	qword ptr [rsi + 16], rax
	lea	rcx, [rdi + rax]
	add	rcx, 31
	neg	rdi
	and	rdi, rcx
	add	r15, rdi
	lea	rcx, [rax + rbx]
	add	rcx, 32
	cmp	r15, rcx
	jbe	.LBB87_14
# %bb.13:
	xor	eax, eax
	jmp	.LBB87_15
.LBB87_14:
	mov	qword ptr [rax + 24], r15
	mov	rax, rdi
.LBB87_15:
	cmp	rbx, r14
	lea	rcx, [rbx + rbx]
	mov	rdx, -1
	cmova	rcx, rdx
	mov	qword ptr [rsi + 8], rcx
.LBB87_16:
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z"
	.globl	"?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z" # -- Begin function ?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z
	.p2align	4, 0x90
"?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z": # @"?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z"
	.globl	"?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z" # -- Begin function ?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z
	.p2align	4, 0x90
"?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z": # @"?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z"
# %bb.0:
	cmp	rcx, rdx
	sete	al
	ret
                                        # -- End function
	.def	 "??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
	.globl	"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z" # -- Begin function ??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z
	.p2align	4, 0x90
"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z": # @"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
.Lfunc_begin52:
.seh_proc "??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rax, qword ptr [rdx + 16]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rcx], rax
	test	al, 1
	je	.LBB90_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB90_2:
	mov	byte ptr [rcx + 8], 1
	mov	qword ptr [rcx + 16], 0
	mov	rdx, qword ptr [rsi + 8]
	test	rdx, rdx
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	je	.LBB90_4
# %bb.3:
.Ltmp160:
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
.Ltmp161:
.LBB90_4:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rdi + 16]
	mov	rax, qword ptr [rsi + 16]
	mov	eax, dword ptr [rax]
	and	eax, 3
	mov	rdx, rsi
	cmp	eax, 2
	jne	.LBB90_6
# %bb.5:
	call	"??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
	jmp	.LBB90_7
.LBB90_6:
	call	"??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
.LBB90_7:
	mov	rax, rdi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z@4HA":
.seh_proc "?dtor$8@?0???0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z@4HA"
.LBB90_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB90_12
# %bb.9:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB90_12
# %bb.10:
	cmp	rax, 1
	jne	.LBB90_12
# %bb.11:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB90_12:
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end52:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z":
	.long	.Lfunc_begin52@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp160@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp161@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
                                        # -- End function
	.def	 "??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
	.globl	"??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z" # -- Begin function ??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z
	.p2align	4, 0x90
"??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z": # @"??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
.seh_proc "??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rsi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	mov	qword ptr [rdx], 0
	mov	rdx, rax
	add	rdx, rax
	je	.LBB91_23
# %bb.1:
	lea	rax, [rax + 2*rax]
	shl	rax, 4
	add	rax, rsi
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	mov	rax, qword ptr [rcx]
	lea	r14, [rax + 32]
	test	rax, rax
	cmove	r14, rax
	movabs	rbp, 1099511628211
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	jmp	.LBB91_2
	.p2align	4, 0x90
.LBB91_20:                              #   in Loop: Header=BB91_2 Depth=1
	mov	dword ptr [r14 + 36], esi
	mov	rax, r14
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	sub	rax, qword ptr [rcx]
	add	rax, -32
	shr	rax, 3
	imul	eax, eax, -858993459
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	dword ptr [rdx + 4*rdi], eax
	add	r14, 40
.LBB91_21:                              #   in Loop: Header=BB91_2 Depth=1
	mov	rsi, qword ptr [rsp + 64] # 8-byte Reload
	cmp	rsi, qword ptr [rsp + 48] # 8-byte Folded Reload
	je	.LBB91_22
.LBB91_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_7 Depth 2
                                        #     Child Loop BB91_11 Depth 2
                                        #     Child Loop BB91_17 Depth 2
	mov	rax, qword ptr [rsi + 40]
	mov	qword ptr [r14 + 16], rax
	movups	xmm0, xmmword ptr [rsi + 24]
	movups	xmmword ptr [r14], xmm0
	mov	qword ptr [rsi + 24], 0
	mov	byte ptr [rsi + 32], 7
	mov	ebx, dword ptr [rsi + 12]
	mov	rdx, qword ptr [rsi + 16]
	mov	byte ptr [rsi + 8], -126
	mov	qword ptr [r14 + 24], rdx
	mov	dword ptr [r14 + 32], ebx
	mov	r9, qword ptr [rcx]
	test	r9, r9
	je	.LBB91_4
# %bb.3:                                #   in Loop: Header=BB91_2 Depth=1
	mov	rcx, qword ptr [r9 + 24]
.LBB91_4:                               #   in Loop: Header=BB91_2 Depth=1
	movabs	rax, -3750763034362895579
	add	rcx, rax
	test	ebx, ebx
	je	.LBB91_12
# %bb.5:                                #   in Loop: Header=BB91_2 Depth=1
	mov	r10d, ebx
	lea	r8, [r10 - 1]
	mov	rdi, r10
	and	rdi, 3
	je	.LBB91_9
# %bb.6:                                #   in Loop: Header=BB91_2 Depth=1
	xor	ebx, ebx
	.p2align	4, 0x90
.LBB91_7:                               #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rax, byte ptr [rdx + rbx]
	xor	rcx, rax
	imul	rcx, rbp
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB91_7
# %bb.8:                                #   in Loop: Header=BB91_2 Depth=1
	sub	r10, rbx
	add	rdx, rbx
	mov	rbx, r10
.LBB91_9:                               #   in Loop: Header=BB91_2 Depth=1
	cmp	r8, 3
	jb	.LBB91_12
# %bb.10:                               #   in Loop: Header=BB91_2 Depth=1
	xor	edi, edi
	.p2align	4, 0x90
.LBB91_11:                              #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rax, byte ptr [rdx + rdi]
	xor	rax, rcx
	imul	rax, rbp
	movsx	rcx, byte ptr [rdx + rdi + 1]
	xor	rcx, rax
	imul	rcx, rbp
	movsx	rax, byte ptr [rdx + rdi + 2]
	xor	rax, rcx
	imul	rax, rbp
	movsx	rcx, byte ptr [rdx + rdi + 3]
	xor	rcx, rax
	imul	rcx, rbp
	add	rdi, 4
	cmp	rbx, rdi
	jne	.LBB91_11
.LBB91_12:                              #   in Loop: Header=BB91_2 Depth=1
	lea	rax, [r9 + 32]
	test	r9, r9
	cmove	rax, r9
	je	.LBB91_13
# %bb.14:                               #   in Loop: Header=BB91_2 Depth=1
	mov	rdx, qword ptr [r9 + 8]
	jmp	.LBB91_15
	.p2align	4, 0x90
.LBB91_13:                              #   in Loop: Header=BB91_2 Depth=1
	xor	edx, edx
.LBB91_15:                              #   in Loop: Header=BB91_2 Depth=1
	add	rsi, 48
	mov	qword ptr [rsp + 64], rsi # 8-byte Spill
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rax + 8*rdx]
	mov	rdx, qword ptr [r9 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	rdi, rax
	mov	qword ptr [rsp + 56], rsi # 8-byte Spill
	mov	esi, dword ptr [rsi + 4*rax]
	cmp	esi, -1
	je	.LBB91_20
# %bb.16:                               #   in Loop: Header=BB91_2 Depth=1
	mov	ebx, dword ptr [r14 + 32]
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	r12, qword ptr [rax]
	add	r12, 32
	mov	eax, esi
	jmp	.LBB91_17
	.p2align	4, 0x90
.LBB91_19:                              #   in Loop: Header=BB91_17 Depth=2
	mov	eax, dword ptr [r12 + 8*r15 + 36]
	cmp	eax, -1
	je	.LBB91_20
.LBB91_17:                              #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	r13d, eax
	lea	r15, [4*r13]
	add	r15, r13
	cmp	dword ptr [r12 + 8*r15 + 32], ebx
	jne	.LBB91_19
# %bb.18:                               #   in Loop: Header=BB91_17 Depth=2
	mov	rcx, qword ptr [r12 + 8*r15 + 24]
	mov	rdx, qword ptr [r14 + 24]
	mov	r8, rbx
	call	memcmp
	test	eax, eax
	jne	.LBB91_19
# %bb.24:                               #   in Loop: Header=BB91_2 Depth=1
	lea	rdi, [4*r13]
	add	rdi, r13
	lea	rcx, [r12 + 8*rdi]
	mov	eax, dword ptr [r12 + 8*rdi + 36]
	mov	dword ptr [r14 + 36], eax
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [r14 + 32]
	mov	qword ptr [r12 + 8*rdi + 32], rax
	movups	xmm0, xmmword ptr [r14]
	movups	xmm1, xmmword ptr [r14 + 16]
	movups	xmmword ptr [r12 + 8*rdi + 16], xmm1
	movups	xmmword ptr [r12 + 8*rdi], xmm0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB91_21
.LBB91_22:
	mov	rax, qword ptr [rcx]
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	sub	r14, rcx
	sar	r14, 3
	movabs	rcx, -3689348814741910323
	imul	rcx, r14
	mov	qword ptr [rax], rcx
.LBB91_23:
	add	rsp, 72
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??$build@$0A@@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
	.globl	"??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z" # -- Begin function ??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z
	.p2align	4, 0x90
"??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z": # @"??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
.seh_proc "??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rbx, rcx
	mov	r14, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	mov	qword ptr [rdx], 0
	mov	rcx, rax
	add	rcx, rax
	je	.LBB92_24
# %bb.1:
	lea	rax, [rax + 2*rax]
	shl	rax, 4
	add	rax, r14
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, qword ptr [rbx]
	lea	r13, [rax + 32]
	test	rax, rax
	cmove	r13, rax
	movabs	rbp, 1099511628211
	mov	qword ptr [rsp + 32], rbx # 8-byte Spill
	jmp	.LBB92_2
	.p2align	4, 0x90
.LBB92_21:                              #   in Loop: Header=BB92_2 Depth=1
	mov	dword ptr [r13 + 36], r14d
	mov	rax, r13
	sub	rax, qword ptr [rbx]
	add	rax, -32
	shr	rax, 3
	imul	eax, eax, -858993459
	mov	rcx, qword ptr [rsp + 56] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	dword ptr [rcx + 4*rdx], eax
	add	r13, 40
.LBB92_22:                              #   in Loop: Header=BB92_2 Depth=1
	mov	r14, qword ptr [rsp + 64] # 8-byte Reload
	cmp	r14, qword ptr [rsp + 40] # 8-byte Folded Reload
	je	.LBB92_23
.LBB92_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_8 Depth 2
                                        #     Child Loop BB92_12 Depth 2
                                        #     Child Loop BB92_18 Depth 2
	lea	rsi, [r14 + 24]
	mov	rax, qword ptr [r14 + 40]
	mov	qword ptr [r13 + 16], rax
	movups	xmm0, xmmword ptr [r14 + 24]
	movups	xmmword ptr [r13], xmm0
	mov	qword ptr [r14 + 24], 0
	mov	byte ptr [r14 + 32], 7
	mov	eax, dword ptr [r14 + 12]
	mov	rcx, qword ptr [r14 + 16]
	mov	byte ptr [r14 + 8], -126
	mov	qword ptr [r13 + 24], rcx
	mov	dword ptr [r13 + 32], eax
	mov	rcx, r14
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rdx, qword ptr [r13 + 24]
	mov	eax, dword ptr [r13 + 32]
	mov	r9, qword ptr [rbx]
	test	r9, r9
	je	.LBB92_3
# %bb.4:                                #   in Loop: Header=BB92_2 Depth=1
	mov	rcx, qword ptr [r9 + 24]
	jmp	.LBB92_5
	.p2align	4, 0x90
.LBB92_3:                               #   in Loop: Header=BB92_2 Depth=1
	mov	rcx, rbx
.LBB92_5:                               #   in Loop: Header=BB92_2 Depth=1
	movabs	rbx, -3750763034362895579
	add	rcx, rbx
	test	eax, eax
	je	.LBB92_13
# %bb.6:                                #   in Loop: Header=BB92_2 Depth=1
	lea	r8, [rax - 1]
	mov	rsi, rax
	and	rsi, 3
	je	.LBB92_10
# %bb.7:                                #   in Loop: Header=BB92_2 Depth=1
	xor	edi, edi
	.p2align	4, 0x90
.LBB92_8:                               #   Parent Loop BB92_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rbx, byte ptr [rdx + rdi]
	xor	rcx, rbx
	imul	rcx, rbp
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB92_8
# %bb.9:                                #   in Loop: Header=BB92_2 Depth=1
	sub	rax, rdi
	add	rdx, rdi
.LBB92_10:                              #   in Loop: Header=BB92_2 Depth=1
	cmp	r8, 3
	jb	.LBB92_13
# %bb.11:                               #   in Loop: Header=BB92_2 Depth=1
	xor	edi, edi
	.p2align	4, 0x90
.LBB92_12:                              #   Parent Loop BB92_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rbx, byte ptr [rdx + rdi]
	xor	rbx, rcx
	imul	rbx, rbp
	movsx	rcx, byte ptr [rdx + rdi + 1]
	xor	rcx, rbx
	imul	rcx, rbp
	movsx	rbx, byte ptr [rdx + rdi + 2]
	xor	rbx, rcx
	imul	rbx, rbp
	movsx	rcx, byte ptr [rdx + rdi + 3]
	xor	rcx, rbx
	imul	rcx, rbp
	add	rdi, 4
	cmp	rax, rdi
	jne	.LBB92_12
.LBB92_13:                              #   in Loop: Header=BB92_2 Depth=1
	lea	rax, [r9 + 32]
	test	r9, r9
	cmove	rax, r9
	je	.LBB92_14
# %bb.15:                               #   in Loop: Header=BB92_2 Depth=1
	mov	rdx, qword ptr [r9 + 8]
	jmp	.LBB92_16
	.p2align	4, 0x90
.LBB92_14:                              #   in Loop: Header=BB92_2 Depth=1
	xor	edx, edx
.LBB92_16:                              #   in Loop: Header=BB92_2 Depth=1
	mov	rbx, qword ptr [rsp + 32] # 8-byte Reload
	add	r14, 48
	mov	qword ptr [rsp + 64], r14 # 8-byte Spill
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rax + 8*rdx]
	mov	rdx, qword ptr [r9 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	qword ptr [rsp + 56], rsi # 8-byte Spill
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	mov	r14d, dword ptr [rsi + 4*rax]
	cmp	r14d, -1
	je	.LBB92_21
# %bb.17:                               #   in Loop: Header=BB92_2 Depth=1
	mov	esi, dword ptr [r13 + 32]
	mov	r12, qword ptr [rbx]
	add	r12, 32
	mov	eax, r14d
	jmp	.LBB92_18
	.p2align	4, 0x90
.LBB92_20:                              #   in Loop: Header=BB92_18 Depth=2
	mov	eax, dword ptr [r12 + 8*r15 + 36]
	cmp	eax, -1
	je	.LBB92_21
.LBB92_18:                              #   Parent Loop BB92_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, eax
	lea	r15, [rdi + 4*rdi]
	cmp	dword ptr [r12 + 8*r15 + 32], esi
	jne	.LBB92_20
# %bb.19:                               #   in Loop: Header=BB92_18 Depth=2
	mov	rcx, qword ptr [r12 + 8*r15 + 24]
	mov	rdx, qword ptr [r13 + 24]
	mov	r8, rsi
	call	memcmp
	test	eax, eax
	jne	.LBB92_20
# %bb.25:                               #   in Loop: Header=BB92_2 Depth=1
	lea	rsi, [rdi + 4*rdi]
	lea	rcx, [r12 + 8*rsi]
	mov	eax, dword ptr [r12 + 8*rsi + 36]
	mov	dword ptr [r13 + 36], eax
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [r13 + 32]
	mov	qword ptr [r12 + 8*rsi + 32], rax
	movups	xmm0, xmmword ptr [r13]
	movups	xmm1, xmmword ptr [r13 + 16]
	movups	xmmword ptr [r12 + 8*rsi + 16], xmm1
	movups	xmmword ptr [r12 + 8*rsi], xmm0
	jmp	.LBB92_22
.LBB92_23:
	mov	rax, qword ptr [rbx]
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	sub	r13, rcx
	sar	r13, 3
	movabs	rcx, -3689348814741910323
	imul	rcx, r13
	mov	qword ptr [rax], rcx
.LBB92_24:
	add	rsp, 72
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??$build@$00@object_impl@detail@json@boost@@QEAAX$$QEAVunchecked_object@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0object@json@boost@@AEAA@PEBVobject_test@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000000000000030000000000000000 # -- Begin function ??0object@json@boost@@AEAA@PEBVobject_test@12@@Z
	.section	.rdata,"dr",discard,__xmm@00000000000000030000000000000000
	.p2align	4
__xmm@00000000000000030000000000000000:
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	3                       # 0x3
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
	.globl	"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
	.p2align	4, 0x90
"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z": # @"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
.Lfunc_begin53:
.seh_proc "??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rcx], 0
	mov	byte ptr [rcx + 8], 1
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB93_1
.LBB93_3:
	lea	rcx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	mov	rax, qword ptr [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
.Ltmp162:
	mov	edx, 164
	mov	r8d, 8
	call	qword ptr [rax + 8]
.Ltmp163:
# %bb.4:
	movaps	xmm0, xmmword ptr [rip + __xmm@00000000000000030000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0]
	movups	xmmword ptr [rax], xmm0
	mov	ecx, 1
	lea	rdx, [rax + 32]
	test	rax, rax
	cmove	rdx, rax
	movq	xmm0, rcx
	mov	ecx, 120
	cmove	rcx, rax
	movdqu	xmmword ptr [rax + 16], xmm0
	mov	dword ptr [rdx + rcx + 8], -1
	mov	qword ptr [rdx + rcx], -1
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rcx + 16], rax
	mov	rax, rcx
	add	rsp, 48
	pop	rbp
	ret
.LBB93_1:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB93_3
# %bb.2:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB93_3
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@AEAA@PEBVobject_test@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0object@json@boost@@AEAA@PEBVobject_test@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0object@json@boost@@AEAA@PEBVobject_test@12@@Z@4HA":
.seh_proc "?dtor$5@?0???0object@json@boost@@AEAA@PEBVobject_test@12@@Z@4HA"
.LBB93_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB93_9
# %bb.6:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB93_9
# %bb.7:
	cmp	rax, 1
	jne	.LBB93_9
# %bb.8:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB93_9:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end53:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@AEAA@PEBVobject_test@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@AEAA@PEBVobject_test@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@AEAA@PEBVobject_test@12@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@AEAA@PEBVobject_test@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0object@json@boost@@AEAA@PEBVobject_test@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@AEAA@PEBVobject_test@12@@Z":
	.long	.Lfunc_begin53@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp162@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp163@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@AEAA@PEBVobject_test@12@@Z"
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z"
	.globl	"??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z" # -- Begin function ??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z": # @"??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z"
.seh_proc "??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rdx], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 1
	mov	qword ptr [rcx + 16], 0
	mov	rcx, qword ptr [rdx]
	test	cl, 1
	je	.LBB94_4
# %bb.1:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB94_4
# %bb.2:
	cmp	rax, 1
	jne	.LBB94_4
# %bb.3:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB94_4:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@Vstorage_ptr@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.globl	"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z" # -- Begin function ??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z": # @"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
.Lfunc_begin54:
.seh_proc "??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 1
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	test	rdx, rdx
	je	.LBB95_2
# %bb.1:
.Ltmp164:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
.Ltmp165:
.LBB95_2:
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB95_6
# %bb.3:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB95_6
# %bb.4:
	cmp	rax, 1
	jne	.LBB95_6
# %bb.5:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB95_6:
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$7@?0???0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA"
.LBB95_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB95_11
# %bb.8:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB95_11
# %bb.9:
	cmp	rax, 1
	jne	.LBB95_11
# %bb.10:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB95_11:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB95_15
# %bb.12:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB95_15
# %bb.13:
	cmp	rax, 1
	jne	.LBB95_15
# %bb.14:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB95_15:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end54:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0???0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z":
	.long	.Lfunc_begin54@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp164@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp165@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@_KVstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@$$QEAV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@$$QEAV012@@Z"
	.globl	"??0object@json@boost@@QEAA@$$QEAV012@@Z" # -- Begin function ??0object@json@boost@@QEAA@$$QEAV012@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@$$QEAV012@@Z": # @"??0object@json@boost@@QEAA@$$QEAV012@@Z"
# %bb.0:
	mov	rax, rcx
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rax], rcx
	test	cl, 1
	je	.LBB96_2
# %bb.1:
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
.LBB96_2:
	mov	byte ptr [rax + 8], 1
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdx + 16], 0
	mov	qword ptr [rax + 16], rcx
	ret
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.globl	"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z" # -- Begin function ??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z": # @"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Lfunc_begin55:
.seh_proc "??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r15, r8
	mov	r14, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 1
	mov	qword ptr [rcx + 16], 0
	mov	rdi, qword ptr [rdx]
	test	rdi, rdi
	je	.LBB97_2
# %bb.1:
	and	rdi, -4
	jmp	.LBB97_5
.LBB97_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB97_3
.LBB97_5:
	mov	rbx, qword ptr [rsi]
	test	rbx, rbx
	je	.LBB97_7
# %bb.6:
	and	rbx, -4
	jmp	.LBB97_10
.LBB97_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB97_8
.LBB97_10:
	lea	r12, [rsi + 16]
	cmp	rbx, rdi
	je	.LBB97_12
# %bb.11:
	mov	rax, qword ptr [rbx]
	mov	rcx, rbx
	mov	rdx, rdi
	call	qword ptr [rax + 24]
	test	al, al
	je	.LBB97_13
.LBB97_12:
	mov	rax, qword ptr [r12]
	mov	rcx, qword ptr [r14 + 16]
	mov	qword ptr [r12], rcx
	mov	qword ptr [r14 + 16], rax
	jmp	.LBB97_24
.LBB97_13:
	mov	rax, qword ptr [r14 + 16]
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB97_14
# %bb.15:
	mov	rax, qword ptr [rax]
	shl	rax, 3
	lea	rax, [rax + 4*rax]
	movabs	rdx, 7378697629483820647
	imul	rdx
	mov	rax, rdx
	shr	rax, 63
	sar	rdx, 4
	add	rdx, rax
	jmp	.LBB97_16
.LBB97_14:
	xor	edx, edx
.LBB97_16:
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB97_17
# %bb.18:
	mov	rax, qword ptr [rax]
	jmp	.LBB97_19
.LBB97_17:
	xor	eax, eax
.LBB97_19:
	mov	qword ptr [rbp - 24], r12 # 8-byte Spill
	mov	qword ptr [rbp - 32], r15 # 8-byte Spill
	mov	ebx, 2147483646
	sub	rbx, rax
	cmp	rdx, rbx
	mov	qword ptr [rbp - 16], rsi # 8-byte Spill
	ja	.LBB97_20
# %bb.22:
	add	rax, rdx
	lea	rbx, [rip + "??_7place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"]
	mov	qword ptr [rbp - 64], rbx
	mov	qword ptr [rbp - 56], rcx
	mov	qword ptr [rbp - 48], rdx
	mov	qword ptr [rbp - 40], rsi
.Ltmp166:
	lea	r8, [rbp - 64]
	mov	rcx, rsi
	mov	rdx, rax
	call	"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
.Ltmp167:
# %bb.23:
	mov	r15, qword ptr [rbp - 32] # 8-byte Reload
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
.LBB97_24:
	mov	rcx, qword ptr [r15]
	test	cl, 1
	je	.LBB97_28
# %bb.25:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB97_28
# %bb.26:
	cmp	rax, 1
	jne	.LBB97_28
# %bb.27:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB97_28:
	mov	rax, rsi
	add	rsp, 96
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB97_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB97_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB97_5
.LBB97_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB97_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB97_10
.LBB97_20:
.Ltmp168:
	call	"?raise@object_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp169:
# %bb.21:
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$29@?0???0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$29@?0???0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$29@?0???0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"
.LBB97_29:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	cmp	qword ptr [rax], 0
	je	.LBB97_32
# %bb.30:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB97_32
# %bb.31:
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB97_32:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB97_36
# %bb.33:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB97_36
# %bb.34:
	cmp	rax, 1
	jne	.LBB97_36
# %bb.35:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB97_36:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB97_40
# %bb.37:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB97_40
# %bb.38:
	cmp	rax, 1
	jne	.LBB97_40
# %bb.39:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB97_40:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end55:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$29@?0???0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin55@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp166@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp167@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp168@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp169@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@V?$pilfered@Vobject@json@boost@@@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@V?$pilfered@Vobject@json@boost@@@2@@Z"
	.globl	"??0object@json@boost@@QEAA@V?$pilfered@Vobject@json@boost@@@2@@Z" # -- Begin function ??0object@json@boost@@QEAA@V?$pilfered@Vobject@json@boost@@@2@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@V?$pilfered@Vobject@json@boost@@@2@@Z": # @"??0object@json@boost@@QEAA@V?$pilfered@Vobject@json@boost@@@2@@Z"
# %bb.0:
	mov	rax, rcx
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rdx], 0
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 1
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdx + 16], 0
	mov	qword ptr [rax + 16], rcx
	ret
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@@Z"
	.globl	"??0object@json@boost@@QEAA@AEBV012@@Z" # -- Begin function ??0object@json@boost@@QEAA@AEBV012@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@AEBV012@@Z": # @"??0object@json@boost@@QEAA@AEBV012@@Z"
.Lfunc_begin56:
.seh_proc "??0object@json@boost@@QEAA@AEBV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rcx], rax
	test	al, 1
	je	.LBB99_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB99_2:
	mov	byte ptr [rcx + 8], 1
	lea	rax, [rcx + 16]
	mov	qword ptr [rbp - 8], rax # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	mov	rax, qword ptr [rdx + 16]
	lea	rsi, [rax + 32]
	test	rax, rax
	cmove	rsi, rax
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	je	.LBB99_3
# %bb.6:
	mov	rax, qword ptr [rax]
	shl	rax, 3
	lea	rax, [rax + 4*rax]
	movabs	rdx, 7378697629483820647
	imul	rdx
	mov	rax, rdx
	shr	rax, 63
	sar	rdx, 4
	add	rdx, rax
	cmp	rdx, 2147483647
	jb	.LBB99_4
# %bb.7:
.Ltmp170:
	call	"?raise@object_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp171:
# %bb.8:
.LBB99_3:
	xor	edx, edx
.LBB99_4:
	lea	rax, [rip + "??_7place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"]
	mov	qword ptr [rbp - 48], rax
	mov	qword ptr [rbp - 40], rsi
	mov	qword ptr [rbp - 32], rdx
	mov	qword ptr [rbp - 24], rcx
.Ltmp172:
	lea	r8, [rbp - 48]
	call	"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
.Ltmp173:
# %bb.5:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 88
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@QEAA@AEBV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???0object@json@boost@@QEAA@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???0object@json@boost@@QEAA@AEBV012@@Z@4HA":
.seh_proc "?dtor$9@?0???0object@json@boost@@QEAA@AEBV012@@Z@4HA"
.LBB99_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	cmp	qword ptr [rax], 0
	je	.LBB99_12
# %bb.10:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB99_12
# %bb.11:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rdx, rsi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB99_12:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB99_16
# %bb.13:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB99_16
# %bb.14:
	cmp	rax, 1
	jne	.LBB99_16
# %bb.15:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB99_16:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end56:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@QEAA@AEBV012@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@QEAA@AEBV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@QEAA@AEBV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@QEAA@AEBV012@@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@QEAA@AEBV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$9@?0???0object@json@boost@@QEAA@AEBV012@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@QEAA@AEBV012@@Z":
	.long	.Lfunc_begin56@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp170@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp173@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@@Z"
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.globl	"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z" # -- Begin function ??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z": # @"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Lfunc_begin57:
.seh_proc "??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 32], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 1
	lea	rax, [rcx + 16]
	mov	qword ptr [rbp - 24], rax # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	mov	rax, qword ptr [rdx + 16]
	lea	r8, [rax + 32]
	test	rax, rax
	cmove	r8, rax
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	je	.LBB100_1
# %bb.8:
	mov	rax, qword ptr [rax]
	shl	rax, 3
	lea	rax, [rax + 4*rax]
	movabs	rdx, 7378697629483820647
	imul	rdx
	mov	rax, rdx
	shr	rax, 63
	sar	rdx, 4
	add	rdx, rax
	cmp	rdx, 2147483647
	jb	.LBB100_2
# %bb.9:
.Ltmp174:
	call	"?raise@object_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp175:
# %bb.10:
.LBB100_1:
	xor	edx, edx
.LBB100_2:
	lea	rax, [rip + "??_7place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"]
	mov	qword ptr [rbp - 64], rax
	mov	qword ptr [rbp - 56], r8
	mov	qword ptr [rbp - 48], rdx
	mov	qword ptr [rbp - 40], rcx
.Ltmp176:
	lea	r8, [rbp - 64]
	call	"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
.Ltmp177:
# %bb.3:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB100_7
# %bb.4:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB100_7
# %bb.5:
	cmp	rax, 1
	jne	.LBB100_7
# %bb.6:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB100_7:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 96
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$11@?0???0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"
.LBB100_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	cmp	qword ptr [rax], 0
	je	.LBB100_14
# %bb.12:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB100_14
# %bb.13:
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB100_14:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB100_18
# %bb.15:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB100_18
# %bb.16:
	cmp	rax, 1
	jne	.LBB100_18
# %bb.17:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB100_18:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB100_22
# %bb.19:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB100_22
# %bb.20:
	cmp	rax, 1
	jne	.LBB100_22
# %bb.21:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB100_22:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end57:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin57@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp174@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp177@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
	.globl	"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z" # -- Begin function ??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z": # @"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
.Lfunc_begin58:
.seh_proc "??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 104
	.seh_stackalloc 104
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rax, r8
	mov	rsi, qword ptr [r9]
	mov	qword ptr [rbp - 16], r9 # 8-byte Spill
	mov	qword ptr [r9], 0
	mov	qword ptr [rcx], rsi
	mov	byte ptr [rcx + 8], 1
	lea	rsi, [rcx + 16]
	mov	qword ptr [rbp - 24], rsi # 8-byte Spill
	mov	qword ptr [rcx + 16], 0
	mov	r8, qword ptr [rdx]
	mov	rdx, qword ptr [rdx + 8]
	sub	rdx, r8
	sar	rdx, 3
	movabs	rsi, 7905747460161236407
	imul	rsi, rdx
	cmp	rsi, rax
	cmova	rax, rsi
	lea	rdx, [rip + "??_7place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@"]
	mov	qword ptr [rbp - 56], rdx
	mov	qword ptr [rbp - 48], r8
	mov	qword ptr [rbp - 40], rsi
	mov	qword ptr [rbp - 32], rcx
.Ltmp178:
	lea	r8, [rbp - 56]
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	rdx, rax
	call	"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
.Ltmp179:
# %bb.1:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB101_5
# %bb.2:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB101_5
# %bb.3:
	cmp	rax, 1
	jne	.LBB101_5
# %bb.4:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB101_5:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	add	rsp, 104
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$6@?0???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z@4HA"
.LBB101_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	cmp	qword ptr [rax], 0
	je	.LBB101_9
# %bb.7:
	mov	rcx, rax
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB101_9
# %bb.8:
	mov	rdx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB101_9:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB101_13
# %bb.10:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB101_13
# %bb.11:
	cmp	rax, 1
	jne	.LBB101_13
# %bb.12:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB101_13:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB101_17
# %bb.14:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB101_17
# %bb.15:
	cmp	rax, 1
	jne	.LBB101_17
# %bb.16:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB101_17:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end58:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	96                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z":
	.long	.Lfunc_begin58@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp178@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp179@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
	.globl	"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z" # -- Begin function ?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z
	.p2align	4, 0x90
"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z": # @"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
.Lfunc_begin59:
.seh_proc "?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 136
	.seh_stackalloc 136
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	qword ptr [rbp - 72], r8 # 8-byte Spill
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	rcx, qword ptr [rcx + 16]
	test	rcx, rcx
	je	.LBB102_1
# %bb.2:
	mov	rax, qword ptr [rcx + 8]
	cmp	rax, rdx
	jae	.LBB102_5
.LBB102_4:
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, rsi
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
	mov	rcx, qword ptr [rsi + 16]
.LBB102_5:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax
	test	rcx, rcx
	je	.LBB102_6
# %bb.7:
	mov	rax, qword ptr [rcx]
	shl	rax, 3
	lea	rax, [rax + 4*rax]
	movabs	rdx, 7378697629483820647
	imul	rdx
	mov	rax, rdx
	shr	rax, 63
	sar	rdx, 4
	add	rdx, rax
	jmp	.LBB102_8
.LBB102_1:
	xor	eax, eax
	cmp	rax, rdx
	jb	.LBB102_4
	jmp	.LBB102_5
.LBB102_6:
	xor	edx, edx
.LBB102_8:
	mov	qword ptr [rbp - 56], rdx
	mov	qword ptr [rbp - 48], rdx
	mov	byte ptr [rbp - 40], 0
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	lea	rsi, [rax + 16]
	movabs	r13, 1099511628211
	mov	qword ptr [rbp - 16], rsi # 8-byte Spill
	test	rcx, rcx
	jne	.LBB102_11
	jmp	.LBB102_10
	.p2align	4, 0x90
.LBB102_35:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	mov	dword ptr [r14 + 8*rax + 36], r12d
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	sub	rax, qword ptr [rsi]
	add	rax, -32
	shr	rax, 3
	imul	eax, eax, -858993459
	mov	rcx, qword ptr [rbp - 88] # 8-byte Reload
	mov	rdx, qword ptr [rbp - 80] # 8-byte Reload
	mov	dword ptr [rcx + 4*rdx], eax
	add	qword ptr [rbp - 48], 1
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 16]
	test	rcx, rcx
	je	.LBB102_10
.LBB102_11:
	mov	rdx, qword ptr [rcx]
	add	rdx, 1
	cmp	qword ptr [rcx + 8], rdx
	jb	.LBB102_12
	jmp	.LBB102_13
	.p2align	4, 0x90
.LBB102_10:
	mov	edx, 1
.LBB102_12:
.Ltmp180:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
.Ltmp181:
.LBB102_13:
	mov	rax, qword ptr [rbp - 64]
	mov	rax, qword ptr [rax + 16]
	lea	r14, [rax + 32]
	test	rax, rax
	cmove	r14, rax
	mov	rax, qword ptr [rbp - 48]
	lea	r12, [rax + 4*rax]
	lea	r15, [r14 + 8*r12]
	mov	rcx, qword ptr [rbp - 72] # 8-byte Reload
	mov	rax, qword ptr [rcx]
.Ltmp182:
	mov	rdx, r15
	call	qword ptr [rax]
.Ltmp183:
# %bb.14:
	test	al, al
	je	.LBB102_36
# %bb.15:
	mov	rdx, qword ptr [r14 + 8*r12 + 24]
	mov	ebx, dword ptr [r14 + 8*r12 + 32]
	mov	r9, qword ptr [rsi]
	test	r9, r9
	je	.LBB102_16
# %bb.17:
	mov	rcx, qword ptr [r9 + 24]
	jmp	.LBB102_18
	.p2align	4, 0x90
.LBB102_16:
	mov	rcx, rsi
.LBB102_18:
	movabs	rax, -3750763034362895579
	add	rcx, rax
	test	ebx, ebx
	je	.LBB102_26
# %bb.19:
	lea	r8, [rbx - 1]
	mov	rdi, rbx
	and	rdi, 3
	je	.LBB102_23
# %bb.20:
	xor	esi, esi
	.p2align	4, 0x90
.LBB102_21:                             # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rdx + rsi]
	xor	rcx, rax
	imul	rcx, r13
	add	rsi, 1
	cmp	rdi, rsi
	jne	.LBB102_21
# %bb.22:
	sub	rbx, rsi
	add	rdx, rsi
.LBB102_23:
	cmp	r8, 3
	jb	.LBB102_26
# %bb.24:
	xor	esi, esi
	.p2align	4, 0x90
.LBB102_25:                             # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rdx + rsi]
	xor	rax, rcx
	imul	rax, r13
	movsx	rcx, byte ptr [rdx + rsi + 1]
	xor	rcx, rax
	imul	rcx, r13
	movsx	rax, byte ptr [rdx + rsi + 2]
	xor	rax, rcx
	imul	rax, r13
	movsx	rcx, byte ptr [rdx + rsi + 3]
	xor	rcx, rax
	imul	rcx, r13
	add	rsi, 4
	cmp	rbx, rsi
	jne	.LBB102_25
.LBB102_26:
	lea	rdx, [r9 + 32]
	test	r9, r9
	cmove	rdx, r9
	mov	qword ptr [rbp - 24], r15 # 8-byte Spill
	mov	qword ptr [rbp - 32], r12 # 8-byte Spill
	je	.LBB102_27
# %bb.28:
	mov	rbx, qword ptr [r9 + 8]
	jmp	.LBB102_29
	.p2align	4, 0x90
.LBB102_27:
	xor	ebx, ebx
.LBB102_29:
	lea	rax, [rbx + 4*rbx]
	lea	rsi, [rdx + 8*rax]
	mov	rdx, qword ptr [r9 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	qword ptr [rbp - 88], rsi # 8-byte Spill
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	mov	r12d, dword ptr [rsi + 4*rax]
	cmp	r12d, -1
	je	.LBB102_35
# %bb.30:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	lea	r15, [r14 + 8*rax]
	add	r15, 24
	mov	esi, dword ptr [r15 + 8]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rdi, qword ptr [rax]
	add	rdi, 32
	mov	eax, r12d
	jmp	.LBB102_31
	.p2align	4, 0x90
.LBB102_34:                             #   in Loop: Header=BB102_31 Depth=1
	mov	eax, dword ptr [rdi + 8*rbx + 36]
	cmp	eax, -1
	je	.LBB102_35
.LBB102_31:                             # =>This Inner Loop Header: Depth=1
	mov	eax, eax
	lea	rbx, [rax + 4*rax]
	cmp	dword ptr [rdi + 8*rbx + 32], esi
	jne	.LBB102_34
# %bb.32:                               #   in Loop: Header=BB102_31 Depth=1
	mov	rcx, qword ptr [rdi + 8*rbx + 24]
	mov	rdx, qword ptr [r15]
	mov	r8, rsi
	call	memcmp
	test	eax, eax
	jne	.LBB102_34
# %bb.33:
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 16]
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	test	rcx, rcx
	jne	.LBB102_11
	jmp	.LBB102_10
.LBB102_36:
	mov	byte ptr [rbp - 40], 1
	lea	rcx, [rbp - 64]
	call	"??1undo_insert@object@json@boost@@QEAA@XZ"
	nop
	add	rsp, 136
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z")@IMGREL
	.section	.text,"xr",one_only,"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
	.seh_endproc
	.def	 "?dtor$37@?0??insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$37@?0??insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z@4HA":
.seh_proc "?dtor$37@?0??insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z@4HA"
.LBB102_37:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp - 64]
	call	"??1undo_insert@object@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end59:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
	.p2align	2
"$cppxdata$?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z")@IMGREL # IPToStateXData
	.long	128                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z":
	.long	-1                      # ToState
	.long	"?dtor$37@?0??insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z@4HA"@IMGREL # Action
"$ip2state$?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z":
	.long	.Lfunc_begin59@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp180@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp183@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
                                        # -- End function
	.def	 "??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.globl	"??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z" # -- Begin function ??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z
	.p2align	4, 0x90
"??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z": # @"??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
.seh_proc "??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 80
	.seh_stackalloc 80
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 72], rax
	mov	rax, qword ptr [rcx]
	mov	qword ptr [rsp + 40], rax
	test	al, 1
	je	.LBB103_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB103_2:
	lea	rcx, [rsp + 48]
	lea	r8, [rsp + 40]
	call	"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	cmp	qword ptr [rsi + 16], 0
	je	.LBB103_5
# %bb.3:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB103_5
# %bb.4:
	lea	rcx, [rsi + 16]
	mov	rdx, rsi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB103_5:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB103_9
# %bb.6:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB103_9
# %bb.7:
	cmp	rax, 1
	jne	.LBB103_9
# %bb.8:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB103_9:
	mov	rax, qword ptr [rsp + 48]
	mov	qword ptr [rsp + 48], 0
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 1
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsi + 16], rax
	mov	rcx, qword ptr [rsp + 72]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 80
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4object@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??4object@json@boost@@QEAAAEAV012@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4object@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.globl	"??4object@json@boost@@QEAAAEAV012@AEBV012@@Z" # -- Begin function ??4object@json@boost@@QEAAAEAV012@AEBV012@@Z
	.p2align	4, 0x90
"??4object@json@boost@@QEAAAEAV012@AEBV012@@Z": # @"??4object@json@boost@@QEAAAEAV012@AEBV012@@Z"
.seh_proc "??4object@json@boost@@QEAAAEAV012@AEBV012@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 80
	.seh_stackalloc 80
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 72], rax
	cmp	rcx, rdx
	je	.LBB104_11
# %bb.1:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsp + 40], rax
	test	al, 1
	je	.LBB104_3
# %bb.2:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB104_3:
	lea	rcx, [rsp + 48]
	lea	r8, [rsp + 40]
	call	"??0object@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	cmp	qword ptr [rsi + 16], 0
	je	.LBB104_6
# %bb.4:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB104_6
# %bb.5:
	lea	rcx, [rsi + 16]
	mov	rdx, rsi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB104_6:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB104_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB104_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB104_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB104_10:
	mov	rax, qword ptr [rsp + 48]
	mov	qword ptr [rsp + 48], 0
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 1
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsi + 16], rax
.LBB104_11:
	mov	rcx, qword ptr [rsp + 72]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 80
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4object@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
	.globl	"??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z" # -- Begin function ??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z
	.p2align	4, 0x90
"??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z": # @"??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
.seh_proc "??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 80
	.seh_stackalloc 80
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rcx]
	test	al, 1
	je	.LBB105_2
# %bb.1:
	mov	rcx, rax
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
.LBB105_2:
	mov	qword ptr [rsp + 32], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 64], xmm0
	lea	rcx, [rsp + 40]
	lea	rdx, [rsp + 64]
	lea	r9, [rsp + 32]
	xor	r8d, r8d
	call	"??0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@12@@Z"
	cmp	qword ptr [rsi + 16], 0
	je	.LBB105_5
# %bb.3:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB105_5
# %bb.4:
	lea	rcx, [rsi + 16]
	mov	rdx, rsi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB105_5:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB105_9
# %bb.6:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB105_9
# %bb.7:
	cmp	rax, 1
	jne	.LBB105_9
# %bb.8:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB105_9:
	mov	rax, qword ptr [rsp + 40]
	mov	qword ptr [rsp + 40], 0
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 1
	mov	rax, qword ptr [rsp + 56]
	mov	qword ptr [rsi + 16], rax
	mov	rax, rsi
	add	rsp, 80
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4object@json@boost@@QEAAAEAV012@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?clear@object@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?clear@object@json@boost@@QEAAXXZ"
	.globl	"?clear@object@json@boost@@QEAAXXZ" # -- Begin function ?clear@object@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?clear@object@json@boost@@QEAAXXZ":    # @"?clear@object@json@boost@@QEAAXXZ"
.seh_proc "?clear@object@json@boost@@QEAAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB106_9
# %bb.1:
	mov	rsi, rcx
	mov	rbx, qword ptr [rax]
	test	rbx, rbx
	je	.LBB106_7
# %bb.2:
	mov	ecx, dword ptr [rax + 32]
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB106_7
# %bb.3:
	lea	rcx, [rbx + 4*rbx]
	lea	rdi, [rax + 8*rcx]
	add	rdi, -8
	.p2align	4, 0x90
.LBB106_4:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	add	rdi, -40
	add	rbx, -1
	jne	.LBB106_4
# %bb.5:
	mov	rax, qword ptr [rsi + 16]
	test	rax, rax
	je	.LBB106_6
.LBB106_7:
	mov	r8, qword ptr [rax + 8]
	lea	rcx, [r8 + 4*r8]
	lea	rcx, [rax + 8*rcx]
	add	rcx, 32
	shl	r8, 2
.LBB106_8:
	mov	dl, -1
	call	memset
	mov	rax, qword ptr [rsi + 16]
	mov	qword ptr [rax], 0
.LBB106_9:
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB106_6:
	xor	ecx, ecx
	xor	r8d, r8d
	jmp	.LBB106_8
	.seh_handlerdata
	.section	.text,"xr",one_only,"?clear@object@json@boost@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
	.globl	"?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z" # -- Begin function ?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z
	.p2align	4, 0x90
"?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z": # @"?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
.seh_proc "?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	r8, rdx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB107_1
# %bb.2:
	mov	rdx, qword ptr [rax]
	jmp	.LBB107_3
.LBB107_1:
	xor	edx, edx
.LBB107_3:
	mov	r9, qword ptr [r8]
	mov	rax, qword ptr [r8 + 8]
	sub	rax, r9
	sar	rax, 3
	movabs	r8, 7905747460161236407
	imul	r8, rax
	mov	eax, 2147483646
	sub	rax, rdx
	cmp	r8, rax
	ja	.LBB107_5
# %bb.4:
	lea	rax, [rip + "??_7place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@"]
	mov	qword ptr [rsp + 32], rax
	mov	qword ptr [rsp + 40], r9
	mov	qword ptr [rsp + 48], r8
	mov	qword ptr [rsp + 56], rcx
	add	rdx, r8
	lea	r8, [rsp + 32]
	call	"?insert_range_impl@object@json@boost@@AEAAX_KAEAUplace_range@123@@Z"
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	nop
	add	rsp, 72
	ret
.LBB107_5:
	call	"?raise@object_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z"
	.globl	"?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z" # -- Begin function ?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z
	.p2align	4, 0x90
"?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z": # @"?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z"
.seh_proc "?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	r14, rdx
	mov	r13, rcx
	mov	r10, qword ptr [rcx + 16]
	add	r13, 16
	lea	r9, [r10 + 32]
	mov	rbx, qword ptr [rdx + 24]
	mov	edx, dword ptr [rdx + 32]
	test	r10, r10
	cmove	r9, r10
	je	.LBB108_2
# %bb.1:
	mov	rcx, qword ptr [r10 + 24]
	jmp	.LBB108_3
.LBB108_2:
	mov	rcx, r13
.LBB108_3:
	movabs	rdi, -3750763034362895579
	add	rcx, rdi
	test	edx, edx
	je	.LBB108_11
# %bb.4:
	mov	r11, rdi
	lea	r8, [rdx - 1]
	mov	rdi, rdx
	movabs	rsi, 1099511628211
	and	rdi, 3
	je	.LBB108_8
# %bb.5:
	xor	ebp, ebp
	.p2align	4, 0x90
.LBB108_6:                              # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rbx + rbp]
	xor	rcx, rax
	imul	rcx, rsi
	add	rbp, 1
	cmp	rdi, rbp
	jne	.LBB108_6
# %bb.7:
	sub	rdx, rbp
	add	rbx, rbp
.LBB108_8:
	mov	rdi, r11
	cmp	r8, 3
	jb	.LBB108_11
# %bb.9:
	xor	ebp, ebp
	.p2align	4, 0x90
.LBB108_10:                             # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rbx + rbp]
	xor	rax, rcx
	imul	rax, rsi
	movsx	rcx, byte ptr [rbx + rbp + 1]
	xor	rcx, rax
	imul	rcx, rsi
	movsx	rax, byte ptr [rbx + rbp + 2]
	xor	rax, rcx
	imul	rax, rsi
	movsx	rcx, byte ptr [rbx + rbp + 3]
	xor	rcx, rax
	imul	rcx, rsi
	add	rbp, 4
	cmp	rdx, rbp
	jne	.LBB108_10
.LBB108_11:
	test	r10, r10
	je	.LBB108_12
# %bb.13:
	mov	rdx, qword ptr [r10 + 8]
	jmp	.LBB108_14
.LBB108_12:
	xor	edx, edx
.LBB108_14:
	lea	rax, [rdx + 4*rdx]
	lea	rsi, [r9 + 8*rax]
	mov	rdx, qword ptr [r10 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	rcx, qword ptr [r13]
	add	rcx, 32
	mov	rdx, r14
	sub	rdx, rcx
	shr	rdx, 3
	imul	edx, edx, -858993459
	mov	ebp, dword ptr [rsi + 4*rax]
	cmp	ebp, edx
	jne	.LBB108_16
# %bb.15:
	lea	rax, [rsi + 4*rax]
	jmp	.LBB108_18
	.p2align	4, 0x90
.LBB108_16:                             # =>This Inner Loop Header: Depth=1
	mov	eax, ebp
	lea	rax, [rax + 4*rax]
	mov	ebp, dword ptr [rcx + 8*rax + 36]
	cmp	ebp, edx
	jne	.LBB108_16
# %bb.17:
	lea	rax, [rcx + 8*rax]
	add	rax, 36
.LBB108_18:
	mov	ecx, dword ptr [r14 + 36]
	mov	dword ptr [rax], ecx
	mov	rcx, r14
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [r13]
	add	qword ptr [rax], -1
	mov	r9, qword ptr [r13]
	lea	r12, [r9 + 32]
	test	r9, r9
	cmove	r12, r9
	je	.LBB108_19
# %bb.20:
	mov	rcx, qword ptr [r9]
	jmp	.LBB108_21
.LBB108_19:
	xor	ecx, ecx
.LBB108_21:
	lea	rcx, [rcx + 4*rcx]
	lea	rcx, [r12 + 8*rcx]
	cmp	rcx, r14
	je	.LBB108_40
# %bb.22:
	test	r9, r9
	je	.LBB108_24
# %bb.23:
	mov	rax, qword ptr [r9]
	mov	rcx, qword ptr [r9 + 24]
	mov	r10, rax
	lea	rdx, [rax + 4*rax]
	lea	r15, [r12 + 8*rdx]
	lea	rbp, [r12 + 8*rdx]
	add	rbp, 24
	lea	rdx, [r12 + 8*rdx]
	add	rdx, 32
	jmp	.LBB108_25
.LBB108_24:
	lea	rbp, [r12 + 24]
	lea	rdx, [r12 + 32]
	xor	r15d, r15d
	xor	r10d, r10d
	mov	rcx, r13
.LBB108_25:
	mov	ebx, dword ptr [rdx]
	add	rcx, rdi
	test	rbx, rbx
	je	.LBB108_33
# %bb.26:
	mov	rdi, qword ptr [rbp]
	lea	r8, [rbx - 1]
	mov	rdx, rbx
	and	rdx, 3
	je	.LBB108_30
# %bb.27:
	xor	ebp, ebp
	movabs	rsi, 1099511628211
	.p2align	4, 0x90
.LBB108_28:                             # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rdi + rbp]
	xor	rcx, rax
	imul	rcx, rsi
	add	rbp, 1
	cmp	rdx, rbp
	jne	.LBB108_28
# %bb.29:
	sub	rbx, rbp
	add	rdi, rbp
.LBB108_30:
	cmp	r8, 3
	jb	.LBB108_33
# %bb.31:
	xor	esi, esi
	movabs	rbp, 1099511628211
	.p2align	4, 0x90
.LBB108_32:                             # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rdi + rsi]
	xor	rax, rcx
	imul	rax, rbp
	movsx	rcx, byte ptr [rdi + rsi + 1]
	xor	rcx, rax
	imul	rcx, rbp
	movsx	rax, byte ptr [rdi + rsi + 2]
	xor	rax, rcx
	imul	rax, rbp
	movsx	rcx, byte ptr [rdi + rsi + 3]
	xor	rcx, rax
	imul	rcx, rbp
	add	rsi, 4
	cmp	rbx, rsi
	jne	.LBB108_32
.LBB108_33:
	test	r9, r9
	je	.LBB108_34
# %bb.35:
	mov	rdx, qword ptr [r9 + 8]
	jmp	.LBB108_36
.LBB108_34:
	xor	edx, edx
.LBB108_36:
	mov	rdi, r10
	lea	rax, [rdx + 4*rdx]
	lea	rsi, [r12 + 8*rax]
	mov	rdx, qword ptr [r9 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	lea	rbx, [rsi + 4*rax]
	mov	rdx, qword ptr [r13]
	add	rdx, 32
	mov	rcx, r15
	sub	rcx, rdx
	shr	rcx, 3
	imul	ebp, ecx, -858993459
	mov	eax, dword ptr [rsi + 4*rax]
	mov	rcx, rbx
	cmp	eax, ebp
	je	.LBB108_39
	.p2align	4, 0x90
.LBB108_37:                             # =>This Inner Loop Header: Depth=1
	mov	eax, eax
	lea	rcx, [rax + 4*rax]
	mov	eax, dword ptr [rdx + 8*rcx + 36]
	cmp	eax, ebp
	jne	.LBB108_37
# %bb.38:
	lea	rcx, [rdx + 8*rcx]
	add	rcx, 36
.LBB108_39:
	lea	rax, [rdi + 4*rdi]
	mov	eax, dword ptr [r12 + 8*rax + 36]
	mov	dword ptr [rcx], eax
	mov	rax, qword ptr [r15 + 32]
	mov	qword ptr [r14 + 32], rax
	movups	xmm0, xmmword ptr [r15]
	movups	xmm1, xmmword ptr [r15 + 16]
	movups	xmmword ptr [r14 + 16], xmm1
	movups	xmmword ptr [r14], xmm0
	mov	eax, dword ptr [rbx]
	mov	dword ptr [r14 + 36], eax
	mov	rax, r14
	sub	rax, qword ptr [r13]
	add	rax, -32
	shr	rax, 3
	imul	eax, eax, -858993459
	mov	dword ptr [rbx], eax
.LBB108_40:
	mov	rax, r14
	add	rsp, 40
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1key_value_pair@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1key_value_pair@json@boost@@QEAA@XZ"
	.globl	"??1key_value_pair@json@boost@@QEAA@XZ" # -- Begin function ??1key_value_pair@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1key_value_pair@json@boost@@QEAA@XZ": # @"??1key_value_pair@json@boost@@QEAA@XZ"
.Lfunc_begin60:
.seh_proc "??1key_value_pair@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	mov	rsi, qword ptr [rcx]
	mov	eax, esi
	and	eax, 3
	cmp	eax, 2
	je	.LBB109_7
# %bb.1:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	test	rsi, rsi
	je	.LBB109_3
# %bb.2:
	and	rsi, -4
	jmp	.LBB109_6
.LBB109_3:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB109_4
.LBB109_6:
	mov	r8d, dword ptr [rdi + 32]
	add	r8d, 1
	mov	rdx, qword ptr [rdi + 24]
	mov	rax, qword ptr [rsi]
.Ltmp184:
	mov	r9d, 1
	mov	rcx, rsi
	call	qword ptr [rax + 16]
.Ltmp185:
.LBB109_7:
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	jmp	"??1value@json@boost@@QEAA@XZ" # TAILCALL
.LBB109_4:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB109_6
# %bb.5:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB109_6
	.seh_handlerdata
	.long	("$cppxdata$??1key_value_pair@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??1key_value_pair@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$8@?0???1key_value_pair@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???1key_value_pair@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$8@?0???1key_value_pair@json@boost@@QEAA@XZ@4HA"
.LBB109_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	call	__std_terminate
	int3
.Lfunc_end60:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??1key_value_pair@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1key_value_pair@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??1key_value_pair@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1key_value_pair@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1key_value_pair@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1key_value_pair@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???1key_value_pair@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1key_value_pair@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin60@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp184@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp185@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??1key_value_pair@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 80
	.seh_stackalloc 80
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 72], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 56]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rdx, qword ptr [rsp + 56]
	mov	rax, qword ptr [rsi + 16]
	test	rdx, rdx
	jne	.LBB110_5
# %bb.1:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB110_2
# %bb.3:
	mov	rdx, qword ptr [rax]
	jmp	.LBB110_4
.LBB110_2:
	xor	edx, edx
.LBB110_4:
	lea	rdx, [rdx + 4*rdx]
	lea	rdx, [rcx + 8*rdx]
.LBB110_5:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB110_6
# %bb.7:
	mov	rax, qword ptr [rax]
	jmp	.LBB110_8
.LBB110_6:
	xor	eax, eax
.LBB110_8:
	lea	rax, [rax + 4*rax]
	lea	rax, [rcx + 8*rax]
	cmp	rdx, rax
	je	.LBB110_9
# %bb.10:
	mov	rcx, rsi
	call	"?erase@object@json@boost@@QEAAPEAVkey_value_pair@23@PEBV423@@Z"
	mov	esi, 1
	jmp	.LBB110_11
.LBB110_9:
	xor	esi, esi
.LBB110_11:
	mov	rcx, qword ptr [rsp + 72]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 80
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@object@json@boost@@QEAA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rdi, qword ptr [rsp + 48]
	test	rdi, rdi
	jne	.LBB111_5
# %bb.1:
	mov	rcx, qword ptr [rsi + 16]
	lea	rax, [rcx + 32]
	test	rcx, rcx
	cmove	rax, rcx
	je	.LBB111_2
# %bb.3:
	mov	rcx, qword ptr [rcx]
	jmp	.LBB111_4
.LBB111_2:
	xor	ecx, ecx
.LBB111_4:
	lea	rcx, [rcx + 4*rcx]
	lea	rdi, [rax + 8*rcx]
.LBB111_5:
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rdi
	add	rsp, 72
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?find@object@json@boost@@QEAAPEAVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?swap@object@json@boost@@QEAAXAEAV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?swap@object@json@boost@@QEAAXAEAV123@@Z"
	.globl	"?swap@object@json@boost@@QEAAXAEAV123@@Z" # -- Begin function ?swap@object@json@boost@@QEAAXAEAV123@@Z
	.p2align	4, 0x90
"?swap@object@json@boost@@QEAAXAEAV123@@Z": # @"?swap@object@json@boost@@QEAAXAEAV123@@Z"
.Lfunc_begin61:
.seh_proc "?swap@object@json@boost@@QEAAXAEAV123@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rdx
	mov	r14, rcx
	mov	rbx, qword ptr [rdx]
	test	rbx, rbx
	je	.LBB112_2
# %bb.1:
	and	rbx, -4
	jmp	.LBB112_5
.LBB112_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB112_3
.LBB112_5:
	mov	rsi, qword ptr [r14]
	test	rsi, rsi
	je	.LBB112_7
# %bb.6:
	and	rsi, -4
	jmp	.LBB112_10
.LBB112_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB112_8
.LBB112_10:
	cmp	rsi, rbx
	je	.LBB112_12
# %bb.11:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	rdx, rbx
	call	qword ptr [rax + 24]
	test	al, al
	je	.LBB112_13
.LBB112_12:
	mov	rax, qword ptr [r14 + 16]
	mov	rcx, qword ptr [rdi + 16]
	mov	qword ptr [r14 + 16], rcx
	mov	qword ptr [rdi + 16], rax
.LBB112_39:
	add	rsp, 112
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB112_13:
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rbp - 48], rax
	test	al, 1
	je	.LBB112_15
# %bb.14:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB112_15:
	lea	rcx, [rbp - 32]
	lea	r8, [rbp - 48]
	mov	rdx, r14
	call	"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB112_17
# %bb.16:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB112_17:
.Ltmp186:
	lea	rcx, [rbp - 72]
	lea	r8, [rbp - 40]
	mov	rdx, rdi
	call	"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp187:
# %bb.18:
	cmp	qword ptr [rdi + 16], 0
	je	.LBB112_21
# %bb.19:
	mov	eax, dword ptr [rdi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB112_21
# %bb.20:
	lea	rcx, [rdi + 16]
	mov	rdx, rdi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB112_21:
	mov	rcx, qword ptr [rdi]
	test	cl, 1
	je	.LBB112_25
# %bb.22:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB112_25
# %bb.23:
	cmp	rax, 1
	jne	.LBB112_25
# %bb.24:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB112_25:
	mov	rax, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 32], 0
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 1
	mov	rax, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 16], 0
	mov	qword ptr [rdi + 16], rax
	cmp	qword ptr [r14 + 16], 0
	je	.LBB112_28
# %bb.26:
	mov	eax, dword ptr [r14]
	and	eax, 3
	cmp	eax, 2
	je	.LBB112_28
# %bb.27:
	lea	rcx, [r14 + 16]
	mov	rdx, r14
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB112_28:
	mov	rcx, qword ptr [r14]
	test	cl, 1
	je	.LBB112_32
# %bb.29:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB112_32
# %bb.30:
	cmp	rax, 1
	jne	.LBB112_32
# %bb.31:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB112_32:
	mov	rax, qword ptr [rbp - 72]
	mov	qword ptr [rbp - 72], 0
	mov	qword ptr [r14], rax
	mov	byte ptr [r14 + 8], 1
	mov	rax, qword ptr [rbp - 56]
	mov	qword ptr [r14 + 16], rax
	cmp	qword ptr [rbp - 16], 0
	je	.LBB112_35
# %bb.33:
	mov	eax, dword ptr [rbp - 32]
	and	eax, 3
	cmp	eax, 2
	je	.LBB112_35
# %bb.34:
	lea	rcx, [rbp - 16]
	lea	rdx, [rbp - 32]
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB112_35:
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	je	.LBB112_39
# %bb.36:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB112_39
# %bb.37:
	cmp	rax, 1
	jne	.LBB112_39
# %bb.38:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
	jmp	.LBB112_39
.LBB112_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB112_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB112_5
.LBB112_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB112_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB112_10
	.seh_handlerdata
	.long	("$cppxdata$?swap@object@json@boost@@QEAAXAEAV123@@Z")@IMGREL
	.section	.text,"xr",one_only,"?swap@object@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$40@?0??swap@object@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0??swap@object@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$40@?0??swap@object@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB112_40:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	cmp	qword ptr [rbp - 16], 0
	je	.LBB112_43
# %bb.41:
	mov	eax, dword ptr [rbp - 32]
	and	eax, 3
	cmp	eax, 2
	je	.LBB112_43
# %bb.42:
	lea	rcx, [rbp - 16]
	lea	rdx, [rbp - 32]
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB112_43:
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	je	.LBB112_47
# %bb.44:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB112_47
# %bb.45:
	cmp	rax, 1
	jne	.LBB112_47
# %bb.46:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB112_47:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end61:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@object@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?swap@object@json@boost@@QEAAXAEAV123@@Z"
	.p2align	2
"$cppxdata$?swap@object@json@boost@@QEAAXAEAV123@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?swap@object@json@boost@@QEAAXAEAV123@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?swap@object@json@boost@@QEAAXAEAV123@@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?swap@object@json@boost@@QEAAXAEAV123@@Z":
	.long	-1                      # ToState
	.long	"?dtor$40@?0??swap@object@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
"$ip2state$?swap@object@json@boost@@QEAAXAEAV123@@Z":
	.long	.Lfunc_begin61@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp186@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp187@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?swap@object@json@boost@@QEAAXAEAV123@@Z"
                                        # -- End function
	.def	 "?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rdi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rsi, qword ptr [rsp + 48]
	mov	rax, qword ptr [rdi + 16]
	test	rsi, rsi
	jne	.LBB113_5
# %bb.1:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB113_2
# %bb.3:
	mov	rdx, qword ptr [rax]
	jmp	.LBB113_4
.LBB113_2:
	xor	edx, edx
.LBB113_4:
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rcx + 8*rdx]
.LBB113_5:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB113_6
# %bb.7:
	mov	rax, qword ptr [rax]
	jmp	.LBB113_8
.LBB113_6:
	xor	eax, eax
.LBB113_8:
	lea	rax, [rax + 4*rax]
	lea	rax, [rcx + 8*rax]
	cmp	rsi, rax
	je	.LBB113_10
# %bb.9:
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 72
	pop	rdi
	pop	rsi
	ret
.LBB113_10:
	call	"?raise@key_not_found@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?at@object@json@boost@@QEAAAEAVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rdi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rsi, qword ptr [rsp + 48]
	mov	rax, qword ptr [rdi + 16]
	test	rsi, rsi
	jne	.LBB114_5
# %bb.1:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB114_2
# %bb.3:
	mov	rdx, qword ptr [rax]
	jmp	.LBB114_4
.LBB114_2:
	xor	edx, edx
.LBB114_4:
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rcx + 8*rdx]
.LBB114_5:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB114_6
# %bb.7:
	mov	rax, qword ptr [rax]
	jmp	.LBB114_8
.LBB114_6:
	xor	eax, eax
.LBB114_8:
	lea	rax, [rax + 4*rax]
	lea	rax, [rcx + 8*rax]
	cmp	rsi, rax
	je	.LBB114_10
# %bb.9:
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 72
	pop	rdi
	pop	rsi
	ret
.LBB114_10:
	call	"?raise@key_not_found@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?at@object@json@boost@@QEBAAEBVvalue@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rdi, qword ptr [rsp + 48]
	test	rdi, rdi
	jne	.LBB115_5
# %bb.1:
	mov	rcx, qword ptr [rsi + 16]
	lea	rax, [rcx + 32]
	test	rcx, rcx
	cmove	rax, rcx
	je	.LBB115_2
# %bb.3:
	mov	rcx, qword ptr [rcx]
	jmp	.LBB115_4
.LBB115_2:
	xor	ecx, ecx
.LBB115_4:
	lea	rcx, [rcx + 4*rcx]
	lea	rdi, [rax + 8*rcx]
.LBB115_5:
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rdi
	add	rsp, 72
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?find@object@json@boost@@QEBAPEBVkey_value_pair@23@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z"
	.globl	"??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z" # -- Begin function ??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z
	.p2align	4, 0x90
"??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z": # @"??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z"
.seh_proc "??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 144
	.seh_stackalloc 144
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 136], rax
	mov	qword ptr [rsp + 56], 0
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rax, [rip + "??_7place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"]
	mov	qword ptr [rsp + 96], rax
	movups	xmm1, xmmword ptr [rdx]
	movups	xmmword ptr [rsp + 104], xmm1
	lea	rax, [rsp + 56]
	mov	qword ptr [rsp + 120], rax
	mov	qword ptr [rsp + 128], rcx
	movaps	xmmword ptr [rsp + 80], xmm0
	lea	rdx, [rsp + 64]
	lea	r8, [rsp + 80]
	lea	r9, [rsp + 96]
	call	"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z"
	mov	rsi, qword ptr [rsp + 64]
	mov	rcx, qword ptr [rsp + 136]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 144
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??Aobject@json@boost@@QEAAAEAVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 80
	.seh_stackalloc 80
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 72], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 56]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rcx, qword ptr [rsp + 56]
	mov	rax, qword ptr [rsi + 16]
	test	rcx, rcx
	jne	.LBB117_5
# %bb.1:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB117_2
# %bb.3:
	mov	rdx, qword ptr [rax]
	jmp	.LBB117_4
.LBB117_2:
	xor	edx, edx
.LBB117_4:
	lea	rdx, [rdx + 4*rdx]
	lea	rcx, [rcx + 8*rdx]
.LBB117_5:
	lea	rdx, [rax + 32]
	test	rax, rax
	cmove	rdx, rax
	je	.LBB117_6
# %bb.7:
	mov	rax, qword ptr [rax]
	jmp	.LBB117_8
.LBB117_6:
	xor	eax, eax
.LBB117_8:
	lea	rax, [rax + 4*rax]
	lea	rax, [rdx + 8*rax]
	xor	esi, esi
	cmp	rcx, rax
	setne	sil
	mov	rcx, qword ptr [rsp + 72]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 80
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?count@object@json@boost@@QEBA_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	r12, r8
	mov	r14, rdx
	mov	r15, rcx
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdx], xmm0
	mov	rdx, qword ptr [r8]
	mov	r10, qword ptr [r8 + 8]
	mov	r9, qword ptr [rcx + 16]
	add	r15, 16
	test	r9, r9
	je	.LBB118_2
# %bb.1:
	mov	rbx, qword ptr [r9 + 24]
	jmp	.LBB118_3
.LBB118_2:
	mov	rbx, r15
.LBB118_3:
	movabs	rcx, -3750763034362895579
	add	rcx, rbx
	test	r10, r10
	je	.LBB118_11
# %bb.4:
	lea	r8, [r10 - 1]
	mov	rsi, r10
	movabs	rbx, 1099511628211
	and	rsi, 3
	je	.LBB118_8
# %bb.5:
	xor	edi, edi
	.p2align	4, 0x90
.LBB118_6:                              # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rdx + rdi]
	xor	rcx, rax
	imul	rcx, rbx
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB118_6
# %bb.7:
	sub	r10, rdi
	add	rdx, rdi
.LBB118_8:
	cmp	r8, 3
	jb	.LBB118_11
# %bb.9:
	xor	edi, edi
	.p2align	4, 0x90
.LBB118_10:                             # =>This Inner Loop Header: Depth=1
	movsx	rax, byte ptr [rdx + rdi]
	xor	rax, rcx
	imul	rax, rbx
	movsx	rcx, byte ptr [rdx + rdi + 1]
	xor	rcx, rax
	imul	rcx, rbx
	movsx	rax, byte ptr [rdx + rdi + 2]
	xor	rax, rcx
	imul	rax, rbx
	movsx	rcx, byte ptr [rdx + rdi + 3]
	xor	rcx, rax
	imul	rcx, rbx
	add	rdi, 4
	cmp	r10, rdi
	jne	.LBB118_10
.LBB118_11:
	mov	qword ptr [r14 + 8], rcx
	test	r9, r9
	je	.LBB118_21
# %bb.12:
	cmp	qword ptr [r9], 0
	je	.LBB118_21
# %bb.13:
	mov	rax, qword ptr [r9 + 8]
	mov	rdx, qword ptr [r9 + 16]
	lea	rax, [rax + 4*rax]
	lea	rsi, [r9 + 8*rax]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	eax, dword ptr [rsi + 4*rax + 32]
	cmp	eax, -1
	je	.LBB118_21
# %bb.14:
	mov	r13, qword ptr [r12 + 8]
	mov	rbx, qword ptr [r15]
	add	rbx, 32
	xor	r15d, r15d
	jmp	.LBB118_16
	.p2align	4, 0x90
.LBB118_15:                             #   in Loop: Header=BB118_16 Depth=1
	mov	eax, dword ptr [rbx + 8*rsi + 36]
	cmp	eax, -1
	je	.LBB118_22
.LBB118_16:                             # =>This Inner Loop Header: Depth=1
	mov	edi, eax
	lea	rsi, [rdi + 4*rdi]
	mov	eax, dword ptr [rbx + 8*rsi + 32]
	cmp	r13, rax
	jne	.LBB118_15
# %bb.17:                               #   in Loop: Header=BB118_16 Depth=1
	mov	rcx, qword ptr [rbx + 8*rsi + 24]
	mov	rdx, qword ptr [r12]
	mov	r8, r13
	call	memcmp
	test	eax, eax
	jne	.LBB118_15
# %bb.18:
	lea	rax, [rdi + 4*rdi]
	lea	r15, [rbx + 8*rax]
	jmp	.LBB118_22
.LBB118_21:
	xor	r15d, r15d
.LBB118_22:
	mov	qword ptr [r14], r15
	mov	rax, r14
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, qword ptr [rsi + 16]
	test	rcx, rcx
	jne	.LBB119_5
# %bb.1:
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB119_2
# %bb.3:
	mov	rdx, qword ptr [rax]
	jmp	.LBB119_4
.LBB119_2:
	xor	edx, edx
.LBB119_4:
	lea	rdx, [rdx + 4*rdx]
	lea	rcx, [rcx + 8*rdx]
.LBB119_5:
	lea	rdx, [rax + 32]
	test	rax, rax
	cmove	rdx, rax
	je	.LBB119_6
# %bb.7:
	mov	rax, qword ptr [rax]
	jmp	.LBB119_8
.LBB119_6:
	xor	eax, eax
.LBB119_8:
	lea	rax, [rax + 4*rax]
	lea	rax, [rdx + 8*rax]
	cmp	rcx, rax
	setne	bl
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	eax, ebx
	add	rsp, 72
	pop	rbx
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?contains@object@json@boost@@QEBA_NV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?rehash@object@json@boost@@AEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?rehash@object@json@boost@@AEAAX_K@Z"
	.globl	"?rehash@object@json@boost@@AEAAX_K@Z" # -- Begin function ?rehash@object@json@boost@@AEAAX_K@Z
	.p2align	4, 0x90
"?rehash@object@json@boost@@AEAAX_K@Z": # @"?rehash@object@json@boost@@AEAAX_K@Z"
.seh_proc "?rehash@object@json@boost@@AEAAX_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	lea	rsi, [rip + "?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB"-8]
	.p2align	4, 0x90
.LBB120_1:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, qword ptr [rsi + 8]
	add	rsi, 8
	cmp	rbx, rdx
	jb	.LBB120_1
# %bb.2:
	cmp	rbx, 2147483647
	jae	.LBB120_40
# %bb.3:
	lea	r12, [rcx + 16]
	mov	rax, qword ptr [rcx + 16]
	test	rax, rax
	je	.LBB120_5
# %bb.4:
	mov	rbp, qword ptr [rax + 24]
	jmp	.LBB120_6
.LBB120_5:
	mov	rbp, r12
.LBB120_6:
	lea	rax, [rip + "?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB"]
	sub	rsi, rax
	sar	rsi, 3
	imul	r15, rbx, 44
	add	r15, 32
	mov	rdi, qword ptr [rcx]
	test	rdi, rdi
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	je	.LBB120_8
# %bb.7:
	and	rdi, -4
	jmp	.LBB120_11
.LBB120_8:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	edi, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rdx, qword ptr [rdx + 8*rdi]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rdx + _Init_thread_epoch@SECREL32]
	jg	.LBB120_9
.LBB120_11:
	mov	rax, qword ptr [rdi]
	mov	r8d, 8
	mov	rcx, rdi
	mov	rdx, r15
	call	qword ptr [rax + 8]
	mov	r13, rax
	mov	qword ptr [rax], 0
	mov	qword ptr [rax + 8], rbx
	mov	qword ptr [rax + 16], rsi
	lea	r14, [rax + 32]
	test	rax, rax
	mov	rax, r14
	cmove	rax, r13
	mov	rcx, rbx
	cmove	rcx, r13
	mov	qword ptr [r13 + 24], rbp
	lea	rcx, [rcx + 4*rcx]
	lea	rcx, [rax + 8*rcx]
	shl	rbx, 2
	mov	dl, -1
	mov	r8, rbx
	call	memset
	mov	rdx, qword ptr [r12]
	test	rdx, rdx
	je	.LBB120_20
# %bb.12:
	mov	rax, qword ptr [rdx]
	test	rax, rax
	je	.LBB120_14
# %bb.13:
	test	r13, r13
	mov	rcx, r14
	cmove	rcx, r13
	add	rdx, 32
	shl	rax, 3
	lea	r8, [rax + 4*rax]
	call	memcpy
	mov	rdx, qword ptr [r12]
	test	rdx, rdx
	je	.LBB120_20
.LBB120_14:
	mov	rax, qword ptr [rdx]
	test	rax, rax
	je	.LBB120_16
# %bb.15:
	add	qword ptr [r13], rax
	mov	rdx, qword ptr [r12]
	test	rdx, rdx
	je	.LBB120_20
.LBB120_16:
	cmp	qword ptr [rdx], 0
	je	.LBB120_18
# %bb.17:
	mov	qword ptr [rdx], 0
	cmp	qword ptr [r12], 0
	je	.LBB120_20
.LBB120_18:
	mov	rax, qword ptr [rsp + 32] # 8-byte Reload
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB120_20
# %bb.19:
	mov	rcx, r12
	mov	rdx, qword ptr [rsp + 32] # 8-byte Reload
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB120_20:
	mov	qword ptr [r12], r13
	test	r13, r13
	je	.LBB120_39
# %bb.21:
	mov	rax, qword ptr [r13]
	test	rax, rax
	je	.LBB120_39
# %bb.22:
	lea	rax, [rax + 4*rax]
	lea	r15, [r14 + 8*rax]
	movabs	rbx, 1099511628211
	.p2align	4, 0x90
.LBB120_23:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_29 Depth 2
                                        #     Child Loop BB120_33 Depth 2
	mov	rax, qword ptr [r14 + 24]
	mov	edx, dword ptr [r14 + 32]
	test	r13, r13
	je	.LBB120_24
# %bb.25:                               #   in Loop: Header=BB120_23 Depth=1
	mov	rcx, qword ptr [r13 + 24]
	jmp	.LBB120_26
	.p2align	4, 0x90
.LBB120_24:                             #   in Loop: Header=BB120_23 Depth=1
	mov	rcx, r12
.LBB120_26:                             #   in Loop: Header=BB120_23 Depth=1
	movabs	rbp, -3750763034362895579
	add	rcx, rbp
	test	edx, edx
	je	.LBB120_34
# %bb.27:                               #   in Loop: Header=BB120_23 Depth=1
	mov	ebp, edx
	lea	r8, [rbp - 1]
	mov	rdi, rbp
	and	rdi, 3
	je	.LBB120_31
# %bb.28:                               #   in Loop: Header=BB120_23 Depth=1
	xor	edx, edx
	.p2align	4, 0x90
.LBB120_29:                             #   Parent Loop BB120_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rsi, byte ptr [rax + rdx]
	xor	rcx, rsi
	imul	rcx, rbx
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB120_29
# %bb.30:                               #   in Loop: Header=BB120_23 Depth=1
	sub	rbp, rdx
	add	rax, rdx
	mov	rdx, rbp
.LBB120_31:                             #   in Loop: Header=BB120_23 Depth=1
	cmp	r8, 3
	jb	.LBB120_34
# %bb.32:                               #   in Loop: Header=BB120_23 Depth=1
	xor	edi, edi
	.p2align	4, 0x90
.LBB120_33:                             #   Parent Loop BB120_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rbp, byte ptr [rax + rdi]
	xor	rbp, rcx
	imul	rbp, rbx
	movsx	rcx, byte ptr [rax + rdi + 1]
	xor	rcx, rbp
	imul	rcx, rbx
	movsx	rbp, byte ptr [rax + rdi + 2]
	xor	rbp, rcx
	imul	rbp, rbx
	movsx	rcx, byte ptr [rax + rdi + 3]
	xor	rcx, rbp
	imul	rcx, rbx
	add	rdi, 4
	cmp	rdx, rdi
	jne	.LBB120_33
.LBB120_34:                             #   in Loop: Header=BB120_23 Depth=1
	lea	rax, [r13 + 32]
	test	r13, r13
	cmove	rax, r13
	je	.LBB120_35
# %bb.36:                               #   in Loop: Header=BB120_23 Depth=1
	mov	rdx, qword ptr [r13 + 8]
	jmp	.LBB120_37
	.p2align	4, 0x90
.LBB120_35:                             #   in Loop: Header=BB120_23 Depth=1
	xor	edx, edx
.LBB120_37:                             #   in Loop: Header=BB120_23 Depth=1
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rax + 8*rdx]
	mov	rdx, qword ptr [r13 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	ecx, dword ptr [rsi + 4*rax]
	mov	dword ptr [r14 + 36], ecx
	mov	rcx, r14
	sub	rcx, qword ptr [r12]
	add	rcx, -32
	shr	rcx, 3
	imul	ecx, ecx, -858993459
	mov	dword ptr [rsi + 4*rax], ecx
	add	r14, 40
	cmp	r14, r15
	je	.LBB120_39
# %bb.38:                               #   in Loop: Header=BB120_23 Depth=1
	mov	r13, qword ptr [r12]
	jmp	.LBB120_23
.LBB120_39:
	add	rsp, 40
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB120_9:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB120_11
# %bb.10:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB120_11
.LBB120_40:
	call	"?raise@object_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?rehash@object@json@boost@@AEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z"
	.globl	"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z" # -- Begin function ?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z
	.p2align	4, 0x90
"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z": # @"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z"
.seh_proc "?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 80
	.seh_stackalloc 80
	.seh_endprologue
	mov	r14, r9
	mov	r15, rdx
	mov	r13, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 72], rax
	movups	xmm0, xmmword ptr [r8]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 56]
	lea	r8, [rsp + 32]
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rbx, qword ptr [rsp + 56]
	test	rbx, rbx
	je	.LBB121_2
# %bb.1:
	xor	eax, eax
	jmp	.LBB121_12
.LBB121_2:
	mov	rsi, qword ptr [r13 + 16]
	test	rsi, rsi
	je	.LBB121_3
# %bb.4:
	mov	rdx, qword ptr [rsi]
	add	rdx, 1
	cmp	qword ptr [rsi + 8], rdx
	jb	.LBB121_5
	jmp	.LBB121_7
.LBB121_3:
	mov	edx, 1
.LBB121_5:
	mov	rcx, r13
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
	mov	rsi, qword ptr [r13 + 16]
	test	rsi, rsi
	je	.LBB121_6
.LBB121_7:
	mov	rax, qword ptr [rsi]
	add	rsi, 32
	jmp	.LBB121_8
.LBB121_6:
	xor	esi, esi
	xor	eax, eax
.LBB121_8:
	lea	r12, [rax + 4*rax]
	lea	rbx, [rsi + 8*r12]
	mov	rax, qword ptr [r14]
	mov	rcx, r14
	mov	rdx, rbx
	call	qword ptr [rax]
	mov	rcx, qword ptr [rsp + 64]
	mov	rax, qword ptr [r13 + 16]
	lea	rdx, [rax + 32]
	test	rax, rax
	cmove	rdx, rax
	je	.LBB121_9
# %bb.10:
	mov	r8, qword ptr [rax + 8]
	jmp	.LBB121_11
.LBB121_9:
	xor	r8d, r8d
.LBB121_11:
	lea	rdi, [r8 + 4*r8]
	lea	rdi, [rdx + 8*rdi]
	mov	rdx, qword ptr [rax + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	ecx, dword ptr [rdi + 4*rax]
	mov	dword ptr [rsi + 8*r12 + 36], ecx
	mov	rcx, rbx
	sub	rcx, qword ptr [r13 + 16]
	add	rcx, -32
	shr	rcx, 3
	imul	ecx, ecx, -858993459
	mov	dword ptr [rdi + 4*rax], ecx
	mov	rax, qword ptr [r13 + 16]
	add	qword ptr [rax], 1
	mov	al, 1
.LBB121_12:
	mov	qword ptr [r15], rbx
	mov	byte ptr [r15 + 8], al
	mov	rcx, qword ptr [rsp + 72]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, r15
	add	rsp, 80
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z"
	.globl	"?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z" # -- Begin function ?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z
	.p2align	4, 0x90
"?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z": # @"?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z"
.seh_proc "?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	r15, r8
	mov	r14, rdx
	mov	r12, rcx
	mov	rsi, qword ptr [rcx + 16]
	test	rsi, rsi
	je	.LBB122_1
# %bb.2:
	mov	rdx, qword ptr [rsi]
	add	rdx, 1
	cmp	qword ptr [rsi + 8], rdx
	jb	.LBB122_3
	jmp	.LBB122_5
.LBB122_1:
	mov	edx, 1
.LBB122_3:
	mov	rcx, r12
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
	mov	rsi, qword ptr [r12 + 16]
	test	rsi, rsi
	je	.LBB122_4
.LBB122_5:
	mov	rax, qword ptr [rsi]
	add	rsi, 32
	jmp	.LBB122_6
.LBB122_4:
	xor	esi, esi
	xor	eax, eax
.LBB122_6:
	lea	rdi, [rax + 4*rax]
	lea	r13, [rsi + 8*rdi]
	mov	rax, qword ptr [r15]
	mov	rcx, r15
	mov	rdx, r13
	call	qword ptr [rax]
	mov	rax, qword ptr [rsi + 8*rdi + 24]
	mov	ecx, dword ptr [rsi + 8*rdi + 32]
	mov	qword ptr [rsp + 32], rax
	mov	qword ptr [rsp + 40], rcx
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 32]
	mov	rcx, r12
	call	"?find_impl@object@json@boost@@AEBA?AU?$pair@PEAVkey_value_pair@json@boost@@_K@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	mov	rbx, qword ptr [rsp + 48]
	test	rbx, rbx
	je	.LBB122_8
# %bb.7:
	mov	rcx, r13
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	xor	eax, eax
	mov	r13, rbx
	jmp	.LBB122_12
.LBB122_8:
	mov	rcx, qword ptr [rsp + 56]
	mov	rax, qword ptr [r12 + 16]
	lea	rdx, [rax + 32]
	test	rax, rax
	cmove	rdx, rax
	je	.LBB122_9
# %bb.10:
	mov	rbx, qword ptr [rax + 8]
	jmp	.LBB122_11
.LBB122_9:
	xor	ebx, ebx
.LBB122_11:
	lea	rbx, [rbx + 4*rbx]
	lea	rbx, [rdx + 8*rbx]
	mov	rdx, qword ptr [rax + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	ecx, dword ptr [rbx + 4*rax]
	mov	dword ptr [rsi + 8*rdi + 36], ecx
	mov	rcx, r13
	sub	rcx, qword ptr [r12 + 16]
	add	rcx, -32
	shr	rcx, 3
	imul	ecx, ecx, -858993459
	mov	dword ptr [rbx + 4*rax], ecx
	mov	rax, qword ptr [r12 + 16]
	add	qword ptr [rax], 1
	mov	al, 1
.LBB122_12:
	mov	qword ptr [r14], r13
	mov	byte ptr [r14 + 8], al
	mov	rax, r14
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@AEAUplace_one@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z"
	.globl	"?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z" # -- Begin function ?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z
	.p2align	4, 0x90
"?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z": # @"?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z"
.seh_proc "?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	r15, r8
	mov	r14, rdx
	mov	r13, rcx
	mov	rbx, qword ptr [rcx + 16]
	test	rbx, rbx
	je	.LBB123_1
# %bb.2:
	mov	rdx, qword ptr [rbx]
	add	rdx, 1
	cmp	qword ptr [rbx + 8], rdx
	jb	.LBB123_3
	jmp	.LBB123_5
.LBB123_1:
	mov	edx, 1
.LBB123_3:
	mov	rcx, r13
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
	mov	rbx, qword ptr [r13 + 16]
	test	rbx, rbx
	je	.LBB123_4
.LBB123_5:
	mov	rax, qword ptr [rbx]
	add	rbx, 32
	jmp	.LBB123_6
.LBB123_4:
	xor	ebx, ebx
	xor	eax, eax
.LBB123_6:
	lea	r12, [rax + 4*rax]
	lea	rdi, [rbx + 8*r12]
	mov	rax, qword ptr [r15]
	mov	rcx, r15
	mov	rdx, rdi
	call	qword ptr [rax]
	mov	rax, qword ptr [r13 + 16]
	lea	rcx, [rax + 32]
	test	rax, rax
	cmove	rcx, rax
	je	.LBB123_7
# %bb.8:
	mov	rdx, qword ptr [rax + 8]
	jmp	.LBB123_9
.LBB123_7:
	xor	edx, edx
.LBB123_9:
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rcx + 8*rdx]
	mov	rdx, qword ptr [rax + 16]
	mov	rcx, r14
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	ecx, dword ptr [rsi + 4*rax]
	mov	dword ptr [rbx + 8*r12 + 36], ecx
	mov	rcx, rdi
	sub	rcx, qword ptr [r13 + 16]
	add	rcx, -32
	shr	rcx, 3
	imul	ecx, ecx, -858993459
	mov	dword ptr [rsi + 4*rax], ecx
	mov	rax, qword ptr [r13 + 16]
	add	qword ptr [rax], 1
	mov	rax, rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert_impl@object@json@boost@@AEAAPEAVkey_value_pair@23@_KAEAUplace_one@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1undo_insert@object@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1undo_insert@object@json@boost@@QEAA@XZ"
	.globl	"??1undo_insert@object@json@boost@@QEAA@XZ" # -- Begin function ??1undo_insert@object@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1undo_insert@object@json@boost@@QEAA@XZ": # @"??1undo_insert@object@json@boost@@QEAA@XZ"
.seh_proc "??1undo_insert@object@json@boost@@QEAA@XZ"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	r12, rcx
	cmp	byte ptr [rcx + 24], 0
	mov	r14, qword ptr [rcx]
	je	.LBB124_4
# %bb.1:
	mov	rax, qword ptr [r12 + 16]
	sub	rax, qword ptr [r12 + 8]
	je	.LBB124_3
# %bb.2:
	mov	rcx, qword ptr [r14 + 16]
	add	qword ptr [rcx], rax
	jmp	.LBB124_3
.LBB124_4:
	mov	r9, qword ptr [r14 + 16]
	lea	rbp, [r9 + 32]
	test	r9, r9
	cmove	rbp, r9
	mov	rdx, qword ptr [r12 + 8]
	mov	rax, qword ptr [r12 + 16]
	lea	rcx, [rdx + 4*rdx]
	lea	r13, [8*rcx]
	add	r13, rbp
	mov	rcx, rdx
	mov	rbx, rdx
	cmp	rdx, rax
	je	.LBB124_9
# %bb.5:
	mov	qword ptr [rsp + 40], rdx # 8-byte Spill
	lea	rax, [rax + 4*rax]
	mov	qword ptr [rsp + 48], rbp # 8-byte Spill
	lea	r15, [8*rax]
	add	r15, rbp
	movabs	rbp, -3750763034362895579
	movabs	rbx, 1099511628211
	mov	qword ptr [rsp + 32], r13 # 8-byte Spill
	.p2align	4, 0x90
.LBB124_6:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_18 Depth 2
                                        #     Child Loop BB124_22 Depth 2
                                        #     Child Loop BB124_28 Depth 2
	add	r14, 16
	mov	rdx, qword ptr [r13 + 24]
	mov	edi, dword ptr [r13 + 32]
	test	r9, r9
	je	.LBB124_14
# %bb.7:                                #   in Loop: Header=BB124_6 Depth=1
	mov	rcx, qword ptr [r9 + 24]
	jmp	.LBB124_15
	.p2align	4, 0x90
.LBB124_14:                             #   in Loop: Header=BB124_6 Depth=1
	mov	rcx, r14
.LBB124_15:                             #   in Loop: Header=BB124_6 Depth=1
	add	rcx, rbp
	test	edi, edi
	je	.LBB124_23
# %bb.16:                               #   in Loop: Header=BB124_6 Depth=1
	mov	eax, edi
	lea	r8, [rax - 1]
	mov	rsi, rax
	and	rsi, 3
	je	.LBB124_20
# %bb.17:                               #   in Loop: Header=BB124_6 Depth=1
	mov	r10, rbp
	xor	edi, edi
	.p2align	4, 0x90
.LBB124_18:                             #   Parent Loop BB124_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rbp, byte ptr [rdx + rdi]
	xor	rcx, rbp
	imul	rcx, rbx
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB124_18
# %bb.19:                               #   in Loop: Header=BB124_6 Depth=1
	sub	rax, rdi
	add	rdx, rdi
	mov	rdi, rax
	mov	rbp, r10
.LBB124_20:                             #   in Loop: Header=BB124_6 Depth=1
	cmp	r8, 3
	jb	.LBB124_23
# %bb.21:                               #   in Loop: Header=BB124_6 Depth=1
	xor	esi, esi
	.p2align	4, 0x90
.LBB124_22:                             #   Parent Loop BB124_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsx	rax, byte ptr [rdx + rsi]
	xor	rax, rcx
	imul	rax, rbx
	movsx	rcx, byte ptr [rdx + rsi + 1]
	xor	rcx, rax
	imul	rcx, rbx
	movsx	rax, byte ptr [rdx + rsi + 2]
	xor	rax, rcx
	imul	rax, rbx
	movsx	rcx, byte ptr [rdx + rsi + 3]
	xor	rcx, rax
	imul	rcx, rbx
	add	rsi, 4
	cmp	rdi, rsi
	jne	.LBB124_22
.LBB124_23:                             #   in Loop: Header=BB124_6 Depth=1
	lea	rax, [r9 + 32]
	test	r9, r9
	cmove	rax, r9
	je	.LBB124_24
# %bb.25:                               #   in Loop: Header=BB124_6 Depth=1
	mov	rdx, qword ptr [r9 + 8]
	jmp	.LBB124_26
	.p2align	4, 0x90
.LBB124_24:                             #   in Loop: Header=BB124_6 Depth=1
	xor	edx, edx
.LBB124_26:                             #   in Loop: Header=BB124_6 Depth=1
	lea	rdx, [rdx + 4*rdx]
	lea	rsi, [rax + 8*rdx]
	mov	rdx, qword ptr [r9 + 16]
	call	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	mov	rcx, qword ptr [r14]
	add	rcx, 32
	mov	rdx, r13
	sub	rdx, rcx
	shr	rdx, 3
	imul	edx, edx, -858993459
	mov	edi, dword ptr [rsi + 4*rax]
	cmp	edi, edx
	jne	.LBB124_28
# %bb.27:                               #   in Loop: Header=BB124_6 Depth=1
	lea	rax, [rsi + 4*rax]
	jmp	.LBB124_30
	.p2align	4, 0x90
.LBB124_28:                             #   Parent Loop BB124_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, edi
	lea	rax, [rax + 4*rax]
	mov	edi, dword ptr [rcx + 8*rax + 36]
	cmp	edi, edx
	jne	.LBB124_28
# %bb.29:                               #   in Loop: Header=BB124_6 Depth=1
	lea	rax, [rcx + 8*rax]
	add	rax, 36
.LBB124_30:                             #   in Loop: Header=BB124_6 Depth=1
	mov	ecx, dword ptr [r13 + 36]
	mov	dword ptr [rax], ecx
	add	r13, 40
	cmp	r13, r15
	je	.LBB124_8
# %bb.31:                               #   in Loop: Header=BB124_6 Depth=1
	mov	r14, qword ptr [r12]
	mov	r9, qword ptr [r14 + 16]
	jmp	.LBB124_6
.LBB124_8:
	mov	rcx, qword ptr [r12 + 8]
	mov	rbx, qword ptr [r12 + 16]
	mov	rbp, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	mov	r13, qword ptr [rsp + 32] # 8-byte Reload
.LBB124_9:
	test	rbp, rbp
	je	.LBB124_3
# %bb.10:
	mov	rax, rbx
	sub	rax, rcx
	je	.LBB124_3
# %bb.11:
	mov	eax, dword ptr [r13]
	and	eax, 3
	cmp	eax, 2
	je	.LBB124_3
# %bb.12:
	mov	rdi, rcx
	sub	rdi, rbx
	add	rdx, rbx
	sub	rdx, rcx
	lea	rax, [rdx + 4*rdx]
	lea	rsi, [8*rax - 40]
	add	rsi, rbp
	.p2align	4, 0x90
.LBB124_13:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	add	rsi, -40
	inc	rdi
	jne	.LBB124_13
.LBB124_3:
	add	rsp, 56
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??1undo_insert@object@json@boost@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.globl	"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z" # -- Begin function ?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z
	.p2align	4, 0x90
"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z": # @"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
.Lfunc_begin62:
.seh_proc "?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	mov	eax, 4392
	call	__chkstk
	sub	rsp, rax
	.seh_stackalloc 4392
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 4256], -2
	mov	rdi, r8
	mov	r15, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rbp + 4352]
	mov	qword ptr [rbp + 4056], 0
	lea	rcx, [rbp - 80]
	mov	qword ptr [rbp + 4064], rcx
	mov	qword ptr [rbp + 4096], 0
	mov	byte ptr [rbp + 4104], 0
	mov	qword ptr [rbp + 4072], rcx
	mov	qword ptr [rbp + 4080], rcx
	lea	rcx, [rbp + 4000]
	mov	qword ptr [rbp + 4088], rcx
	mov	qword ptr [rbp + 4112], 0
	mov	dword ptr [rbp + 4144], 0
	mov	byte ptr [rbp + 4148], 0
	lea	rcx, [rip + "?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"]
	mov	qword ptr [rbp + 4152], rcx
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp + 4160], xmm0
	movups	xmmword ptr [rbp + 4176], xmm0
	movups	xmm0, xmmword ptr [rax]
	movups	xmmword ptr [rbp + 4224], xmm0
	mov	rax, qword ptr [rbp + 4224]
	mov	qword ptr [rbp + 4240], rax
	mov	rsi, qword ptr [r9]
	mov	qword ptr [rbp + 4248], r9 # 8-byte Spill
	mov	qword ptr [r9], 0
	mov	word ptr [rbp + 4208], 1
	mov	qword ptr [rbp + 4176], 0
	test	sil, 1
	je	.LBB125_6
# %bb.1:
	mov	rax, rsi
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
	mov	rbx, qword ptr [rbp + 4072]
	mov	rax, qword ptr [rbp + 4080]
	cmp	rax, rbx
	je	.LBB125_6
# %bb.2:
	cmp	byte ptr [rbp + 4104], 0
	je	.LBB125_5
# %bb.3:
	mov	rbx, rax
	.p2align	4, 0x90
.LBB125_4:                              # =>This Inner Loop Header: Depth=1
	add	rbx, -24
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rbx, qword ptr [rbp + 4072]
	jne	.LBB125_4
.LBB125_5:
	mov	qword ptr [rbp + 4080], rbx
.LBB125_6:
	mov	qword ptr [rbp + 4096], 0
	mov	rcx, qword ptr [rbp + 4112]
	test	cl, 1
	je	.LBB125_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB125_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB125_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_10:
	mov	eax, esi
	and	eax, 3
	cmp	eax, 2
	setne	byte ptr [rbp + 4104]
	mov	qword ptr [rbp + 4112], rsi
	test	sil, 1
	je	.LBB125_14
# %bb.11:
	and	rsi, -4
	mov	rax, -1
	lock		xadd	qword ptr [rsi + 8], rax
	test	rsi, rsi
	je	.LBB125_14
# %bb.12:
	cmp	rax, 1
	jne	.LBB125_14
# %bb.13:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_14:
	mov	r8, qword ptr [r15]
	mov	rsi, qword ptr [r15 + 8]
.Ltmp188:
	mov	qword ptr [rsp + 32], rdi
	lea	rcx, [rbp + 4056]
	mov	dl, 1
	mov	r9, rsi
	call	"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
.Ltmp189:
# %bb.15:
	mov	ecx, dword ptr [rdi]
	cmp	rax, rsi
	jae	.LBB125_18
# %bb.16:
	test	ecx, ecx
	jne	.LBB125_18
# %bb.17:
	lea	rsi, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rsi
	mov	edx, 2
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rdi], 2
.LBB125_32:
	mov	byte ptr [rdi + 4], al
	mov	qword ptr [rdi + 8], rsi
	jmp	.LBB125_33
.LBB125_18:
	test	ecx, ecx
	jne	.LBB125_33
# %bb.19:
.Ltmp190:
	mov	qword ptr [rsp + 32], rdi
	lea	rcx, [rbp + 4056]
	xor	edx, edx
	xor	r8d, r8d
	xor	r9d, r9d
	call	"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
.Ltmp191:
# %bb.20:
	cmp	dword ptr [rdi], 0
	je	.LBB125_21
.LBB125_33:
	mov	qword ptr [r14], 0
	mov	byte ptr [r14 + 8], 7
.LBB125_34:
	lea	rcx, [rbp + 4160]
	call	"??1stack@detail@json@boost@@QEAA@XZ"
	mov	rcx, qword ptr [rbp + 4112]
	test	cl, 1
	je	.LBB125_38
# %bb.35:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB125_38
# %bb.36:
	cmp	rax, 1
	jne	.LBB125_38
# %bb.37:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_38:
	lea	rcx, [rbp + 4056]
	call	"??1stack@value_stack@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp + 4248] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB125_42
# %bb.39:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB125_42
# %bb.40:
	cmp	rax, 1
	jne	.LBB125_42
# %bb.41:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_42:
	mov	rax, r14
	add	rsp, 4392
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB125_21:
	cmp	byte ptr [rbp + 4209], 0
	je	.LBB125_31
# %bb.22:
	mov	rcx, qword ptr [rbp + 4112]
	test	cl, 1
	je	.LBB125_26
# %bb.23:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB125_26
# %bb.24:
	cmp	rax, 1
	jne	.LBB125_26
# %bb.25:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_26:
	mov	qword ptr [rbp + 4112], 0
	mov	rax, qword ptr [rbp + 4080]
	mov	rcx, rax
	sub	rcx, qword ptr [rbp + 4072]
	cmp	rcx, 24
	jne	.LBB125_27
# %bb.30:
	lea	rcx, [rax - 24]
	mov	qword ptr [rbp + 4080], rcx
	mov	rcx, qword ptr [rax - 8]
	mov	qword ptr [r14 + 16], rcx
	movups	xmm0, xmmword ptr [rax - 24]
	movups	xmmword ptr [r14], xmm0
	mov	qword ptr [rax - 24], 0
	mov	byte ptr [rax - 16], 7
	jmp	.LBB125_34
.LBB125_31:
	lea	rsi, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rsi
	mov	edx, 3
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rdi], 3
	jmp	.LBB125_32
.LBB125_27:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp + 4032], rax
	lea	rdx, [rbp + 4040]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp + 4040], xmm0
	lea	rax, [rip + "??_C@_08JEIPHCP@no?5value?$AA@"]
	mov	qword ptr [rbp + 4016], rax
	mov	byte ptr [rbp + 4024], 1
.Ltmp192:
	lea	rcx, [rbp + 4016]
	call	__std_exception_copy
.Ltmp193:
# %bb.28:
	lea	rax, [rip + "??_7logic_error@std@@6B@"]
	mov	qword ptr [rbp + 4032], rax
.Ltmp194:
	lea	rdx, [rip + "_TI2?AVlogic_error@std@@"]
	lea	rcx, [rbp + 4032]
	call	_CxxThrowException
	sub	rsp, 32
.Ltmp195:
# %bb.29:
	.seh_handlerdata
	.long	("$cppxdata$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.def	 "?dtor$43@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$43@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA":
.seh_proc "?dtor$43@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"
.LBB125_43:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp + 4160]
	call	"??1stack@detail@json@boost@@QEAA@XZ"
	mov	rcx, qword ptr [rbp + 4112]
	test	cl, 1
	je	.LBB125_47
# %bb.44:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB125_47
# %bb.45:
	cmp	rax, 1
	jne	.LBB125_47
# %bb.46:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_47:
	lea	rcx, [rbp + 4056]
	call	"??1stack@value_stack@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp + 4248] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB125_51
# %bb.48:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB125_51
# %bb.49:
	cmp	rax, 1
	jne	.LBB125_51
# %bb.50:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB125_51:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.def	 "?dtor$52@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$52@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA":
.seh_proc "?dtor$52@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"
.LBB125_52:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end62:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.p2align	2
"$cppxdata$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	8                       # IPMapEntries
	.long	("$ip2state$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z")@IMGREL # IPToStateXData
	.long	4384                    # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$52@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$43@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"@IMGREL # Action
"$ip2state$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z":
	.long	.Lfunc_begin62@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp188@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp189@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp190@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp191@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp192@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp194@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp195@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
                                        # -- End function
	.def	 "??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z"
	.globl	"??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z" # -- Begin function ??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z
	.p2align	4, 0x90
"??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z": # @"??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z"
.seh_proc "??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	r10, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rsp + 80]
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rdx], 0
	mov	qword ptr [rsi], rcx
	mov	qword ptr [rsi + 8], r9
	mov	qword ptr [rsi + 40], 0
	mov	byte ptr [rsi + 48], 0
	cmp	rax, 384
	jb	.LBB126_2
# %bb.1:
	mov	qword ptr [rsi + 16], r9
	movabs	rcx, -6148914691236517205
	mul	rcx
	mov	qword ptr [rsi + 24], r9
	shr	rdx, 4
	lea	rax, [rdx + 2*rdx]
	lea	rax, [r9 + 8*rax]
	jmp	.LBB126_3
.LBB126_2:
	lea	rax, [rsi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rax], xmm0
	xor	eax, eax
.LBB126_3:
	mov	qword ptr [rsi + 32], rax
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 88], 0
	mov	byte ptr [rsi + 92], 0
	lea	rax, [rip + "?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"]
	mov	qword ptr [rsi + 96], rax
	xorps	xmm0, xmm0
	movups	xmmword ptr [rsi + 104], xmm0
	movups	xmmword ptr [rsi + 120], xmm0
	mov	byte ptr [rsi + 153], 0
	movups	xmm0, xmmword ptr [r8]
	movups	xmmword ptr [rsi + 168], xmm0
	mov	rax, qword ptr [rsi + 168]
	mov	qword ptr [rsi + 184], rax
	mov	rcx, qword ptr [r10]
	test	cl, 1
	je	.LBB126_7
# %bb.4:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB126_7
# %bb.5:
	cmp	rax, 1
	jne	.LBB126_7
# %bb.6:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB126_7:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0parser@json@boost@@QEAA@Vstorage_ptr@12@AEBUparse_options@12@PEAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z"
	.globl	"?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z" # -- Begin function ?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z
	.p2align	4, 0x90
"?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z": # @"?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z"
.seh_proc "?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rsi, rdx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 48], rax
	mov	word ptr [rcx + 152], 1
	mov	qword ptr [rcx + 120], 0
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rsp + 40], rax
	test	al, 1
	je	.LBB127_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB127_2:
	lea	rdx, [rsp + 40]
	call	"?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z"
	mov	rsi, qword ptr [rsi]
	test	sil, 1
	je	.LBB127_5
# %bb.3:
	and	rsi, -4
	mov	rax, -1
	lock		xadd	qword ptr [rsi + 8], rax
	test	rsi, rsi
	je	.LBB127_5
# %bb.4:
	cmp	rax, 1
	jne	.LBB127_5
# %bb.6:
	mov	rax, qword ptr [rsi]
	mov	rdi, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 48]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rcx, rsi
	mov	edx, 1
	mov	rax, rdi
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	rax             # TAILCALL
.LBB127_5:
	mov	rcx, qword ptr [rsp + 48]
	xor	rcx, rsp
	call	__security_check_cookie
	nop
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?reset@parser@json@boost@@QEAAXVstorage_ptr@23@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z"
	.globl	"?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z" # -- Begin function ?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z
	.p2align	4, 0x90
"?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z": # @"?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z"
.seh_proc "?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, r9
	mov	rbx, r8
	mov	r8, rdx
	mov	qword ptr [rsp + 32], r9
	mov	dl, 1
	mov	r9, rbx
	call	"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
	mov	rdi, rax
	cmp	rax, rbx
	jae	.LBB128_3
# %bb.1:
	cmp	dword ptr [rsi], 0
	jne	.LBB128_3
# %bb.2:
	lea	rbx, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rbx
	mov	edx, 2
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rsi], 2
	mov	byte ptr [rsi + 4], al
	mov	qword ptr [rsi + 8], rbx
.LBB128_3:
	mov	rax, rdi
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?write@parser@json@boost@@QEAA_KPEBD_KAEAVerror_code@system@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z"
	.globl	"?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z" # -- Begin function ?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z
	.p2align	4, 0x90
"?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z": # @"?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z"
.seh_proc "?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rdx
	xor	edx, edx
	xor	r8d, r8d
	xor	r9d, r9d
	call	"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
	nop
	add	rsp, 40
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?finish@parser@json@boost@@QEAAXAEAVerror_code@system@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z"
	.globl	"?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z" # -- Begin function ?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z
	.p2align	4, 0x90
"?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z": # @"?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z"
.seh_proc "?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	rsi, rdx
	cmp	byte ptr [rcx + 153], 0
	je	.LBB130_7
# %bb.1:
	mov	rdi, rcx
	mov	rcx, qword ptr [rcx + 56]
	test	cl, 1
	je	.LBB130_5
# %bb.2:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB130_5
# %bb.3:
	cmp	rax, 1
	jne	.LBB130_5
# %bb.4:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB130_5:
	mov	qword ptr [rdi + 56], 0
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, rax
	sub	rcx, qword ptr [rdi + 16]
	cmp	rcx, 24
	jne	.LBB130_9
# %bb.6:
	lea	rcx, [rax - 24]
	mov	qword ptr [rdi + 24], rcx
	mov	rcx, qword ptr [rax - 8]
	mov	qword ptr [rsi + 16], rcx
	movups	xmm0, xmmword ptr [rax - 24]
	movups	xmmword ptr [rsi], xmm0
	mov	qword ptr [rax - 24], 0
	mov	byte ptr [rax - 16], 7
	jmp	.LBB130_8
.LBB130_7:
	mov	rbx, r8
	lea	rdi, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rdi
	mov	edx, 3
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rbx], 3
	mov	byte ptr [rbx + 4], al
	mov	qword ptr [rbx + 8], rdi
	mov	qword ptr [rsi], 0
	mov	byte ptr [rsi + 8], 7
.LBB130_8:
	mov	rax, rsi
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB130_9:
	lea	rdx, [rip + "??_C@_08JEIPHCP@no?5value?$AA@"]
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0logic_error@std@@QEAA@PEBD@Z"
	lea	rdx, [rip + "_TI2?AVlogic_error@std@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?release@parser@json@boost@@QEAA?AVvalue@23@AEAVerror_code@system@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@000000000000000f0000000000000000 # -- Begin function ?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z
	.section	.rdata,"dr",discard,__xmm@000000000000000f0000000000000000
	.p2align	4
__xmm@000000000000000f0000000000000000:
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	15                      # 0xf
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.byte	0                       # 0x0
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.globl	"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.p2align	4, 0x90
"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z": # @"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
.Lfunc_begin63:
.seh_proc "?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 232
	.seh_stackalloc 232
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 96], -2
	mov	rsi, rcx
	mov	dword ptr [rbp + 72], 0
	mov	byte ptr [rbp + 76], 0
	lea	rax, [rip + "?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"]
	mov	qword ptr [rbp + 80], rax
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp + 88], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp + 56], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 16], xmm0
.Ltmp196:
	mov	qword ptr [rsp + 32], r9
	lea	rdx, [rbp - 16]
	lea	r8, [rbp + 72]
	lea	r9, [rbp + 56]
	call	"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@AEAVerror_code@system@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
.Ltmp197:
# %bb.1:
	cmp	dword ptr [rbp + 72], 0
	jne	.LBB131_2
# %bb.6:
	mov	rax, qword ptr [rbp + 88] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB131_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB131_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB131_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB131_10:
	mov	rax, rsi
	add	rsp, 232
	pop	rsi
	pop	rbp
	ret
.LBB131_2:
	mov	qword ptr [rbp + 64], rsi # 8-byte Spill
	lea	rax, [rip + "??_C@_0CA@JICEFNOC@?4?4?2?4?4?2boost?1json?1impl?1parse?4ipp?$AA@"]
	mov	qword ptr [rbp + 16], rax
	lea	rax, [rip + "??_C@_0HO@ONDGIKNE@boost?3?3json?3?3value?5boost?3?3json?3?3@"]
	mov	qword ptr [rbp + 24], rax
	mov	qword ptr [rbp + 32], 55
	movups	xmm0, xmmword ptr [rbp + 72]
	movaps	xmmword ptr [rbp], xmm0
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 88], rax
	lea	rdx, [rbp - 80]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 80], xmm0
	lea	rax, [rip + "??_C@_00CNPNBAHC@?$AA@"]
	mov	qword ptr [rbp + 40], rax
	mov	byte ptr [rbp + 48], 1
.Ltmp198:
	lea	rcx, [rbp + 40]
	call	__std_exception_copy
.Ltmp199:
# %bb.3:
	lea	rax, [rip + "??_7system_error@system@boost@@6B@"]
	mov	qword ptr [rbp - 88], rax
	movaps	xmm0, xmmword ptr [rbp]
	movups	xmmword ptr [rbp - 64], xmm0
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rbp - 32], xmm0
	mov	byte ptr [rbp - 48], 0
.Ltmp200:
	lea	rcx, [rbp - 88]
	lea	rdx, [rbp + 16]
	call	"??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp201:
# %bb.4:
	.seh_handlerdata
	.long	("$cppxdata$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA":
.seh_proc "?dtor$5@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"
.LBB131_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp - 88]
	call	"??1system_error@system@boost@@UEAA@XZ"
	mov	rcx, qword ptr [rbp + 64] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA":
.seh_proc "?dtor$11@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"
.LBB131_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rax, qword ptr [rbp + 88] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB131_15
# %bb.12:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB131_15
# %bb.13:
	cmp	rax, 1
	jne	.LBB131_15
# %bb.14:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB131_15:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA":
.seh_proc "?dtor$16@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"
.LBB131_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end63:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
	.p2align	2
"$cppxdata$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	6                       # IPMapEntries
	.long	("$ip2state$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z")@IMGREL # IPToStateXData
	.long	224                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$16@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$11@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"@IMGREL # Action
	.long	1                       # ToState
	.long	"?dtor$5@?0??parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z@4HA"@IMGREL # Action
"$ip2state$?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z":
	.long	.Lfunc_begin63@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp196@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp197@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp198@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp200@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp201@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?parse@json@boost@@YA?AVvalue@12@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@AEBUparse_options@12@@Z"
                                        # -- End function
	.def	 "??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z": # @"??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 160
	.seh_stackalloc 160
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Vsystem_error@system@boost@@@boost@@YAXAEBVsystem_error@system@0@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1system_error@system@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1system_error@system@boost@@UEAA@XZ"
	.globl	"??1system_error@system@boost@@UEAA@XZ" # -- Begin function ??1system_error@system@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1system_error@system@boost@@UEAA@XZ": # @"??1system_error@system@boost@@UEAA@XZ"
.Lfunc_begin64:
.seh_proc "??1system_error@system@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7system_error@system@boost@@6B@"]
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rcx + 64]
	cmp	rax, 16
	jb	.LBB133_8
# %bb.1:
	mov	rcx, qword ptr [rsi + 40]
	lea	rdx, [rax + 1]
	cmp	rdx, 4096
	jb	.LBB133_7
# %bb.2:
	mov	r8, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, r8
	cmp	rcx, 32
	jae	.LBB133_3
# %bb.6:
	add	rax, 40
	mov	rdx, rax
	mov	rcx, r8
.LBB133_7:
	call	"??3@YAXPEAX_K@Z"
.LBB133_8:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 56], xmm0
	mov	byte ptr [rsi + 40], 0
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi], rax
	add	rsi, 8
.Ltmp204:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp205:
# %bb.9:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
.LBB133_3:
.Ltmp202:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp203:
# %bb.4:
	.seh_handlerdata
	.long	("$cppxdata$??1system_error@system@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1system_error@system@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0???1system_error@system@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???1system_error@system@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$5@?0???1system_error@system@boost@@UEAA@XZ@4HA"
.LBB133_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1system_error@system@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$10@?0???1system_error@system@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0???1system_error@system@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$10@?0???1system_error@system@boost@@UEAA@XZ@4HA"
.LBB133_10:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end64:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1system_error@system@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1system_error@system@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1system_error@system@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1system_error@system@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1system_error@system@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1system_error@system@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???1system_error@system@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$10@?0???1system_error@system@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1system_error@system@boost@@UEAA@XZ":
	.long	.Lfunc_begin64@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp204@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp202@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp203@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1system_error@system@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "??1value@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1value@json@boost@@QEAA@XZ"
	.globl	"??1value@json@boost@@QEAA@XZ" # -- Begin function ??1value@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1value@json@boost@@QEAA@XZ":         # @"??1value@json@boost@@QEAA@XZ"
.seh_proc "??1value@json@boost@@QEAA@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	movzx	eax, byte ptr [rcx + 8]
	and	eax, 63
	cmp	al, 7
	ja	.LBB134_13
# %bb.1:
	mov	rsi, rcx
	lea	rcx, [rip + .LJTI134_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB134_5:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB134_13
# %bb.6:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB134_13
# %bb.7:
	cmp	rax, 1
	jne	.LBB134_13
# %bb.8:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	edx, 1
	add	rsp, 32
	pop	rsi
	rex64 jmp	rax             # TAILCALL
.LBB134_13:
	nop
	add	rsp, 32
	pop	rsi
	ret
.LBB134_9:
	cmp	qword ptr [rsi + 16], 0
	je	.LBB134_5
# %bb.10:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB134_5
# %bb.11:
	lea	rcx, [rsi + 16]
	mov	rdx, rsi
	call	"?destroy_impl@array_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	jmp	.LBB134_5
.LBB134_2:
	cmp	qword ptr [rsi + 16], 0
	je	.LBB134_5
# %bb.3:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB134_5
# %bb.4:
	lea	rcx, [rsi + 16]
	mov	rdx, rsi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	jmp	.LBB134_5
.LBB134_12:
	lea	rcx, [rsi + 8]
	mov	rdx, rsi
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	jmp	.LBB134_5
	.p2align	2, 0x90
.LJTI134_0:
	.long	.LBB134_9-.LJTI134_0
	.long	.LBB134_2-.LJTI134_0
	.long	.LBB134_12-.LJTI134_0
	.long	.LBB134_5-.LJTI134_0
	.long	.LBB134_5-.LJTI134_0
	.long	.LBB134_5-.LJTI134_0
	.long	.LBB134_5-.LJTI134_0
	.long	.LBB134_5-.LJTI134_0
	.seh_handlerdata
	.section	.text,"xr",one_only,"??1value@json@boost@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z"
	.globl	"?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z" # -- Begin function ?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z
	.p2align	4, 0x90
"?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z": # @"?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z"
.seh_proc "?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbx, qword ptr [rcx + 16]
	mov	rax, qword ptr [rcx + 24]
	cmp	rax, rbx
	je	.LBB135_5
# %bb.1:
	cmp	byte ptr [rdi + 48], 0
	je	.LBB135_4
# %bb.2:
	mov	rbx, rax
	.p2align	4, 0x90
.LBB135_3:                              # =>This Inner Loop Header: Depth=1
	add	rbx, -24
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	cmp	rbx, qword ptr [rdi + 16]
	jne	.LBB135_3
.LBB135_4:
	mov	qword ptr [rdi + 24], rbx
.LBB135_5:
	mov	qword ptr [rdi + 40], 0
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB135_9
# %bb.6:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB135_9
# %bb.7:
	cmp	rax, 1
	jne	.LBB135_9
# %bb.8:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB135_9:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rdi + 56], rax
	and	eax, 3
	cmp	eax, 2
	setne	byte ptr [rdi + 48]
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB135_12
# %bb.10:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB135_12
# %bb.11:
	cmp	rax, 1
	jne	.LBB135_12
# %bb.13:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	edx, 1
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	rex64 jmp	rax             # TAILCALL
.LBB135_12:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?reset@value_stack@json@boost@@QEAAXVstorage_ptr@23@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
	.globl	"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z" # -- Begin function ?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z
	.p2align	4, 0x90
"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z": # @"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
.seh_proc "?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, r8
	mov	rdi, rcx
	mov	dword ptr [rcx + 88], 0
	mov	byte ptr [rcx + 92], 0
	lea	rax, [rip + "?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"]
	mov	qword ptr [rcx + 96], rax
	mov	byte ptr [rcx + 152], dl
	add	r9, r8
	mov	qword ptr [rcx + 160], r9
	cmp	qword ptr [rcx + 120], 0
	jne	.LBB136_2
# %bb.1:
	mov	rax, qword ptr [rdi + 168]
	mov	qword ptr [rdi + 184], rax
	mov	rcx, rdi
	mov	rdx, rsi
	call	"??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB136_3:
	mov	r15, qword ptr [rsp + 112]
	lea	rbx, [rdi + 88]
	cmp	rax, rdi
	je	.LBB136_6
# %bb.4:
	cmp	byte ptr [rdi + 153], 0
	jne	.LBB136_14
# %bb.5:
	mov	byte ptr [rdi + 153], 1
.LBB136_14:
	movups	xmm0, xmmword ptr [rbx]
	movups	xmmword ptr [r15], xmm0
	sub	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB136_2:
	mov	rcx, rdi
	mov	rdx, rsi
	call	"??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB136_3
.LBB136_6:
	cmp	dword ptr [rbx], 0
	je	.LBB136_7
.LBB136_13:
	mov	rax, qword ptr [rdi + 160]
	jmp	.LBB136_14
.LBB136_7:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB136_8
# %bb.9:
	mov	rax, qword ptr [rdi + 120]
	test	rax, rax
	je	.LBB136_13
# %bb.10:
	mov	rcx, qword ptr [rdi + 128]
	cmp	byte ptr [rcx + rax - 1], 2
	jne	.LBB136_13
# %bb.11:
	cmp	byte ptr [rdi + 153], 0
	jne	.LBB136_13
# %bb.12:
	mov	byte ptr [rdi + 153], 1
	jmp	.LBB136_13
.LBB136_8:
	lea	r14, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, r14
	mov	edx, 3
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rdi + 88], 3
	mov	byte ptr [rdi + 92], al
	mov	qword ptr [rdi + 96], r14
	jmp	.LBB136_13
	.seh_handlerdata
	.section	.text,"xr",discard,"?write@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@QEAA_K_NPEBD_KAEAVerror_code@system@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ"
	.globl	"?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ" # -- Begin function ?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ
	.p2align	4, 0x90
"?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ": # @"?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ"
.seh_proc "?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	rcx, qword ptr [rcx + 56]
	test	cl, 1
	je	.LBB137_4
# %bb.1:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB137_4
# %bb.2:
	cmp	rax, 1
	jne	.LBB137_4
# %bb.3:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB137_4:
	mov	qword ptr [rdi + 56], 0
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, rax
	sub	rcx, qword ptr [rdi + 16]
	cmp	rcx, 24
	jne	.LBB137_6
# %bb.5:
	lea	rcx, [rax - 24]
	mov	qword ptr [rdi + 24], rcx
	mov	rcx, qword ptr [rax - 8]
	mov	qword ptr [rsi + 16], rcx
	movups	xmm0, xmmword ptr [rax - 24]
	movups	xmmword ptr [rsi], xmm0
	mov	qword ptr [rax - 24], 0
	mov	byte ptr [rax - 16], 7
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 72
	pop	rdi
	pop	rsi
	ret
.LBB137_6:
	lea	rdx, [rip + "??_C@_08JEIPHCP@no?5value?$AA@"]
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0logic_error@std@@QEAA@PEBD@Z"
	lea	rdx, [rip + "_TI2?AVlogic_error@std@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?release@value_stack@json@boost@@QEAA?AVvalue@23@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0serializer@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0serializer@json@boost@@QEAA@XZ"
	.globl	"??0serializer@json@boost@@QEAA@XZ" # -- Begin function ??0serializer@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0serializer@json@boost@@QEAA@XZ":    # @"??0serializer@json@boost@@QEAA@XZ"
# %bb.0:
	mov	rax, rcx
	mov	byte ptr [rcx + 84], 0
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx], xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	mov	qword ptr [rcx + 32], 0
	ret
                                        # -- End function
	.def	 "?reset@serializer@json@boost@@QEAAXAEBVvalue@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reset@serializer@json@boost@@QEAAXAEBVvalue@23@@Z"
	.globl	"?reset@serializer@json@boost@@QEAAXAEBVvalue@23@@Z" # -- Begin function ?reset@serializer@json@boost@@QEAAXAEBVvalue@23@@Z
	.p2align	4, 0x90
"?reset@serializer@json@boost@@QEAAXAEBVvalue@23@@Z": # @"?reset@serializer@json@boost@@QEAAXAEBVvalue@23@@Z"
# %bb.0:
	mov	qword ptr [rcx], rdx
	mov	qword ptr [rcx + 24], 0
	mov	byte ptr [rcx + 84], 0
	ret
                                        # -- End function
	.def	 "?read@serializer@json@boost@@QEAA_KPEAD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?read@serializer@json@boost@@QEAA_KPEAD_K@Z"
	.globl	"?read@serializer@json@boost@@QEAA_KPEAD_K@Z" # -- Begin function ?read@serializer@json@boost@@QEAA_KPEAD_K@Z
	.p2align	4, 0x90
"?read@serializer@json@boost@@QEAA_KPEAD_K@Z": # @"?read@serializer@json@boost@@QEAA_KPEAD_K@Z"
# %bb.0:
	jmp	"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z" # TAILCALL
                                        # -- End function
	.def	 "?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
	.globl	"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z" # -- Begin function ?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z
	.p2align	4, 0x90
"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z": # @"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
.Lfunc_begin65:
.seh_proc "?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	cmp	qword ptr [rcx], 0
	je	.LBB141_1
# %bb.5:
	mov	rsi, rdx
	mov	rdi, rcx
	mov	qword ptr [rbp - 32], rdx
	add	r8, rdx
	mov	qword ptr [rbp - 24], r8
	cmp	qword ptr [rcx + 24], 0
	je	.LBB141_6
# %bb.7:
	lea	rdx, [rbp - 32]
	mov	rcx, rdi
	call	"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	cmp	qword ptr [rdi + 24], 0
	jne	.LBB141_10
.LBB141_9:
	mov	byte ptr [rdi + 84], 1
	mov	qword ptr [rdi], 0
.LBB141_10:
	mov	rax, qword ptr [rbp - 32]
	sub	rax, rsi
	add	rsp, 112
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB141_6:
	lea	rdx, [rbp - 32]
	mov	rcx, rdi
	call	"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	cmp	qword ptr [rdi + 24], 0
	jne	.LBB141_10
	jmp	.LBB141_9
.LBB141_1:
	lea	rax, [rip + "??_C@_0CF@IIBKNCCP@?4?4?2?4?4?2boost?1json?1impl?1serializer@"]
	mov	qword ptr [rbp - 32], rax
	lea	rax, [rip + "??_C@_0EF@LAFOMEEF@std?3?3size_t?5boost?3?3json?3?3seriali@"]
	mov	qword ptr [rbp - 24], rax
	mov	qword ptr [rbp - 16], 716
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 56], rax
	lea	rdx, [rbp - 48]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 48], xmm0
	lea	rax, [rip + "??_C@_0BH@CHOIELIB@no?5value?5in?5serializer?$AA@"]
	mov	qword ptr [rbp - 72], rax
	mov	byte ptr [rbp - 64], 1
.Ltmp206:
	lea	rcx, [rbp - 72]
	call	__std_exception_copy
.Ltmp207:
# %bb.2:
	lea	rax, [rip + "??_7logic_error@std@@6B@"]
	mov	qword ptr [rbp - 56], rax
.Ltmp208:
	lea	rcx, [rbp - 56]
	lea	rdx, [rbp - 32]
	call	"??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp209:
# %bb.3:
	.seh_handlerdata
	.long	("$cppxdata$?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z")@IMGREL
	.section	.text,"xr",discard,"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
	.seh_endproc
	.def	 "?dtor$4@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA":
.seh_proc "?dtor$4@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA"
.LBB141_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 56], rax
	lea	rcx, [rbp - 48]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
	.seh_endproc
	.def	 "?dtor$11@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA":
.seh_proc "?dtor$11@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA"
.LBB141_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end65:
	.seh_handlerdata
	.section	.text,"xr",discard,"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
	.p2align	2
"$cppxdata$?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0??write_some@serializer@json@boost@@AEAA_KPEAD_K@Z@4HA"@IMGREL # Action
"$ip2state$?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z":
	.long	.Lfunc_begin65@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp206@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp208@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp209@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
                                        # -- End function
	.def	 "??1static_resource@json@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1static_resource@json@boost@@UEAA@XZ"
	.globl	"??1static_resource@json@boost@@UEAA@XZ" # -- Begin function ??1static_resource@json@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1static_resource@json@boost@@UEAA@XZ": # @"??1static_resource@json@boost@@UEAA@XZ"
# %bb.0:
	ret
                                        # -- End function
	.def	 "??0static_resource@json@boost@@QEAA@PEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0static_resource@json@boost@@QEAA@PEAX_K@Z"
	.globl	"??0static_resource@json@boost@@QEAA@PEAX_K@Z" # -- Begin function ??0static_resource@json@boost@@QEAA@PEAX_K@Z
	.p2align	4, 0x90
"??0static_resource@json@boost@@QEAA@PEAX_K@Z": # @"??0static_resource@json@boost@@QEAA@PEAX_K@Z"
# %bb.0:
	mov	rax, rcx
	lea	rcx, [rip + "??_7static_resource@json@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	qword ptr [rax + 8], rdx
	mov	qword ptr [rax + 16], r8
	mov	qword ptr [rax + 24], 0
	ret
                                        # -- End function
	.def	 "?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
	.globl	"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z" # -- Begin function ?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z
	.p2align	4, 0x90
"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z": # @"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
.Lfunc_begin66:
.seh_proc "?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rax, qword ptr [rcx + 16]
	mov	r8, qword ptr [rcx + 24]
	sub	rax, r8
	cmp	rax, rdx
	jb	.LBB144_1
# %bb.4:
	mov	rax, qword ptr [rcx + 8]
	add	rax, r8
	add	rdx, r8
	mov	qword ptr [rcx + 24], rdx
	add	rsp, 96
	pop	rbp
	ret
.LBB144_1:
	lea	rax, [rip + "??_C@_0CK@PDPIFIGO@?4?4?2?4?4?2boost?1json?1impl?1static_res@"]
	mov	qword ptr [rbp - 56], rax
	lea	rax, [rip + "??_C@_0FC@FJBPHKGA@virtual?5void?5?$CKboost?3?3json?3?3stati@"]
	mov	qword ptr [rbp - 48], rax
	mov	qword ptr [rbp - 40], 43
	mov	qword ptr [rbp - 16], 0
	lea	rax, [rip + "??_C@_0P@GHFPNOJB@bad?5allocation?$AA@"]
	mov	qword ptr [rbp - 24], rax
	lea	rax, [rip + "??_7bad_alloc@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
.Ltmp210:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 56]
	call	"??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z"
	sub	rsp, 32
.Ltmp211:
# %bb.2:
	.seh_handlerdata
	.long	("$cppxdata$?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z")@IMGREL
	.section	.text,"xr",one_only,"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
	.seh_endproc
	.def	 "?dtor$3@?0??do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0??do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z@4HA":
.seh_proc "?dtor$3@?0??do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z@4HA"
.LBB144_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rbp - 32], rax
	lea	rcx, [rbp - 24]
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end66:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
	.p2align	2
"$cppxdata$?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z":
	.long	-1                      # ToState
	.long	"?dtor$3@?0??do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z@4HA"@IMGREL # Action
"$ip2state$?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z":
	.long	.Lfunc_begin66@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp210@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp211@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
                                        # -- End function
	.def	 "??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z": # @"??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Vbad_alloc@std@@@boost@@YAXAEBVbad_alloc@std@@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z"
	.globl	"?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z" # -- Begin function ?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z
	.p2align	4, 0x90
"?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z": # @"?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z"
	.globl	"?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z" # -- Begin function ?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z
	.p2align	4, 0x90
"?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z": # @"?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z"
# %bb.0:
	cmp	rcx, rdx
	sete	al
	ret
                                        # -- End function
	.def	 "?assign@string@json@boost@@QEAAAEAV123@_KD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@_KD@Z"
	.globl	"?assign@string@json@boost@@QEAAAEAV123@_KD@Z" # -- Begin function ?assign@string@json@boost@@QEAAAEAV123@_KD@Z
	.p2align	4, 0x90
"?assign@string@json@boost@@QEAAAEAV123@_KD@Z": # @"?assign@string@json@boost@@QEAAAEAV123@_KD@Z"
.seh_proc "?assign@string@json@boost@@QEAAAEAV123@_KD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	ebx, r8d
	mov	rsi, rdx
	mov	rdi, rcx
	add	rcx, 8
	mov	r8, rdi
	call	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	edx, ebx
	mov	r8, rsi
	call	memset
	mov	rax, rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@_KD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	.globl	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z" # -- Begin function ?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z": # @"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
.seh_proc "?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 56], rax
	mov	al, byte ptr [rcx]
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB149_2
# %bb.1:
	mov	rcx, qword ptr [rsi + 8]
	mov	ecx, dword ptr [rcx + 4]
.LBB149_2:
	cmp	rcx, rdi
	jae	.LBB149_7
# %bb.3:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB149_5
# %bb.4:
	mov	rax, qword ptr [rsi + 8]
	mov	ecx, dword ptr [rax + 4]
.LBB149_5:
	cmp	rdi, 2147483647
	jae	.LBB149_17
# %bb.6:
	mov	r8d, 2147483646
	mov	edx, 2147483646
	sub	rdx, rcx
	lea	rax, [rcx + rcx]
	cmp	rax, rdi
	cmovb	rax, rdi
	cmp	rdx, rcx
	mov	edx, eax
	cmovb	rdx, r8
	lea	rcx, [rsp + 40]
	mov	r8, rbx
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	rcx, rsi
	mov	rdx, rbx
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 40]
	movups	xmmword ptr [rsi], xmm0
	mov	al, byte ptr [rsi]
.LBB149_7:
	cmp	al, -126
	jne	.LBB149_9
# %bb.8:
	mov	al, 14
	sub	al, dil
	mov	byte ptr [rsi + 15], al
	lea	rax, [rsi + rdi]
	add	rax, 1
	jmp	.LBB149_13
.LBB149_9:
	mov	rax, qword ptr [rsi + 8]
	mov	dword ptr [rax], edi
	cmp	byte ptr [rsi], -126
	jne	.LBB149_11
# %bb.10:
	lea	rax, [rsi + 1]
	jmp	.LBB149_12
.LBB149_11:
	mov	rax, qword ptr [rsi + 8]
	add	rax, 8
.LBB149_12:
	add	rax, rdi
.LBB149_13:
	mov	byte ptr [rax], 0
	cmp	byte ptr [rsi], -126
	jne	.LBB149_15
# %bb.14:
	add	rsi, 1
	jmp	.LBB149_16
.LBB149_15:
	mov	rsi, qword ptr [rsi + 8]
	add	rsi, 8
.LBB149_16:
	mov	rcx, qword ptr [rsp + 56]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB149_17:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z"
	.globl	"?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z" # -- Begin function ?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z
	.p2align	4, 0x90
"?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z": # @"?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z"
.seh_proc "?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	cmp	rcx, rdx
	je	.LBB150_7
# %bb.1:
	mov	rdi, rdx
	mov	al, byte ptr [rdx + 8]
	cmp	al, 2
	jne	.LBB150_3
# %bb.2:
	mov	rdi, qword ptr [rdi + 16]
	mov	ebx, dword ptr [rdi]
	jmp	.LBB150_5
.LBB150_3:
	movsx	rcx, byte ptr [rdi + 23]
	mov	ebx, 14
	sub	rbx, rcx
	cmp	al, -126
	jne	.LBB150_4
# %bb.8:
	add	rdi, 9
	jmp	.LBB150_6
.LBB150_4:
	mov	rdi, qword ptr [rdi + 16]
.LBB150_5:
	add	rdi, 8
.LBB150_6:
	lea	rcx, [rsi + 8]
	mov	rdx, rbx
	mov	r8, rsi
	call	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
.LBB150_7:
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@AEBV123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z"
	.globl	"?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z" # -- Begin function ?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z
	.p2align	4, 0x90
"?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z": # @"?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z"
.seh_proc "?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx
	add	rcx, 8
	mov	rdx, r8
	mov	r8, rbx
	call	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	rdx, rdi
	mov	r8, rsi
	call	memcpy
	mov	rax, rbx
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@PEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z"
	.globl	"?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z" # -- Begin function ?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z
	.p2align	4, 0x90
"?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z": # @"?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z"
.seh_proc "?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rbx, qword ptr [rdx]
	test	rbx, rbx
	je	.LBB152_2
# %bb.1:
	and	rbx, -4
	jmp	.LBB152_5
.LBB152_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB152_3
.LBB152_5:
	mov	rsi, qword ptr [r14]
	test	rsi, rsi
	je	.LBB152_7
# %bb.6:
	and	rsi, -4
	jmp	.LBB152_10
.LBB152_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB152_8
.LBB152_10:
	cmp	rsi, rbx
	je	.LBB152_12
# %bb.11:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	rdx, rbx
	call	qword ptr [rax + 24]
	test	al, al
	je	.LBB152_13
.LBB152_12:
	lea	rcx, [r14 + 8]
	mov	rdx, r14
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rdi + 8]
	movups	xmmword ptr [r14 + 8], xmm0
	mov	word ptr [rdi + 8], 130
	mov	byte ptr [rdi + 23], 14
	jmp	.LBB152_20
.LBB152_13:
	cmp	r14, rdi
	je	.LBB152_20
# %bb.14:
	mov	al, byte ptr [rdi + 8]
	cmp	al, 2
	jne	.LBB152_16
# %bb.15:
	mov	rdi, qword ptr [rdi + 16]
	mov	esi, dword ptr [rdi]
	jmp	.LBB152_18
.LBB152_16:
	movsx	rcx, byte ptr [rdi + 23]
	mov	esi, 14
	sub	rsi, rcx
	cmp	al, -126
	jne	.LBB152_17
# %bb.21:
	add	rdi, 9
	jmp	.LBB152_19
.LBB152_17:
	mov	rdi, qword ptr [rdi + 16]
.LBB152_18:
	add	rdi, 8
.LBB152_19:
	lea	rcx, [r14 + 8]
	mov	rdx, rsi
	mov	r8, r14
	call	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	rdx, rdi
	mov	r8, rsi
	call	memcpy
.LBB152_20:
	mov	rax, r14
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB152_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB152_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB152_5
.LBB152_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB152_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB152_10
	.seh_handlerdata
	.section	.text,"xr",one_only,"?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.globl	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # -- Begin function ?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z": # @"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
.Lfunc_begin67:
.seh_proc "?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	al, byte ptr [rcx]
	cmp	al, 66
	je	.LBB153_8
# %bb.1:
	cmp	al, 2
	jne	.LBB153_14
# %bb.2:
	mov	rdi, qword ptr [rdx]
	test	rdi, rdi
	je	.LBB153_4
# %bb.3:
	and	rdi, -4
	jmp	.LBB153_7
.LBB153_8:
	mov	rdi, qword ptr [rdx]
	test	rdi, rdi
	je	.LBB153_10
# %bb.9:
	and	rdi, -4
	jmp	.LBB153_13
.LBB153_4:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB153_5
.LBB153_7:
	mov	rdx, qword ptr [rsi + 8]
	mov	r8d, dword ptr [rdx + 4]
	add	r8, 9
	mov	rax, qword ptr [rdi]
.Ltmp214:
	mov	r9d, 4
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp215:
	jmp	.LBB153_14
.LBB153_10:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB153_11
.LBB153_13:
	mov	r8d, dword ptr [rsi + 4]
	add	r8d, 1
	mov	rdx, qword ptr [rsi + 8]
	mov	rax, qword ptr [rdi]
.Ltmp212:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp213:
.LBB153_14:
	nop
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB153_5:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB153_7
# %bb.6:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB153_7
.LBB153_11:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB153_13
# %bb.12:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB153_13
	.seh_handlerdata
	.long	("$cppxdata$?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL
	.section	.text,"xr",discard,"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.def	 "?dtor$15@?0??destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA":
.seh_proc "?dtor$15@?0??destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"
.LBB153_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end67:
	.seh_handlerdata
	.section	.text,"xr",discard,"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.p2align	2
"$cppxdata$?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0??destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # Action
"$ip2state$?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	.Lfunc_begin67@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp214@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp213@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
                                        # -- End function
	.def	 "??0string_impl@detail@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0string_impl@detail@json@boost@@QEAA@XZ"
	.globl	"??0string_impl@detail@json@boost@@QEAA@XZ" # -- Begin function ??0string_impl@detail@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??0string_impl@detail@json@boost@@QEAA@XZ": # @"??0string_impl@detail@json@boost@@QEAA@XZ"
# %bb.0:
	mov	rax, rcx
	mov	word ptr [rcx], 130
	mov	byte ptr [rcx + 15], 14
	ret
                                        # -- End function
	.def	 "?shrink_to_fit@string@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?shrink_to_fit@string@json@boost@@QEAAXXZ"
	.globl	"?shrink_to_fit@string@json@boost@@QEAAXXZ" # -- Begin function ?shrink_to_fit@string@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?shrink_to_fit@string@json@boost@@QEAAXXZ": # @"?shrink_to_fit@string@json@boost@@QEAAXXZ"
# %bb.0:
	mov	rdx, rcx
	add	rcx, 8
	jmp	"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # TAILCALL
                                        # -- End function
	.def	 "?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.globl	"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z" # -- Begin function ?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z": # @"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
.Lfunc_begin68:
.seh_proc "?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	cmp	byte ptr [rcx], -126
	je	.LBB156_16
# %bb.1:
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rbx, qword ptr [rcx + 8]
	mov	edx, dword ptr [rbx]
	cmp	rdx, 14
	ja	.LBB156_8
# %bb.2:
	mov	byte ptr [rsi], -126
	mov	al, 14
	sub	al, byte ptr [rbx]
	mov	byte ptr [rsi + 15], al
	mov	eax, dword ptr [rbx]
	mov	byte ptr [rsi + rax + 1], 0
	mov	rsi, qword ptr [rdi]
	test	rsi, rsi
	je	.LBB156_4
# %bb.3:
	and	rsi, -4
	jmp	.LBB156_7
.LBB156_8:
	cmp	edx, dword ptr [rbx + 4]
	jae	.LBB156_16
# %bb.9:
.Ltmp216:
	lea	rcx, [rbp - 16]
	mov	r8, rdi
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
.Ltmp217:
# %bb.10:
	mov	rax, qword ptr [rbp - 8]
	add	rax, 8
	cmp	byte ptr [rbp - 16], -126
	lea	rcx, [rbp - 15]
	cmovne	rcx, rax
	mov	al, byte ptr [rsi]
	cmp	al, -126
	jne	.LBB156_13
# %bb.11:
	lea	rdx, [rsi + 1]
	jmp	.LBB156_12
.LBB156_4:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB156_5
.LBB156_7:
	mov	r8d, dword ptr [rbx + 4]
	add	r8, 9
	mov	rax, qword ptr [rsi]
.Ltmp218:
	mov	r9d, 4
	mov	rcx, rsi
	mov	rdx, rbx
	call	qword ptr [rax + 16]
.Ltmp219:
	jmp	.LBB156_16
.LBB156_13:
	mov	rbx, qword ptr [rsi + 8]
	lea	rdx, [rbx + 8]
	cmp	al, 2
	jne	.LBB156_12
# %bb.14:
	mov	r8d, dword ptr [rbx]
	jmp	.LBB156_15
.LBB156_12:
	movsx	rax, byte ptr [rsi + 15]
	mov	r8d, 14
	sub	r8, rax
.LBB156_15:
	call	memcpy
	mov	rcx, rsi
	mov	rdx, rdi
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rbp - 16]
	movups	xmmword ptr [rsi], xmm0
.LBB156_16:                             # Block address taken
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB156_5:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB156_7
# %bb.6:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB156_7
	.seh_handlerdata
	.long	("$cppxdata$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL
	.section	.text,"xr",one_only,"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.def	 "?dtor$17@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$17@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA":
.seh_proc "?dtor$17@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"
.LBB156_17:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.def	 "?catch$18@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$18@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA":
.seh_proc "?catch$18@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"
	.seh_handler __CxxFrameHandler3, @unwind, @except
.LBB156_18:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	lea	rax, [rip + .LBB156_16]
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CATCHRET
.Lfunc_end68:
	.seh_handlerdata
	.long	("$cppxdata$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL
	.section	.text,"xr",one_only,"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	.p2align	2
"$cppxdata$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # UnwindMap
	.long	1                       # NumTryBlocks
	.long	("$tryMap$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	-1                      # ToState
	.long	"?dtor$17@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	0                       # Action
	.long	0                       # ToState
	.long	0                       # Action
"$tryMap$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	1                       # TryLow
	.long	1                       # TryHigh
	.long	2                       # CatchHigh
	.long	1                       # NumCatches
	.long	("$handlerMap$0$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z")@IMGREL # HandlerArray
"$handlerMap$0$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	8                       # Adjectives
	.long	"??_R0?AVexception@std@@@8"@IMGREL # Type
	.long	0                       # CatchObjOffset
	.long	"?catch$18@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # Handler
	.long	88                      # ParentFrameOffset
"$ip2state$?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z":
	.long	.Lfunc_begin68@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp216@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp218@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp219@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	"?catch$18@?0??shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # IP
	.long	2                       # ToState
	.section	.text,"xr",one_only,"?shrink_to_fit@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
                                        # -- End function
	.def	 "?clear@string@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?clear@string@json@boost@@QEAAXXZ"
	.globl	"?clear@string@json@boost@@QEAAXXZ" # -- Begin function ?clear@string@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?clear@string@json@boost@@QEAAXXZ":    # @"?clear@string@json@boost@@QEAAXXZ"
# %bb.0:
	cmp	byte ptr [rcx + 8], -126
	jne	.LBB157_2
# %bb.1:
	mov	byte ptr [rcx + 23], 14
	jmp	.LBB157_3
.LBB157_2:
	mov	rax, qword ptr [rcx + 16]
	mov	dword ptr [rax], 0
	cmp	byte ptr [rcx + 8], -126
	jne	.LBB157_4
.LBB157_3:
	add	rcx, 9
	mov	byte ptr [rcx], 0
	ret
.LBB157_4:
	mov	rcx, qword ptr [rcx + 16]
	add	rcx, 8
	mov	byte ptr [rcx], 0
	ret
                                        # -- End function
	.def	 "?push_back@string@json@boost@@QEAAXD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_back@string@json@boost@@QEAAXD@Z"
	.globl	"?push_back@string@json@boost@@QEAAXD@Z" # -- Begin function ?push_back@string@json@boost@@QEAAXD@Z
	.p2align	4, 0x90
"?push_back@string@json@boost@@QEAAXD@Z": # @"?push_back@string@json@boost@@QEAAXD@Z"
.seh_proc "?push_back@string@json@boost@@QEAAXD@Z"
# %bb.0:
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	ebx, edx
	mov	r8, rcx
	add	rcx, 8
	mov	edx, 1
	call	"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	byte ptr [rax], bl
	add	rsp, 32
	pop	rbx
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_back@string@json@boost@@QEAAXD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	.globl	"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z" # -- Begin function ?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z": # @"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
.seh_proc "?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	r15, r8
	mov	r12, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 48], rax
	mov	al, byte ptr [rcx]
	cmp	al, 2
	jne	.LBB159_2
# %bb.1:
	mov	rcx, qword ptr [rdi + 8]
	mov	ecx, dword ptr [rcx]
	jmp	.LBB159_3
.LBB159_2:
	movsx	rdx, byte ptr [rdi + 15]
	mov	ecx, 14
	sub	rcx, rdx
.LBB159_3:
	mov	edx, 2147483646
	sub	rdx, rcx
	cmp	rdx, r12
	jb	.LBB159_39
# %bb.4:
	cmp	al, 2
	jne	.LBB159_6
# %bb.5:
	mov	rcx, qword ptr [rdi + 8]
	mov	edx, dword ptr [rcx]
	mov	ecx, dword ptr [rcx + 4]
	jmp	.LBB159_7
.LBB159_6:
	movsx	rbx, byte ptr [rdi + 15]
	mov	ecx, 14
	mov	edx, 14
	sub	rdx, rbx
.LBB159_7:
	sub	rcx, rdx
	cmp	rcx, r12
	jae	.LBB159_8
# %bb.20:
	cmp	al, 2
	jne	.LBB159_22
# %bb.21:
	mov	rax, qword ptr [rdi + 8]
	mov	ecx, dword ptr [rax]
	mov	eax, dword ptr [rax + 4]
	jmp	.LBB159_23
.LBB159_8:
	cmp	al, 2
	jne	.LBB159_10
# %bb.9:
	mov	rax, qword ptr [rdi + 8]
	mov	ecx, dword ptr [rax]
	add	rcx, r12
	jmp	.LBB159_12
.LBB159_22:
	movsx	rdx, byte ptr [rdi + 15]
	mov	eax, 14
	mov	ecx, 14
	sub	rcx, rdx
.LBB159_23:
	add	rcx, r12
	cmp	rcx, 2147483647
	jae	.LBB159_39
# %bb.24:
	mov	ebx, 2147483646
	mov	edx, 2147483646
	sub	rdx, rax
	lea	rsi, [rax + rax]
	cmp	rsi, rcx
	cmovb	rsi, rcx
	cmp	rdx, rax
	mov	edx, esi
	cmovb	rdx, rbx
	lea	rcx, [rsp + 32]
	mov	r8, r15
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	bl, byte ptr [rsp + 32]
	mov	rcx, qword ptr [rsp + 40]
	add	rcx, 8
	cmp	bl, -126
	lea	r14, [rsp + 33]
	cmove	rcx, r14
	mov	al, byte ptr [rdi]
	cmp	al, -126
	jne	.LBB159_27
# %bb.25:
	lea	rdx, [rdi + 1]
	jmp	.LBB159_26
.LBB159_10:
	movsx	rdx, byte ptr [rdi + 15]
	mov	rcx, r12
	sub	rcx, rdx
	add	rcx, 14
	cmp	al, -126
	jne	.LBB159_11
# %bb.40:
	mov	al, 14
	sub	al, cl
	mov	byte ptr [rdi + 15], al
	lea	rax, [rdi + rcx]
	add	rax, 1
	jmp	.LBB159_16
.LBB159_27:
	mov	rsi, qword ptr [rdi + 8]
	lea	rdx, [rsi + 8]
	cmp	al, 2
	jne	.LBB159_26
# %bb.28:
	mov	r8d, dword ptr [rsi]
	jmp	.LBB159_29
.LBB159_26:
	movsx	rax, byte ptr [rdi + 15]
	mov	r8d, 14
	sub	r8, rax
.LBB159_29:
	call	memcpy
	cmp	byte ptr [rdi], 2
	jne	.LBB159_31
# %bb.30:
	mov	rax, qword ptr [rdi + 8]
	mov	eax, dword ptr [rax]
	jmp	.LBB159_32
.LBB159_31:
	movsx	rcx, byte ptr [rdi + 15]
	mov	eax, 14
	sub	rax, rcx
.LBB159_32:
	add	rax, r12
	cmp	bl, -126
	jne	.LBB159_34
# %bb.33:
	mov	cl, 14
	sub	cl, al
	mov	byte ptr [rsp + 47], cl
	lea	rcx, [rsp + rax]
	add	rcx, 33
	jmp	.LBB159_35
.LBB159_34:
	mov	rcx, qword ptr [rsp + 40]
	mov	dword ptr [rcx], eax
	mov	rcx, qword ptr [rsp + 40]
	add	rcx, 8
	cmp	byte ptr [rsp + 32], -126
	cmove	rcx, r14
	add	rcx, rax
.LBB159_35:
	mov	byte ptr [rcx], 0
	mov	rcx, rdi
	mov	rdx, r15
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 32]
	movups	xmmword ptr [rdi], xmm0
	jmp	.LBB159_17
.LBB159_11:
	mov	rax, qword ptr [rdi + 8]
.LBB159_12:
	mov	dword ptr [rax], ecx
	cmp	byte ptr [rdi], -126
	jne	.LBB159_14
# %bb.13:
	lea	rax, [rdi + 1]
	jmp	.LBB159_15
.LBB159_14:
	mov	rax, qword ptr [rdi + 8]
	add	rax, 8
.LBB159_15:
	add	rax, rcx
.LBB159_16:
	mov	byte ptr [rax], 0
.LBB159_17:
	mov	al, byte ptr [rdi]
	cmp	al, -126
	jne	.LBB159_36
# %bb.18:
	lea	rbx, [rdi + 1]
	jmp	.LBB159_19
.LBB159_36:
	mov	rcx, qword ptr [rdi + 8]
	lea	rbx, [rcx + 8]
	cmp	al, 2
	jne	.LBB159_19
# %bb.37:
	mov	eax, dword ptr [rcx]
	jmp	.LBB159_38
.LBB159_19:
	movsx	rcx, byte ptr [rdi + 15]
	mov	eax, 14
	sub	rax, rcx
.LBB159_38:
	add	rbx, rax
	sub	rbx, r12
	mov	rcx, qword ptr [rsp + 48]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rbx
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB159_39:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?pop_back@string@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?pop_back@string@json@boost@@QEAAXXZ"
	.globl	"?pop_back@string@json@boost@@QEAAXXZ" # -- Begin function ?pop_back@string@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?pop_back@string@json@boost@@QEAAXXZ": # @"?pop_back@string@json@boost@@QEAAXXZ"
# %bb.0:
	mov	dl, byte ptr [rcx + 8]
	cmp	dl, -126
	jne	.LBB160_3
# %bb.1:
	lea	r8, [rcx + 9]
	jmp	.LBB160_2
.LBB160_3:
	mov	rax, qword ptr [rcx + 16]
	lea	r8, [rax + 8]
	cmp	dl, 2
	jne	.LBB160_2
# %bb.4:
	mov	edx, dword ptr [rax]
	jmp	.LBB160_5
.LBB160_2:
	movsx	rax, byte ptr [rcx + 23]
	mov	edx, 14
	sub	rdx, rax
.LBB160_5:
	mov	byte ptr [rdx + r8 - 1], 0
	cmp	byte ptr [rcx + 8], 2
	jne	.LBB160_7
# %bb.6:
	mov	rax, qword ptr [rcx + 16]
	add	dword ptr [rax], -1
	ret
.LBB160_7:
	add	byte ptr [rcx + 23], 1
	ret
                                        # -- End function
	.def	 "?append@string@json@boost@@QEAAAEAV123@_KD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?append@string@json@boost@@QEAAAEAV123@_KD@Z"
	.globl	"?append@string@json@boost@@QEAAAEAV123@_KD@Z" # -- Begin function ?append@string@json@boost@@QEAAAEAV123@_KD@Z
	.p2align	4, 0x90
"?append@string@json@boost@@QEAAAEAV123@_KD@Z": # @"?append@string@json@boost@@QEAAAEAV123@_KD@Z"
.seh_proc "?append@string@json@boost@@QEAAAEAV123@_KD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	ebx, r8d
	mov	rsi, rdx
	mov	rdi, rcx
	add	rcx, 8
	mov	r8, rdi
	call	"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	edx, ebx
	mov	r8, rsi
	call	memset
	mov	rax, rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?append@string@json@boost@@QEAAAEAV123@_KD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rdi, qword ptr [rdx]
	mov	rbx, qword ptr [rdx + 8]
	add	rcx, 8
	mov	rdx, rbx
	mov	r8, rsi
	call	"?append@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?append@string@json@boost@@QEAAAEAV123@V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	add	rcx, 8
	mov	rax, qword ptr [r8]
	mov	r9, qword ptr [r8 + 8]
	mov	qword ptr [rsp + 32], rsi
	mov	r8, rax
	call	"?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z"
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert@string@json@boost@@QEAAAEAV123@_KV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z"
	.globl	"?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z" # -- Begin function ?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z": # @"?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z"
.seh_proc "?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	r15, r9
	mov	rbx, rdx
	mov	r12, rcx
	mov	al, byte ptr [rcx]
	cmp	al, 2
	jne	.LBB164_2
# %bb.1:
	mov	rcx, qword ptr [r12 + 8]
	mov	esi, dword ptr [rcx]
	jmp	.LBB164_3
.LBB164_2:
	movsx	rcx, byte ptr [r12 + 15]
	mov	esi, 14
	sub	rsi, rcx
.LBB164_3:
	mov	r13, rsi
	sub	r13, rbx
	jb	.LBB164_33
# %bb.4:
	cmp	al, -126
	jne	.LBB164_6
# %bb.5:
	lea	rdi, [r12 + 1]
	jmp	.LBB164_7
.LBB164_6:
	mov	rdi, qword ptr [r12 + 8]
	add	rdi, 8
.LBB164_7:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB164_9
# %bb.8:
	mov	rcx, qword ptr [r12 + 8]
	mov	ecx, dword ptr [rcx + 4]
.LBB164_9:
	sub	rcx, rsi
	cmp	rcx, r15
	jae	.LBB164_10
# %bb.21:
	mov	ecx, 2147483646
	sub	rcx, rsi
	cmp	rcx, r15
	jb	.LBB164_34
# %bb.22:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB164_24
# %bb.23:
	mov	rax, qword ptr [r12 + 8]
	mov	ecx, dword ptr [rax + 4]
.LBB164_24:
	add	rsi, r15
	cmp	rsi, 2147483647
	jae	.LBB164_34
# %bb.25:
	mov	r14, r8
	mov	r8, qword ptr [rsp + 176]
	mov	eax, 2147483646
	mov	edx, 2147483646
	sub	rdx, rcx
	lea	rbp, [rcx + rcx]
	cmp	rbp, rsi
	cmovb	rbp, rsi
	cmp	rdx, rcx
	mov	edx, ebp
	cmovb	rdx, rax
	lea	rcx, [rsp + 32]
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	al, byte ptr [rsp + 32]
	cmp	al, 2
	jne	.LBB164_27
# %bb.26:
	mov	rax, qword ptr [rsp + 40]
	mov	dword ptr [rax], esi
	mov	al, byte ptr [rsp + 32]
	cmp	al, -126
	je	.LBB164_29
.LBB164_30:
	mov	rcx, qword ptr [rsp + 40]
	add	rcx, 8
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
	mov	rbp, qword ptr [rsp + 40]
	add	rbp, 8
	jmp	.LBB164_31
.LBB164_10:
	cmp	rdi, r8
	ja	.LBB164_13
# %bb.11:
	lea	rax, [rdi + rsi]
	cmp	rax, r8
	jbe	.LBB164_13
# %bb.12:
	mov	r14, r8
	sub	r14, rdi
	lea	rbp, [r14 + r15]
	cmp	rbp, rbx
	jbe	.LBB164_13
# %bb.14:
	mov	qword ptr [rsp + 64], r8 # 8-byte Spill
	lea	rcx, [r15 + rbx]
	add	rcx, rdi
	lea	rdx, [rdi + rbx]
	add	r13, 1
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	mov	qword ptr [rsp + 48], rdx # 8-byte Spill
	mov	r8, r13
	call	memmove
	cmp	r14, rbx
	jae	.LBB164_16
# %bb.15:
	mov	r13, rbx
	sub	r13, r14
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, qword ptr [rsp + 64] # 8-byte Reload
	mov	r8, r13
	call	memcpy
	add	rbx, r13
	add	rdi, rbx
	mov	r8, r15
	sub	r8, r13
	mov	rcx, rdi
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	jmp	.LBB164_18
.LBB164_13:
	lea	rcx, [r15 + rbx]
	add	rcx, rdi
	add	rdi, rbx
	add	r13, 1
	mov	rdx, rdi
	mov	rbx, r8
	mov	r8, r13
	call	memmove
	mov	rcx, rdi
	mov	rdx, rbx
.LBB164_17:
	mov	r8, r15
.LBB164_18:
	call	memcpy
	add	rsi, r15
	cmp	byte ptr [r12], 2
	jne	.LBB164_20
# %bb.19:
	mov	rax, qword ptr [r12 + 8]
	mov	dword ptr [rax], esi
	jmp	.LBB164_32
.LBB164_20:
	mov	al, 14
	sub	al, sil
	mov	byte ptr [r12 + 15], al
	jmp	.LBB164_32
.LBB164_27:
	mov	cl, 14
	sub	cl, sil
	mov	byte ptr [rsp + 47], cl
	cmp	al, -126
	jne	.LBB164_30
.LBB164_29:
	lea	rbp, [rsp + 33]
	mov	rcx, rbp
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
.LBB164_31:
	add	rbp, rbx
	add	rbp, r15
	add	rdi, rbx
	add	r13, 1
	mov	rcx, rbp
	mov	rdx, rdi
	mov	r8, r13
	call	memcpy
	mov	rax, qword ptr [rsp + 40]
	add	rax, 8
	cmp	byte ptr [rsp + 32], -126
	lea	rcx, [rsp + 33]
	cmovne	rcx, rax
	add	rcx, rbx
	mov	rdx, r14
	mov	r8, r15
	call	memcpy
	mov	rcx, r12
	mov	rdx, qword ptr [rsp + 176]
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 32]
	movups	xmmword ptr [r12], xmm0
.LBB164_32:
	add	rsp, 72
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB164_16:
	add	rdi, rbp
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	mov	rdx, rdi
	jmp	.LBB164_17
.LBB164_33:
	call	"?raise@char_pos_error@json@boost@@SAXXZ"
.LBB164_34:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert@string_impl@detail@json@boost@@QEAAX_KPEBD0AEBVstorage_ptr@34@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?insert@string@json@boost@@QEAAAEAV123@_K0D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert@string@json@boost@@QEAAAEAV123@_K0D@Z"
	.globl	"?insert@string@json@boost@@QEAAAEAV123@_K0D@Z" # -- Begin function ?insert@string@json@boost@@QEAAAEAV123@_K0D@Z
	.p2align	4, 0x90
"?insert@string@json@boost@@QEAAAEAV123@_K0D@Z": # @"?insert@string@json@boost@@QEAAAEAV123@_K0D@Z"
.seh_proc "?insert@string@json@boost@@QEAAAEAV123@_K0D@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	ebx, r9d
	mov	rsi, r8
	mov	rdi, rcx
	add	rcx, 8
	mov	r9, rdi
	call	"?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	edx, ebx
	mov	r8, rsi
	call	memset
	mov	rax, rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert@string@json@boost@@QEAAAEAV123@_K0D@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z"
	.globl	"?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z" # -- Begin function ?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z": # @"?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z"
.seh_proc "?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	r14, r9
	mov	r12, r8
	mov	r15, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 56], rax
	mov	al, byte ptr [rcx]
	cmp	al, 2
	jne	.LBB166_2
# %bb.1:
	mov	rcx, qword ptr [rsi + 8]
	mov	edi, dword ptr [rcx]
	jmp	.LBB166_3
.LBB166_2:
	movsx	rcx, byte ptr [rsi + 15]
	mov	edi, 14
	sub	rdi, rcx
.LBB166_3:
	mov	r13, rdi
	sub	r13, r15
	jb	.LBB166_29
# %bb.4:
	cmp	al, -126
	jne	.LBB166_6
# %bb.5:
	lea	rbx, [rsi + 1]
	cmp	al, 2
	je	.LBB166_8
.LBB166_9:
	movsx	r8, byte ptr [rsi + 15]
	mov	ecx, 14
	mov	edx, 14
	sub	rdx, r8
	jmp	.LBB166_10
.LBB166_6:
	mov	rbx, qword ptr [rsi + 8]
	add	rbx, 8
	cmp	al, 2
	jne	.LBB166_9
.LBB166_8:
	mov	rcx, qword ptr [rsi + 8]
	mov	edx, dword ptr [rcx]
	mov	ecx, dword ptr [rcx + 4]
.LBB166_10:
	sub	rcx, rdx
	cmp	rcx, r12
	jae	.LBB166_11
# %bb.14:
	mov	ecx, 2147483646
	sub	rcx, rdi
	cmp	rcx, r12
	jb	.LBB166_30
# %bb.15:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB166_17
# %bb.16:
	mov	rax, qword ptr [rsi + 8]
	mov	ecx, dword ptr [rax + 4]
.LBB166_17:
	add	rdi, r12
	cmp	rdi, 2147483647
	jae	.LBB166_30
# %bb.18:
	mov	r8d, 2147483646
	mov	edx, 2147483646
	sub	rdx, rcx
	lea	rax, [rcx + rcx]
	cmp	rax, rdi
	cmovb	rax, rdi
	cmp	rdx, rcx
	mov	edx, eax
	cmovb	rdx, r8
	lea	rcx, [rsp + 40]
	mov	r8, r14
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	al, byte ptr [rsp + 40]
	cmp	al, 2
	jne	.LBB166_20
# %bb.19:
	mov	rax, qword ptr [rsp + 48]
	mov	dword ptr [rax], edi
	mov	al, byte ptr [rsp + 40]
	cmp	al, -126
	je	.LBB166_22
.LBB166_23:
	mov	rcx, qword ptr [rsp + 48]
	add	rcx, 8
	mov	rdx, rbx
	mov	r8, r15
	call	memcpy
	mov	rdi, qword ptr [rsp + 48]
	add	rdi, 8
	jmp	.LBB166_24
.LBB166_11:
	add	rbx, r15
	lea	rcx, [rbx + r12]
	add	r13, 1
	mov	rdx, rbx
	mov	r8, r13
	call	memmove
	add	rdi, r12
	cmp	byte ptr [rsi], 2
	jne	.LBB166_13
# %bb.12:
	mov	rax, qword ptr [rsi + 8]
	mov	dword ptr [rax], edi
	jmp	.LBB166_28
.LBB166_13:
	mov	al, 14
	sub	al, dil
	mov	byte ptr [rsi + 15], al
	jmp	.LBB166_28
.LBB166_20:
	mov	cl, 14
	sub	cl, dil
	mov	byte ptr [rsp + 55], cl
	cmp	al, -126
	jne	.LBB166_23
.LBB166_22:
	lea	rdi, [rsp + 41]
	mov	rcx, rdi
	mov	rdx, rbx
	mov	r8, r15
	call	memcpy
.LBB166_24:
	add	rdi, r15
	add	rdi, r12
	add	rbx, r15
	add	r13, 1
	mov	rcx, rdi
	mov	rdx, rbx
	mov	r8, r13
	call	memcpy
	mov	rcx, rsi
	mov	rdx, r14
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 40]
	movups	xmmword ptr [rsi], xmm0
	cmp	byte ptr [rsi], -126
	jne	.LBB166_26
# %bb.25:
	add	rsi, 1
	mov	rbx, rsi
	jmp	.LBB166_27
.LBB166_26:
	mov	rbx, qword ptr [rsi + 8]
	add	rbx, 8
.LBB166_27:
	add	rbx, r15
.LBB166_28:
	mov	rcx, qword ptr [rsp + 56]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rbx
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB166_29:
	call	"?raise@char_pos_error@json@boost@@SAXXZ"
.LBB166_30:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?insert_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K0AEBVstorage_ptr@34@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	add	rcx, 8
	mov	r10, qword ptr [r9]
	mov	rax, qword ptr [r9 + 8]
	mov	qword ptr [rsp + 40], rsi
	mov	qword ptr [rsp + 32], rax
	mov	r9, r10
	call	"?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z"
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?replace@string@json@boost@@QEAAAEAV123@_K0V?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z"
	.globl	"?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z" # -- Begin function ?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z": # @"?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z"
.seh_proc "?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rdi, r8
	mov	r13, rdx
	mov	r12, rcx
	mov	al, byte ptr [rcx]
	cmp	al, 2
	jne	.LBB168_2
# %bb.1:
	mov	rcx, qword ptr [r12 + 8]
	mov	r14d, dword ptr [rcx]
	jmp	.LBB168_3
.LBB168_2:
	movsx	rcx, byte ptr [r12 + 15]
	mov	r14d, 14
	sub	r14, rcx
.LBB168_3:
	mov	rsi, r14
	sub	rsi, r13
	jb	.LBB168_36
# %bb.4:
	mov	r15, qword ptr [rsp + 176]
	cmp	al, -126
	jne	.LBB168_6
# %bb.5:
	lea	rbx, [r12 + 1]
	jmp	.LBB168_7
.LBB168_6:
	mov	rbx, qword ptr [r12 + 8]
	add	rbx, 8
.LBB168_7:
	cmp	rsi, rdi
	cmovb	rdi, rsi
	cmp	rdi, r15
	mov	rbp, rdi
	cmovb	rbp, r15
	mov	rcx, rdi
	cmova	rcx, r15
	cmp	rdi, r15
	ja	.LBB168_11
# %bb.8:
	sub	rbp, rcx
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB168_10
# %bb.9:
	mov	rcx, qword ptr [r12 + 8]
	mov	ecx, dword ptr [rcx + 4]
.LBB168_10:
	sub	rcx, r14
	cmp	rbp, rcx
	jbe	.LBB168_11
# %bb.24:
	mov	ecx, 2147483646
	sub	rcx, r14
	cmp	rbp, rcx
	ja	.LBB168_37
# %bb.25:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB168_27
# %bb.26:
	mov	rax, qword ptr [r12 + 8]
	mov	ecx, dword ptr [rax + 4]
.LBB168_27:
	mov	qword ptr [rsp + 56], r9 # 8-byte Spill
	add	rbp, r14
	cmp	rbp, 2147483647
	jae	.LBB168_37
# %bb.28:
	mov	r8, qword ptr [rsp + 184]
	mov	r9d, 2147483646
	mov	edx, 2147483646
	sub	rdx, rcx
	lea	rax, [rcx + rcx]
	cmp	rax, rbp
	cmovb	rax, rbp
	cmp	rdx, rcx
	mov	edx, eax
	cmovb	rdx, r9
	lea	rcx, [rsp + 40]
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	al, byte ptr [rsp + 40]
	cmp	al, 2
	jne	.LBB168_30
# %bb.29:
	mov	rax, qword ptr [rsp + 48]
	mov	dword ptr [rax], ebp
	mov	al, byte ptr [rsp + 40]
	cmp	al, -126
	je	.LBB168_32
.LBB168_33:
	mov	rcx, qword ptr [rsp + 48]
	add	rcx, 8
	mov	rdx, rbx
	mov	r8, r13
	call	memcpy
	mov	rbp, qword ptr [rsp + 48]
	add	rbp, 8
	jmp	.LBB168_34
.LBB168_11:
	lea	rax, [rbx + r14]
	cmp	rax, r9
	seta	cl
	cmp	rbx, r9
	setbe	al
	and	al, cl
	lea	rbp, [rbx + r13]
	cmp	rdi, r15
	jne	.LBB168_14
# %bb.12:
	cmp	rbp, r9
	jne	.LBB168_14
# %bb.13:
	test	al, al
	jne	.LBB168_35
.LBB168_14:
	test	al, al
	je	.LBB168_16
# %bb.15:
	mov	rcx, r9
	sub	rcx, rbx
	lea	rax, [rcx + r15]
	cmp	rax, r13
	jbe	.LBB168_16
# %bb.17:
	cmp	rdi, r15
	jbe	.LBB168_18
# %bb.19:
	mov	rcx, rbp
	mov	rdx, r9
	mov	r8, r15
	call	memmove
	lea	rcx, [r15 + r13]
	add	rcx, rbx
	add	r13, rdi
	add	r13, rbx
	sub	rsi, rdi
	add	rsi, 1
	mov	rdx, r13
	mov	r8, rsi
	jmp	.LBB168_20
.LBB168_16:
	lea	rcx, [r15 + r13]
	add	rcx, rbx
	add	r13, rdi
	add	r13, rbx
	sub	rsi, rdi
	add	rsi, 1
	mov	rdx, r13
	mov	r8, rsi
	mov	rsi, r9
	call	memmove
	mov	rcx, rbp
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	jmp	.LBB168_21
.LBB168_30:
	mov	cl, 14
	sub	cl, bpl
	mov	byte ptr [rsp + 55], cl
	cmp	al, -126
	jne	.LBB168_33
.LBB168_32:
	lea	rbp, [rsp + 41]
	mov	rcx, rbp
	mov	rdx, rbx
	mov	r8, r13
	call	memcpy
.LBB168_34:
	add	rbp, r13
	add	rbp, r15
	add	rbx, r13
	add	rbx, rdi
	sub	rsi, rdi
	add	rsi, 1
	mov	rcx, rbp
	mov	rdx, rbx
	mov	r8, rsi
	call	memcpy
	mov	rax, qword ptr [rsp + 48]
	add	rax, 8
	cmp	byte ptr [rsp + 40], -126
	lea	rcx, [rsp + 41]
	cmovne	rcx, rax
	add	rcx, r13
	mov	rdx, qword ptr [rsp + 56] # 8-byte Reload
	mov	r8, r15
	call	memcpy
	mov	rcx, r12
	mov	rdx, qword ptr [rsp + 184]
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 40]
	movups	xmmword ptr [r12], xmm0
	jmp	.LBB168_35
.LBB168_18:
	lea	rdx, [rdi + r13]
	mov	rax, rdx
	sub	rax, rcx
	cmp	rax, r15
	cmova	rax, r15
	xor	r8d, r8d
	cmp	rdx, rcx
	cmovae	r8, rax
	mov	qword ptr [rsp + 64], r8 # 8-byte Spill
	mov	qword ptr [rsp + 56], rcx # 8-byte Spill
	lea	rcx, [r15 + r13]
	add	rcx, rbx
	add	rdx, rbx
	sub	rsi, rdi
	add	rsi, 1
	mov	r8, rsi
	mov	rsi, r9
	call	memmove
	mov	rcx, rbp
	mov	rdx, rsi
	mov	rsi, qword ptr [rsp + 64] # 8-byte Reload
	mov	r8, rsi
	call	memmove
	add	r13, rsi
	add	r13, rbx
	mov	rdx, r15
	sub	rdx, rdi
	add	rdx, qword ptr [rsp + 56] # 8-byte Folded Reload
	add	rdx, rsi
	add	rdx, rbx
	mov	r8, r15
	sub	r8, rsi
	mov	rcx, r13
.LBB168_20:
	call	memmove
.LBB168_21:
	sub	r14, rdi
	add	r14, r15
	cmp	byte ptr [r12], 2
	jne	.LBB168_23
# %bb.22:
	mov	rax, qword ptr [r12 + 8]
	mov	dword ptr [rax], r14d
	jmp	.LBB168_35
.LBB168_23:
	mov	al, 14
	sub	al, r14b
	mov	byte ptr [r12 + 15], al
.LBB168_35:
	add	rsp, 72
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB168_36:
	call	"?raise@char_pos_error@json@boost@@SAXXZ"
.LBB168_37:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?replace@string_impl@detail@json@boost@@QEAAX_K0PEBD0AEBVstorage_ptr@34@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?replace@string@json@boost@@QEAAAEAV123@_K00D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?replace@string@json@boost@@QEAAAEAV123@_K00D@Z"
	.globl	"?replace@string@json@boost@@QEAAAEAV123@_K00D@Z" # -- Begin function ?replace@string@json@boost@@QEAAAEAV123@_K00D@Z
	.p2align	4, 0x90
"?replace@string@json@boost@@QEAAAEAV123@_K00D@Z": # @"?replace@string@json@boost@@QEAAAEAV123@_K00D@Z"
.seh_proc "?replace@string@json@boost@@QEAAAEAV123@_K00D@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, r9
	mov	rdi, rcx
	mov	bl, byte ptr [rsp + 112]
	add	rcx, 8
	mov	qword ptr [rsp + 32], rdi
	call	"?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z"
	mov	rcx, rax
	mov	edx, ebx
	mov	r8, rsi
	call	memset
	mov	rax, rdi
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?replace@string@json@boost@@QEAAAEAV123@_K00D@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z"
	.globl	"?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z" # -- Begin function ?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z": # @"?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z"
.seh_proc "?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rbx, r9
	mov	rdi, r8
	mov	r15, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 48], rax
	mov	al, byte ptr [rcx]
	cmp	al, 2
	jne	.LBB170_2
# %bb.1:
	mov	rcx, qword ptr [r14 + 8]
	mov	esi, dword ptr [rcx]
	jmp	.LBB170_3
.LBB170_2:
	movsx	rcx, byte ptr [r14 + 15]
	mov	esi, 14
	sub	rsi, rcx
.LBB170_3:
	cmp	rsi, r15
	jb	.LBB170_30
# %bb.4:
	cmp	al, -126
	jne	.LBB170_6
# %bb.5:
	lea	r12, [r14 + 1]
	jmp	.LBB170_7
.LBB170_6:
	mov	r12, qword ptr [r14 + 8]
	add	r12, 8
.LBB170_7:
	cmp	rdi, rbx
	mov	rbp, rdi
	cmovb	rbp, rbx
	cmp	rbx, rdi
	mov	rcx, rdi
	cmovb	rcx, rbx
	sub	rbp, rcx
	je	.LBB170_28
# %bb.8:
	cmp	rbx, rdi
	jb	.LBB170_12
# %bb.9:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB170_11
# %bb.10:
	mov	rcx, qword ptr [r14 + 8]
	mov	ecx, dword ptr [rcx + 4]
.LBB170_11:
	sub	rcx, rsi
	cmp	rbp, rcx
	jbe	.LBB170_12
# %bb.15:
	mov	ecx, 2147483646
	sub	rcx, rsi
	cmp	rbp, rcx
	ja	.LBB170_31
# %bb.16:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB170_18
# %bb.17:
	mov	rax, qword ptr [r14 + 8]
	mov	ecx, dword ptr [rax + 4]
.LBB170_18:
	add	rbp, rsi
	cmp	rbp, 2147483647
	jae	.LBB170_31
# %bb.19:
	mov	r13, qword ptr [rsp + 160]
	mov	r8d, 2147483646
	mov	edx, 2147483646
	sub	rdx, rcx
	lea	rax, [rcx + rcx]
	cmp	rax, rbp
	cmovb	rax, rbp
	cmp	rdx, rcx
	mov	edx, eax
	cmovb	rdx, r8
	lea	rcx, [rsp + 32]
	mov	r8, r13
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	al, byte ptr [rsp + 32]
	cmp	al, 2
	jne	.LBB170_21
# %bb.20:
	mov	rax, qword ptr [rsp + 40]
	mov	dword ptr [rax], ebp
	mov	al, byte ptr [rsp + 32]
	cmp	al, -126
	je	.LBB170_23
.LBB170_24:
	mov	rcx, qword ptr [rsp + 40]
	add	rcx, 8
	mov	rdx, r12
	mov	r8, r15
	call	memcpy
	mov	rbp, qword ptr [rsp + 40]
	add	rbp, 8
	jmp	.LBB170_25
.LBB170_12:
	add	r12, r15
	lea	rcx, [r12 + rbx]
	lea	rdx, [r12 + rdi]
	add	r15, rdi
	neg	r15
	lea	r8, [rsi + r15]
	add	r8, 1
	call	memmove
	sub	rsi, rdi
	add	rsi, rbx
	cmp	byte ptr [r14], 2
	jne	.LBB170_14
# %bb.13:
	mov	rax, qword ptr [r14 + 8]
	mov	dword ptr [rax], esi
	jmp	.LBB170_29
.LBB170_14:
	mov	al, 14
	sub	al, sil
	mov	byte ptr [r14 + 15], al
	jmp	.LBB170_29
.LBB170_21:
	mov	cl, 14
	sub	cl, bpl
	mov	byte ptr [rsp + 47], cl
	cmp	al, -126
	jne	.LBB170_24
.LBB170_23:
	lea	rbp, [rsp + 33]
	mov	rcx, rbp
	mov	rdx, r12
	mov	r8, r15
	call	memcpy
.LBB170_25:
	add	rbp, r15
	add	rbp, rbx
	add	r12, r15
	add	r12, rdi
	add	rdi, r15
	sub	rsi, rdi
	add	rsi, 1
	mov	rcx, rbp
	mov	rdx, r12
	mov	r8, rsi
	call	memcpy
	mov	rcx, r14
	mov	rdx, r13
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 32]
	movups	xmmword ptr [r14], xmm0
	cmp	byte ptr [r14], -126
	jne	.LBB170_27
# %bb.26:
	add	r14, 1
	mov	r12, r14
	jmp	.LBB170_28
.LBB170_27:
	mov	r12, qword ptr [r14 + 8]
	add	r12, 8
.LBB170_28:
	add	r12, r15
.LBB170_29:
	mov	rcx, qword ptr [rsp + 48]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, r12
	add	rsp, 56
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB170_30:
	call	"?raise@char_pos_error@json@boost@@SAXXZ"
.LBB170_31:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?replace_unchecked@string_impl@detail@json@boost@@QEAAPEAD_K00AEBVstorage_ptr@34@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?erase@string@json@boost@@QEAAAEAV123@_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@string@json@boost@@QEAAAEAV123@_K0@Z"
	.globl	"?erase@string@json@boost@@QEAAAEAV123@_K0@Z" # -- Begin function ?erase@string@json@boost@@QEAAAEAV123@_K0@Z
	.p2align	4, 0x90
"?erase@string@json@boost@@QEAAAEAV123@_K0@Z": # @"?erase@string@json@boost@@QEAAAEAV123@_K0@Z"
.seh_proc "?erase@string@json@boost@@QEAAAEAV123@_K0@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, r8
	mov	rsi, rcx
	mov	al, byte ptr [rcx + 8]
	cmp	al, 2
	jne	.LBB171_2
# %bb.1:
	mov	rcx, qword ptr [rsi + 16]
	mov	ecx, dword ptr [rcx]
	jmp	.LBB171_3
.LBB171_2:
	movsx	r8, byte ptr [rsi + 23]
	mov	ecx, 14
	sub	rcx, r8
.LBB171_3:
	cmp	rcx, rdx
	jb	.LBB171_27
# %bb.4:
	cmp	al, 2
	jne	.LBB171_6
# %bb.5:
	mov	rcx, qword ptr [rsi + 16]
	mov	ecx, dword ptr [rcx]
	jmp	.LBB171_7
.LBB171_6:
	movsx	r8, byte ptr [rsi + 23]
	mov	ecx, 14
	sub	rcx, r8
.LBB171_7:
	sub	rcx, rdx
	cmp	rcx, rdi
	jae	.LBB171_12
# %bb.8:
	cmp	al, 2
	jne	.LBB171_10
# %bb.9:
	mov	rcx, qword ptr [rsi + 16]
	mov	edi, dword ptr [rcx]
	jmp	.LBB171_11
.LBB171_10:
	movsx	rcx, byte ptr [rsi + 23]
	mov	edi, 14
	sub	rdi, rcx
.LBB171_11:
	sub	rdi, rdx
.LBB171_12:
	cmp	al, 2
	jne	.LBB171_13
# %bb.16:
	mov	rcx, qword ptr [rsi + 16]
	mov	r8d, dword ptr [rcx]
	lea	rax, [rdx + rdi]
	sub	r8, rax
	add	r8, 1
	jmp	.LBB171_17
.LBB171_13:
	movsx	r8, byte ptr [rsi + 23]
	lea	rcx, [rdx + rdi]
	add	rcx, r8
	mov	r8d, 15
	sub	r8, rcx
	cmp	al, -126
	jne	.LBB171_14
# %bb.15:
	lea	rcx, [rsi + 9]
	jmp	.LBB171_18
.LBB171_14:
	mov	rcx, qword ptr [rsi + 16]
.LBB171_17:
	add	rcx, 8
.LBB171_18:
	add	rcx, rdx
	lea	rdx, [rcx + rdi]
	call	memmove
	mov	cl, byte ptr [rsi + 8]
	cmp	cl, 2
	jne	.LBB171_20
# %bb.19:
	mov	rcx, qword ptr [rsi + 16]
	mov	eax, dword ptr [rcx]
	sub	rax, rdi
	jmp	.LBB171_22
.LBB171_20:
	movsx	rdx, byte ptr [rsi + 23]
	add	rdx, rdi
	mov	eax, 14
	sub	rax, rdx
	cmp	cl, -126
	jne	.LBB171_21
# %bb.28:
	mov	cl, 14
	sub	cl, al
	mov	byte ptr [rsi + 23], cl
	lea	rcx, [rsi + rax]
	add	rcx, 9
	jmp	.LBB171_26
.LBB171_21:
	mov	rcx, qword ptr [rsi + 16]
.LBB171_22:
	mov	dword ptr [rcx], eax
	cmp	byte ptr [rsi + 8], -126
	jne	.LBB171_24
# %bb.23:
	lea	rcx, [rsi + 9]
	jmp	.LBB171_25
.LBB171_24:
	mov	rcx, qword ptr [rsi + 16]
	add	rcx, 8
.LBB171_25:
	add	rcx, rax
.LBB171_26:
	mov	byte ptr [rcx], 0
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB171_27:
	call	"?raise@char_pos_error@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@string@json@boost@@QEAAAEAV123@_K0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?erase@string@json@boost@@QEAAPEADPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@string@json@boost@@QEAAPEADPEBD@Z"
	.globl	"?erase@string@json@boost@@QEAAPEADPEBD@Z" # -- Begin function ?erase@string@json@boost@@QEAAPEADPEBD@Z
	.p2align	4, 0x90
"?erase@string@json@boost@@QEAAPEADPEBD@Z": # @"?erase@string@json@boost@@QEAAPEADPEBD@Z"
.seh_proc "?erase@string@json@boost@@QEAAPEADPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	cmp	byte ptr [rcx + 8], -126
	jne	.LBB172_2
# %bb.1:
	lea	rax, [rdi + 9]
	jmp	.LBB172_3
.LBB172_2:
	mov	rax, qword ptr [rdi + 16]
	add	rax, 8
.LBB172_3:
	sub	rsi, rax
	mov	r8d, 1
	mov	rcx, rdi
	mov	rdx, rsi
	call	"?erase@string@json@boost@@QEAAAEAV123@_K0@Z"
	cmp	byte ptr [rdi + 8], -126
	jne	.LBB172_5
# %bb.4:
	add	rdi, 9
	jmp	.LBB172_6
.LBB172_5:
	mov	rdi, qword ptr [rdi + 16]
	add	rdi, 8
.LBB172_6:
	add	rdi, rsi
	mov	rax, rdi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@string@json@boost@@QEAAPEADPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?erase@string@json@boost@@QEAAPEADPEBD0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?erase@string@json@boost@@QEAAPEADPEBD0@Z"
	.globl	"?erase@string@json@boost@@QEAAPEADPEBD0@Z" # -- Begin function ?erase@string@json@boost@@QEAAPEADPEBD0@Z
	.p2align	4, 0x90
"?erase@string@json@boost@@QEAAPEADPEBD0@Z": # @"?erase@string@json@boost@@QEAAPEADPEBD0@Z"
.seh_proc "?erase@string@json@boost@@QEAAPEADPEBD0@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	cmp	byte ptr [rcx + 8], -126
	jne	.LBB173_2
# %bb.1:
	lea	rax, [rdi + 9]
	jmp	.LBB173_3
.LBB173_2:
	mov	rax, qword ptr [rdi + 16]
	add	rax, 8
.LBB173_3:
	sub	r8, rsi
	sub	rsi, rax
	mov	rcx, rdi
	mov	rdx, rsi
	call	"?erase@string@json@boost@@QEAAAEAV123@_K0@Z"
	cmp	byte ptr [rdi + 8], -126
	jne	.LBB173_5
# %bb.4:
	add	rdi, 9
	jmp	.LBB173_6
.LBB173_5:
	mov	rdi, qword ptr [rdi + 16]
	add	rdi, 8
.LBB173_6:
	add	rdi, rsi
	mov	rax, rdi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?erase@string@json@boost@@QEAAPEADPEBD0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?resize@string@json@boost@@QEAAX_KD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?resize@string@json@boost@@QEAAX_KD@Z"
	.globl	"?resize@string@json@boost@@QEAAX_KD@Z" # -- Begin function ?resize@string@json@boost@@QEAAX_KD@Z
	.p2align	4, 0x90
"?resize@string@json@boost@@QEAAX_KD@Z": # @"?resize@string@json@boost@@QEAAX_KD@Z"
.seh_proc "?resize@string@json@boost@@QEAAX_KD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
	mov	al, byte ptr [rcx + 8]
	cmp	al, 2
	jne	.LBB174_5
# %bb.1:
	mov	rcx, qword ptr [rsi + 16]
	mov	ecx, dword ptr [rcx]
	cmp	rcx, rdi
	jb	.LBB174_6
.LBB174_2:
	cmp	al, -126
	jne	.LBB174_3
.LBB174_17:
	mov	al, 14
	sub	al, dil
	mov	byte ptr [rsi + 23], al
	add	rsi, rdi
	add	rsi, 9
	jmp	.LBB174_21
.LBB174_5:
	movsx	rdx, byte ptr [rsi + 23]
	mov	ecx, 14
	sub	rcx, rdx
	cmp	rcx, rdi
	jae	.LBB174_2
.LBB174_6:
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB174_7
# %bb.10:
	mov	rcx, qword ptr [rsi + 16]
	mov	ecx, dword ptr [rcx + 4]
	cmp	rcx, rdi
	jb	.LBB174_11
.LBB174_8:
	cmp	al, 2
	jne	.LBB174_12
.LBB174_9:
	mov	rcx, qword ptr [rsi + 16]
	mov	eax, dword ptr [rcx]
	mov	r8, rdi
	sub	r8, rax
	add	rcx, 8
	jmp	.LBB174_16
.LBB174_7:
	cmp	rcx, rdi
	jae	.LBB174_8
.LBB174_11:
	mov	rcx, rsi
	mov	rdx, rdi
	call	"?reserve_impl@string@json@boost@@AEAAX_K@Z"
	mov	al, byte ptr [rsi + 8]
	cmp	al, 2
	je	.LBB174_9
.LBB174_12:
	movsx	rdx, byte ptr [rsi + 23]
	cmp	al, -126
	jne	.LBB174_14
# %bb.13:
	lea	rcx, [rsi + 9]
	jmp	.LBB174_15
.LBB174_14:
	mov	rcx, qword ptr [rsi + 16]
	add	rcx, 8
.LBB174_15:
	lea	r8, [rdi + rdx]
	add	r8, -14
	mov	eax, 14
	sub	rax, rdx
.LBB174_16:
	add	rcx, rax
	mov	edx, ebx
	call	memset
	cmp	byte ptr [rsi + 8], -126
	je	.LBB174_17
.LBB174_3:
	mov	rax, qword ptr [rsi + 16]
	mov	dword ptr [rax], edi
	cmp	byte ptr [rsi + 8], -126
	jne	.LBB174_19
# %bb.4:
	add	rsi, 9
	jmp	.LBB174_20
.LBB174_19:
	mov	rsi, qword ptr [rsi + 16]
	add	rsi, 8
.LBB174_20:
	add	rsi, rdi
.LBB174_21:
	mov	byte ptr [rsi], 0
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?resize@string@json@boost@@QEAAX_KD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?swap@string@json@boost@@QEAAXAEAV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?swap@string@json@boost@@QEAAXAEAV123@@Z"
	.globl	"?swap@string@json@boost@@QEAAXAEAV123@@Z" # -- Begin function ?swap@string@json@boost@@QEAAXAEAV123@@Z
	.p2align	4, 0x90
"?swap@string@json@boost@@QEAAXAEAV123@@Z": # @"?swap@string@json@boost@@QEAAXAEAV123@@Z"
.Lfunc_begin69:
.seh_proc "?swap@string@json@boost@@QEAAXAEAV123@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r14, rdx
	mov	rdi, rcx
	mov	rbx, qword ptr [rdx]
	test	rbx, rbx
	je	.LBB175_2
# %bb.1:
	and	rbx, -4
	jmp	.LBB175_5
.LBB175_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB175_3
.LBB175_5:
	mov	rsi, qword ptr [rdi]
	test	rsi, rsi
	je	.LBB175_7
# %bb.6:
	and	rsi, -4
	jmp	.LBB175_10
.LBB175_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB175_8
.LBB175_10:
	cmp	rsi, rbx
	je	.LBB175_12
# %bb.11:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	rdx, rbx
	call	qword ptr [rax + 24]
	test	al, al
	je	.LBB175_13
.LBB175_12:
	movups	xmm0, xmmword ptr [rdi + 8]
	movaps	xmmword ptr [rbp - 32], xmm0
	movups	xmm0, xmmword ptr [r14 + 8]
	movups	xmmword ptr [rdi + 8], xmm0
	movaps	xmm0, xmmword ptr [rbp - 32]
	movups	xmmword ptr [r14 + 8], xmm0
.LBB175_34:
	add	rsp, 112
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB175_13:
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 72], rax
	test	al, 1
	je	.LBB175_15
# %bb.14:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB175_15:
	lea	rcx, [rbp - 32]
	lea	r8, [rbp - 72]
	mov	rdx, rdi
	call	"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rbp - 64], rax
	test	al, 1
	je	.LBB175_17
# %bb.16:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB175_17:
.Ltmp220:
	lea	rcx, [rbp - 56]
	lea	r8, [rbp - 64]
	mov	rdx, r14
	call	"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp221:
# %bb.18:
	lea	rcx, [rdi + 8]
	mov	rdx, rdi
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rdi]
	test	cl, 1
	je	.LBB175_22
# %bb.19:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB175_22
# %bb.20:
	cmp	rax, 1
	jne	.LBB175_22
# %bb.21:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB175_22:
	mov	rax, qword ptr [rbp - 56]
	mov	qword ptr [rbp - 56], 0
	mov	qword ptr [rdi], rax
	movups	xmm0, xmmword ptr [rbp - 48]
	movups	xmmword ptr [rdi + 8], xmm0
	mov	word ptr [rbp - 48], 130
	mov	byte ptr [rbp - 33], 14
	lea	rcx, [r14 + 8]
	mov	rdx, r14
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [r14]
	test	cl, 1
	je	.LBB175_26
# %bb.23:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB175_26
# %bb.24:
	cmp	rax, 1
	jne	.LBB175_26
# %bb.25:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB175_26:
	mov	rax, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 32], 0
	mov	qword ptr [r14], rax
	movups	xmm0, xmmword ptr [rbp - 24]
	movups	xmmword ptr [r14 + 8], xmm0
	mov	word ptr [rbp - 24], 130
	mov	byte ptr [rbp - 9], 14
	lea	rcx, [rbp - 48]
	lea	rdx, [rbp - 56]
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rbp - 56]
	test	cl, 1
	je	.LBB175_30
# %bb.27:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB175_30
# %bb.28:
	cmp	rax, 1
	jne	.LBB175_30
# %bb.29:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB175_30:
	lea	rcx, [rbp - 24]
	lea	rdx, [rbp - 32]
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	je	.LBB175_34
# %bb.31:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB175_34
# %bb.32:
	cmp	rax, 1
	jne	.LBB175_34
# %bb.33:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
	jmp	.LBB175_34
.LBB175_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB175_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB175_5
.LBB175_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB175_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB175_10
	.seh_handlerdata
	.long	("$cppxdata$?swap@string@json@boost@@QEAAXAEAV123@@Z")@IMGREL
	.section	.text,"xr",one_only,"?swap@string@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$35@?0??swap@string@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$35@?0??swap@string@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$35@?0??swap@string@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB175_35:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rcx, [rbp - 24]
	lea	rdx, [rbp - 32]
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	je	.LBB175_39
# %bb.36:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB175_39
# %bb.37:
	cmp	rax, 1
	jne	.LBB175_39
# %bb.38:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB175_39:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end69:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@string@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?swap@string@json@boost@@QEAAXAEAV123@@Z"
	.p2align	2
"$cppxdata$?swap@string@json@boost@@QEAAXAEAV123@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?swap@string@json@boost@@QEAAXAEAV123@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?swap@string@json@boost@@QEAAXAEAV123@@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?swap@string@json@boost@@QEAAXAEAV123@@Z":
	.long	-1                      # ToState
	.long	"?dtor$35@?0??swap@string@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
"$ip2state$?swap@string@json@boost@@QEAAXAEAV123@@Z":
	.long	.Lfunc_begin69@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp220@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp221@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?swap@string@json@boost@@QEAAXAEAV123@@Z"
                                        # -- End function
	.def	 "??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.globl	"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z" # -- Begin function ??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z": # @"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Lfunc_begin70:
.seh_proc "??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 8], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	word ptr [rcx + 8], 130
	mov	byte ptr [rcx + 23], 14
.Ltmp222:
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	call	"?assign@string@json@boost@@QEAAAEAV123@$$QEAV123@@Z"
.Ltmp223:
# %bb.1:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB176_5
# %bb.2:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB176_5
# %bb.3:
	cmp	rax, 1
	jne	.LBB176_5
# %bb.4:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB176_5:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$6@?0???0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"
.LBB176_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB176_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB176_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB176_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB176_10:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB176_14
# %bb.11:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB176_14
# %bb.12:
	cmp	rax, 1
	jne	.LBB176_14
# %bb.13:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB176_14:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end70:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin70@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp222@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp223@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "?reserve_impl@string@json@boost@@AEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reserve_impl@string@json@boost@@AEAAX_K@Z"
	.globl	"?reserve_impl@string@json@boost@@AEAAX_K@Z" # -- Begin function ?reserve_impl@string@json@boost@@AEAAX_K@Z
	.p2align	4, 0x90
"?reserve_impl@string@json@boost@@AEAAX_K@Z": # @"?reserve_impl@string@json@boost@@AEAAX_K@Z"
.seh_proc "?reserve_impl@string@json@boost@@AEAAX_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 56], rax
	mov	cl, byte ptr [rcx + 8]
	mov	eax, 14
	cmp	cl, 2
	jne	.LBB177_2
# %bb.1:
	mov	rax, qword ptr [rsi + 16]
	mov	eax, dword ptr [rax + 4]
.LBB177_2:
	cmp	rax, rdx
	jae	.LBB177_18
# %bb.3:
	mov	eax, 14
	cmp	cl, 2
	jne	.LBB177_5
# %bb.4:
	mov	rax, qword ptr [rsi + 16]
	mov	eax, dword ptr [rax + 4]
.LBB177_5:
	cmp	rdx, 2147483647
	jae	.LBB177_19
# %bb.6:
	lea	rdi, [rsi + 8]
	mov	r8d, 2147483646
	mov	ebx, 2147483646
	sub	rbx, rax
	lea	rcx, [rax + rax]
	cmp	rcx, rdx
	cmovb	rcx, rdx
	cmp	rbx, rax
	mov	edx, ecx
	cmovb	rdx, r8
	lea	rcx, [rsp + 40]
	mov	r8, rsi
	call	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	mov	al, byte ptr [rsi + 8]
	cmp	al, 2
	jne	.LBB177_8
# %bb.7:
	mov	rdx, qword ptr [rsi + 16]
	mov	r8d, dword ptr [rdx]
	add	r8, 1
	jmp	.LBB177_10
.LBB177_8:
	movsx	rcx, byte ptr [rsi + 23]
	mov	r8d, 15
	sub	r8, rcx
	cmp	al, -126
	jne	.LBB177_9
# %bb.20:
	lea	rdx, [rsi + 9]
	jmp	.LBB177_11
.LBB177_9:
	mov	rdx, qword ptr [rsi + 16]
.LBB177_10:
	add	rdx, 8
.LBB177_11:
	mov	bl, byte ptr [rsp + 40]
	mov	rax, qword ptr [rsp + 48]
	add	rax, 8
	cmp	bl, -126
	lea	rcx, [rsp + 41]
	cmovne	rcx, rax
	call	memcpy
	cmp	byte ptr [rdi], 2
	jne	.LBB177_13
# %bb.12:
	mov	rax, qword ptr [rsi + 16]
	mov	eax, dword ptr [rax]
	cmp	bl, 2
	je	.LBB177_15
.LBB177_16:
	mov	cl, 14
	sub	cl, al
	mov	byte ptr [rsp + 55], cl
	jmp	.LBB177_17
.LBB177_13:
	movsx	rcx, byte ptr [rsi + 23]
	mov	eax, 14
	sub	rax, rcx
	cmp	bl, 2
	jne	.LBB177_16
.LBB177_15:
	mov	rcx, qword ptr [rsp + 48]
	mov	dword ptr [rcx], eax
.LBB177_17:
	mov	rcx, rdi
	mov	rdx, rsi
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	movups	xmm0, xmmword ptr [rsp + 40]
	movups	xmmword ptr [rdi], xmm0
.LBB177_18:
	mov	rcx, qword ptr [rsp + 56]
	xor	rcx, rsp
	call	__security_check_cookie
	nop
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB177_19:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?reserve_impl@string@json@boost@@AEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?growth@string_impl@detail@json@boost@@SAI_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?growth@string_impl@detail@json@boost@@SAI_K0@Z"
	.globl	"?growth@string_impl@detail@json@boost@@SAI_K0@Z" # -- Begin function ?growth@string_impl@detail@json@boost@@SAI_K0@Z
	.p2align	4, 0x90
"?growth@string_impl@detail@json@boost@@SAI_K0@Z": # @"?growth@string_impl@detail@json@boost@@SAI_K0@Z"
.seh_proc "?growth@string_impl@detail@json@boost@@SAI_K0@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	cmp	rcx, 2147483647
	jae	.LBB178_2
# %bb.1:
	mov	eax, 2147483646
	sub	rax, rdx
	lea	r8, [rdx + rdx]
	cmp	r8, rcx
	cmovb	r8d, ecx
	cmp	rax, rdx
	mov	eax, 2147483646
	cmovae	eax, r8d
	add	rsp, 40
	ret
.LBB178_2:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?growth@string_impl@detail@json@boost@@SAI_K0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	.globl	"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z" # -- Begin function ??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z
	.p2align	4, 0x90
"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z": # @"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
.seh_proc "??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rdx
	mov	rsi, rcx
	cmp	rdx, 14
	ja	.LBB179_2
# %bb.1:
	mov	byte ptr [rsi], -126
	jmp	.LBB179_9
.LBB179_2:
	mov	byte ptr [rsi], 2
	cmp	rdi, 2147483647
	jae	.LBB179_15
# %bb.3:
	cmp	rdi, 30
	mov	r14d, 30
	cmova	r14, rdi
	mov	rbx, qword ptr [r8]
	test	rbx, rbx
	je	.LBB179_5
# %bb.4:
	and	rbx, -4
	jmp	.LBB179_8
.LBB179_5:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB179_6
.LBB179_8:
	mov	rdx, r14
	add	rdx, 9
	mov	rax, qword ptr [rbx]
	mov	r8d, 4
	mov	rcx, rbx
	call	qword ptr [rax + 8]
	mov	dword ptr [rax], edi
	mov	dword ptr [rax + 4], r14d
	mov	qword ptr [rsi + 8], rax
	cmp	byte ptr [rsi], -126
	jne	.LBB179_10
.LBB179_9:
	mov	al, 14
	sub	al, dil
	mov	byte ptr [rsi + 15], al
	lea	rax, [rsi + rdi]
	add	rax, 1
	jmp	.LBB179_14
.LBB179_10:
	mov	dword ptr [rax], edi
	cmp	byte ptr [rsi], -126
	jne	.LBB179_12
# %bb.11:
	lea	rax, [rsi + 1]
	jmp	.LBB179_13
.LBB179_12:
	mov	rax, qword ptr [rsi + 8]
	add	rax, 8
.LBB179_13:
	add	rax, rdi
.LBB179_14:
	mov	byte ptr [rax], 0
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB179_6:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB179_8
# %bb.7:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB179_8
.LBB179_15:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0string_impl@detail@json@boost@@QEAA@_KAEBVstorage_ptr@23@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVstring@01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVstring@01@@Z"
	.globl	"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVstring@01@@Z" # -- Begin function ??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVstring@01@@Z
	.p2align	4, 0x90
"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVstring@01@@Z": # @"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVstring@01@@Z"
# %bb.0:
	mov	rax, rdx
	mov	r8b, byte ptr [rdx + 8]
	cmp	r8b, -126
	jne	.LBB180_3
# %bb.1:
	lea	rdx, [rax + 9]
	jmp	.LBB180_2
.LBB180_3:
	mov	r9, qword ptr [rax + 16]
	lea	rdx, [r9 + 8]
	cmp	r8b, 2
	jne	.LBB180_2
# %bb.4:
	mov	r8d, dword ptr [r9]
	jmp	"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z" # TAILCALL
.LBB180_2:
	movsx	rax, byte ptr [rax + 23]
	mov	r8d, 14
	sub	r8, rax
	jmp	"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z" # TAILCALL
                                        # -- End function
	.def	 "?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
	.globl	"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z" # -- Begin function ?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z
	.p2align	4, 0x90
"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z": # @"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
.Lfunc_begin71:
.seh_proc "?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 144
	.seh_stackalloc 144
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 8], -2
	mov	rbx, rcx
	mov	qword ptr [rcx], 0
	mov	word ptr [rcx + 8], 130
	lea	rdi, [rcx + 9]
	mov	byte ptr [rcx + 23], 14
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp - 64], xmm0
	movups	xmmword ptr [rbp - 80], xmm0
	mov	qword ptr [rbp - 88], rdx
	mov	qword ptr [rbp - 64], 0
	mov	byte ptr [rbp - 4], 0
	mov	al, -126
	lea	r14, [rbp - 88]
	mov	qword ptr [rbp], rcx    # 8-byte Spill
	cmp	al, 2
	jne	.LBB181_2
	.p2align	4, 0x90
.LBB181_3:
	mov	rdx, qword ptr [rbx + 16]
	mov	ecx, dword ptr [rdx]
	mov	edx, dword ptr [rdx + 4]
	cmp	rcx, rdx
	jae	.LBB181_5
.LBB181_9:
	cmp	al, 2
	jne	.LBB181_10
.LBB181_11:
	mov	rdx, qword ptr [rbx + 16]
	mov	eax, dword ptr [rdx]
	mov	r8d, dword ptr [rdx + 4]
	sub	r8, rax
	add	rdx, 8
	jmp	.LBB181_12
	.p2align	4, 0x90
.LBB181_2:
	movsx	rsi, byte ptr [rbx + 23]
	mov	edx, 14
	mov	ecx, 14
	sub	rcx, rsi
	cmp	rcx, rdx
	jb	.LBB181_9
.LBB181_5:
	mov	edx, 15
	cmp	al, 2
	jne	.LBB181_7
# %bb.6:
	mov	rax, qword ptr [rbx + 16]
	mov	edx, dword ptr [rax + 4]
	add	rdx, 1
.LBB181_7:
.Ltmp224:
	mov	rcx, rbx
	call	"?reserve_impl@string@json@boost@@AEAAX_K@Z"
.Ltmp225:
# %bb.8:
	mov	rbx, qword ptr [rbp]    # 8-byte Reload
	mov	al, byte ptr [rbx + 8]
	cmp	al, 2
	je	.LBB181_11
.LBB181_10:
	movsx	r8, byte ptr [rbx + 23]
	mov	rdx, qword ptr [rbx + 16]
	add	rdx, 8
	cmp	al, -126
	cmove	rdx, rdi
	mov	eax, 14
	sub	rax, r8
.LBB181_12:
	add	rdx, rax
.Ltmp226:
	mov	rcx, r14
	call	"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
.Ltmp227:
# %bb.13:
	mov	rbx, qword ptr [rbp]    # 8-byte Reload
	mov	cl, byte ptr [rbx + 8]
	cmp	cl, 2
	jne	.LBB181_15
# %bb.14:
	mov	rcx, qword ptr [rbx + 16]
	mov	edx, dword ptr [rcx]
	add	rax, rdx
	jmp	.LBB181_17
	.p2align	4, 0x90
.LBB181_15:
	movsx	rdx, byte ptr [rbx + 23]
	sub	rax, rdx
	add	rax, 14
	cmp	cl, -126
	jne	.LBB181_16
# %bb.26:
	mov	cl, 14
	sub	cl, al
	mov	byte ptr [rbx + 23], cl
	lea	rcx, [rbx + rax]
	add	rcx, 9
	jmp	.LBB181_18
	.p2align	4, 0x90
.LBB181_16:
	mov	rcx, qword ptr [rbx + 16]
.LBB181_17:
	mov	dword ptr [rcx], eax
	mov	rcx, qword ptr [rbx + 16]
	add	rcx, 8
	cmp	byte ptr [rbx + 8], -126
	cmove	rcx, rdi
	add	rcx, rax
.LBB181_18:
	mov	byte ptr [rcx], 0
	cmp	byte ptr [rbp - 4], 0
	jne	.LBB181_20
# %bb.19:
	mov	al, byte ptr [rbx + 8]
	cmp	al, 2
	jne	.LBB181_2
	jmp	.LBB181_3
.LBB181_20:
	lea	rcx, [rbp - 80]
	call	"??1stack@detail@json@boost@@QEAA@XZ"
	mov	rax, rbx
	add	rsp, 144
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
	.seh_endproc
	.def	 "?dtor$21@?0??to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0??to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z@4HA":
.seh_proc "?dtor$21@?0??to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z@4HA"
.LBB181_21:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp - 80]
	call	"??1stack@detail@json@boost@@QEAA@XZ"
	mov	rsi, qword ptr [rbp]    # 8-byte Reload
	lea	rcx, [rsi + 8]
	mov	rdx, rsi
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB181_25
# %bb.22:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB181_25
# %bb.23:
	cmp	rax, 1
	jne	.LBB181_25
# %bb.24:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB181_25:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end71:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
	.p2align	2
"$cppxdata$?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z")@IMGREL # IPToStateXData
	.long	136                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$21@?0??to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z@4HA"@IMGREL # Action
"$ip2state$?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z":
	.long	.Lfunc_begin71@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp224@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp227@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?to_string@json@boost@@YA?AVstring@12@AEBVvalue@12@@Z"
                                        # -- End function
	.def	 "??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
	.globl	"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z" # -- Begin function ??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z
	.p2align	4, 0x90
"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z": # @"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
.Lfunc_begin72:
.seh_proc "??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	mov	eax, 4224
	call	__chkstk
	sub	rsp, rax
	.seh_stackalloc 4224
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 4088], -2
	mov	rsi, rcx
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbp + 4024], xmm0
	movups	xmmword ptr [rbp + 4008], xmm0
	mov	qword ptr [rbp + 4000], rdx
	mov	qword ptr [rbp + 4024], 0
	mov	byte ptr [rbp + 4084], 0
	lea	r14, [rbp + 4000]
	lea	rbx, [rbp - 96]
	mov	rdi, qword ptr [rip + "__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z"]
	.p2align	4, 0x90
.LBB182_1:                              # =>This Inner Loop Header: Depth=1
.Ltmp228:
	mov	r8d, 4096
	mov	rcx, r14
	mov	rdx, rbx
	call	"?write_some@serializer@json@boost@@AEAA_KPEAD_K@Z"
.Ltmp229:
# %bb.2:                                #   in Loop: Header=BB182_1 Depth=1
.Ltmp230:
	mov	rcx, rsi
	mov	rdx, rbx
	mov	r8, rax
	call	rdi
.Ltmp231:
# %bb.3:                                #   in Loop: Header=BB182_1 Depth=1
	cmp	byte ptr [rbp + 4084], 0
	je	.LBB182_1
# %bb.4:
	lea	rcx, [rbp + 4008]
	call	"??1stack@detail@json@boost@@QEAA@XZ"
	mov	rax, rsi
	add	rsp, 4224
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z")@IMGREL
	.section	.text,"xr",one_only,"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z@4HA":
.seh_proc "?dtor$5@?0???6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z@4HA"
.LBB182_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp + 4008]
	call	"??1stack@detail@json@boost@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end72:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
	.p2align	2
"$cppxdata$??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z")@IMGREL # IPToStateXData
	.long	4216                    # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z@4HA"@IMGREL # Action
"$ip2state$??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z":
	.long	.Lfunc_begin72@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp228@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp231@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??6json@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@AEBVvalue@01@@Z"
                                        # -- End function
	.def	 "??0value@json@boost@@QEAA@V?$pilfered@Vvalue@json@boost@@@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@V?$pilfered@Vvalue@json@boost@@@2@@Z"
	.globl	"??0value@json@boost@@QEAA@V?$pilfered@Vvalue@json@boost@@@2@@Z" # -- Begin function ??0value@json@boost@@QEAA@V?$pilfered@Vvalue@json@boost@@@2@@Z
	.p2align	4, 0x90
"??0value@json@boost@@QEAA@V?$pilfered@Vvalue@json@boost@@@2@@Z": # @"??0value@json@boost@@QEAA@V?$pilfered@Vvalue@json@boost@@@2@@Z"
# %bb.0:
	mov	rax, rcx
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rax + 16], rcx
	movups	xmm0, xmmword ptr [rdx]
	movups	xmmword ptr [rax], xmm0
	mov	qword ptr [rdx], 0
	mov	byte ptr [rdx + 8], 7
	ret
                                        # -- End function
	.def	 "??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.globl	"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z" # -- Begin function ??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z": # @"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Lfunc_begin73:
.seh_proc "??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rbx, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	word ptr [rcx + 8], 130
	mov	byte ptr [rcx + 23], 14
	cmp	rcx, rdx
	je	.LBB184_8
# %bb.1:
	mov	rsi, rdx
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	lea	rcx, [rbx + 8]
	mov	al, byte ptr [rdx + 8]
	cmp	al, 2
	jne	.LBB184_3
# %bb.2:
	mov	rsi, qword ptr [rsi + 16]
	mov	edi, dword ptr [rsi]
	jmp	.LBB184_5
.LBB184_3:
	movsx	rdx, byte ptr [rsi + 23]
	mov	edi, 14
	sub	rdi, rdx
	cmp	al, -126
	jne	.LBB184_4
# %bb.22:
	add	rsi, 9
	jmp	.LBB184_6
.LBB184_4:
	mov	rsi, qword ptr [rsi + 16]
.LBB184_5:
	add	rsi, 8
.LBB184_6:
.Ltmp232:
	mov	rdx, rdi
	mov	qword ptr [rbp - 8], rbx # 8-byte Spill
	mov	r8, rbx
	call	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
.Ltmp233:
# %bb.7:
	mov	rcx, rax
	mov	rdx, rsi
	mov	r8, rdi
	call	memcpy
	mov	r8, qword ptr [rbp - 16] # 8-byte Reload
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
.LBB184_8:
	mov	rcx, qword ptr [r8]
	test	cl, 1
	je	.LBB184_12
# %bb.9:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB184_12
# %bb.10:
	cmp	rax, 1
	jne	.LBB184_12
# %bb.11:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB184_12:
	mov	rax, rbx
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$13@?0???0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0???0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$13@?0???0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"
.LBB184_13:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB184_17
# %bb.14:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB184_17
# %bb.15:
	cmp	rax, 1
	jne	.LBB184_17
# %bb.16:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB184_17:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB184_21
# %bb.18:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB184_21
# %bb.19:
	cmp	rax, 1
	jne	.LBB184_21
# %bb.20:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB184_21:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end73:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$13@?0???0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin73@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp232@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp233@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0value@json@boost@@QEAA@$$QEAV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@$$QEAV012@@Z"
	.globl	"??0value@json@boost@@QEAA@$$QEAV012@@Z" # -- Begin function ??0value@json@boost@@QEAA@$$QEAV012@@Z
	.p2align	4, 0x90
"??0value@json@boost@@QEAA@$$QEAV012@@Z": # @"??0value@json@boost@@QEAA@$$QEAV012@@Z"
# %bb.0:
	mov	rax, rcx
	movups	xmm0, xmmword ptr [rdx]
	movups	xmmword ptr [rcx], xmm0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rax + 16], rcx
	mov	r8, qword ptr [rax]
	test	r8b, 1
	je	.LBB185_2
# %bb.1:
	mov	rcx, r8
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
.LBB185_2:
	mov	qword ptr [rdx], r8
	mov	byte ptr [rdx + 8], 7
	ret
                                        # -- End function
	.def	 "??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.globl	"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z" # -- Begin function ??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z": # @"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Lfunc_begin74:
.seh_proc "??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdi, rcx
	movzx	eax, byte ptr [rdx + 8]
	and	eax, 63
	cmp	al, 7
	ja	.LBB186_10
# %bb.1:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + .LJTI186_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB186_3:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rbp - 32], rax
.Ltmp236:
	lea	r8, [rbp - 32]
	mov	rcx, rdi
	call	"??0array@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp237:
	jmp	.LBB186_10
.LBB186_2:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rbp - 40], rax
.Ltmp238:
	lea	r8, [rbp - 40]
	mov	rcx, rdi
	call	"??0object@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp239:
	jmp	.LBB186_10
.LBB186_4:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rbp - 24], rax
.Ltmp234:
	lea	r8, [rbp - 24]
	mov	rcx, rdi
	call	"??0string@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp235:
	jmp	.LBB186_10
.LBB186_5:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 3
	mov	qword ptr [rdi + 16], rcx
	jmp	.LBB186_10
.LBB186_6:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 4
	mov	qword ptr [rdi + 16], rcx
	jmp	.LBB186_10
.LBB186_7:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	rcx, qword ptr [rdx + 16]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 5
	mov	qword ptr [rdi + 16], rcx
	jmp	.LBB186_10
.LBB186_8:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	cl, byte ptr [rdx + 9]
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 6
	mov	byte ptr [rdi + 9], cl
	jmp	.LBB186_10
.LBB186_9:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rsi], 0
	mov	qword ptr [rdi], rax
	mov	byte ptr [rdi + 8], 7
.LBB186_10:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB186_14
# %bb.11:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB186_14
# %bb.12:
	cmp	rax, 1
	jne	.LBB186_14
# %bb.13:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB186_14:
	mov	rax, rdi
	add	rsp, 80
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$15@?0???0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$15@?0???0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"
.LBB186_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB186_19
# %bb.16:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB186_19
# %bb.17:
	cmp	rax, 1
	jne	.LBB186_19
# %bb.18:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB186_19:
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end74:
	.p2align	2, 0x90
.LJTI186_0:
	.long	.LBB186_3-.LJTI186_0
	.long	.LBB186_2-.LJTI186_0
	.long	.LBB186_4-.LJTI186_0
	.long	.LBB186_5-.LJTI186_0
	.long	.LBB186_6-.LJTI186_0
	.long	.LBB186_7-.LJTI186_0
	.long	.LBB186_8-.LJTI186_0
	.long	.LBB186_9-.LJTI186_0
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0???0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin74@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp236@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp235@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.globl	"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z" # -- Begin function ??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z
	.p2align	4, 0x90
"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z": # @"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
.Lfunc_begin75:
.seh_proc "??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	mov	qword ptr [rbp - 8], rcx
	movups	xmm0, xmmword ptr [rcx]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	rax, qword ptr [rcx + 16]
	mov	qword ptr [rbp - 16], rax
	mov	rax, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB187_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB187_2:
.Ltmp240:
	lea	r8, [rbp - 40]
	mov	rcx, rsi
	call	"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp241:
# %bb.3:
	lea	rcx, [rbp - 32]
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, rsi
	add	rsp, 88
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA":
.seh_proc "?dtor$4@?0???4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA"
.LBB187_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8]
	test	rax, rax
	je	.LBB187_6
# %bb.5:
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rax + 16], rcx
	movaps	xmm0, xmmword ptr [rbp - 32]
	movups	xmmword ptr [rax], xmm0
.LBB187_6:
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end75:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
	.p2align	2
"$cppxdata$??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z@4HA"@IMGREL # Action
"$ip2state$??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z":
	.long	.Lfunc_begin75@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp240@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp241@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@$$QEAV012@@Z"
                                        # -- End function
	.def	 "??4value@json@boost@@QEAAAEAV012@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.globl	"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z" # -- Begin function ??4value@json@boost@@QEAAAEAV012@AEBV012@@Z
	.p2align	4, 0x90
"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z": # @"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
.Lfunc_begin76:
.seh_proc "??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	cmp	rcx, rdx
	je	.LBB188_5
# %bb.1:
	mov	qword ptr [rbp - 8], rsi
	movups	xmm0, xmmword ptr [rsi]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	rax, qword ptr [rsi + 16]
	mov	qword ptr [rbp - 16], rax
	mov	rax, qword ptr [rbp - 32]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB188_3
# %bb.2:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB188_3:
.Ltmp242:
	lea	r8, [rbp - 40]
	mov	rcx, rsi
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp243:
# %bb.4:
	lea	rcx, [rbp - 32]
	call	"??1value@json@boost@@QEAA@XZ"
.LBB188_5:
	mov	rax, rsi
	add	rsp, 88
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??4value@json@boost@@QEAAAEAV012@AEBV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???4value@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???4value@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA":
.seh_proc "?dtor$6@?0???4value@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA"
.LBB188_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8]
	test	rax, rax
	je	.LBB188_8
# %bb.7:
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rax + 16], rcx
	movaps	xmm0, xmmword ptr [rbp - 32]
	movups	xmmword ptr [rax], xmm0
.LBB188_8:
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end76:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
	.p2align	2
"$cppxdata$??4value@json@boost@@QEAAAEAV012@AEBV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??4value@json@boost@@QEAAAEAV012@AEBV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??4value@json@boost@@QEAAAEAV012@AEBV012@@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??4value@json@boost@@QEAAAEAV012@AEBV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???4value@json@boost@@QEAAAEAV012@AEBV012@@Z@4HA"@IMGREL # Action
"$ip2state$??4value@json@boost@@QEAAAEAV012@AEBV012@@Z":
	.long	.Lfunc_begin76@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp242@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp243@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??4value@json@boost@@QEAAAEAV012@AEBV012@@Z"
                                        # -- End function
	.def	 "??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.globl	"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z" # -- Begin function ??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z": # @"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
.Lfunc_begin77:
.seh_proc "??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rbx, rcx
	mov	rax, qword ptr [rdx]
	mov	rcx, qword ptr [rdx + 8]
	cmp	rax, rcx
	mov	qword ptr [rbp - 8], r8 # 8-byte Spill
	je	.LBB189_5
	.p2align	4, 0x90
.LBB189_1:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rax + 32], 1
	jne	.LBB189_6
# %bb.2:                                #   in Loop: Header=BB189_1 Depth=1
	mov	rsi, qword ptr [rax]
	mov	rdi, qword ptr [rax + 8]
	sub	rdi, rsi
	cmp	rdi, 80
	jne	.LBB189_6
# %bb.3:                                #   in Loop: Header=BB189_1 Depth=1
	mov	edi, dword ptr [rsi + 32]
	or	edi, 4
	cmp	edi, 4
	jne	.LBB189_6
# %bb.4:                                #   in Loop: Header=BB189_1 Depth=1
	add	rax, 40
	cmp	rcx, rax
	jne	.LBB189_1
.LBB189_5:
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 24], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 64], xmm0
.Ltmp246:
	lea	rdx, [rbp - 64]
	lea	r8, [rbp - 24]
	mov	rcx, rbx
	call	"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Ltmp247:
	jmp	.LBB189_7
.LBB189_6:
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 16], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 48], xmm0
.Ltmp244:
	lea	rdx, [rbp - 48]
	lea	r8, [rbp - 16]
	mov	rcx, rbx
	call	"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Ltmp245:
.LBB189_7:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB189_11
# %bb.8:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB189_11
# %bb.9:
	cmp	rax, 1
	jne	.LBB189_11
# %bb.10:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB189_11:
	mov	rax, rbx
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$12@?0???0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$12@?0???0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA"
.LBB189_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB189_16
# %bb.13:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB189_16
# %bb.14:
	cmp	rax, 1
	jne	.LBB189_16
# %bb.15:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB189_16:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end77:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	96                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0???0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin77@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp246@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp245@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0value@json@boost@@QEAA@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.globl	"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z" # -- Begin function ?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z
	.p2align	4, 0x90
"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z": # @"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Lfunc_begin78:
.seh_proc "?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 168
	.seh_stackalloc 168
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 32], -2
	mov	rbx, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp + 16], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	byte ptr [rcx + 8], 1
	mov	qword ptr [rcx + 16], 0
	mov	rdi, qword ptr [rdx]
	mov	r14, qword ptr [rdx + 8]
	mov	rax, r14
	sub	rax, rdi
	mov	qword ptr [rbp + 24], rcx # 8-byte Spill
	je	.LBB190_3
# %bb.1:
	mov	rsi, rdx
	sar	rax, 3
	movabs	rdx, -3689348814741910323
	imul	rdx, rax
.Ltmp248:
	mov	rcx, rbx
	call	"?rehash@object@json@boost@@AEAAX_K@Z"
.Ltmp249:
# %bb.2:
	mov	rdi, qword ptr [rsi]
	mov	r14, qword ptr [rsi + 8]
	mov	rbx, qword ptr [rbp + 24] # 8-byte Reload
.LBB190_3:
	lea	r15, [rbp - 72]
	lea	rsi, [rbp + 8]
	lea	r12, [rbp - 8]
	lea	r13, [rbp - 48]
	cmp	rdi, r14
	je	.LBB190_17
	.p2align	4, 0x90
.LBB190_4:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rdi]
	add	rcx, 40
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbp + 8], rax
	test	al, 1
	je	.LBB190_6
# %bb.5:                                #   in Loop: Header=BB190_4 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB190_6:                              #   in Loop: Header=BB190_4 Depth=1
.Ltmp250:
	mov	rdx, r15
	mov	r8, rsi
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
.Ltmp251:
# %bb.7:                                #   in Loop: Header=BB190_4 Depth=1
	mov	rcx, qword ptr [rdi]
	cmp	dword ptr [rcx + 32], 4
	jne	.LBB190_10
# %bb.8:                                #   in Loop: Header=BB190_4 Depth=1
	mov	r8, rsi
	mov	rsi, qword ptr [rcx + 24]
	movzx	edx, byte ptr [rsi + 8]
	cmp	dl, -126
	jne	.LBB190_11
# %bb.9:                                #   in Loop: Header=BB190_4 Depth=1
	lea	rax, [rsi + 9]
	jmp	.LBB190_13
	.p2align	4, 0x90
.LBB190_10:                             #   in Loop: Header=BB190_4 Depth=1
	mov	rax, qword ptr [rcx]
	mov	rbx, qword ptr [rcx + 8]
	mov	rcx, qword ptr [rbp + 24] # 8-byte Reload
	jmp	.LBB190_15
	.p2align	4, 0x90
.LBB190_11:                             #   in Loop: Header=BB190_4 Depth=1
	mov	rbx, qword ptr [rsi + 16]
	lea	rax, [rbx + 8]
	cmp	dl, 2
	jne	.LBB190_13
# %bb.12:                               #   in Loop: Header=BB190_4 Depth=1
	mov	ebx, dword ptr [rbx]
	mov	rcx, qword ptr [rbp + 24] # 8-byte Reload
	jmp	.LBB190_14
	.p2align	4, 0x90
.LBB190_13:                             #   in Loop: Header=BB190_4 Depth=1
	mov	rcx, qword ptr [rbp + 24] # 8-byte Reload
	movsx	rdx, byte ptr [rsi + 23]
	mov	ebx, 14
	sub	rbx, rdx
.LBB190_14:                             #   in Loop: Header=BB190_4 Depth=1
	mov	rsi, r8
.LBB190_15:                             #   in Loop: Header=BB190_4 Depth=1
	lea	rdx, [rip + "??_7place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"]
	mov	qword ptr [rbp - 48], rdx
	mov	qword ptr [rbp - 40], rax
	mov	qword ptr [rbp - 32], rbx
	mov	qword ptr [rbp - 24], r15
	mov	qword ptr [rbp - 16], rcx
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [rbp], rbx
.Ltmp252:
	lea	rdx, [rbp - 88]
	mov	r8, r12
	mov	r9, r13
	call	"?emplace_impl@object@json@boost@@AEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@AEAUplace_one@123@@Z"
.Ltmp253:
# %bb.16:                               #   in Loop: Header=BB190_4 Depth=1
	mov	rcx, r15
	call	"??1value@json@boost@@QEAA@XZ"
	add	rdi, 40
	mov	rbx, qword ptr [rbp + 24] # 8-byte Reload
	cmp	rdi, r14
	jne	.LBB190_4
.LBB190_17:
	mov	rax, qword ptr [rbp + 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB190_21
# %bb.18:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB190_21
# %bb.19:
	cmp	rax, 1
	jne	.LBB190_21
# %bb.20:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB190_21:
	mov	rax, rbx
	add	rsp, 168
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$22@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"
.LBB190_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	lea	rcx, [rbp - 72]
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$23@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$23@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"
.LBB190_23:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rsi, qword ptr [rbp + 24] # 8-byte Reload
	cmp	qword ptr [rsi + 16], 0
	je	.LBB190_26
# %bb.24:
	mov	eax, dword ptr [rsi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB190_26
# %bb.25:
	lea	rcx, [rsi + 16]
	mov	rdx, rsi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.LBB190_26:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB190_30
# %bb.27:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB190_30
# %bb.28:
	cmp	rax, 1
	jne	.LBB190_30
# %bb.29:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB190_30:
	mov	rax, qword ptr [rbp + 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB190_34
# %bb.31:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB190_34
# %bb.32:
	cmp	rax, 1
	jne	.LBB190_34
# %bb.33:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB190_34:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end78:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.p2align	2
"$cppxdata$?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL # IPToStateXData
	.long	160                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$23@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$22@?0??make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"@IMGREL # Action
"$ip2state$?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	.Lfunc_begin78@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp248@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp252@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp253@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
                                        # -- End function
	.def	 "?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.globl	"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z" # -- Begin function ?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z
	.p2align	4, 0x90
"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z": # @"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Lfunc_begin79:
.seh_proc "?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rbx, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 24], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	mov	qword ptr [rcx + 16], 0
	mov	byte ptr [rcx + 8], 0
	mov	rsi, qword ptr [rdx]
	mov	r12, qword ptr [rdx + 8]
	mov	rax, r12
	sub	rax, rsi
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	je	.LBB191_3
# %bb.1:
	mov	rdi, rdx
	sar	rax, 3
	movabs	rdx, -3689348814741910323
	imul	rdx, rax
.Ltmp254:
	mov	rcx, rbx
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp255:
# %bb.2:
	mov	rsi, qword ptr [rdi]
	mov	r12, qword ptr [rdi + 8]
	mov	rbx, qword ptr [rbp - 16] # 8-byte Reload
.LBB191_3:
	lea	rdi, [rbp - 64]
	lea	r14, [rbp - 32]
	lea	r15, [rbp - 40]
	jmp	.LBB191_4
	.p2align	4, 0x90
.LBB191_22:                             #   in Loop: Header=BB191_4 Depth=1
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	add	rsi, 40
.LBB191_4:                              # =>This Inner Loop Header: Depth=1
	cmp	rsi, r12
	je	.LBB191_24
# %bb.5:                                #   in Loop: Header=BB191_4 Depth=1
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbp - 32], rax
	test	al, 1
	je	.LBB191_7
# %bb.6:                                #   in Loop: Header=BB191_4 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB191_7:                              #   in Loop: Header=BB191_4 Depth=1
.Ltmp256:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8, r14
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
.Ltmp257:
# %bb.8:                                #   in Loop: Header=BB191_4 Depth=1
	mov	rbx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rbx + 16]
	test	rax, rax
	je	.LBB191_9
# %bb.10:                               #   in Loop: Header=BB191_4 Depth=1
	mov	edx, dword ptr [rax]
	cmp	edx, dword ptr [rax + 4]
	jb	.LBB191_16
# %bb.11:                               #   in Loop: Header=BB191_4 Depth=1
	add	rdx, 1
	jmp	.LBB191_12
	.p2align	4, 0x90
.LBB191_9:                              #   in Loop: Header=BB191_4 Depth=1
	mov	edx, 1
.LBB191_12:                             #   in Loop: Header=BB191_4 Depth=1
.Ltmp258:
	mov	rcx, rbx
	call	"?reserve_impl@array@json@boost@@AEAAX_K@Z"
.Ltmp259:
# %bb.13:                               #   in Loop: Header=BB191_4 Depth=1
	mov	rax, qword ptr [rbx + 16]
	test	rax, rax
	je	.LBB191_14
# %bb.15:                               #   in Loop: Header=BB191_4 Depth=1
	mov	edx, dword ptr [rax]
.LBB191_16:                             #   in Loop: Header=BB191_4 Depth=1
	add	rax, 8
	jmp	.LBB191_17
	.p2align	4, 0x90
.LBB191_14:                             #   in Loop: Header=BB191_4 Depth=1
	xor	eax, eax
	xor	edx, edx
.LBB191_17:                             #   in Loop: Header=BB191_4 Depth=1
	lea	rcx, [rdx + 2*rdx]
	lea	rcx, [rax + 8*rcx]
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB191_19
# %bb.18:                               #   in Loop: Header=BB191_4 Depth=1
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB191_19:                             #   in Loop: Header=BB191_4 Depth=1
.Ltmp260:
	mov	rdx, rdi
	mov	r8, r15
	mov	rbx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp261:
# %bb.20:                               #   in Loop: Header=BB191_4 Depth=1
	mov	rax, qword ptr [rbx + 16]
	test	rax, rax
	je	.LBB191_22
# %bb.21:                               #   in Loop: Header=BB191_4 Depth=1
	add	dword ptr [rax], 1
	jmp	.LBB191_22
.LBB191_24:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB191_28
# %bb.25:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB191_28
# %bb.26:
	cmp	rax, 1
	jne	.LBB191_28
# %bb.27:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB191_28:
	mov	rax, rbx
	add	rsp, 96
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$23@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$23@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"
.LBB191_23:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	lea	rcx, [rbp - 64]
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$29@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$29@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$29@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"
.LBB191_29:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, qword ptr [rax]
	mov	r14, qword ptr [rax + 16]
	test	r14, r14
	je	.LBB191_40
# %bb.30:
	mov	eax, esi
	and	eax, 3
	cmp	eax, 2
	je	.LBB191_40
# %bb.31:
	mov	eax, dword ptr [r14]
	test	rax, rax
	je	.LBB191_34
# %bb.32:
	lea	rbx, [r14 - 16]
	shl	rax, 3
	lea	rdi, [rax + 2*rax]
.LBB191_33:                             # =>This Inner Loop Header: Depth=1
	lea	rcx, [rbx + rdi]
	call	"??1value@json@boost@@QEAA@XZ"
	add	rdi, -24
	jne	.LBB191_33
.LBB191_34:
	test	rsi, rsi
	je	.LBB191_36
# %bb.35:
	mov	rbx, rsi
	and	rbx, -4
	jmp	.LBB191_39
.LBB191_36:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB191_37
.LBB191_39:
	mov	eax, dword ptr [r14 + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	mov	rax, qword ptr [rbx]
	mov	r9d, 8
	mov	rcx, rbx
	mov	rdx, r14
	call	qword ptr [rax + 16]
.LBB191_40:
	test	sil, 1
	je	.LBB191_44
# %bb.41:
	and	rsi, -4
	mov	rax, -1
	lock		xadd	qword ptr [rsi + 8], rax
	test	rsi, rsi
	je	.LBB191_44
# %bb.42:
	cmp	rax, 1
	jne	.LBB191_44
# %bb.43:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	edx, 1
	call	qword ptr [rax]
.LBB191_44:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB191_48
# %bb.45:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB191_48
# %bb.46:
	cmp	rax, 1
	jne	.LBB191_48
# %bb.47:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB191_48:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.LBB191_37:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB191_39
# %bb.38:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB191_39
.Lfunc_end79:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.p2align	2
"$cppxdata$?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$29@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$23@?0??make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"@IMGREL # Action
"$ip2state$?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	.Lfunc_begin79@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp254@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp258@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp261@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
                                        # -- End function
	.def	 "?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ"
	.globl	"?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ" # -- Begin function ?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ
	.p2align	4, 0x90
"?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ": # @"?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ"
.seh_proc "?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 1
	mov	qword ptr [rsi + 16], 0
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_object@value@json@boost@@QEAAAEAVobject@23@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	.globl	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ" # -- Begin function ?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ
	.p2align	4, 0x90
"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ": # @"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
.Lfunc_begin80:
.seh_proc "?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rdx
	mov	rdi, rcx
	mov	al, byte ptr [rcx + 8]
	and	al, 63
	je	.LBB193_12
# %bb.1:
	cmp	al, 2
	je	.LBB193_29
# %bb.2:
	cmp	al, 1
	jne	.LBB193_32
# %bb.3:
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi], rax
	test	al, 1
	je	.LBB193_5
# %bb.4:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB193_5:
	cmp	qword ptr [rdi + 16], 0
	je	.LBB193_8
# %bb.6:
	mov	eax, dword ptr [rdi]
	and	eax, 3
	cmp	eax, 2
	je	.LBB193_8
# %bb.7:
	lea	rcx, [rdi + 16]
	mov	rdx, rdi
	call	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	jmp	.LBB193_8
.LBB193_12:
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi], rax
	test	al, 1
	je	.LBB193_14
# %bb.13:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB193_14:
	mov	rax, qword ptr [rdi + 16]
	test	rax, rax
	je	.LBB193_8
# %bb.15:
	mov	rbx, qword ptr [rdi]
	mov	ecx, ebx
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB193_8
# %bb.16:
	mov	ecx, dword ptr [rax]
	test	rcx, rcx
	je	.LBB193_20
# %bb.17:
	lea	rcx, [rcx + 2*rcx]
	lea	rbx, [rax + 8*rcx]
	add	rbx, 8
	.p2align	4, 0x90
.LBB193_18:                             # =>This Inner Loop Header: Depth=1
	add	rbx, -24
	mov	rcx, rbx
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rdi + 16]
	lea	rcx, [rax + 8]
	test	rax, rax
	cmove	rcx, rax
	cmp	rbx, rcx
	jne	.LBB193_18
# %bb.19:
	mov	rbx, qword ptr [rdi]
.LBB193_20:
	test	rbx, rbx
	je	.LBB193_22
# %bb.21:
	and	rbx, -4
	jmp	.LBB193_25
.LBB193_29:
	lea	rcx, [rdi + 8]
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi], rax
	test	al, 1
	je	.LBB193_31
# %bb.30:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB193_31:
	mov	rdx, rdi
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	jmp	.LBB193_8
.LBB193_32:
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rdi], 0
	mov	qword ptr [rsi], rax
	jmp	.LBB193_33
.LBB193_22:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB193_23
.LBB193_25:
	mov	rdx, qword ptr [rdi + 16]
	test	rdx, rdx
	je	.LBB193_26
# %bb.27:
	mov	eax, dword ptr [rdx + 4]
	lea	rax, [rax + 2*rax]
	lea	rax, [8*rax + 17]
	movabs	r8, 274877906936
	and	r8, rax
	jmp	.LBB193_28
.LBB193_26:
	mov	r8d, 16
.LBB193_28:
	mov	rax, qword ptr [rbx]
.Ltmp262:
	mov	r9d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 16]
.Ltmp263:
.LBB193_8:
	mov	rcx, qword ptr [rdi]
	test	cl, 1
	je	.LBB193_33
# %bb.9:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB193_33
# %bb.10:
	cmp	rax, 1
	jne	.LBB193_33
# %bb.11:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB193_33:
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB193_23:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB193_25
# %bb.24:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB193_25
	.seh_handlerdata
	.long	("$cppxdata$?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ")@IMGREL
	.section	.text,"xr",one_only,"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	.seh_endproc
	.def	 "?dtor$34@?0??destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$34@?0??destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ@4HA":
.seh_proc "?dtor$34@?0??destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ@4HA"
.LBB193_34:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end80:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	.p2align	2
"$cppxdata$?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ":
	.long	-1                      # ToState
	.long	"?dtor$34@?0??destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ@4HA"@IMGREL # Action
"$ip2state$?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ":
	.long	.Lfunc_begin80@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp262@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp263@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
                                        # -- End function
	.def	 "?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ"
	.globl	"?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ" # -- Begin function ?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ
	.p2align	4, 0x90
"?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ": # @"?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ"
.seh_proc "?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	qword ptr [rsi + 16], 0
	mov	byte ptr [rsi + 8], 0
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_array@value@json@boost@@QEAAAEAVarray@23@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ"
	.globl	"?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ" # -- Begin function ?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ
	.p2align	4, 0x90
"?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ": # @"?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ"
.seh_proc "?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	lea	rdx, [rsp + 40]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 40]
	mov	qword ptr [rsi], rax
	mov	word ptr [rsi + 8], 130
	mov	byte ptr [rsi + 23], 14
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_string@value@json@boost@@QEAAAEAVstring@23@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_int64@value@json@boost@@QEAAAEA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_int64@value@json@boost@@QEAAAEA_JXZ"
	.globl	"?emplace_int64@value@json@boost@@QEAAAEA_JXZ" # -- Begin function ?emplace_int64@value@json@boost@@QEAAAEA_JXZ
	.p2align	4, 0x90
"?emplace_int64@value@json@boost@@QEAAAEA_JXZ": # @"?emplace_int64@value@json@boost@@QEAAAEA_JXZ"
.seh_proc "?emplace_int64@value@json@boost@@QEAAAEA_JXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 3
	mov	qword ptr [rsi + 16], 0
	add	rsi, 16
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_int64@value@json@boost@@QEAAAEA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_uint64@value@json@boost@@QEAAAEA_KXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_uint64@value@json@boost@@QEAAAEA_KXZ"
	.globl	"?emplace_uint64@value@json@boost@@QEAAAEA_KXZ" # -- Begin function ?emplace_uint64@value@json@boost@@QEAAAEA_KXZ
	.p2align	4, 0x90
"?emplace_uint64@value@json@boost@@QEAAAEA_KXZ": # @"?emplace_uint64@value@json@boost@@QEAAAEA_KXZ"
.seh_proc "?emplace_uint64@value@json@boost@@QEAAAEA_KXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 4
	mov	qword ptr [rsi + 16], 0
	add	rsi, 16
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_uint64@value@json@boost@@QEAAAEA_KXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_double@value@json@boost@@QEAAAEANXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_double@value@json@boost@@QEAAAEANXZ"
	.globl	"?emplace_double@value@json@boost@@QEAAAEANXZ" # -- Begin function ?emplace_double@value@json@boost@@QEAAAEANXZ
	.p2align	4, 0x90
"?emplace_double@value@json@boost@@QEAAAEANXZ": # @"?emplace_double@value@json@boost@@QEAAAEANXZ"
.seh_proc "?emplace_double@value@json@boost@@QEAAAEANXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 5
	mov	qword ptr [rsi + 16], 0
	add	rsi, 16
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_double@value@json@boost@@QEAAAEANXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_bool@value@json@boost@@QEAAAEA_NXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_bool@value@json@boost@@QEAAAEA_NXZ"
	.globl	"?emplace_bool@value@json@boost@@QEAAAEA_NXZ" # -- Begin function ?emplace_bool@value@json@boost@@QEAAAEA_NXZ
	.p2align	4, 0x90
"?emplace_bool@value@json@boost@@QEAAAEA_NXZ": # @"?emplace_bool@value@json@boost@@QEAAAEA_NXZ"
.seh_proc "?emplace_bool@value@json@boost@@QEAAAEA_NXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	word ptr [rsi + 8], 6
	add	rsi, 9
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_bool@value@json@boost@@QEAAAEA_NXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?emplace_null@value@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?emplace_null@value@json@boost@@QEAAXXZ"
	.globl	"?emplace_null@value@json@boost@@QEAAXXZ" # -- Begin function ?emplace_null@value@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?emplace_null@value@json@boost@@QEAAXXZ": # @"?emplace_null@value@json@boost@@QEAAXXZ"
.seh_proc "?emplace_null@value@json@boost@@QEAAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	call	"?destroy@value@json@boost@@AEAA?AVstorage_ptr@23@XZ"
	mov	rax, qword ptr [rsp + 32]
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 7
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	nop
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?emplace_null@value@json@boost@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?swap@value@json@boost@@QEAAXAEAV123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?swap@value@json@boost@@QEAAXAEAV123@@Z"
	.globl	"?swap@value@json@boost@@QEAAXAEAV123@@Z" # -- Begin function ?swap@value@json@boost@@QEAAXAEAV123@@Z
	.p2align	4, 0x90
"?swap@value@json@boost@@QEAAXAEAV123@@Z": # @"?swap@value@json@boost@@QEAAXAEAV123@@Z"
.Lfunc_begin81:
.seh_proc "?swap@value@json@boost@@QEAAXAEAV123@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 112
	.seh_stackalloc 112
	lea	rbp, [rsp + 112]
	.seh_setframe rbp, 112
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rdx
	mov	r14, rcx
	mov	rbx, qword ptr [rdx]
	test	rbx, rbx
	je	.LBB201_2
# %bb.1:
	and	rbx, -4
	jmp	.LBB201_5
.LBB201_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB201_3
.LBB201_5:
	mov	rsi, qword ptr [r14]
	test	rsi, rsi
	je	.LBB201_7
# %bb.6:
	and	rsi, -4
	jmp	.LBB201_10
.LBB201_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB201_8
.LBB201_10:
	cmp	rsi, rbx
	je	.LBB201_19
# %bb.11:
	mov	rax, qword ptr [rsi]
	mov	rcx, rsi
	mov	rdx, rbx
	call	qword ptr [rax + 24]
	test	al, al
	je	.LBB201_12
.LBB201_19:
	mov	rax, qword ptr [r14 + 16]
	mov	qword ptr [rbp - 16], rax
	movups	xmm0, xmmword ptr [r14]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	rax, qword ptr [rdi + 16]
	mov	qword ptr [r14 + 16], rax
	movups	xmm0, xmmword ptr [rdi]
	movups	xmmword ptr [r14], xmm0
	mov	rax, qword ptr [rbp - 16]
	mov	qword ptr [rdi + 16], rax
	movaps	xmm0, xmmword ptr [rbp - 32]
	movups	xmmword ptr [rdi], xmm0
	jmp	.LBB201_20
.LBB201_12:
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rbp - 72], rax
	test	al, 1
	je	.LBB201_14
# %bb.13:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB201_14:
	lea	rcx, [rbp - 32]
	lea	r8, [rbp - 72]
	mov	rdx, r14
	call	"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 40], rax
	test	al, 1
	je	.LBB201_16
# %bb.15:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB201_16:
.Ltmp264:
	lea	rcx, [rbp - 64]
	lea	r8, [rbp - 40]
	mov	rdx, rdi
	call	"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
.Ltmp265:
# %bb.17:
	mov	rcx, rdi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp - 16]
	mov	qword ptr [rdi + 16], rax
	movups	xmm0, xmmword ptr [rbp - 32]
	movups	xmmword ptr [rdi], xmm0
	mov	qword ptr [rbp - 32], 0
	mov	byte ptr [rbp - 24], 7
	mov	rcx, r14
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rbp - 48]
	mov	qword ptr [r14 + 16], rax
	movups	xmm0, xmmword ptr [rbp - 64]
	movups	xmmword ptr [r14], xmm0
	mov	qword ptr [rbp - 64], 0
	mov	byte ptr [rbp - 56], 7
	lea	rcx, [rbp - 64]
	call	"??1value@json@boost@@QEAA@XZ"
	lea	rcx, [rbp - 32]
	call	"??1value@json@boost@@QEAA@XZ"
.LBB201_20:
	nop
	add	rsp, 112
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB201_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB201_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB201_5
.LBB201_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB201_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB201_10
	.seh_handlerdata
	.long	("$cppxdata$?swap@value@json@boost@@QEAAXAEAV123@@Z")@IMGREL
	.section	.text,"xr",one_only,"?swap@value@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.def	 "?dtor$18@?0??swap@value@json@boost@@QEAAXAEAV123@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??swap@value@json@boost@@QEAAXAEAV123@@Z@4HA":
.seh_proc "?dtor$18@?0??swap@value@json@boost@@QEAAXAEAV123@@Z@4HA"
.LBB201_18:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 112]
	.seh_endprologue
	lea	rcx, [rbp - 32]
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end81:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?swap@value@json@boost@@QEAAXAEAV123@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?swap@value@json@boost@@QEAAXAEAV123@@Z"
	.p2align	2
"$cppxdata$?swap@value@json@boost@@QEAAXAEAV123@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?swap@value@json@boost@@QEAAXAEAV123@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?swap@value@json@boost@@QEAAXAEAV123@@Z")@IMGREL # IPToStateXData
	.long	104                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?swap@value@json@boost@@QEAAXAEAV123@@Z":
	.long	-1                      # ToState
	.long	"?dtor$18@?0??swap@value@json@boost@@QEAAXAEAV123@@Z@4HA"@IMGREL # Action
"$ip2state$?swap@value@json@boost@@QEAAXAEAV123@@Z":
	.long	.Lfunc_begin81@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp264@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp265@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?swap@value@json@boost@@QEAAXAEAV123@@Z"
                                        # -- End function
	.def	 "??0key_value_pair@json@boost@@QEAA@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
	.globl	"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z" # -- Begin function ??0key_value_pair@json@boost@@QEAA@AEBV012@@Z
	.p2align	4, 0x90
"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z": # @"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
.Lfunc_begin82:
.seh_proc "??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rdx
	mov	rbx, rcx
	mov	rax, qword ptr [rdx]
	mov	qword ptr [rbp - 16], rax
	test	al, 1
	je	.LBB202_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB202_2:
	lea	r8, [rbp - 16]
	mov	rcx, rbx
	mov	rdx, rsi
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	mov	rdi, qword ptr [rbx]
	test	rdi, rdi
	mov	qword ptr [rbp - 8], rbx # 8-byte Spill
	je	.LBB202_4
# %bb.3:
	and	rdi, -4
	jmp	.LBB202_7
.LBB202_4:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB202_5
.LBB202_7:
	mov	edx, dword ptr [rsi + 32]
	add	edx, 1
	mov	rax, qword ptr [rdi]
.Ltmp266:
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
.Ltmp267:
# %bb.8:
	mov	rdi, rax
	mov	rdx, qword ptr [rsi + 24]
	mov	r8d, dword ptr [rsi + 32]
	mov	rcx, rax
	call	memcpy
	mov	eax, dword ptr [rsi + 32]
	mov	byte ptr [rdi + rax], 0
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rax + 24], rdi
	mov	ecx, dword ptr [rsi + 32]
	mov	dword ptr [rax + 32], ecx
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB202_5:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB202_7
# %bb.6:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB202_7
	.seh_handlerdata
	.long	("$cppxdata$??0key_value_pair@json@boost@@QEAA@AEBV012@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???0key_value_pair@json@boost@@QEAA@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???0key_value_pair@json@boost@@QEAA@AEBV012@@Z@4HA":
.seh_proc "?dtor$9@?0???0key_value_pair@json@boost@@QEAA@AEBV012@@Z@4HA"
.LBB202_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end82:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
	.p2align	2
"$cppxdata$??0key_value_pair@json@boost@@QEAA@AEBV012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0key_value_pair@json@boost@@QEAA@AEBV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0key_value_pair@json@boost@@QEAA@AEBV012@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0key_value_pair@json@boost@@QEAA@AEBV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$9@?0???0key_value_pair@json@boost@@QEAA@AEBV012@@Z@4HA"@IMGREL # Action
"$ip2state$??0key_value_pair@json@boost@@QEAA@AEBV012@@Z":
	.long	.Lfunc_begin82@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp266@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp267@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@@Z"
                                        # -- End function
	.def	 "??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.globl	"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z" # -- Begin function ??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z": # @"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Lfunc_begin83:
.seh_proc "??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rdx
	mov	rbx, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 24], rax
.Ltmp268:
	lea	r8, [rbp - 24]
	call	"??0value@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
.Ltmp269:
# %bb.1:
	mov	rdi, qword ptr [rbx]
	test	rdi, rdi
	mov	qword ptr [rbp - 8], rbx # 8-byte Spill
	je	.LBB203_3
# %bb.2:
	and	rdi, -4
	jmp	.LBB203_6
.LBB203_3:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB203_4
.LBB203_6:
	mov	edx, dword ptr [rsi + 32]
	add	edx, 1
	mov	rax, qword ptr [rdi]
.Ltmp270:
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
.Ltmp271:
# %bb.7:
	mov	rdi, rax
	mov	rdx, qword ptr [rsi + 24]
	mov	r8d, dword ptr [rsi + 32]
	mov	rcx, rax
	call	memcpy
	mov	eax, dword ptr [rsi + 32]
	mov	byte ptr [rdi + rax], 0
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rbx + 24], rdi
	mov	eax, dword ptr [rsi + 32]
	mov	dword ptr [rbx + 32], eax
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB203_11
# %bb.8:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB203_11
# %bb.9:
	cmp	rax, 1
	jne	.LBB203_11
# %bb.10:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB203_11:
	mov	rax, rbx
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB203_4:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB203_6
# %bb.5:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB203_6
	.seh_handlerdata
	.long	("$cppxdata$??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$12@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$12@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"
.LBB203_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$13@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$13@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"
.LBB203_13:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB203_17
# %bb.14:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB203_17
# %bb.15:
	cmp	rax, 1
	jne	.LBB203_17
# %bb.16:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB203_17:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end83:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$13@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$12@?0???0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin83@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp268@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp270@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp271@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??1value_stack@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1value_stack@json@boost@@QEAA@XZ"
	.globl	"??1value_stack@json@boost@@QEAA@XZ" # -- Begin function ??1value_stack@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1value_stack@json@boost@@QEAA@XZ":   # @"??1value_stack@json@boost@@QEAA@XZ"
.seh_proc "??1value_stack@json@boost@@QEAA@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 56]
	test	cl, 1
	je	.LBB204_4
# %bb.1:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB204_4
# %bb.2:
	cmp	rax, 1
	jne	.LBB204_4
# %bb.3:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB204_4:
	mov	rcx, rsi
	add	rsp, 32
	pop	rsi
	jmp	"??1stack@value_stack@json@boost@@QEAA@XZ" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",one_only,"??1value_stack@json@boost@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1stack@value_stack@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1stack@value_stack@json@boost@@QEAA@XZ"
	.globl	"??1stack@value_stack@json@boost@@QEAA@XZ" # -- Begin function ??1stack@value_stack@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1stack@value_stack@json@boost@@QEAA@XZ": # @"??1stack@value_stack@json@boost@@QEAA@XZ"
.Lfunc_begin84:
.seh_proc "??1stack@value_stack@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rcx
	mov	rax, qword ptr [rcx + 16]
	mov	rsi, qword ptr [rcx + 24]
	cmp	rsi, rax
	je	.LBB205_5
# %bb.1:
	cmp	byte ptr [rdi + 48], 0
	je	.LBB205_2
	.p2align	4, 0x90
.LBB205_3:                              # =>This Inner Loop Header: Depth=1
	add	rsi, -24
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	mov	rax, qword ptr [rdi + 16]
	cmp	rsi, rax
	jne	.LBB205_3
	jmp	.LBB205_4
.LBB205_2:
	mov	rsi, rax
.LBB205_4:
	mov	qword ptr [rdi + 24], rsi
.LBB205_5:
	mov	qword ptr [rdi + 40], 0
	cmp	rax, qword ptr [rdi + 8]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	je	.LBB205_12
# %bb.6:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, qword ptr [rax]
	test	rsi, rsi
	mov	rdi, rax
	je	.LBB205_8
# %bb.7:
	and	rsi, -4
	jmp	.LBB205_11
.LBB205_8:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB205_9
.LBB205_11:
	mov	rdx, qword ptr [rdi + 16]
	mov	r8, qword ptr [rdi + 32]
	sub	r8, rdx
	mov	rax, qword ptr [rsi]
.Ltmp272:
	mov	r9d, 8
	mov	rcx, rsi
	call	qword ptr [rax + 16]
.Ltmp273:
.LBB205_12:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	jne	.LBB205_13
.LBB205_15:
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB205_13:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB205_15
# %bb.14:
	cmp	rax, 1
	jne	.LBB205_15
# %bb.17:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	edx, 1
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	rex64 jmp	rax             # TAILCALL
.LBB205_9:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB205_11
# %bb.10:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB205_11
	.seh_handlerdata
	.long	("$cppxdata$??1stack@value_stack@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1stack@value_stack@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$16@?0???1stack@value_stack@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???1stack@value_stack@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$16@?0???1stack@value_stack@json@boost@@QEAA@XZ@4HA"
.LBB205_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1storage_ptr@json@boost@@QEAA@XZ"
	call	__std_terminate
	int3
.Lfunc_end84:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1stack@value_stack@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1stack@value_stack@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??1stack@value_stack@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1stack@value_stack@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1stack@value_stack@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1stack@value_stack@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$16@?0???1stack@value_stack@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1stack@value_stack@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin84@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp272@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp273@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1stack@value_stack@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z"
	.globl	"??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z" # -- Begin function ??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z
	.p2align	4, 0x90
"??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z": # @"??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z"
.seh_proc "??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rax, r9
	mov	r9, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rdx]
	mov	qword ptr [rdx], 0
	mov	qword ptr [rsi], rcx
	mov	qword ptr [rsi + 8], r8
	mov	qword ptr [rsi + 40], 0
	mov	byte ptr [rsi + 48], 0
	cmp	rax, 384
	jb	.LBB206_2
# %bb.1:
	mov	qword ptr [rsi + 16], r8
	movabs	rcx, -6148914691236517205
	mul	rcx
	mov	qword ptr [rsi + 24], r8
	shr	rdx, 4
	lea	rax, [rdx + 2*rdx]
	lea	rax, [r8 + 8*rax]
	jmp	.LBB206_3
.LBB206_2:
	lea	rax, [rsi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rax], xmm0
	xor	eax, eax
.LBB206_3:
	mov	qword ptr [rsi + 32], rax
	mov	qword ptr [rsi + 56], 0
	mov	rcx, qword ptr [r9]
	test	cl, 1
	je	.LBB206_7
# %bb.4:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB206_7
# %bb.5:
	cmp	rax, 1
	jne	.LBB206_7
# %bb.6:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB206_7:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0value_stack@json@boost@@QEAA@Vstorage_ptr@12@PEAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.globl	"??0logic_error@std@@QEAA@PEBD@Z" # -- Begin function ??0logic_error@std@@QEAA@PEBD@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@PEBD@Z":      # @"??0logic_error@std@@QEAA@PEBD@Z"
.Lfunc_begin85:
.seh_proc "??0logic_error@std@@QEAA@PEBD@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	mov	qword ptr [rbp - 16], rdx
	mov	byte ptr [rbp - 8], 1
.Ltmp274:
	lea	rcx, [rbp - 16]
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp275:
# %bb.1:
	lea	rax, [rip + "??_7logic_error@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0logic_error@std@@QEAA@PEBD@Z")@IMGREL
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0logic_error@std@@QEAA@PEBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0logic_error@std@@QEAA@PEBD@Z@4HA":
.seh_proc "?dtor$2@?0???0logic_error@std@@QEAA@PEBD@Z@4HA"
.LBB207_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end85:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0logic_error@std@@QEAA@PEBD@Z"
	.p2align	2
"$cppxdata$??0logic_error@std@@QEAA@PEBD@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0logic_error@std@@QEAA@PEBD@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0logic_error@std@@QEAA@PEBD@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0logic_error@std@@QEAA@PEBD@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0logic_error@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
"$ip2state$??0logic_error@std@@QEAA@PEBD@Z":
	.long	.Lfunc_begin85@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp274@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp275@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.globl	"??0logic_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@AEBV01@@Z":   # @"??0logic_error@std@@QEAA@AEBV01@@Z"
.Lfunc_begin86:
.seh_proc "??0logic_error@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp276:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp277:
# %bb.1:
	lea	rax, [rip + "??_7logic_error@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0logic_error@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0logic_error@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0logic_error@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0logic_error@std@@QEAA@AEBV01@@Z@4HA"
.LBB208_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end86:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0logic_error@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0logic_error@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0logic_error@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0logic_error@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0logic_error@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0logic_error@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin86@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp276@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp277@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??0exception@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.globl	"??0exception@std@@QEAA@AEBV01@@Z" # -- Begin function ??0exception@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@AEBV01@@Z":     # @"??0exception@std@@QEAA@AEBV01@@Z"
.Lfunc_begin87:
.seh_proc "??0exception@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp278:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp279:
# %bb.1:
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0exception@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA"
.LBB209_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end87:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0exception@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0exception@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0exception@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0exception@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0exception@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0exception@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin87@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp278@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp279@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "?push_array@value_stack@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	.globl	"?push_array@value_stack@json@boost@@QEAAX_K@Z" # -- Begin function ?push_array@value_stack@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?push_array@value_stack@json@boost@@QEAAX_K@Z": # @"?push_array@value_stack@json@boost@@QEAAX_K@Z"
.Lfunc_begin88:
.seh_proc "?push_array@value_stack@json@boost@@QEAAX_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rdi, rdx
	mov	rsi, rcx
	test	rdx, rdx
	je	.LBB210_1
.LBB210_3:
	lea	rax, [rsi + 56]
	mov	rcx, rdi
	neg	rcx
	lea	rcx, [rcx + 2*rcx]
	shl	rcx, 3
	add	rcx, qword ptr [rsi + 24]
	mov	qword ptr [rsi + 24], rcx
	mov	qword ptr [rbp - 24], rcx
	mov	qword ptr [rbp - 16], rdi
	mov	qword ptr [rbp - 8], rax
.Ltmp280:
	lea	rcx, [rbp - 48]
	lea	rdx, [rbp - 24]
	call	"??0array@json@boost@@AEAA@$$QEAVunchecked_array@detail@12@@Z"
.Ltmp281:
# %bb.4:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rbp - 32]
	mov	qword ptr [rax + 16], rcx
	movups	xmm0, xmmword ptr [rbp - 48]
	movups	xmmword ptr [rax], xmm0
	add	qword ptr [rsi + 24], 24
	mov	rsi, qword ptr [rbp - 24]
	test	rsi, rsi
	je	.LBB210_9
# %bb.5:
	mov	rax, qword ptr [rbp - 8]
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB210_9
# %bb.6:
	mov	rdi, qword ptr [rbp - 16]
	test	rdi, rdi
	je	.LBB210_9
# %bb.7:
	mov	ebx, 1
	xor	eax, eax
	.p2align	4, 0x90
.LBB210_8:                              # =>This Inner Loop Header: Depth=1
	lea	rax, [rax + 2*rax]
	lea	rcx, [rsi + 8*rax]
	call	"??1value@json@boost@@QEAA@XZ"
	mov	eax, ebx
	add	ebx, 1
	cmp	rdi, rax
	ja	.LBB210_8
.LBB210_9:
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB210_1:
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rsi + 32]
	jb	.LBB210_3
# %bb.2:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	jmp	.LBB210_3
	.seh_handlerdata
	.long	("$cppxdata$?push_array@value_stack@json@boost@@QEAAX_K@Z")@IMGREL
	.section	.text,"xr",one_only,"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	.seh_endproc
	.def	 "?dtor$10@?0??push_array@value_stack@json@boost@@QEAAX_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??push_array@value_stack@json@boost@@QEAAX_K@Z@4HA":
.seh_proc "?dtor$10@?0??push_array@value_stack@json@boost@@QEAAX_K@Z@4HA"
.LBB210_10:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 24]
	test	rsi, rsi
	je	.LBB210_15
# %bb.11:
	mov	rax, qword ptr [rbp - 8]
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	je	.LBB210_15
# %bb.12:
	mov	rdi, qword ptr [rbp - 16]
	test	rdi, rdi
	je	.LBB210_15
# %bb.13:
	mov	ebx, 1
	xor	eax, eax
.LBB210_14:                             # =>This Inner Loop Header: Depth=1
	lea	rax, [rax + 2*rax]
	lea	rcx, [rsi + 8*rax]
	call	"??1value@json@boost@@QEAA@XZ"
	mov	eax, ebx
	add	ebx, 1
	cmp	rdi, rax
	ja	.LBB210_14
.LBB210_15:
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end88:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	.p2align	2
"$cppxdata$?push_array@value_stack@json@boost@@QEAAX_K@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?push_array@value_stack@json@boost@@QEAAX_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?push_array@value_stack@json@boost@@QEAAX_K@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?push_array@value_stack@json@boost@@QEAAX_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$10@?0??push_array@value_stack@json@boost@@QEAAX_K@Z@4HA"@IMGREL # Action
"$ip2state$?push_array@value_stack@json@boost@@QEAAX_K@Z":
	.long	.Lfunc_begin88@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp280@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp281@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?push_array@value_stack@json@boost@@QEAAX_K@Z"
                                        # -- End function
	.def	 "?push_object@value_stack@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	.globl	"?push_object@value_stack@json@boost@@QEAAX_K@Z" # -- Begin function ?push_object@value_stack@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?push_object@value_stack@json@boost@@QEAAX_K@Z": # @"?push_object@value_stack@json@boost@@QEAAX_K@Z"
.Lfunc_begin89:
.seh_proc "?push_object@value_stack@json@boost@@QEAAX_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 96
	.seh_stackalloc 96
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rdx
	mov	rsi, rcx
	test	rdx, rdx
	je	.LBB211_1
.LBB211_3:
	lea	rax, [rsi + 56]
	lea	rcx, [rdi + rdi]
	neg	rcx
	lea	rcx, [rcx + 2*rcx]
	shl	rcx, 3
	add	rcx, qword ptr [rsi + 24]
	mov	qword ptr [rsi + 24], rcx
	mov	qword ptr [rbp - 32], rcx
	mov	qword ptr [rbp - 24], rdi
	mov	qword ptr [rbp - 16], rax
.Ltmp282:
	lea	rcx, [rbp - 56]
	lea	rdx, [rbp - 32]
	call	"??0object@json@boost@@AEAA@$$QEAVunchecked_object@detail@12@@Z"
.Ltmp283:
# %bb.4:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rbp - 40]
	mov	qword ptr [rax + 16], rcx
	movups	xmm0, xmmword ptr [rbp - 56]
	movups	xmmword ptr [rax], xmm0
	add	qword ptr [rsi + 24], 24
	mov	rsi, qword ptr [rbp - 32]
	test	rsi, rsi
	je	.LBB211_8
# %bb.5:
	mov	rax, qword ptr [rbp - 16]
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	jne	.LBB211_7
.LBB211_8:
	add	rsp, 96
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.p2align	4, 0x90
.LBB211_7:                              # =>This Inner Loop Header: Depth=1
	sub	qword ptr [rbp - 24], 1
	jb	.LBB211_8
# %bb.6:                                #   in Loop: Header=BB211_7 Depth=1
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	lea	rcx, [rsi + 24]
	call	"??1value@json@boost@@QEAA@XZ"
	add	rsi, 48
	jmp	.LBB211_7
.LBB211_1:
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rsi + 32]
	jb	.LBB211_3
# %bb.2:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	jmp	.LBB211_3
	.seh_handlerdata
	.long	("$cppxdata$?push_object@value_stack@json@boost@@QEAAX_K@Z")@IMGREL
	.section	.text,"xr",one_only,"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	.seh_endproc
	.def	 "?dtor$9@?0??push_object@value_stack@json@boost@@QEAAX_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??push_object@value_stack@json@boost@@QEAAX_K@Z@4HA":
.seh_proc "?dtor$9@?0??push_object@value_stack@json@boost@@QEAAX_K@Z@4HA"
.LBB211_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 96]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 32]
	test	rsi, rsi
	je	.LBB211_13
# %bb.10:
	mov	rax, qword ptr [rbp - 16]
	mov	eax, dword ptr [rax]
	and	eax, 3
	cmp	eax, 2
	jne	.LBB211_12
.LBB211_13:
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.LBB211_12:                             # =>This Inner Loop Header: Depth=1
	sub	qword ptr [rbp - 24], 1
	jb	.LBB211_13
# %bb.11:                               #   in Loop: Header=BB211_12 Depth=1
	mov	rcx, rsi
	call	"??1value@json@boost@@QEAA@XZ"
	lea	rcx, [rsi + 24]
	call	"??1value@json@boost@@QEAA@XZ"
	add	rsi, 48
	jmp	.LBB211_12
.Lfunc_end89:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	.p2align	2
"$cppxdata$?push_object@value_stack@json@boost@@QEAAX_K@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?push_object@value_stack@json@boost@@QEAAX_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?push_object@value_stack@json@boost@@QEAAX_K@Z")@IMGREL # IPToStateXData
	.long	88                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?push_object@value_stack@json@boost@@QEAAX_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$9@?0??push_object@value_stack@json@boost@@QEAAX_K@Z@4HA"@IMGREL # Action
"$ip2state$?push_object@value_stack@json@boost@@QEAAX_K@Z":
	.long	.Lfunc_begin89@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp282@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp283@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?push_object@value_stack@json@boost@@QEAAX_K@Z"
                                        # -- End function
	.def	 "?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	r14, qword ptr [rdx]
	mov	rdi, qword ptr [rdx + 8]
	mov	rax, qword ptr [rcx + 24]
	mov	rdx, qword ptr [rcx + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [rcx + 40]
	lea	rbx, [rdi + rcx]
	add	rbx, 24
	cmp	rbx, rdx
	jbe	.LBB212_2
# %bb.1:
	mov	rcx, rsi
	mov	rdx, rdi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 40]
.LBB212_2:
	add	rcx, rax
	add	rcx, 24
	mov	rdx, r14
	mov	r8, rdi
	call	memcpy
	add	qword ptr [rsi + 40], rdi
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_chars@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	r14, rdx
	mov	rdi, rcx
	mov	rbx, qword ptr [rcx + 40]
	test	rbx, rbx
	je	.LBB213_1
# %bb.6:
	mov	qword ptr [rdi + 40], 0
	mov	rsi, qword ptr [rdi + 24]
	mov	qword ptr [rsp + 32], 0
	mov	r15, qword ptr [r14 + 8]
	add	r15, rbx
	mov	rcx, rsi
	cmp	rsi, qword ptr [rdi + 32]
	jb	.LBB213_8
# %bb.7:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rcx, qword ptr [rdi + 24]
.LBB213_8:
	add	rsi, 24
	mov	rax, qword ptr [rdi + 56]
	test	al, 1
	je	.LBB213_10
# %bb.9:
	mov	rdx, rax
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB213_10:
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	lea	r9, [rsp + 40]
	mov	r8, r15
	call	"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	add	qword ptr [rdi + 24], 24
	mov	rcx, qword ptr [rsp + 32]
	mov	rdx, rsi
	mov	r8, rbx
	call	memcpy
	add	rbx, qword ptr [rsp + 32]
	mov	rdx, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	mov	rcx, rbx
	jmp	.LBB213_11
.LBB213_1:
	mov	qword ptr [rsp + 32], 0
	mov	rsi, qword ptr [r14 + 8]
	mov	rcx, qword ptr [rdi + 24]
	cmp	rcx, qword ptr [rdi + 32]
	jb	.LBB213_3
# %bb.2:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rcx, qword ptr [rdi + 24]
.LBB213_3:
	mov	rax, qword ptr [rdi + 56]
	test	al, 1
	je	.LBB213_5
# %bb.4:
	mov	rdx, rax
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB213_5:
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	lea	r9, [rsp + 40]
	mov	r8, rsi
	call	"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	add	qword ptr [rdi + 24], 24
	mov	rcx, qword ptr [rsp + 32]
	mov	rdx, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
.LBB213_11:
	call	memcpy
	nop
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.globl	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z" # -- Begin function ?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z
	.p2align	4, 0x90
"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z": # @"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
.seh_proc "?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	r14, rdx
	mov	rbx, rcx
	mov	rsi, qword ptr [rcx + 40]
	test	rsi, rsi
	je	.LBB214_1
# %bb.6:
	mov	qword ptr [rbx + 40], 0
	mov	r15, qword ptr [rbx + 24]
	mov	rdi, r15
	cmp	r15, qword ptr [rbx + 32]
	jb	.LBB214_8
# %bb.7:
	mov	rcx, rbx
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rdi, qword ptr [rbx + 24]
.LBB214_8:
	mov	rax, qword ptr [rbx + 56]
	test	al, 1
	je	.LBB214_10
# %bb.9:
	mov	rcx, rax
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
.LBB214_10:
	mov	qword ptr [rdi], rax
	mov	word ptr [rdi + 8], 130
	mov	byte ptr [rdi + 23], 14
	add	qword ptr [rbx + 24], 24
	mov	rdx, qword ptr [r14 + 8]
	add	rdx, rsi
	mov	al, byte ptr [rdi + 8]
	mov	ecx, 14
	cmp	al, 2
	jne	.LBB214_12
# %bb.11:
	mov	rcx, qword ptr [rdi + 16]
	mov	ecx, dword ptr [rcx + 4]
.LBB214_12:
	cmp	rcx, rdx
	jae	.LBB214_14
# %bb.13:
	mov	rcx, rdi
	call	"?reserve_impl@string@json@boost@@AEAAX_K@Z"
	mov	al, byte ptr [rdi + 8]
.LBB214_14:
	add	r15, 24
	lea	rbx, [rdi + 9]
	mov	rcx, rbx
	cmp	al, -126
	je	.LBB214_16
# %bb.15:
	mov	rcx, qword ptr [rdi + 16]
	add	rcx, 8
.LBB214_16:
	mov	rdx, r15
	mov	r8, rsi
	call	memcpy
	cmp	byte ptr [rdi + 8], -126
	mov	rcx, rbx
	je	.LBB214_18
# %bb.17:
	mov	rcx, qword ptr [rdi + 16]
	add	rcx, 8
.LBB214_18:
	add	rcx, rsi
	mov	rdx, qword ptr [r14]
	mov	r8, qword ptr [r14 + 8]
	call	memcpy
	add	rsi, qword ptr [r14 + 8]
	mov	al, byte ptr [rdi + 8]
	cmp	al, 2
	jne	.LBB214_20
# %bb.19:
	mov	rax, qword ptr [rdi + 16]
	mov	ecx, dword ptr [rax]
	add	rsi, rcx
	jmp	.LBB214_22
.LBB214_1:
	mov	rcx, qword ptr [rbx + 24]
	cmp	rcx, qword ptr [rbx + 32]
	jb	.LBB214_3
# %bb.2:
	mov	rcx, rbx
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rcx, qword ptr [rbx + 24]
.LBB214_3:
	mov	rax, qword ptr [rbx + 56]
	test	al, 1
	je	.LBB214_5
# %bb.4:
	mov	rdx, rax
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB214_5:
	mov	qword ptr [rsp + 40], rax
	movups	xmm0, xmmword ptr [r14]
	movaps	xmmword ptr [rsp + 48], xmm0
	lea	rdx, [rsp + 48]
	lea	r8, [rsp + 40]
	call	"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
	add	qword ptr [rbx + 24], 24
	jmp	.LBB214_25
.LBB214_20:
	movsx	rcx, byte ptr [rdi + 23]
	sub	rsi, rcx
	add	rsi, 14
	cmp	al, -126
	jne	.LBB214_21
# %bb.26:
	mov	al, 14
	sub	al, sil
	mov	byte ptr [rdi + 23], al
	mov	byte ptr [rdi + rsi + 9], 0
	jmp	.LBB214_25
.LBB214_21:
	mov	rax, qword ptr [rdi + 16]
.LBB214_22:
	mov	dword ptr [rax], esi
	cmp	byte ptr [rdi + 8], -126
	je	.LBB214_24
# %bb.23:
	mov	rbx, qword ptr [rdi + 16]
	add	rbx, 8
.LBB214_24:
	mov	byte ptr [rbx + rsi], 0
.LBB214_25:
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_int64@value_stack@json@boost@@QEAAX_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_int64@value_stack@json@boost@@QEAAX_J@Z"
	.globl	"?push_int64@value_stack@json@boost@@QEAAX_J@Z" # -- Begin function ?push_int64@value_stack@json@boost@@QEAAX_J@Z
	.p2align	4, 0x90
"?push_int64@value_stack@json@boost@@QEAAX_J@Z": # @"?push_int64@value_stack@json@boost@@QEAAX_J@Z"
.seh_proc "?push_int64@value_stack@json@boost@@QEAAX_J@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 24]
	cmp	rax, qword ptr [rcx + 32]
	jb	.LBB215_2
# %bb.1:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rsi + 24]
.LBB215_2:
	mov	rcx, qword ptr [rsi + 56]
	test	cl, 1
	je	.LBB215_4
# %bb.3:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB215_4:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 3
	mov	qword ptr [rax + 16], rdi
	add	qword ptr [rsi + 24], 24
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_int64@value_stack@json@boost@@QEAAX_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_uint64@value_stack@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_uint64@value_stack@json@boost@@QEAAX_K@Z"
	.globl	"?push_uint64@value_stack@json@boost@@QEAAX_K@Z" # -- Begin function ?push_uint64@value_stack@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?push_uint64@value_stack@json@boost@@QEAAX_K@Z": # @"?push_uint64@value_stack@json@boost@@QEAAX_K@Z"
.seh_proc "?push_uint64@value_stack@json@boost@@QEAAX_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 24]
	cmp	rax, qword ptr [rcx + 32]
	jb	.LBB216_2
# %bb.1:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rsi + 24]
.LBB216_2:
	mov	rcx, qword ptr [rsi + 56]
	test	cl, 1
	je	.LBB216_4
# %bb.3:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB216_4:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 4
	mov	qword ptr [rax + 16], rdi
	add	qword ptr [rsi + 24], 24
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_uint64@value_stack@json@boost@@QEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_double@value_stack@json@boost@@QEAAXN@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_double@value_stack@json@boost@@QEAAXN@Z"
	.globl	"?push_double@value_stack@json@boost@@QEAAXN@Z" # -- Begin function ?push_double@value_stack@json@boost@@QEAAXN@Z
	.p2align	4, 0x90
"?push_double@value_stack@json@boost@@QEAAXN@Z": # @"?push_double@value_stack@json@boost@@QEAAXN@Z"
.seh_proc "?push_double@value_stack@json@boost@@QEAAXN@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	movaps	xmm6, xmm1
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 24]
	cmp	rax, qword ptr [rcx + 32]
	jb	.LBB217_2
# %bb.1:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rsi + 24]
.LBB217_2:
	mov	rcx, qword ptr [rsi + 56]
	test	cl, 1
	je	.LBB217_4
# %bb.3:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB217_4:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 5
	movsd	qword ptr [rax + 16], xmm6
	add	qword ptr [rsi + 24], 24
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_double@value_stack@json@boost@@QEAAXN@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_bool@value_stack@json@boost@@QEAAX_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_bool@value_stack@json@boost@@QEAAX_N@Z"
	.globl	"?push_bool@value_stack@json@boost@@QEAAX_N@Z" # -- Begin function ?push_bool@value_stack@json@boost@@QEAAX_N@Z
	.p2align	4, 0x90
"?push_bool@value_stack@json@boost@@QEAAX_N@Z": # @"?push_bool@value_stack@json@boost@@QEAAX_N@Z"
.seh_proc "?push_bool@value_stack@json@boost@@QEAAX_N@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	ebx, edx
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 24]
	cmp	rax, qword ptr [rcx + 32]
	jb	.LBB218_2
# %bb.1:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rsi + 24]
.LBB218_2:
	mov	rcx, qword ptr [rsi + 56]
	test	cl, 1
	je	.LBB218_4
# %bb.3:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB218_4:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 6
	mov	byte ptr [rax + 9], bl
	add	qword ptr [rsi + 24], 24
	add	rsp, 40
	pop	rbx
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_bool@value_stack@json@boost@@QEAAX_N@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?push_null@value_stack@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?push_null@value_stack@json@boost@@QEAAXXZ"
	.globl	"?push_null@value_stack@json@boost@@QEAAXXZ" # -- Begin function ?push_null@value_stack@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?push_null@value_stack@json@boost@@QEAAXXZ": # @"?push_null@value_stack@json@boost@@QEAAXXZ"
.seh_proc "?push_null@value_stack@json@boost@@QEAAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 24]
	cmp	rax, qword ptr [rcx + 32]
	jb	.LBB219_2
# %bb.1:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rsi + 24]
.LBB219_2:
	mov	rcx, qword ptr [rsi + 56]
	test	cl, 1
	je	.LBB219_4
# %bb.3:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB219_4:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 7
	add	qword ptr [rsi + 24], 24
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?push_null@value_stack@json@boost@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ"
	.globl	"??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ" # -- Begin function ??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ
	.p2align	4, 0x90
"??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ": # @"??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ"
.seh_proc "??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rdx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	mov	qword ptr [rsp + 32], 0
	lea	r8, [rsp + 32]
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rax, rsi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"??Bvalue_ref@json@boost@@QEBA?AVvalue@12@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	.globl	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z" # -- Begin function ?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z
	.p2align	4, 0x90
"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z": # @"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
.Lfunc_begin90:
.seh_proc "?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 152
	.seh_stackalloc 152
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 16], -2
	mov	rsi, rdx
	mov	eax, dword ptr [rcx + 32]
	add	eax, -1
	cmp	eax, 3
	mov	qword ptr [rbp + 8], r8 # 8-byte Spill
	ja	.LBB221_2
# %bb.1:
	lea	rdx, [rip + .LJTI221_0]
	movsxd	rax, dword ptr [rdx + 4*rax]
	add	rax, rdx
	jmp	rax
.LBB221_9:
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 48], rax
	movups	xmm0, xmmword ptr [rcx]
	movaps	xmmword ptr [rbp - 80], xmm0
.Ltmp288:
	lea	rdx, [rbp - 80]
	lea	r8, [rbp - 48]
	mov	rcx, rsi
	call	"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Ltmp289:
	jmp	.LBB221_13
.LBB221_2:
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 56], rax
	movups	xmm0, xmmword ptr [rcx]
	movaps	xmmword ptr [rbp - 96], xmm0
.Ltmp292:
	lea	rcx, [rbp - 16]
	lea	rdx, [rbp - 96]
	lea	r8, [rbp - 56]
	call	"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
.Ltmp293:
# %bb.3:
	mov	rax, qword ptr [rbp - 16]
	mov	qword ptr [rsi], rax
	test	al, 1
	je	.LBB221_5
# %bb.4:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB221_5:
	lea	rcx, [rbp - 8]
	movups	xmm0, xmmword ptr [rbp - 8]
	movups	xmmword ptr [rsi + 8], xmm0
	mov	word ptr [rbp - 8], 130
	mov	byte ptr [rbp + 7], 14
	lea	rdx, [rbp - 16]
	call	"?destroy@string_impl@detail@json@boost@@QEAAXAEBVstorage_ptr@34@@Z"
	mov	rcx, qword ptr [rbp - 16]
	test	cl, 1
	je	.LBB221_13
# %bb.6:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB221_13
# %bb.7:
	cmp	rax, 1
	jne	.LBB221_13
# %bb.8:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
	jmp	.LBB221_13
.LBB221_10:
	mov	rax, qword ptr [rcx + 16]
	mov	rdx, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 40], rdx
	mov	rdx, qword ptr [rcx + 24]
.Ltmp286:
	lea	r8, [rbp - 40]
	mov	rcx, rsi
	call	rax
.Ltmp287:
	jmp	.LBB221_13
.LBB221_12:
	mov	rax, qword ptr [rcx + 16]
	mov	rdx, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 24], rdx
	mov	rdx, qword ptr [rcx + 24]
.Ltmp290:
	lea	r8, [rbp - 24]
	mov	rcx, rsi
	call	rax
.Ltmp291:
	jmp	.LBB221_13
.LBB221_11:
	mov	rax, qword ptr [rcx + 16]
	mov	rdx, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 32], rdx
	mov	rdx, qword ptr [rcx + 24]
.Ltmp284:
	lea	r8, [rbp - 32]
	mov	rcx, rsi
	call	rax
.Ltmp285:
.LBB221_13:
	mov	rax, qword ptr [rbp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB221_17
# %bb.14:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB221_17
# %bb.15:
	cmp	rax, 1
	jne	.LBB221_17
# %bb.16:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB221_17:
	mov	rax, rsi
	add	rsp, 152
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$18@?0??make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$18@?0??make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z@4HA"
.LBB221_18:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rax, qword ptr [rbp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB221_22
# %bb.19:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB221_22
# %bb.20:
	cmp	rax, 1
	jne	.LBB221_22
# %bb.21:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB221_22:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end90:
	.p2align	2, 0x90
.LJTI221_0:
	.long	.LBB221_9-.LJTI221_0
	.long	.LBB221_10-.LJTI221_0
	.long	.LBB221_12-.LJTI221_0
	.long	.LBB221_11-.LJTI221_0
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	.p2align	2
"$cppxdata$?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z")@IMGREL # IPToStateXData
	.long	144                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$18@?0??make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z@4HA"@IMGREL # Action
"$ip2state$?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z":
	.long	.Lfunc_begin90@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp288@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp293@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp286@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp285@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
                                        # -- End function
	.def	 "?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
	.globl	"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z" # -- Begin function ?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z
	.p2align	4, 0x90
"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z": # @"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
.Lfunc_begin91:
.seh_proc "?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 8], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 16], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 32], xmm0
.Ltmp294:
	lea	rdx, [rbp - 32]
	lea	r8, [rbp - 16]
	call	"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Ltmp295:
# %bb.1:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB222_5
# %bb.2:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB222_5
# %bb.3:
	cmp	rax, 1
	jne	.LBB222_5
# %bb.4:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB222_5:
	mov	rax, rsi
	add	rsp, 72
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0??from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$6@?0??from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z@4HA"
.LBB222_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB222_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB222_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB222_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB222_10:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end91:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
	.p2align	2
"$cppxdata$?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z@4HA"@IMGREL # Action
"$ip2state$?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z":
	.long	.Lfunc_begin91@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp294@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp295@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?from_init_list@value_ref@json@boost@@CA?AVvalue@23@PEBXVstorage_ptr@23@@Z"
                                        # -- End function
	.def	 "?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.globl	"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z" # -- Begin function ?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z
	.p2align	4, 0x90
"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z": # @"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Lfunc_begin92:
.seh_proc "?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 152
	.seh_stackalloc 152
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 16], -2
	mov	rbx, rcx
	mov	rax, qword ptr [rdx]
	mov	rcx, qword ptr [rdx + 8]
	cmp	rax, rcx
	mov	qword ptr [rbp + 8], r8 # 8-byte Spill
	je	.LBB223_5
	.p2align	4, 0x90
.LBB223_1:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rax + 32], 1
	jne	.LBB223_9
# %bb.2:                                #   in Loop: Header=BB223_1 Depth=1
	mov	rsi, qword ptr [rax]
	mov	rdi, qword ptr [rax + 8]
	sub	rdi, rsi
	cmp	rdi, 80
	jne	.LBB223_9
# %bb.3:                                #   in Loop: Header=BB223_1 Depth=1
	mov	edi, dword ptr [rsi + 32]
	or	edi, 4
	cmp	edi, 4
	jne	.LBB223_9
# %bb.4:                                #   in Loop: Header=BB223_1 Depth=1
	add	rax, 40
	cmp	rcx, rax
	jne	.LBB223_1
.LBB223_5:
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp - 8], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 96], xmm0
.Ltmp298:
	lea	rcx, [rbp - 56]
	lea	rdx, [rbp - 96]
	lea	r8, [rbp - 8]
	call	"?make_object@value_ref@json@boost@@CA?AVobject@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Ltmp299:
# %bb.6:
	mov	rcx, qword ptr [rbp - 56]
	mov	qword ptr [rbx], rcx
	mov	al, 1
	test	cl, 1
	je	.LBB223_8
# %bb.7:
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
	mov	rcx, qword ptr [rbp - 56]
	test	cl, 1
	sete	al
.LBB223_8:
	mov	rsi, qword ptr [rbp + 8] # 8-byte Reload
	mov	byte ptr [rbx + 8], 1
	mov	rdx, qword ptr [rbp - 40]
	mov	qword ptr [rbp - 40], 0
	jmp	.LBB223_13
.LBB223_9:
	mov	rax, qword ptr [r8]
	mov	qword ptr [r8], 0
	mov	qword ptr [rbp], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 80], xmm0
.Ltmp296:
	lea	rcx, [rbp - 32]
	lea	rdx, [rbp - 80]
	mov	r8, rbp
	call	"?make_array@value_ref@json@boost@@CA?AVarray@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
.Ltmp297:
# %bb.10:
	mov	rcx, qword ptr [rbp - 32]
	mov	qword ptr [rbx], rcx
	mov	al, 1
	test	cl, 1
	je	.LBB223_12
# %bb.11:
	and	rcx, -4
	lock		add	qword ptr [rcx + 8], 1
	mov	rcx, qword ptr [rbp - 32]
	test	cl, 1
	sete	al
.LBB223_12:
	mov	rsi, qword ptr [rbp + 8] # 8-byte Reload
	mov	byte ptr [rbx + 8], 0
	mov	rdx, qword ptr [rbp - 16]
	mov	qword ptr [rbp - 16], 0
.LBB223_13:
	mov	qword ptr [rbx + 16], rdx
	test	al, al
	jne	.LBB223_17
# %bb.14:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB223_17
# %bb.15:
	cmp	rax, 1
	jne	.LBB223_17
# %bb.16:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB223_17:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB223_21
# %bb.18:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB223_21
# %bb.19:
	cmp	rax, 1
	jne	.LBB223_21
# %bb.20:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB223_21:
	mov	rax, rbx
	add	rsp, 152
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0??make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0??make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA":
.seh_proc "?dtor$22@?0??make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"
.LBB223_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rax, qword ptr [rbp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB223_26
# %bb.23:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB223_26
# %bb.24:
	cmp	rax, 1
	jne	.LBB223_26
# %bb.25:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB223_26:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end92:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
	.p2align	2
"$cppxdata$?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z")@IMGREL # IPToStateXData
	.long	144                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	-1                      # ToState
	.long	"?dtor$22@?0??make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z@4HA"@IMGREL # Action
"$ip2state$?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z":
	.long	.Lfunc_begin92@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp298@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp297@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?make_value@value_ref@json@boost@@CA?AVvalue@23@V?$initializer_list@Vvalue_ref@json@boost@@@std@@Vstorage_ptr@23@@Z"
                                        # -- End function
	.def	 "??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
	.globl	"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z" # -- Begin function ??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z": # @"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
.Lfunc_begin93:
.seh_proc "??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	mov	rax, qword ptr [r8]
	mov	qword ptr [rbp - 8], r8 # 8-byte Spill
	mov	qword ptr [r8], 0
	mov	qword ptr [rcx], rax
	lea	rcx, [rcx + 8]
	mov	word ptr [rsi + 8], 130
	mov	byte ptr [rsi + 23], 14
	mov	rbx, qword ptr [rdx]
	mov	rdi, qword ptr [rdx + 8]
.Ltmp300:
	mov	rdx, rdi
	mov	qword ptr [rbp - 16], rsi # 8-byte Spill
	mov	r8, rsi
	call	"?assign@string_impl@detail@json@boost@@QEAAPEAD_KAEBVstorage_ptr@34@@Z"
.Ltmp301:
# %bb.1:
	mov	rcx, rax
	mov	rdx, rbx
	mov	r8, rdi
	call	memcpy
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB224_5
# %bb.2:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB224_5
# %bb.3:
	cmp	rax, 1
	jne	.LBB224_5
# %bb.4:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB224_5:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$6@?0???0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$6@?0???0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z@4HA"
.LBB224_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB224_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB224_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB224_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB224_10:
	mov	rcx, qword ptr [rsi]
	test	cl, 1
	je	.LBB224_14
# %bb.11:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB224_14
# %bb.12:
	cmp	rax, 1
	jne	.LBB224_14
# %bb.13:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB224_14:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end93:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z":
	.long	.Lfunc_begin93@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp300@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp301@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0string@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@Vstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "?digest@detail@json@boost@@YA_KPEBD_K1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?digest@detail@json@boost@@YA_KPEBD_K1@Z"
	.globl	"?digest@detail@json@boost@@YA_KPEBD_K1@Z" # -- Begin function ?digest@detail@json@boost@@YA_KPEBD_K1@Z
	.p2align	4, 0x90
"?digest@detail@json@boost@@YA_KPEBD_K1@Z": # @"?digest@detail@json@boost@@YA_KPEBD_K1@Z"
.seh_proc "?digest@detail@json@boost@@YA_KPEBD_K1@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	.seh_endprologue
	movabs	rax, -3750763034362895579
	add	rax, r8
	test	rdx, rdx
	je	.LBB225_8
# %bb.1:
	movabs	r8, 1099511628211
	lea	r9, [rdx - 1]
	mov	r11, rdx
	and	r11, 3
	je	.LBB225_5
# %bb.2:
	xor	r10d, r10d
	.p2align	4, 0x90
.LBB225_3:                              # =>This Inner Loop Header: Depth=1
	movsx	rsi, byte ptr [rcx + r10]
	xor	rax, rsi
	imul	rax, r8
	add	r10, 1
	cmp	r11, r10
	jne	.LBB225_3
# %bb.4:
	sub	rdx, r10
	add	rcx, r10
.LBB225_5:
	cmp	r9, 3
	jb	.LBB225_8
# %bb.6:
	xor	r9d, r9d
	.p2align	4, 0x90
.LBB225_7:                              # =>This Inner Loop Header: Depth=1
	movsx	rsi, byte ptr [rcx + r9]
	xor	rsi, rax
	imul	rsi, r8
	movsx	rax, byte ptr [rcx + r9 + 1]
	xor	rax, rsi
	imul	rax, r8
	movsx	rsi, byte ptr [rcx + r9 + 2]
	xor	rsi, rax
	imul	rsi, r8
	movsx	rax, byte ptr [rcx + r9 + 3]
	xor	rax, rsi
	imul	rax, r8
	add	r9, 4
	cmp	rdx, r9
	jne	.LBB225_7
.LBB225_8:
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?digest@detail@json@boost@@YA_KPEBD_K1@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?format_uint64@detail@json@boost@@YAIPEAD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?format_uint64@detail@json@boost@@YAIPEAD_K@Z"
	.globl	"?format_uint64@detail@json@boost@@YAIPEAD_K@Z" # -- Begin function ?format_uint64@detail@json@boost@@YAIPEAD_K@Z
	.p2align	4, 0x90
"?format_uint64@detail@json@boost@@YAIPEAD_K@Z": # @"?format_uint64@detail@json@boost@@YAIPEAD_K@Z"
.seh_proc "?format_uint64@detail@json@boost@@YAIPEAD_K@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	cmp	rdx, 9
	ja	.LBB226_2
# %bb.1:
	add	dl, 48
	mov	byte ptr [rcx], dl
	mov	r14d, 1
	jmp	.LBB226_11
.LBB226_2:
	lea	r14, [rsp + 56]
	cmp	rdx, 1000
	jb	.LBB226_3
# %bb.4:
	movabs	r8, 3777893186295716171
	lea	r9, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	r10, r14
	.p2align	4, 0x90
.LBB226_5:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rdx
	mov	rax, rdx
	mul	r8
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	edi, ebx
	sub	edi, eax
	movzx	eax, di
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	esi, eax, 100
	sub	edi, esi
	movzx	edi, di
	movzx	edi, word ptr [r9 + 2*rdi]
	mov	word ptr [r10 - 2], di
	movzx	eax, word ptr [r9 + 2*rax]
	mov	word ptr [r10 - 4], ax
	add	r10, -4
	cmp	rbx, 9999999
	ja	.LBB226_5
# %bb.6:
	cmp	rbx, 100000
	jae	.LBB226_7
# %bb.8:
	test	rdx, rdx
	je	.LBB226_10
.LBB226_9:
	add	dl, 48
	mov	byte ptr [r10 - 1], dl
	add	r10, -1
.LBB226_10:
	sub	r14, r10
	mov	r8d, r14d
	mov	rdx, r10
	call	memcpy
.LBB226_11:
	mov	eax, r14d
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB226_3:
	mov	r10, r14
.LBB226_7:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ebx, eax, 100
	sub	edx, ebx
	movzx	edx, dx
	lea	rbx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	edx, word ptr [rbx + 2*rdx]
	mov	word ptr [r10 - 2], dx
	add	r10, -2
	mov	rdx, rax
	test	rdx, rdx
	jne	.LBB226_9
	jmp	.LBB226_10
	.seh_handlerdata
	.section	.text,"xr",one_only,"?format_uint64@detail@json@boost@@YAIPEAD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?format_int64@detail@json@boost@@YAIPEAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
	.globl	"?format_int64@detail@json@boost@@YAIPEAD_J@Z" # -- Begin function ?format_int64@detail@json@boost@@YAIPEAD_J@Z
	.p2align	4, 0x90
"?format_int64@detail@json@boost@@YAIPEAD_J@Z": # @"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
.seh_proc "?format_int64@detail@json@boost@@YAIPEAD_J@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	test	rdx, rdx
	js	.LBB227_12
# %bb.1:
	cmp	rdx, 9
	ja	.LBB227_3
# %bb.2:
	add	dl, 48
	mov	byte ptr [rcx], dl
	mov	r14d, 1
	jmp	.LBB227_23
.LBB227_12:
	mov	byte ptr [rcx], 45
	add	rcx, 1
	neg	rdx
	cmp	rdx, 9
	ja	.LBB227_14
# %bb.13:
	add	dl, 48
	mov	byte ptr [rcx], dl
	mov	r14d, 2
	jmp	.LBB227_23
.LBB227_3:
	lea	r14, [rsp + 56]
	cmp	rdx, 1000
	jb	.LBB227_4
# %bb.5:
	movabs	r8, 3777893186295716171
	lea	r9, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	r10, r14
	.p2align	4, 0x90
.LBB227_6:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rdx
	mov	rax, rdx
	mul	r8
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	edi, ebx
	sub	edi, eax
	movzx	eax, di
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	esi, eax, 100
	sub	edi, esi
	movzx	edi, di
	movzx	edi, word ptr [r9 + 2*rdi]
	mov	word ptr [r10 - 2], di
	movzx	eax, word ptr [r9 + 2*rax]
	mov	word ptr [r10 - 4], ax
	add	r10, -4
	cmp	rbx, 9999999
	ja	.LBB227_6
# %bb.7:
	cmp	rbx, 100000
	jae	.LBB227_8
# %bb.9:
	test	rdx, rdx
	je	.LBB227_11
.LBB227_10:
	add	dl, 48
	mov	byte ptr [r10 - 1], dl
	add	r10, -1
.LBB227_11:
	sub	r14, r10
	mov	r8d, r14d
	mov	rdx, r10
	call	memcpy
	jmp	.LBB227_23
.LBB227_14:
	lea	r14, [rsp + 56]
	cmp	rdx, 1000
	jb	.LBB227_15
# %bb.16:
	movabs	r8, 3777893186295716171
	lea	r9, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	r10, r14
	.p2align	4, 0x90
.LBB227_17:                             # =>This Inner Loop Header: Depth=1
	mov	rbx, rdx
	mov	rax, rdx
	mul	r8
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	esi, ebx
	sub	esi, eax
	movzx	eax, si
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	edi, eax, 100
	sub	esi, edi
	movzx	edi, si
	movzx	edi, word ptr [r9 + 2*rdi]
	mov	word ptr [r10 - 2], di
	movzx	eax, word ptr [r9 + 2*rax]
	mov	word ptr [r10 - 4], ax
	add	r10, -4
	cmp	rbx, 9999999
	ja	.LBB227_17
# %bb.18:
	cmp	rbx, 100000
	jae	.LBB227_19
# %bb.20:
	test	rdx, rdx
	je	.LBB227_22
.LBB227_21:
	add	dl, 48
	mov	byte ptr [r10 - 1], dl
	add	r10, -1
.LBB227_22:
	sub	r14, r10
	mov	r8d, r14d
	mov	rdx, r10
	call	memcpy
	add	r14d, 1
.LBB227_23:
	mov	eax, r14d
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB227_4:
	mov	r10, r14
.LBB227_8:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ebx, eax, 100
	sub	edx, ebx
	movzx	edx, dx
	lea	rbx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	edx, word ptr [rbx + 2*rdx]
	mov	word ptr [r10 - 2], dx
	add	r10, -2
	mov	rdx, rax
	test	rdx, rdx
	jne	.LBB227_10
	jmp	.LBB227_11
.LBB227_15:
	mov	r10, r14
.LBB227_19:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ebx, eax, 100
	sub	edx, ebx
	movzx	edx, dx
	lea	rbx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	edx, word ptr [rbx + 2*rdx]
	mov	word ptr [r10 - 2], dx
	add	r10, -2
	mov	rdx, rax
	test	rdx, rdx
	jne	.LBB227_21
	jmp	.LBB227_22
	.seh_handlerdata
	.section	.text,"xr",one_only,"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?format_double@detail@json@boost@@YAIPEADN@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?format_double@detail@json@boost@@YAIPEADN@Z"
	.globl	"?format_double@detail@json@boost@@YAIPEADN@Z" # -- Begin function ?format_double@detail@json@boost@@YAIPEADN@Z
	.p2align	4, 0x90
"?format_double@detail@json@boost@@YAIPEADN@Z": # @"?format_double@detail@json@boost@@YAIPEADN@Z"
# %bb.0:
	movaps	xmm0, xmm1
	mov	rdx, rcx
	jmp	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z" # TAILCALL
                                        # -- End function
	.def	 "?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	.globl	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z" # -- Begin function ?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z
	.p2align	4, 0x90
"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z": # @"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
.Lfunc_begin94:
.seh_proc "?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rbx, rdx
	movq	rsi, xmm0
	movabs	rdx, 4503599627370495
	and	rdx, rsi
	mov	r8, rsi
	shr	r8, 52
	and	r8d, 2047
	cmp	r8d, 2047
	jne	.LBB229_1
# %bb.4:
	test	rdx, rdx
	je	.LBB229_5
# %bb.20:
	mov	byte ptr [rbx + 2], 78
	mov	word ptr [rbx], 24910
	mov	esi, 3
	jmp	.LBB229_21
.LBB229_1:
	test	rdx, rdx
	jne	.LBB229_11
# %bb.2:
	test	r8d, r8d
	jne	.LBB229_11
# %bb.3:
	xor	eax, eax
	test	rsi, rsi
	jns	.LBB229_8
.LBB229_7:
	mov	byte ptr [rbx], 45
.LBB229_8:
	shr	rsi, 63
	add	rbx, rsi
	test	al, al
	je	.LBB229_10
# %bb.9:
	movabs	rax, 8751735898823355977
	mov	qword ptr [rbx], rax
	or	esi, 8
	jmp	.LBB229_21
.LBB229_11:
	lea	eax, [r8 - 1023]
	cmp	eax, 52
	ja	.LBB229_15
# %bb.12:
	mov	ecx, 1075
	sub	ecx, r8d
	mov	rdi, -1
	shl	rdi, cl
	movabs	rax, 4503599627370496
	or	rax, rdx
	not	rdi
	test	rax, rdi
	je	.LBB229_13
.LBB229_15:
.Ltmp302:
	lea	rcx, [rbp - 32]
                                        # kill: def $r8d killed $r8d killed $r8
	call	"?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z"
.Ltmp303:
# %bb.16:
	mov	rcx, qword ptr [rbp - 32]
	mov	edi, dword ptr [rbp - 24]
	mov	r9d, dword ptr [rbp - 20]
.LBB229_17:
	mov	qword ptr [rbp - 16], rcx
	mov	dword ptr [rbp - 8], edi
	mov	dword ptr [rbp - 4], r9d
.Ltmp304:
	shr	rsi, 63
	lea	rcx, [rbp - 16]
	mov	edx, esi
	mov	r8, rbx
	call	"?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z"
.Ltmp305:
# %bb.18:
	mov	esi, eax
	jmp	.LBB229_21
.LBB229_10:
	mov	byte ptr [rbx + 2], 48
	mov	word ptr [rbx], 17712
	add	esi, 3
.LBB229_21:
	mov	eax, esi
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB229_5:
	mov	al, 1
	test	rsi, rsi
	jns	.LBB229_8
	jmp	.LBB229_7
.LBB229_13:
                                        # kill: def $cl killed $cl killed $rcx
	shr	rax, cl
	mov	edi, -1
	movabs	r8, -3689348814741910323
                                        # implicit-def: $r9d
	.p2align	4, 0x90
.LBB229_14:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rax
	mul	r8
	mov	rax, rdx
	shr	rax, 3
	lea	edx, [rax + rax]
	lea	edx, [rdx + 4*rdx]
	add	edi, 1
	cmp	ecx, edx
	je	.LBB229_14
	jmp	.LBB229_17
	.seh_handlerdata
	.long	("$cppxdata$?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z")@IMGREL
	.section	.text,"xr",one_only,"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	.seh_endproc
	.def	 "?dtor$19@?0??d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0??d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z@4HA":
.seh_proc "?dtor$19@?0??d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z@4HA"
.LBB229_19:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end94:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	.p2align	2
"$cppxdata$?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z":
	.long	-1                      # ToState
	.long	"?dtor$19@?0??d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z@4HA"@IMGREL # Action
"$ip2state$?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z":
	.long	.Lfunc_begin94@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp302@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp305@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
                                        # -- End function
	.def	 "?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	.globl	"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z" # -- Begin function ?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z
	.p2align	4, 0x90
"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z": # @"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
.Lfunc_begin95:
.seh_proc "?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rax, qword ptr [rcx]
	test	rax, rax
	je	.LBB230_14
# %bb.1:
	mov	rdi, rdx
	mov	r14, rcx
	mov	rsi, qword ptr [rax]
	test	rsi, rsi
	je	.LBB230_5
# %bb.2:
	mov	ecx, dword ptr [rax + 32]
	and	ecx, 3
	cmp	ecx, 2
	je	.LBB230_5
# %bb.3:
	lea	rcx, [rsi + 4*rsi]
	lea	rbx, [rax + 8*rcx]
	add	rbx, -8
	.p2align	4, 0x90
.LBB230_4:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rbx
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	add	rbx, -40
	add	rsi, -1
	jne	.LBB230_4
.LBB230_5:
	mov	rdi, qword ptr [rdi]
	test	rdi, rdi
	je	.LBB230_7
# %bb.6:
	and	rdi, -4
	jmp	.LBB230_10
.LBB230_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB230_8
.LBB230_10:
	mov	rdx, qword ptr [r14]
	test	rdx, rdx
	je	.LBB230_11
# %bb.12:
	mov	rax, qword ptr [rdx + 8]
	lea	rcx, [rax + 4*rax]
	lea	r8, [8*rcx + 32]
	shl	rax, 2
	jmp	.LBB230_13
.LBB230_11:
	mov	r8d, 32
	xor	eax, eax
.LBB230_13:
	add	r8, rax
	mov	rax, qword ptr [rdi]
.Ltmp306:
	mov	r9d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 16]
.Ltmp307:
.LBB230_14:
	nop
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB230_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB230_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB230_10
	.seh_handlerdata
	.long	("$cppxdata$?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z")@IMGREL
	.section	.text,"xr",one_only,"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.def	 "?dtor$15@?0??do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z@4HA":
.seh_proc "?dtor$15@?0??do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z@4HA"
.LBB230_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end95:
	.seh_handlerdata
	.section	.text,"xr",one_only,"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
	.p2align	2
"$cppxdata$?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0??do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z@4HA"@IMGREL # Action
"$ip2state$?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z":
	.long	.Lfunc_begin95@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp306@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp307@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"?do_destroy@object_impl@detail@json@boost@@AEAAXAEBVstorage_ptr@34@@Z"
                                        # -- End function
	.def	 "?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z"
	.globl	"?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z" # -- Begin function ?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z
	.p2align	4, 0x90
"?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z": # @"?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z"
.seh_proc "?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	test	rcx, rcx
	je	.LBB231_5
# %bb.1:
	mov	rsi, rdx
	test	rdx, rdx
	je	.LBB231_5
# %bb.2:
	mov	eax, dword ptr [rcx]
	and	eax, 3
	cmp	eax, 2
	je	.LBB231_5
# %bb.3:
	lea	rax, [rsi + 4*rsi]
	lea	rdi, [rcx + 8*rax]
	add	rdi, -40
	.p2align	4, 0x90
.LBB231_4:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	call	"??1key_value_pair@json@boost@@QEAA@XZ"
	add	rdi, -40
	add	rsi, -1
	jne	.LBB231_4
.LBB231_5:
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?destroy@detail@json@boost@@YAXPEAVkey_value_pair@23@_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z"
	.globl	"?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z" # -- Begin function ?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z": # @"?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z"
.seh_proc "?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, qword ptr [rcx + 16]
	cmp	rax, rdx
	jae	.LBB232_14
# %bb.1:
	mov	rsi, rcx
	cmp	rdx, 1024
	mov	ecx, 1024
	cmova	rcx, rdx
	mov	rdx, rax
	not	rdx
	lea	rbx, [rax + rax]
	cmp	rcx, rbx
	cmovb	rcx, rbx
	cmp	rax, rdx
	mov	rdi, -1
	cmovbe	rdi, rcx
	mov	rbx, qword ptr [rsi]
	test	rbx, rbx
	je	.LBB232_3
# %bb.2:
	and	rbx, -4
	jmp	.LBB232_6
.LBB232_3:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB232_4
.LBB232_6:
	mov	rax, qword ptr [rbx]
	mov	r8d, 8
	mov	rcx, rbx
	mov	rdx, rdi
	call	qword ptr [rax + 8]
	mov	r14, rax
	mov	rdx, qword ptr [rsi + 24]
	test	rdx, rdx
	je	.LBB232_13
# %bb.7:
	mov	r8, qword ptr [rsi + 8]
	mov	rcx, r14
	call	memcpy
	mov	rbx, qword ptr [rsi]
	test	rbx, rbx
	je	.LBB232_9
# %bb.8:
	and	rbx, -4
	jmp	.LBB232_12
.LBB232_9:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB232_10
.LBB232_12:
	mov	r8, qword ptr [rsi + 16]
	mov	rdx, qword ptr [rsi + 24]
	mov	rax, qword ptr [rbx]
	mov	r9d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 16]
.LBB232_13:
	mov	qword ptr [rsi + 24], r14
	mov	qword ptr [rsi + 16], rdi
.LBB232_14:
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB232_4:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB232_6
# %bb.5:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB232_6
.LBB232_10:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB232_12
# %bb.11:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB232_12
	.seh_handlerdata
	.section	.text,"xr",one_only,"?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?grow@raw_stack@detail@json@boost@@AEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?grow@raw_stack@detail@json@boost@@AEAAX_K@Z"
	.globl	"?grow@raw_stack@detail@json@boost@@AEAAX_K@Z" # -- Begin function ?grow@raw_stack@detail@json@boost@@AEAAX_K@Z
	.p2align	4, 0x90
"?grow@raw_stack@detail@json@boost@@AEAAX_K@Z": # @"?grow@raw_stack@detail@json@boost@@AEAAX_K@Z"
.seh_proc "?grow@raw_stack@detail@json@boost@@AEAAX_K@Z"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	r8, qword ptr [rcx + 16]
	mov	rax, r8
	not	rax
	cmp	rax, rdx
	jb	.LBB233_1
# %bb.2:
	add	r8, rdx
	mov	rdx, r8
	add	rsp, 40
	jmp	"?reserve@raw_stack@detail@json@boost@@QEAAX_K@Z" # TAILCALL
.LBB233_1:
	call	"?raise@stack_overflow@json@boost@@SAXXZ"
	int3
	.seh_handlerdata
	.section	.text,"xr",one_only,"?grow@raw_stack@detail@json@boost@@AEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1stack@detail@json@boost@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??1stack@detail@json@boost@@QEAA@XZ"
	.globl	"??1stack@detail@json@boost@@QEAA@XZ" # -- Begin function ??1stack@detail@json@boost@@QEAA@XZ
	.p2align	4, 0x90
"??1stack@detail@json@boost@@QEAA@XZ":  # @"??1stack@detail@json@boost@@QEAA@XZ"
.Lfunc_begin96:
.seh_proc "??1stack@detail@json@boost@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	cmp	qword ptr [rcx + 24], 0
	je	.LBB234_8
# %bb.1:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, qword ptr [rax]
	test	rsi, rsi
	mov	rcx, rax
	je	.LBB234_3
# %bb.2:
	and	rsi, -4
	jmp	.LBB234_7
.LBB234_3:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	edi, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rdx, qword ptr [rdx + 8*rdi]
	lea	rsi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rdx + _Init_thread_epoch@SECREL32]
	jg	.LBB234_4
.LBB234_7:
	mov	r8, qword ptr [rcx + 8]
	mov	rdx, qword ptr [rcx + 24]
	mov	rax, qword ptr [rsi]
.Ltmp308:
	mov	r9d, 8
	mov	rcx, rsi
	call	qword ptr [rax + 16]
.Ltmp309:
.LBB234_8:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	jne	.LBB234_9
.LBB234_11:
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB234_9:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB234_11
# %bb.10:
	cmp	rax, 1
	jne	.LBB234_11
# %bb.13:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	edx, 1
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	rex64 jmp	rax             # TAILCALL
.LBB234_4:
	mov	rdi, rcx
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB234_6
# %bb.5:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
.LBB234_6:
	mov	rcx, rdi
	jmp	.LBB234_7
	.seh_handlerdata
	.long	("$cppxdata$??1stack@detail@json@boost@@QEAA@XZ")@IMGREL
	.section	.text,"xr",one_only,"??1stack@detail@json@boost@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$12@?0???1stack@detail@json@boost@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???1stack@detail@json@boost@@QEAA@XZ@4HA":
.seh_proc "?dtor$12@?0???1stack@detail@json@boost@@QEAA@XZ@4HA"
.LBB234_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1storage_ptr@json@boost@@QEAA@XZ"
	call	__std_terminate
	int3
.Lfunc_end96:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??1stack@detail@json@boost@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1stack@detail@json@boost@@QEAA@XZ"
	.p2align	2
"$cppxdata$??1stack@detail@json@boost@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1stack@detail@json@boost@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1stack@detail@json@boost@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1stack@detail@json@boost@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$12@?0???1stack@detail@json@boost@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1stack@detail@json@boost@@QEAA@XZ":
	.long	.Lfunc_begin96@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp308@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp309@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??1stack@detail@json@boost@@QEAA@XZ"
                                        # -- End function
	.def	 "?reserve@stack@detail@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	.globl	"?reserve@stack@detail@json@boost@@QEAAX_K@Z" # -- Begin function ?reserve@stack@detail@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?reserve@stack@detail@json@boost@@QEAAX_K@Z": # @"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.seh_proc "?reserve@stack@detail@json@boost@@QEAAX_K@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	cmp	qword ptr [rcx + 8], rdx
	jae	.LBB235_16
# %bb.1:
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbx, qword ptr [rcx]
	test	rbx, rbx
	je	.LBB235_3
# %bb.2:
	and	rbx, -4
	jmp	.LBB235_6
.LBB235_3:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB235_4
.LBB235_6:
	mov	rax, qword ptr [rbx]
	mov	r8d, 8
	mov	rcx, rbx
	mov	rdx, rsi
	call	qword ptr [rax + 8]
	mov	r14, rax
	mov	rdx, qword ptr [rdi + 24]
	test	rdx, rdx
	je	.LBB235_15
# %bb.7:
	mov	r8, qword ptr [rdi + 16]
	test	r8, r8
	je	.LBB235_9
# %bb.8:
	mov	rcx, r14
	call	memcpy
.LBB235_9:
	mov	rbx, qword ptr [rdi]
	test	rbx, rbx
	je	.LBB235_11
# %bb.10:
	and	rbx, -4
	jmp	.LBB235_14
.LBB235_11:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB235_12
.LBB235_14:
	mov	r8, qword ptr [rdi + 8]
	mov	rdx, qword ptr [rdi + 24]
	mov	rax, qword ptr [rbx]
	mov	r9d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 16]
.LBB235_15:
	mov	qword ptr [rdi + 24], r14
	mov	qword ptr [rdi + 8], rsi
.LBB235_16:
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB235_4:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB235_6
# %bb.5:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB235_6
.LBB235_12:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB235_14
# %bb.13:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB235_14
	.seh_handlerdata
	.section	.text,"xr",one_only,"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z"
	.globl	"??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z" # -- Begin function ??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z
	.p2align	4, 0x90
"??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z": # @"??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z"
.seh_proc "??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rbx, r8
	mov	r14, rdx
	mov	rsi, rcx
	mov	byte ptr [rcx], 66
	mov	dword ptr [rcx + 4], ebx
	mov	rdi, qword ptr [r9]
	test	rdi, rdi
	je	.LBB236_2
# %bb.1:
	and	rdi, -4
	jmp	.LBB236_5
.LBB236_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB236_3
.LBB236_5:
	lea	rdx, [rbx + 1]
	mov	rax, qword ptr [rdi]
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
	mov	qword ptr [rsi + 8], rax
	mov	byte ptr [rax + rbx], 0
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [r14], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB236_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB236_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB236_5
	.seh_handlerdata
	.section	.text,"xr",one_only,"??0string_impl@detail@json@boost@@QEAA@PEAPEAD_KAEBVstorage_ptr@23@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z"
	.globl	"?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z" # -- Begin function ?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z
	.p2align	4, 0x90
"?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z": # @"?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z"
.seh_proc "?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 16
	.seh_stackalloc 16
	.seh_endprologue
                                        # kill: def $r8d killed $r8d def $r8
	movabs	rbp, 4503599627370496
	or	rbp, rdx
	test	r8d, r8d
	cmove	rbp, rdx
	lea	eax, [r8 - 1077]
	mov	r15d, -1076
	cmovne	r15d, eax
	lea	rsi, [4*rbp]
	test	rdx, rdx
	setne	al
	cmp	r8d, 2
	setb	r12b
	or	r12b, al
	test	r15d, r15d
	mov	qword ptr [rsp], rcx    # 8-byte Spill
	mov	qword ptr [rsp + 8], rbp # 8-byte Spill
	js	.LBB237_6
# %bb.1:
	imul	ebp, r15d, 78913
	shr	ebp, 18
	xor	eax, eax
	cmp	r15d, 3
	setg	al
	sub	ebp, eax
	imul	eax, ebp, 1217359
	shr	eax, 19
	mov	ecx, ebp
	sub	ecx, r15d
	add	ecx, eax
	mov	rax, rbp
	shl	rax, 4
	lea	rdx, [rip + "?arr@?1??DOUBLE_POW5_INV_SPLIT@ryu@detail@json@boost@@YAAEAY1BCE@1$$CB_KXZ@4QAY01$$CB_KA"]
	mov	rdi, rsi
	or	rdi, 2
	mov	r9, qword ptr [rax + rdx]
	mov	r14, qword ptr [rax + rdx + 8]
	mov	rax, r14
	mul	rdi
	mov	rbx, rdx
	mov	r8, rax
	mov	rax, r9
	mul	rdi
	mov	r11, rdx
	add	r11, r8
	adc	rbx, 0
	add	cl, 58
	shrd	r11, rbx, cl
	movzx	ebx, r12b
	not	rbx
	add	rbx, rsi
	mov	rax, r14
	mul	rbx
	mov	r8, rdx
	mov	r12, rax
	mov	rax, r9
	mul	rbx
	mov	r10, rdx
	add	r10, r12
	mov	r15, rbp
	adc	r8, 0
	shrd	r10, r8, cl
	mov	rax, r14
	mul	rsi
	mov	r8, rdx
	mov	r14, rax
	mov	rax, r9
	mul	rsi
	mov	r9, rdx
	add	r9, r14
	adc	r8, 0
                                        # kill: def $cl killed $cl killed $ecx
	shrd	r9, r8, cl
	cmp	r15d, 21
	ja	.LBB237_19
# %bb.2:
	movabs	rcx, -3689348814741910323
	mov	rax, rsi
	mul	rcx
	shr	rdx, 2
	lea	eax, [rdx + 4*rdx]
	cmp	esi, eax
	jne	.LBB237_10
# %bb.3:
	mov	ebp, -1
	.p2align	4, 0x90
.LBB237_4:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	mul	rcx
	shr	rdx, 2
	lea	eax, [rdx + 4*rdx]
	add	ebp, 1
	cmp	esi, eax
	mov	rsi, rdx
	je	.LBB237_4
# %bb.5:
	cmp	ebp, r15d
	setae	r8b
	jmp	.LBB237_20
.LBB237_6:
	imul	r13d, r15d, -732923
	shr	r13d, 20
	xor	eax, eax
	cmp	r15d, -1
	setne	al
	sub	r13d, eax
	add	r15d, r13d
	mov	eax, r15d
	neg	eax
	imul	edx, r15d, -1217359
	shr	edx, 19
	mov	ecx, r13d
	sub	ecx, edx
	cdqe
	shl	rax, 4
	lea	rdx, [rip + "?arr@?1??DOUBLE_POW5_SPLIT@ryu@detail@json@boost@@YAAEAY1BEG@1$$CB_KXZ@4QAY01$$CB_KA"]
	mov	rdi, rsi
	or	rdi, 2
	mov	r9, qword ptr [rax + rdx]
	mov	r8, qword ptr [rax + rdx + 8]
	mov	rax, r8
	mul	rdi
	mov	rbx, rdx
	mov	r10, rax
	mov	rax, r9
	mul	rdi
	mov	r11, rdx
	add	r11, r10
	adc	rbx, 0
	add	cl, 56
	shrd	r11, rbx, cl
	movzx	edi, r12b
	not	rdi
	add	rdi, rsi
	mov	rax, r8
	mul	rdi
	mov	rbx, rdx
	mov	r14, rax
	mov	rax, r9
	mul	rdi
	mov	r10, rdx
	add	r10, r14
	adc	rbx, 0
	shrd	r10, rbx, cl
	mov	rax, r8
	mul	rsi
	mov	rbx, rdx
	mov	r8, rax
	mov	rax, r9
	mul	rsi
	mov	r9, rdx
	add	r9, r8
	adc	rbx, 0
                                        # kill: def $cl killed $cl killed $ecx
	shrd	r9, rbx, cl
	cmp	r13d, 1
	ja	.LBB237_8
# %bb.7:
	mov	eax, ebp
	and	eax, 1
	test	rax, rax
	sete	r14b
	sub	r11, rax
	and	r14b, r12b
	mov	r8b, 1
                                        # kill: def $r15d killed $r15d def $r15
	jmp	.LBB237_25
.LBB237_8:
	cmp	r13d, 62
	ja	.LBB237_14
# %bb.9:
	mov	rax, -1
	mov	ecx, r13d
	shl	rax, cl
	not	rax
	test	rsi, rax
	sete	r8b
	jmp	.LBB237_15
.LBB237_10:
	test	byte ptr [rsp + 8], 1   # 1-byte Folded Reload
	jne	.LBB237_16
# %bb.11:
	mov	ebp, -1
	.p2align	4, 0x90
.LBB237_12:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rbx
	mul	rcx
	shr	rdx, 2
	lea	eax, [rdx + 4*rdx]
	add	ebp, 1
	cmp	ebx, eax
	mov	rbx, rdx
	je	.LBB237_12
# %bb.13:
	cmp	ebp, r15d
	setae	r14b
	xor	r8d, r8d
	test	r8b, r8b
	je	.LBB237_22
	jmp	.LBB237_25
.LBB237_14:
	xor	r8d, r8d
.LBB237_15:
	xor	r14d, r14d
                                        # kill: def $r15d killed $r15d def $r15
	test	r8b, r8b
	je	.LBB237_22
	jmp	.LBB237_25
.LBB237_16:
	mov	ebp, -1
	.p2align	4, 0x90
.LBB237_17:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	mul	rcx
	shr	rdx, 2
	lea	eax, [rdx + 4*rdx]
	add	ebp, 1
	cmp	edi, eax
	mov	rdi, rdx
	je	.LBB237_17
# %bb.18:
	xor	eax, eax
	cmp	ebp, r15d
	setae	al
	sub	r11, rax
.LBB237_19:
	xor	r8d, r8d
.LBB237_20:
	xor	r14d, r14d
	test	r8b, r8b
	jne	.LBB237_25
.LBB237_22:
	test	r14b, r14b
	jne	.LBB237_25
# %bb.23:
	mov	rax, r11
	shr	rax, 2
	movabs	rbp, 2951479051793528259
	mul	rbp
	mov	rcx, rdx
	shr	rcx, 2
	mov	rax, r10
	shr	rax, 2
	mul	rbp
	mov	rsi, rdx
	shr	rsi, 2
	cmp	rcx, rsi
	jbe	.LBB237_34
# %bb.24:
	mov	rax, r9
	shr	rax, 2
	mul	rbp
	shr	rdx, 2
	imul	eax, edx, -100
	add	eax, r9d
	xor	ebp, ebp
	cmp	eax, 49
	seta	bpl
	mov	r13d, 2
	mov	r11, rcx
	mov	r10, rsi
	mov	r9, rdx
	jmp	.LBB237_35
.LBB237_25:
	movabs	r12, -3689348814741910323
	mov	rax, r11
	mul	r12
	mov	rdi, rdx
	mov	rax, r10
	mul	r12
	shr	rdi, 3
	shr	rdx, 3
	xor	ebp, ebp
	cmp	rdi, rdx
	jbe	.LBB237_29
# %bb.26:
	xor	r13d, r13d
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB237_27:                             # =>This Inner Loop Header: Depth=1
	mov	r11, rdx
	lea	ebx, [rdx + rdx]
	mov	rax, r9
	mul	r12
	mov	rsi, rdx
	lea	eax, [rbx + 4*rbx]
	shr	rsi, 3
	lea	edx, [rsi + rsi]
	lea	ebp, [rdx + 4*rdx]
	neg	ebp
	add	bpl, r9b
	cmp	r10d, eax
	sete	al
	and	r14b, al
	test	cl, cl
	sete	al
	and	r8b, al
	add	r13d, 1
	mov	rax, rdi
	mul	r12
	mov	rdi, rdx
	shr	rdi, 3
	mov	rax, r11
	mul	r12
	shr	rdx, 3
	mov	r9, rsi
	mov	ecx, ebp
	mov	r10, r11
	cmp	rdi, rdx
	ja	.LBB237_27
# %bb.28:
	test	r14b, r14b
	jne	.LBB237_30
	jmp	.LBB237_32
.LBB237_29:
	mov	r11, r10
	xor	r13d, r13d
	mov	rsi, r9
	test	r14b, r14b
	je	.LBB237_32
.LBB237_30:
	mov	rax, r11
	mul	r12
	mov	rcx, rdx
	shr	rcx, 3
	lea	eax, [rcx + rcx]
	lea	eax, [rax + 4*rax]
	cmp	r11d, eax
	jne	.LBB237_32
	.p2align	4, 0x90
.LBB237_31:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	mul	r12
	mov	rdi, rdx
	mov	r11, rcx
	shr	rdi, 3
	lea	eax, [rdi + rdi]
	lea	ebx, [rax + 4*rax]
	neg	ebx
	add	bl, sil
	test	bpl, bpl
	sete	al
	and	r8b, al
	add	r13d, 1
	mov	rax, rcx
	mul	r12
	mov	rcx, rdx
	shr	rcx, 3
	lea	eax, [rcx + rcx]
	lea	eax, [rax + 4*rax]
	mov	rsi, rdi
	mov	ebp, ebx
	cmp	r11d, eax
	je	.LBB237_31
	jmp	.LBB237_33
.LBB237_32:
	mov	ebx, ebp
	mov	rdi, rsi
.LBB237_33:
	test	r14b, r14b
	sete	r9b
	test	r8b, r8b
	setne	cl
	cmp	bl, 5
	sete	dl
	test	dil, 1
	sete	al
	and	al, cl
	and	al, dl
	cmp	rdi, r11
	sete	cl
	mov	rbp, qword ptr [rsp + 8] # 8-byte Reload
	or	bpl, r9b
	cmp	bl, 4
	seta	dl
	xor	dl, al
	and	bpl, cl
	or	bpl, dl
	movzx	ecx, bpl
	add	rcx, rdi
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	jmp	.LBB237_39
.LBB237_34:
	xor	ebp, ebp
	xor	r13d, r13d
.LBB237_35:
	movabs	rdi, -3689348814741910323
	mov	rax, r11
	mul	rdi
	mov	rcx, rdx
	shr	rcx, 3
	mov	rax, r10
	mul	rdi
	shr	rdx, 3
	cmp	rcx, rdx
	jbe	.LBB237_38
	.p2align	4, 0x90
.LBB237_36:                             # =>This Inner Loop Header: Depth=1
	mov	rbx, r9
	mov	r10, rdx
	mov	rax, r9
	mul	rdi
	mov	r9, rdx
	shr	r9, 3
	add	r13d, 1
	mov	rax, rcx
	mul	rdi
	mov	rcx, rdx
	shr	rcx, 3
	mov	rax, r10
	mul	rdi
	shr	rdx, 3
	cmp	rcx, rdx
	ja	.LBB237_36
# %bb.37:
	lea	eax, [r9 + r9]
	lea	eax, [rax + 4*rax]
	sub	ebx, eax
	xor	ebp, ebp
	cmp	ebx, 4
	seta	bpl
.LBB237_38:
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	xor	ecx, ecx
	cmp	r9, r10
	sete	cl
	or	rcx, rbp
	add	rcx, r9
.LBB237_39:
	add	r15d, r13d
	mov	dword ptr [rax + 8], r15d
	mov	qword ptr [rax], rcx
	add	rsp, 16
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?d2d@detail@ryu@1json@boost@@YA?AUfloating_decimal_64@12134@_KI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z"
	.globl	"?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z" # -- Begin function ?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z
	.p2align	4, 0x90
"?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z": # @"?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z"
.seh_proc "?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	r10, r8
	mov	qword ptr [rsp], rcx    # 8-byte Spill
	xor	r11d, r11d
	test	dl, dl
	je	.LBB238_2
# %bb.1:
	mov	byte ptr [r10], 45
	mov	r11d, 1
.LBB238_2:
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	mov	r9, qword ptr [rax]
	mov	ebp, 17
	movabs	rax, 9999999999999999
	mov	r14d, r11d
	cmp	r9, rax
	ja	.LBB238_20
# %bb.3:
	mov	ebp, 16
	movabs	rax, 999999999999999
	cmp	r9, rax
	ja	.LBB238_20
# %bb.4:
	mov	ebp, 15
	movabs	rax, 99999999999999
	cmp	r9, rax
	ja	.LBB238_20
# %bb.5:
	mov	rax, r9
	shr	rax, 13
	mov	ebp, 14
	cmp	rax, 1220703124
	ja	.LBB238_20
# %bb.6:
	mov	rax, r9
	shr	rax, 12
	mov	ebp, 13
	cmp	rax, 244140624
	ja	.LBB238_20
# %bb.7:
	mov	rax, r9
	shr	rax, 11
	mov	ebp, 12
	cmp	rax, 48828124
	ja	.LBB238_20
# %bb.8:
	mov	rax, r9
	shr	rax, 10
	mov	ebp, 11
	cmp	rax, 9765624
	ja	.LBB238_20
# %bb.9:
	xor	eax, eax
	cmp	r9, 999999999
	jbe	.LBB238_10
# %bb.19:
	mov	rdx, r9
	shr	rdx, 32
	mov	ebp, 10
	je	.LBB238_21
.LBB238_20:
	movabs	rdx, -6067343680855748867
	mov	rax, r9
	mul	rdx
	shr	rdx, 26
	imul	ebx, edx, -100000000
	add	ebx, r9d
	mov	r9d, 3518437209
	mov	rsi, rbx
	imul	rsi, r9
	shr	rsi, 45
	imul	edi, esi, 10000
	sub	ebx, edi
	mov	rax, rsi
	imul	rax, r9
	shr	rax, 45
	imul	eax, eax, 10000
	sub	esi, eax
	movzx	eax, bx
	shr	eax, 2
	imul	r13d, eax, 5243
	shr	r13d, 17
	imul	edi, r13d, 100
	sub	ebx, edi
	movzx	r9d, bx
	movzx	edi, si
	shr	edi, 2
	imul	edi, edi, 5243
	shr	edi, 17
	imul	ebx, edi, 100
	sub	esi, ebx
	movzx	r15d, si
	lea	rbx, [r10 + r14]
	mov	esi, ebp
	lea	r12, [rip + "?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"]
	movzx	eax, word ptr [r12 + 2*r9]
	mov	word ptr [rsi + rbx - 1], ax
	movzx	eax, word ptr [r12 + 2*r13]
	mov	word ptr [rsi + rbx - 3], ax
	movzx	eax, word ptr [r12 + 2*r15]
	mov	word ptr [rsi + rbx - 5], ax
	movzx	eax, word ptr [r12 + 2*rdi]
	mov	word ptr [rsi + rbx - 7], ax
	mov	eax, 8
	mov	r9, rdx
.LBB238_21:
	mov	rcx, rbp
	mov	r15d, ebp
	cmp	r9d, 10000
	jb	.LBB238_22
# %bb.23:
	mov	rdx, r14
	mov	r8, r10
	lea	rdx, [r10 + r14]
	lea	r10, [r15 + rdx]
	mov	r12d, 3518437209
	lea	rdx, [rip + "?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"]
	.p2align	4, 0x90
.LBB238_24:                             # =>This Inner Loop Header: Depth=1
	mov	edi, r9d
	imul	rdi, r12
	shr	rdi, 45
	imul	esi, edi, -10000
	add	esi, r9d
	imul	rbx, rsi, 1374389535
	shr	rbx, 37
	imul	ebp, ebx, 100
	sub	esi, ebp
	mov	ebp, eax
	mov	r13, r10
	sub	r13, rbp
	movzx	esi, word ptr [rdx + 2*rsi]
	mov	word ptr [r13 - 1], si
	movzx	esi, word ptr [rdx + 2*rbx]
	mov	word ptr [r13 - 3], si
	add	eax, 4
	cmp	r9d, 99999999
	mov	r9d, edi
	ja	.LBB238_24
# %bb.25:
	cmp	edi, 100
	jb	.LBB238_27
.LBB238_26:
	movzx	edx, di
	shr	edx, 2
	imul	edx, edx, 5243
	shr	edx, 17
	imul	ebp, edx, 100
	sub	edi, ebp
	movzx	ebp, di
	lea	rbx, [r8 + r14]
	add	r15, rbx
	mov	ebx, eax
	not	rbx
	lea	rdi, [rip + "?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"]
	movzx	ebp, word ptr [rdi + 2*rbp]
	mov	word ptr [rbx + r15], bp
	or	eax, 2
	mov	edi, edx
.LBB238_27:
	cmp	edi, 10
	mov	rsi, rcx
	jb	.LBB238_29
# %bb.28:
	mov	edx, edi
	lea	rbp, [rdx + rdx]
	or	ebp, 1
	lea	rbx, [rip + "?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"]
	mov	cl, byte ptr [rbp + rbx]
	lea	ebp, [rsi + r11]
	sub	ebp, eax
	mov	byte ptr [r8 + rbp], cl
	mov	dil, byte ptr [rbx + 2*rdx]
	jmp	.LBB238_30
.LBB238_22:
	mov	r8, r10
	mov	edi, r9d
	cmp	edi, 100
	jae	.LBB238_26
	jmp	.LBB238_27
.LBB238_29:
	add	dil, 48
.LBB238_30:
	mov	byte ptr [r8 + r14], dil
	mov	edx, 1
	cmp	esi, 2
	jb	.LBB238_32
# %bb.31:
	mov	byte ptr [r14 + r8 + 1], 46
	lea	edx, [rsi + 1]
.LBB238_32:
	add	edx, r11d
	mov	byte ptr [r8 + rdx], 69
	lea	rax, [rdx + 1]
	mov	rcx, qword ptr [rsp]    # 8-byte Reload
	mov	ecx, dword ptr [rcx + 8]
	lea	ebx, [rcx + rsi]
	test	ebx, ebx
	jle	.LBB238_34
# %bb.33:
	add	ecx, esi
	add	ecx, -1
	cmp	ecx, 100
	jl	.LBB238_37
.LBB238_36:
	mov	edx, eax
	mov	ebp, ecx
	mov	ebx, 3435973837
	imul	rbx, rbp
	shr	rbx, 35
	lea	ebp, [rbx + rbx]
	lea	ebp, [rbp + 4*rbp]
	sub	ecx, ebp
	lea	rbp, [rip + "?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"]
	movzx	ebp, word ptr [rbp + 2*rbx]
	mov	word ptr [r8 + rdx], bp
	or	cl, 48
	mov	byte ptr [r8 + rdx + 2], cl
	add	eax, 3
	jmp	.LBB238_40
.LBB238_34:
	add	edx, 2
	mov	byte ptr [r8 + rax], 45
	mov	ecx, 1
	sub	ecx, ebx
	mov	eax, edx
	cmp	ecx, 100
	jge	.LBB238_36
.LBB238_37:
	cmp	ecx, 10
	jl	.LBB238_39
# %bb.38:
	mov	edx, eax
	movsxd	rcx, ecx
	lea	rbp, [rip + "?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"]
	movzx	ecx, word ptr [rbp + 2*rcx]
	mov	word ptr [r8 + rdx], cx
	add	eax, 2
	jmp	.LBB238_40
.LBB238_39:
	add	cl, 48
	mov	edx, eax
	add	eax, 1
	mov	byte ptr [r8 + rdx], cl
.LBB238_40:
                                        # kill: def $eax killed $eax killed $rax
	add	rsp, 8
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB238_10:
	mov	ebp, 9
	cmp	r9, 99999999
	ja	.LBB238_21
# %bb.11:
	mov	ebp, 8
	cmp	r9, 9999999
	ja	.LBB238_21
# %bb.12:
	mov	ebp, 7
	cmp	r9, 999999
	ja	.LBB238_21
# %bb.13:
	mov	ebp, 6
	cmp	r9, 99999
	ja	.LBB238_21
# %bb.14:
	mov	ebp, 5
	cmp	r9, 9999
	ja	.LBB238_21
# %bb.15:
	mov	ebp, 4
	cmp	r9, 999
	ja	.LBB238_21
# %bb.16:
	cmp	r9, 99
	jbe	.LBB238_18
# %bb.17:
	mov	ebp, 3
	jmp	.LBB238_21
.LBB238_18:
	xor	ebp, ebp
	cmp	r9, 9
	seta	bpl
	add	ebp, 1
	jmp	.LBB238_21
	.seh_handlerdata
	.section	.text,"xr",discard,"?to_chars@detail@ryu@1json@boost@@YAHUfloating_decimal_64@12134@_NQEAD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z"
	.globl	"?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z" # -- Begin function ?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z
	.p2align	4, 0x90
"?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z": # @"?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z"
.seh_proc "?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rdx
	call	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	cdqe
	mov	byte ptr [rsi + rax], 0
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?d2s_buffered@ryu@detail@json@boost@@YAXNPEAD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?d2s@ryu@detail@json@boost@@YAPEADN@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?d2s@ryu@detail@json@boost@@YAPEADN@Z"
	.globl	"?d2s@ryu@detail@json@boost@@YAPEADN@Z" # -- Begin function ?d2s@ryu@detail@json@boost@@YAPEADN@Z
	.p2align	4, 0x90
"?d2s@ryu@detail@json@boost@@YAPEADN@Z": # @"?d2s@ryu@detail@json@boost@@YAPEADN@Z"
.seh_proc "?d2s@ryu@detail@json@boost@@YAPEADN@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	eax, dword ptr [rip + _tls_index]
	mov	rcx, qword ptr gs:[88]
	mov	rdi, qword ptr [rcx + 8*rax]
	lea	rsi, [rdi + "?result@?1??d2s@ryu@detail@json@boost@@YAPEADN@Z@4PADA"@SECREL32]
	mov	rdx, rsi
	call	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	cdqe
	mov	byte ptr [rdi + rax + "?result@?1??d2s@ryu@detail@json@boost@@YAPEADN@Z@4PADA"@SECREL32], 0
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?d2s@ryu@detail@json@boost@@YAPEADN@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?name@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBAPEBDXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?name@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBAPEBDXZ"
	.p2align	4, 0x90         # -- Begin function ?name@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBAPEBDXZ
"?name@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBAPEBDXZ": # @"?name@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBAPEBDXZ"
# %bb.0:
	lea	rax, [rip + "??_C@_0L@CKFFNMMF@boost?4json?$AA@"]
	ret
                                        # -- End function
	.def	 "?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z"
	.p2align	4, 0x90         # -- Begin function ?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z
"?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z": # @"?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z"
.seh_proc "?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
                                        # kill: def $r8d killed $r8d def $r8
	mov	rsi, rdx
	lea	eax, [r8 - 1]
	cmp	eax, 27
	jae	.LBB242_1
# %bb.6:
	lea	rdi, [rip + "?cat@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rdi
	mov	edx, 1
	call	qword ptr [rip + "??_7codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"+48]
	mov	dword ptr [rsi], 1
	jmp	.LBB242_8
.LBB242_1:
	lea	eax, [r8 - 28]
	cmp	eax, 8
	jae	.LBB242_2
# %bb.7:
	lea	rdi, [rip + "?cat@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rdi
	mov	edx, 2
	call	qword ptr [rip + "??_7codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"+48]
	mov	dword ptr [rsi], 2
.LBB242_8:
	mov	byte ptr [rsi + 4], al
	mov	qword ptr [rsi + 8], rdi
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB242_2:
	mov	rdi, rcx
	mov	dword ptr [rsi], r8d
	mov	rax, qword ptr [rcx + 8]
	movabs	rcx, -5572340897628102899
	cmp	rax, rcx
	je	.LBB242_4
# %bb.3:
	movabs	rcx, -8093018978436915045
	cmp	rax, rcx
	jne	.LBB242_5
.LBB242_4:
	test	r8d, r8d
	setne	al
	jmp	.LBB242_8
.LBB242_5:
	mov	rax, qword ptr [rdi]
	mov	rcx, rdi
	mov	edx, r8d
	call	qword ptr [rax + 48]
	jmp	.LBB242_8
	.seh_handlerdata
	.section	.text,"xr",one_only,"?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z"
	.globl	"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z" # -- Begin function ?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z
	.p2align	4, 0x90
"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z": # @"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z"
# %bb.0:
	mov	r9, qword ptr [rdx + 8]
	mov	rax, qword ptr [r9 + 8]
	test	rax, rax
	je	.LBB243_3
# %bb.1:
	cmp	qword ptr [rcx + 8], rax
	jne	.LBB243_4
.LBB243_5:
	cmp	dword ptr [rdx], r8d
	sete	al
                                        # kill: def $al killed $al killed $eax
	ret
.LBB243_3:
	cmp	r9, rcx
	je	.LBB243_5
.LBB243_4:
	xor	eax, eax
                                        # kill: def $al killed $al killed $eax
	ret
                                        # -- End function
	.def	 "?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
	.globl	"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z" # -- Begin function ?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z
	.p2align	4, 0x90
"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z": # @"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
.seh_proc "?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 64
	.seh_stackalloc 64
	.seh_endprologue
	mov	rsi, r8
	mov	r8d, edx
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 56], rax
	mov	rax, qword ptr [rcx]
	lea	rdx, [rsp + 40]
	call	qword ptr [rax + 8]
	mov	eax, dword ptr [rsp + 40]
	cmp	eax, dword ptr [rsi]
	jne	.LBB244_1
# %bb.2:
	mov	rax, qword ptr [rsp + 48]
	mov	rcx, qword ptr [rsi + 8]
	mov	rdx, qword ptr [rcx + 8]
	test	rdx, rdx
	je	.LBB244_3
# %bb.4:
	cmp	qword ptr [rax + 8], rdx
	jmp	.LBB244_5
.LBB244_1:
	xor	esi, esi
	jmp	.LBB244_6
.LBB244_3:
	cmp	rax, rcx
.LBB244_5:
	sete	sil
.LBB244_6:
	mov	rcx, qword ptr [rsp + 56]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	eax, esi
	add	rsp, 64
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.globl	"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z" # -- Begin function ?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z
	.p2align	4, 0x90
"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z": # @"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
.Lfunc_begin97:
.seh_proc "?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rbx, r8
	test	r9, r9
	mov	qword ptr [rbp - 8], r8 # 8-byte Spill
	je	.LBB245_14
# %bb.1:
	mov	rsi, r9
	cmp	r9, 1
	jne	.LBB245_3
# %bb.2:
	mov	byte ptr [rbx], 0
	jmp	.LBB245_14
.LBB245_3:
	mov	r8d, edx
	mov	rax, qword ptr [rcx]
.Ltmp310:
	lea	rdi, [rbp - 40]
	mov	rdx, rdi
	call	qword ptr [rax + 40]
.Ltmp311:
# %bb.4:
	lea	r8, [rsi - 1]
	cmp	qword ptr [rbp - 16], 15
	jbe	.LBB245_6
# %bb.5:
	mov	rdi, qword ptr [rbp - 40]
.LBB245_6:
	mov	rcx, rbx
	mov	rdx, rdi
	call	qword ptr [rip + __imp_strncpy]
	mov	byte ptr [rbx + rsi - 1], 0
	mov	rax, qword ptr [rbp - 16]
	cmp	rax, 16
	jb	.LBB245_14
# %bb.7:
	mov	rcx, qword ptr [rbp - 40]
	lea	rdx, [rax + 1]
	cmp	rdx, 4096
	jb	.LBB245_13
# %bb.8:
	mov	rdi, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rdi
	cmp	rcx, 32
	jae	.LBB245_9
# %bb.12:
	add	rax, 40
	mov	rdx, rax
	mov	rcx, rdi
.LBB245_13:
	call	"??3@YAXPEAX_K@Z"
.LBB245_14:                             # Block address taken
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB245_9:
.Ltmp312:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp313:
# %bb.10:
	.seh_handlerdata
	.long	("$cppxdata$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL
	.section	.text,"xr",discard,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.def	 "?dtor$11@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA":
.seh_proc "?dtor$11@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"
.LBB245_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.def	 "?dtor$15@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA":
.seh_proc "?dtor$15@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"
.LBB245_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.def	 "?catch$16@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$16@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA":
.seh_proc "?catch$16@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"
	.seh_handler __CxxFrameHandler3, @unwind, @except
.LBB245_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	lea	rax, [rip + "??_C@_0BJ@LIGENOKI@Message?5text?5unavailable?$AA@"]
	mov	qword ptr [rbp - 8], rax # 8-byte Spill
	lea	rax, [rip + .LBB245_14]
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CATCHRET
.Lfunc_end97:
	.seh_handlerdata
	.long	("$cppxdata$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL
	.section	.text,"xr",discard,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.p2align	2
"$cppxdata$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	429065506               # MagicNumber
	.long	4                       # MaxState
	.long	("$stateUnwindMap$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # UnwindMap
	.long	1                       # NumTryBlocks
	.long	("$tryMap$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$15@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"@IMGREL # Action
	.long	1                       # ToState
	.long	0                       # Action
	.long	1                       # ToState
	.long	0                       # Action
"$tryMap$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	2                       # TryLow
	.long	2                       # TryHigh
	.long	3                       # CatchHigh
	.long	1                       # NumCatches
	.long	("$handlerMap$0$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # HandlerArray
"$handlerMap$0$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	64                      # Adjectives
	.long	0                       # Type
	.long	0                       # CatchObjOffset
	.long	"?catch$16@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"@IMGREL # Handler
	.long	88                      # ParentFrameOffset
"$ip2state$?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	.Lfunc_begin97@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp310@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp312@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp313@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	"?catch$16@?0??message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"@IMGREL # IP
	.long	3                       # ToState
	.section	.text,"xr",discard,"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
                                        # -- End function
	.def	 "?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@000000000000000f000000000000000d # -- Begin function ?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	.section	.rdata,"dr",discard,__xmm@000000000000000f000000000000000d
	.p2align	4
__xmm@000000000000000f000000000000000d:
	.quad	13                      # 0xd
	.quad	15                      # 0xf
	.globl	__xmm@000000000000000f000000000000000f
	.section	.rdata,"dr",discard,__xmm@000000000000000f000000000000000f
	.p2align	4
__xmm@000000000000000f000000000000000f:
	.quad	15                      # 0xf
	.quad	15                      # 0xf
	.globl	__xmm@000000000000000f0000000000000009
	.section	.rdata,"dr",discard,__xmm@000000000000000f0000000000000009
	.p2align	4
__xmm@000000000000000f0000000000000009:
	.quad	9                       # 0x9
	.quad	15                      # 0xf
	.globl	__xmm@000000000000000f000000000000000a
	.section	.rdata,"dr",discard,__xmm@000000000000000f000000000000000a
	.p2align	4
__xmm@000000000000000f000000000000000a:
	.quad	10                      # 0xa
	.quad	15                      # 0xf
	.globl	__xmm@000000000000000f000000000000000c
	.section	.rdata,"dr",discard,__xmm@000000000000000f000000000000000c
	.p2align	4
__xmm@000000000000000f000000000000000c:
	.quad	12                      # 0xc
	.quad	15                      # 0xf
	.globl	__xmm@000000000000000f000000000000000e
	.section	.rdata,"dr",discard,__xmm@000000000000000f000000000000000e
	.p2align	4
__xmm@000000000000000f000000000000000e:
	.quad	14                      # 0xe
	.quad	15                      # 0xf
	.globl	__xmm@000000000000000f0000000000000008
	.section	.rdata,"dr",discard,__xmm@000000000000000f0000000000000008
	.p2align	4
__xmm@000000000000000f0000000000000008:
	.quad	8                       # 0x8
	.quad	15                      # 0xf
	.section	.text,"xr",one_only,"?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.p2align	4, 0x90
"?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z": # @"?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
.seh_proc "?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
                                        # kill: def $r8d killed $r8d def $r8
	mov	rsi, rdx
	add	r8d, -2
	cmp	r8d, 34
	ja	.LBB246_3
# %bb.1:
	lea	rax, [rip + .LJTI246_0]
	movsxd	rcx, dword ptr [rax + 4*r8]
	add	rcx, rax
	jmp	rcx
.LBB246_2:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000a] # xmm0 = [10,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7017769722254227557
	mov	qword ptr [rsi], rax
	mov	word ptr [rsi + 8], 24948
	mov	byte ptr [rsi + 10], 0
	jmp	.LBB246_45
.LBB246_3:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000c] # xmm0 = [12,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7286956557046020467
	mov	qword ptr [rsi], rax
	mov	dword ptr [rsi + 8], 1919906418
	jmp	.LBB246_44
.LBB246_4:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000f] # xmm0 = [15,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7308339910638005865
	mov	qword ptr [rsi], rax
	movabs	rax, 5642820435954725989
	jmp	.LBB246_29
.LBB246_5:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BC@HHLEKGDI@mantissa?5overflow?$AA@"]
	jmp	.LBB246_23
.LBB246_6:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BC@HGAILDEM@exponent?5overflow?$AA@"]
	jmp	.LBB246_23
.LBB246_7:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000008] # xmm0 = [8,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8098990985611014004
	mov	qword ptr [rsi], rax
	mov	byte ptr [rsi + 8], 0
	jmp	.LBB246_45
.LBB246_8:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BM@LNGFADPD@illegal?5character?5for?5value?$AA@"]
	mov	edx, 27
	jmp	.LBB246_41
.LBB246_9:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BK@DPPBFMOE@illegal?5control?5character?$AA@"]
	mov	edx, 25
	jmp	.LBB246_41
.LBB246_10:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0CF@OCDBBGPE@illegal?5character?5in?5escape?5sequ@"]
	mov	edx, 36
	jmp	.LBB246_41
.LBB246_11:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BP@FDDBMGLG@illegal?5extra?5digits?5in?5number?$AA@"]
	mov	edx, 30
	jmp	.LBB246_41
.LBB246_12:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BK@IMJLJKGA@illegal?5leading?5surrogate?$AA@"]
	mov	edx, 25
	jmp	.LBB246_41
.LBB246_13:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BL@ILKOFFNE@illegal?5trailing?5surrogate?$AA@"]
	mov	edx, 26
	jmp	.LBB246_41
.LBB246_14:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000e] # xmm0 = [14,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7234316346693023845
	mov	qword ptr [rsi], rax
	movabs	rax, 7020387719312335973
	jmp	.LBB246_16
.LBB246_15:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000e] # xmm0 = [14,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7234316346693023845
	mov	qword ptr [rsi], rax
	movabs	rax, 7957698292247192677
.LBB246_16:
	mov	qword ptr [rsi + 6], rax
	mov	byte ptr [rsi + 14], 0
	jmp	.LBB246_45
.LBB246_17:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000f] # xmm0 = [15,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7234316346693023845
	mov	qword ptr [rsi], rax
	movabs	rax, 8315180309070028900
	jmp	.LBB246_29
.LBB246_18:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BD@FONPMPNI@expected?5hex?5digit?$AA@"]
	jmp	.LBB246_40
.LBB246_19:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BG@MLGLKOJK@expected?5utf16?5escape?$AA@"]
	mov	edx, 21
	jmp	.LBB246_41
.LBB246_20:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BC@BPFADJBD@expected?5mantissa?$AA@"]
	jmp	.LBB246_23
.LBB246_21:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BL@BODAMBP@expected?5mantissa?5fraction?$AA@"]
	mov	edx, 26
	jmp	.LBB246_41
.LBB246_22:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BC@HNJFKGKE@expected?5exponent?$AA@"]
.LBB246_23:
	mov	edx, 17
	jmp	.LBB246_41
.LBB246_24:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000f] # xmm0 = [15,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7234316346693023845
	mov	qword ptr [rsi], rax
	movabs	rax, 2838804274562408548
	jmp	.LBB246_29
.LBB246_25:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BB@JFOLFCEJ@expected?5?8false?8?$AA@"]
	mov	edx, 16
	jmp	.LBB246_41
.LBB246_26:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000f] # xmm0 = [15,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7234316346693023845
	mov	qword ptr [rsi], rax
	movabs	rax, 2840764716578971748
	jmp	.LBB246_29
.LBB246_27:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@"]
	mov	edx, 16
	jmp	.LBB246_41
.LBB246_28:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000f] # xmm0 = [15,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8031079741206458977
	mov	qword ptr [rsi], rax
	movabs	rax, 7306934683183378287
.LBB246_29:
	mov	qword ptr [rsi + 7], rax
	mov	byte ptr [rsi + 15], 0
	jmp	.LBB246_45
.LBB246_30:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000d] # xmm0 = [13,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 2337209276180292971
	mov	qword ptr [rsi], rax
	movabs	rax, 7306934683183378287
	jmp	.LBB246_37
.LBB246_31:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@"]
	mov	edx, 16
	jmp	.LBB246_41
.LBB246_32:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000d] # xmm0 = [13,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8007521500900126574
	mov	qword ptr [rsi], rax
	movabs	rax, 8386658438686384238
	jmp	.LBB246_37
.LBB246_33:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000c] # xmm0 = [12,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 6998715184369135470
	mov	qword ptr [rsi], rax
	mov	dword ptr [rsi + 8], 2036429426
	jmp	.LBB246_44
.LBB246_34:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000c] # xmm0 = [12,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8391086132249784174
	mov	qword ptr [rsi], rax
	mov	dword ptr [rsi + 8], 1735289202
	jmp	.LBB246_44
.LBB246_35:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000c] # xmm0 = [12,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8461736351404158830
	mov	qword ptr [rsi], rax
	mov	dword ptr [rsi + 8], 1919246957
	jmp	.LBB246_44
.LBB246_36:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000d] # xmm0 = [13,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8026013087456063342
	mov	qword ptr [rsi], rax
	movabs	rax, 7953749933313450528
.LBB246_37:
	mov	qword ptr [rsi + 5], rax
	mov	byte ptr [rsi + 13], 0
	jmp	.LBB246_45
.LBB246_38:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000a] # xmm0 = [10,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 8461736351404158830
	mov	qword ptr [rsi], rax
	mov	word ptr [rsi + 8], 27756
	mov	byte ptr [rsi + 10], 0
	jmp	.LBB246_45
.LBB246_39:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	lea	r9, [rip + "??_C@_0BD@NMAPEHAH@integer?5overflowed?$AA@"]
.LBB246_40:
	mov	edx, 18
.LBB246_41:
	mov	rcx, rsi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	jmp	.LBB246_45
.LBB246_42:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000009] # xmm0 = [9,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7161137258227330926
	mov	qword ptr [rsi], rax
	mov	word ptr [rsi + 8], 116
	jmp	.LBB246_45
.LBB246_43:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f000000000000000c] # xmm0 = [12,15]
	movups	xmmword ptr [rsi + 16], xmm0
	movabs	rax, 7593462736302073204
	mov	qword ptr [rsi], rax
	mov	dword ptr [rsi + 8], 1701999980
.LBB246_44:
	mov	byte ptr [rsi + 12], 0
.LBB246_45:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.p2align	2, 0x90
.LJTI246_0:
	.long	.LBB246_2-.LJTI246_0
	.long	.LBB246_4-.LJTI246_0
	.long	.LBB246_5-.LJTI246_0
	.long	.LBB246_6-.LJTI246_0
	.long	.LBB246_7-.LJTI246_0
	.long	.LBB246_8-.LJTI246_0
	.long	.LBB246_9-.LJTI246_0
	.long	.LBB246_10-.LJTI246_0
	.long	.LBB246_11-.LJTI246_0
	.long	.LBB246_12-.LJTI246_0
	.long	.LBB246_13-.LJTI246_0
	.long	.LBB246_14-.LJTI246_0
	.long	.LBB246_15-.LJTI246_0
	.long	.LBB246_17-.LJTI246_0
	.long	.LBB246_18-.LJTI246_0
	.long	.LBB246_19-.LJTI246_0
	.long	.LBB246_20-.LJTI246_0
	.long	.LBB246_21-.LJTI246_0
	.long	.LBB246_22-.LJTI246_0
	.long	.LBB246_24-.LJTI246_0
	.long	.LBB246_25-.LJTI246_0
	.long	.LBB246_26-.LJTI246_0
	.long	.LBB246_27-.LJTI246_0
	.long	.LBB246_28-.LJTI246_0
	.long	.LBB246_30-.LJTI246_0
	.long	.LBB246_31-.LJTI246_0
	.long	.LBB246_32-.LJTI246_0
	.long	.LBB246_33-.LJTI246_0
	.long	.LBB246_34-.LJTI246_0
	.long	.LBB246_35-.LJTI246_0
	.long	.LBB246_36-.LJTI246_0
	.long	.LBB246_38-.LJTI246_0
	.long	.LBB246_39-.LJTI246_0
	.long	.LBB246_42-.LJTI246_0
	.long	.LBB246_43-.LJTI246_0
	.seh_handlerdata
	.section	.text,"xr",one_only,"?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?failed@error_category@system@boost@@UEBA_NH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?failed@error_category@system@boost@@UEBA_NH@Z"
	.globl	"?failed@error_category@system@boost@@UEBA_NH@Z" # -- Begin function ?failed@error_category@system@boost@@UEBA_NH@Z
	.p2align	4, 0x90
"?failed@error_category@system@boost@@UEBA_NH@Z": # @"?failed@error_category@system@boost@@UEBA_NH@Z"
# %bb.0:
	test	edx, edx
	setne	al
	ret
                                        # -- End function
	.def	 "?name@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBAPEBDXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?name@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBAPEBDXZ"
	.p2align	4, 0x90         # -- Begin function ?name@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBAPEBDXZ
"?name@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBAPEBDXZ": # @"?name@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBAPEBDXZ"
# %bb.0:
	lea	rax, [rip + "??_C@_0L@CKFFNMMF@boost?4json?$AA@"]
	ret
                                        # -- End function
	.def	 "?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z"
	.globl	"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z" # -- Begin function ?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z
	.p2align	4, 0x90
"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z": # @"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z"
.seh_proc "?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	dword ptr [rdx], r8d
	mov	rax, qword ptr [rcx + 8]
	movabs	rcx, -5572340897628102899
	cmp	rax, rcx
	je	.LBB249_2
# %bb.1:
	movabs	rcx, -8093018978436915045
	cmp	rax, rcx
	jne	.LBB249_3
.LBB249_2:
	test	r8d, r8d
	setne	al
	jmp	.LBB249_4
.LBB249_3:
	mov	rax, qword ptr [rdi]
	mov	rcx, rdi
	mov	edx, r8d
	call	qword ptr [rax + 48]
.LBB249_4:
	mov	byte ptr [rsi + 4], al
	mov	qword ptr [rsi + 8], rdi
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.p2align	4, 0x90         # -- Begin function ?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
"?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z": # @"?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
.seh_proc "?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rdx
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rdx + 16], xmm0
	mov	byte ptr [rdx], 0
	cmp	r8d, 2
	jne	.LBB250_1
# %bb.3:
	lea	r9, [rip + "??_C@_0CE@INGBOAEG@An?5error?5occurred?5during?5assignm@"]
	mov	edx, 35
	jmp	.LBB250_2
.LBB250_1:
	lea	r9, [rip + "??_C@_0BM@KHAALKKJ@A?5JSON?5parse?5error?5occurred?$AA@"]
	mov	edx, 27
.LBB250_2:
	mov	rcx, rsi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",one_only,"?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gtype_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gtype_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gtype_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gtype_error@json@boost@@UEAAPEAXI@Z": # @"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin98:
.seh_proc "??_Gtype_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp314:
	call	__std_exception_destroy
.Ltmp315:
# %bb.1:
	test	edi, edi
	je	.LBB251_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB251_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gtype_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gtype_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gtype_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gtype_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB251_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end98:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gtype_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gtype_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gtype_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gtype_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gtype_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gtype_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin98@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp314@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp315@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "?what@exception@std@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.globl	"?what@exception@std@@UEBAPEBDXZ" # -- Begin function ?what@exception@std@@UEBAPEBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UEBAPEBDXZ":      # @"?what@exception@std@@UEBAPEBDXZ"
# %bb.0:
	mov	rcx, qword ptr [rcx + 8]
	test	rcx, rcx
	lea	rax, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	cmovne	rax, rcx
	ret
                                        # -- End function
	.def	 "??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin99:
.seh_proc "??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp316:
	call	__std_exception_destroy
.Ltmp317:
# %bb.1:
	test	edi, edi
	je	.LBB253_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB253_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gnumber_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gnumber_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gnumber_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB253_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end99:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gnumber_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin99@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp316@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp317@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Garray_index_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Garray_index_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Garray_index_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Garray_index_error@json@boost@@UEAAPEAXI@Z": # @"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin100:
.seh_proc "??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp318:
	call	__std_exception_destroy
.Ltmp319:
# %bb.1:
	test	edi, edi
	je	.LBB254_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB254_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Garray_index_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Garray_index_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Garray_index_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Garray_index_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB254_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end100:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Garray_index_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Garray_index_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Garray_index_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Garray_index_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Garray_index_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Garray_index_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin100@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp318@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp319@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Garray_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Garray_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Garray_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Garray_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin101:
.seh_proc "??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp320:
	call	__std_exception_destroy
.Ltmp321:
# %bb.1:
	test	edi, edi
	je	.LBB255_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB255_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Garray_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Garray_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Garray_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Garray_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB255_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end101:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Garray_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Garray_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Garray_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Garray_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Garray_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Garray_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin101@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp320@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp321@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Garray_too_large@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Garray_too_large@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Garray_too_large@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Garray_too_large@json@boost@@UEAAPEAXI@Z": # @"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin102:
.seh_proc "??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp322:
	call	__std_exception_destroy
.Ltmp323:
# %bb.1:
	test	edi, edi
	je	.LBB256_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB256_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Garray_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Garray_too_large@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Garray_too_large@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Garray_too_large@json@boost@@UEAAPEAXI@Z@4HA"
.LBB256_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end102:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Garray_too_large@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Garray_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Garray_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Garray_too_large@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Garray_too_large@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Garray_too_large@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin102@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp322@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp323@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gbool_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gbool_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin103:
.seh_proc "??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp324:
	call	__std_exception_destroy
.Ltmp325:
# %bb.1:
	test	edi, edi
	je	.LBB257_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB257_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gbool_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gbool_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbool_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gbool_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB257_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end103:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gbool_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gbool_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gbool_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gbool_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gbool_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gbool_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin103@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp324@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp325@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z": # @"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin104:
.seh_proc "??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp326:
	call	__std_exception_destroy
.Ltmp327:
# %bb.1:
	test	edi, edi
	je	.LBB258_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB258_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gchar_pos_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gchar_pos_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gchar_pos_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB258_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end104:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gchar_pos_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin104@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp326@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp327@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin105:
.seh_proc "??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp328:
	call	__std_exception_destroy
.Ltmp329:
# %bb.1:
	test	edi, edi
	je	.LBB259_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB259_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gdouble_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gdouble_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gdouble_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB259_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end105:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gdouble_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin105@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp328@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp329@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gint64_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gint64_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin106:
.seh_proc "??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp330:
	call	__std_exception_destroy
.Ltmp331:
# %bb.1:
	test	edi, edi
	je	.LBB260_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB260_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gint64_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gint64_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gint64_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gint64_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB260_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end106:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gint64_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gint64_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gint64_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gint64_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gint64_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gint64_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin106@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp330@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp331@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gkey_not_found@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gkey_not_found@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z": # @"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin107:
.seh_proc "??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp332:
	call	__std_exception_destroy
.Ltmp333:
# %bb.1:
	test	edi, edi
	je	.LBB261_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB261_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gkey_not_found@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gkey_not_found@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gkey_not_found@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gkey_not_found@json@boost@@UEAAPEAXI@Z@4HA"
.LBB261_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end107:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gkey_not_found@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gkey_not_found@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gkey_not_found@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gkey_not_found@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gkey_not_found@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gkey_not_found@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin107@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp332@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp333@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gkey_too_large@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gkey_too_large@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z": # @"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin108:
.seh_proc "??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp334:
	call	__std_exception_destroy
.Ltmp335:
# %bb.1:
	test	edi, edi
	je	.LBB262_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB262_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gkey_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gkey_too_large@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gkey_too_large@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gkey_too_large@json@boost@@UEAAPEAXI@Z@4HA"
.LBB262_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end108:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gkey_too_large@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gkey_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gkey_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gkey_too_large@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gkey_too_large@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gkey_too_large@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin108@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp334@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp335@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gobject_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gobject_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin109:
.seh_proc "??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp336:
	call	__std_exception_destroy
.Ltmp337:
# %bb.1:
	test	edi, edi
	je	.LBB263_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB263_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gobject_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gobject_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gobject_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gobject_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB263_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end109:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gobject_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gobject_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gobject_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gobject_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gobject_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gobject_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin109@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp336@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp337@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gobject_too_large@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gobject_too_large@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z": # @"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin110:
.seh_proc "??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp338:
	call	__std_exception_destroy
.Ltmp339:
# %bb.1:
	test	edi, edi
	je	.LBB264_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB264_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gobject_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gobject_too_large@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gobject_too_large@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gobject_too_large@json@boost@@UEAAPEAXI@Z@4HA"
.LBB264_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end110:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gobject_too_large@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gobject_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gobject_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gobject_too_large@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gobject_too_large@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gobject_too_large@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin110@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp338@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp339@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gstack_overflow@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gstack_overflow@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z": # @"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin111:
.seh_proc "??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp340:
	call	__std_exception_destroy
.Ltmp341:
# %bb.1:
	test	edi, edi
	je	.LBB265_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB265_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gstack_overflow@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gstack_overflow@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gstack_overflow@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gstack_overflow@json@boost@@UEAAPEAXI@Z@4HA"
.LBB265_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end111:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gstack_overflow@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gstack_overflow@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gstack_overflow@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gstack_overflow@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gstack_overflow@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gstack_overflow@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin111@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp340@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp341@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gstring_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gstring_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin112:
.seh_proc "??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp342:
	call	__std_exception_destroy
.Ltmp343:
# %bb.1:
	test	edi, edi
	je	.LBB266_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB266_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gstring_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gstring_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gstring_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gstring_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB266_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end112:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gstring_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gstring_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gstring_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gstring_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gstring_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gstring_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin112@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp342@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp343@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gstring_too_large@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gstring_too_large@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z": # @"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin113:
.seh_proc "??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp344:
	call	__std_exception_destroy
.Ltmp345:
# %bb.1:
	test	edi, edi
	je	.LBB267_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB267_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gstring_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gstring_too_large@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gstring_too_large@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gstring_too_large@json@boost@@UEAAPEAXI@Z@4HA"
.LBB267_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end113:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gstring_too_large@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gstring_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gstring_too_large@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gstring_too_large@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gstring_too_large@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gstring_too_large@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin113@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp344@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp345@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Guint64_required_error@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Guint64_required_error@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z": # @"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
.Lfunc_begin114:
.seh_proc "??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp346:
	call	__std_exception_destroy
.Ltmp347:
# %bb.1:
	test	edi, edi
	je	.LBB268_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB268_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Guint64_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Guint64_required_error@json@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Guint64_required_error@json@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Guint64_required_error@json@boost@@UEAAPEAXI@Z@4HA"
.LBB268_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end114:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Guint64_required_error@json@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Guint64_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Guint64_required_error@json@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Guint64_required_error@json@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Guint64_required_error@json@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Guint64_required_error@json@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin114@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp346@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp347@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z": # @"??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z"
.seh_proc "??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7monotonic_resource@json@boost@@6B@"]
	mov	qword ptr [rcx], rax
	mov	rcx, qword ptr [rcx + 16]
	test	rcx, rcx
	je	.LBB269_2
	.p2align	4, 0x90
.LBB269_1:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, qword ptr [rcx + 8]
	call	"??3@YAXPEAX@Z"
	mov	rcx, rbx
	test	rbx, rbx
	jne	.LBB269_1
.LBB269_2:
	test	edi, edi
	je	.LBB269_4
# %bb.3:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB269_4:
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gstatic_resource@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gstatic_resource@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gstatic_resource@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gstatic_resource@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gstatic_resource@json@boost@@UEAAPEAXI@Z": # @"??_Gstatic_resource@json@boost@@UEAAPEAXI@Z"
.seh_proc "??_Gstatic_resource@json@boost@@UEAAPEAXI@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	test	edx, edx
	je	.LBB270_2
# %bb.1:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB270_2:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gstatic_resource@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"
	.p2align	4, 0x90         # -- Begin function ??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ
"??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ": # @"??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"
# %bb.0:
	ret
                                        # -- End function
	.def	 "??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z"
	.globl	"??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z": # @"??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z"
.seh_proc "??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	test	edx, edx
	je	.LBB272_2
# %bb.1:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB272_2:
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z"
	.globl	"?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z" # -- Begin function ?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z
	.p2align	4, 0x90
"?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z": # @"?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z"
# %bb.0:
	mov	rcx, rdx
	jmp	"??2@YAPEAX_K@Z"        # TAILCALL
                                        # -- End function
	.def	 "?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z"
	.globl	"?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z" # -- Begin function ?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z
	.p2align	4, 0x90
"?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z": # @"?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z"
# %bb.0:
	mov	rcx, rdx
	jmp	"??3@YAXPEAX@Z"         # TAILCALL
                                        # -- End function
	.def	 "?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z"
	.globl	"?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z" # -- Begin function ?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z
	.p2align	4, 0x90
"?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z": # @"?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z"
# %bb.0:
	cmp	rcx, rdx
	sete	al
	ret
                                        # -- End function
	.def	 "?name@system_error_category@detail@system@boost@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?name@system_error_category@detail@system@boost@@UEBAPEBDXZ"
	.globl	"?name@system_error_category@detail@system@boost@@UEBAPEBDXZ" # -- Begin function ?name@system_error_category@detail@system@boost@@UEBAPEBDXZ
	.p2align	4, 0x90
"?name@system_error_category@detail@system@boost@@UEBAPEBDXZ": # @"?name@system_error_category@detail@system@boost@@UEBAPEBDXZ"
# %bb.0:
	lea	rax, [rip + "??_C@_06FHFOAHML@system?$AA@"]
	ret
                                        # -- End function
	.def	 "?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z"
	.globl	"?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z" # -- Begin function ?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z
	.p2align	4, 0x90
"?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z": # @"?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z"
.seh_proc "?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rdx
	mov	rcx, rdx
	mov	edx, r8d
	call	"?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z"
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.globl	"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z" # -- Begin function ?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z
	.p2align	4, 0x90
"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z": # @"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
.Lfunc_begin115:
.seh_proc "?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, r8
	test	r9, r9
	je	.LBB278_13
# %bb.1:
	mov	rbx, r9
	cmp	r9, 1
	jne	.LBB278_3
# %bb.2:
	mov	byte ptr [rsi], 0
	jmp	.LBB278_13
.LBB278_3:
	mov	edi, edx
.Ltmp348:
	mov	dword ptr [rsp + 40], ebx
	mov	qword ptr [rsp + 32], rsi
	mov	qword ptr [rsp + 48], 0
	mov	ecx, 4608
	xor	edx, edx
	mov	r8d, edi
	mov	r9d, 1024
	call	qword ptr [rip + __imp_FormatMessageA]
.Ltmp349:
# %bb.4:
	test	eax, eax
	je	.LBB278_12
# %bb.5:
	jle	.LBB278_13
# %bb.6:
	mov	eax, eax
	add	rax, 1
	jmp	.LBB278_7
	.p2align	4, 0x90
.LBB278_14:                             #   in Loop: Header=BB278_7 Depth=1
	mov	byte ptr [rsi + rax - 2], 0
	add	rax, -1
	cmp	rax, 1
	jle	.LBB278_13
.LBB278_7:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi + rax - 2]
	cmp	cl, 10
	je	.LBB278_14
# %bb.8:                                #   in Loop: Header=BB278_7 Depth=1
	cmp	cl, 13
	je	.LBB278_14
# %bb.9:
	cmp	cl, 46
	jne	.LBB278_13
# %bb.10:
	mov	byte ptr [rsi + rax - 2], 0
	jmp	.LBB278_13
.LBB278_12:
.Ltmp350:
	lea	r8, [rip + "??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@"]
	mov	rcx, rsi
	mov	rdx, rbx
	mov	r9d, edi
	call	snprintf
.Ltmp351:
.LBB278_13:
	mov	rax, rsi
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL
	.section	.text,"xr",discard,"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.def	 "?dtor$11@?0??message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA":
.seh_proc "?dtor$11@?0??message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"
.LBB278_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end115:
	.seh_handlerdata
	.section	.text,"xr",discard,"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.p2align	2
"$cppxdata$?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0??message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"@IMGREL # Action
"$ip2state$?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	.Lfunc_begin115@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp348@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp351@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
                                        # -- End function
	.def	 "?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.globl	"?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z" # -- Begin function ?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	.p2align	4, 0x90
"?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z": # @"?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
.seh_proc "?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rdx
	mov	rcx, rdx
	mov	edx, r8d
	call	"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	mov	rax, rsi
	add	rsp, 32
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z"
	.globl	"?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z" # -- Begin function ?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z
	.p2align	4, 0x90
"?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z": # @"?system_category_default_error_condition_win32@detail@system@boost@@YA?AVerror_condition@23@H@Z"
# %bb.0:
	mov	rax, rcx
	mov	ecx, edx
	and	ecx, -1610678272
	cmp	ecx, -2147024896
	movzx	ecx, dx
	cmovne	ecx, edx
	cmp	ecx, 1235
	jle	.LBB280_5
# %bb.1:
	cmp	ecx, 2403
	jle	.LBB280_8
# %bb.2:
	lea	edx, [rcx - 10004]
	cmp	edx, 61
	ja	.LBB280_25
# %bb.3:
	lea	r8, [rip + .LJTI280_2]
	movsxd	rdx, dword ptr [r8 + 4*rdx]
	add	rdx, r8
	jmp	rdx
.LBB280_4:
	mov	dword ptr [rax], 4
	jmp	.LBB280_58
.LBB280_5:
	cmp	ecx, 267
	ja	.LBB280_11
# %bb.6:
	mov	edx, ecx
	lea	r8, [rip + .LJTI280_0]
	movsxd	rdx, dword ptr [r8 + 4*rdx]
	add	rdx, r8
	jmp	rdx
.LBB280_7:
	mov	dword ptr [rax], 13
	jmp	.LBB280_58
.LBB280_8:
	cmp	ecx, 1236
	je	.LBB280_16
# %bb.9:
	cmp	ecx, 1237
	je	.LBB280_17
# %bb.10:
	cmp	ecx, 2401
	je	.LBB280_26
	jmp	.LBB280_52
.LBB280_11:
	lea	edx, [rcx - 995]
	cmp	edx, 18
	ja	.LBB280_52
# %bb.12:
	lea	r8, [rip + .LJTI280_1]
	movsxd	rdx, dword ptr [r8 + 4*rdx]
	add	rdx, r8
	jmp	rdx
.LBB280_13:
	mov	dword ptr [rax], 5
	jmp	.LBB280_58
.LBB280_14:
	mov	dword ptr [rax], 22
	jmp	.LBB280_58
.LBB280_15:
	mov	dword ptr [rax], 19
	jmp	.LBB280_58
.LBB280_16:
	mov	dword ptr [rax], 106
	jmp	.LBB280_58
.LBB280_17:
	mov	dword ptr [rax], 11
	jmp	.LBB280_58
.LBB280_18:
	mov	dword ptr [rax], 24
	jmp	.LBB280_58
.LBB280_19:
	mov	dword ptr [rax], 38
	jmp	.LBB280_58
.LBB280_20:
	mov	dword ptr [rax], 2
	jmp	.LBB280_58
.LBB280_21:
	mov	dword ptr [rax], 12
	jmp	.LBB280_58
.LBB280_22:
	mov	dword ptr [rax], 28
	jmp	.LBB280_58
.LBB280_23:
	mov	dword ptr [rax], 17
	jmp	.LBB280_58
.LBB280_24:
	mov	dword ptr [rax], 39
	jmp	.LBB280_58
.LBB280_25:
	cmp	ecx, 2404
	jne	.LBB280_52
.LBB280_26:
	mov	dword ptr [rax], 16
	jmp	.LBB280_58
.LBB280_27:
	mov	dword ptr [rax], 9
	jmp	.LBB280_58
.LBB280_28:
	mov	dword ptr [rax], 14
	jmp	.LBB280_58
.LBB280_29:
	mov	dword ptr [rax], 140
	jmp	.LBB280_58
.LBB280_30:
	mov	dword ptr [rax], 112
	jmp	.LBB280_58
.LBB280_31:
	mov	dword ptr [rax], 103
	jmp	.LBB280_58
.LBB280_32:
	mov	dword ptr [rax], 128
	jmp	.LBB280_58
.LBB280_33:
	mov	dword ptr [rax], 109
	jmp	.LBB280_58
.LBB280_34:
	mov	dword ptr [rax], 115
	jmp	.LBB280_58
.LBB280_35:
	mov	dword ptr [rax], 136
	jmp	.LBB280_58
.LBB280_36:
	mov	dword ptr [rax], 123
	jmp	.LBB280_58
.LBB280_37:
	mov	dword ptr [rax], 135
	jmp	.LBB280_58
.LBB280_38:
	mov	dword ptr [rax], 130
	jmp	.LBB280_58
.LBB280_39:
	mov	dword ptr [rax], 102
	jmp	.LBB280_58
.LBB280_40:
	mov	dword ptr [rax], 100
	jmp	.LBB280_58
.LBB280_41:
	mov	dword ptr [rax], 101
	jmp	.LBB280_58
.LBB280_42:
	mov	dword ptr [rax], 116
	jmp	.LBB280_58
.LBB280_43:
	mov	dword ptr [rax], 118
	jmp	.LBB280_58
.LBB280_44:
	mov	dword ptr [rax], 117
	jmp	.LBB280_58
.LBB280_45:
	mov	dword ptr [rax], 108
	jmp	.LBB280_58
.LBB280_46:
	mov	dword ptr [rax], 119
	jmp	.LBB280_58
.LBB280_47:
	mov	dword ptr [rax], 113
	jmp	.LBB280_58
.LBB280_48:
	mov	dword ptr [rax], 126
	jmp	.LBB280_58
.LBB280_49:
	mov	dword ptr [rax], 138
	jmp	.LBB280_58
.LBB280_50:
	mov	dword ptr [rax], 107
	jmp	.LBB280_58
.LBB280_51:
	mov	dword ptr [rax], 110
	jmp	.LBB280_58
.LBB280_52:
	mov	dword ptr [rax], ecx
	test	ecx, ecx
	setne	byte ptr [rax + 4]
	lea	rcx, [rip + "?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"]
	mov	qword ptr [rax + 8], rcx
	ret
.LBB280_53:
	mov	dword ptr [rax], 0
	mov	byte ptr [rax + 4], 0
	jmp	.LBB280_59
.LBB280_54:
	mov	dword ptr [rax], 40
	jmp	.LBB280_58
.LBB280_55:
	mov	dword ptr [rax], 18
	jmp	.LBB280_58
.LBB280_56:
	mov	dword ptr [rax], 41
	jmp	.LBB280_58
.LBB280_57:
	mov	dword ptr [rax], 105
.LBB280_58:
	mov	byte ptr [rax + 4], 1
.LBB280_59:
	lea	rcx, [rip + "?generic_category_instance@?$cat_holder@X@detail@system@boost@@2Vgeneric_error_category@234@B"]
	mov	qword ptr [rax + 8], rcx
	ret
	.p2align	2, 0x90
.LJTI280_0:
	.long	.LBB280_53-.LJTI280_0
	.long	.LBB280_54-.LJTI280_0
	.long	.LBB280_20-.LJTI280_0
	.long	.LBB280_20-.LJTI280_0
	.long	.LBB280_18-.LJTI280_0
	.long	.LBB280_7-.LJTI280_0
	.long	.LBB280_14-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_21-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_7-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_21-.LJTI280_0
	.long	.LBB280_15-.LJTI280_0
	.long	.LBB280_7-.LJTI280_0
	.long	.LBB280_55-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_7-.LJTI280_0
	.long	.LBB280_15-.LJTI280_0
	.long	.LBB280_17-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_13-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_13-.LJTI280_0
	.long	.LBB280_13-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_7-.LJTI280_0
	.long	.LBB280_24-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_22-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_15-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_23-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_7-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_13-.LJTI280_0
	.long	.LBB280_19-.LJTI280_0
	.long	.LBB280_22-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_14-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_14-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_26-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_56-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_26-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_23-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_24-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_52-.LJTI280_0
	.long	.LBB280_14-.LJTI280_0
.LJTI280_1:
	.long	.LBB280_57-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_7-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_52-.LJTI280_1
	.long	.LBB280_13-.LJTI280_1
	.long	.LBB280_13-.LJTI280_1
	.long	.LBB280_13-.LJTI280_1
.LJTI280_2:
	.long	.LBB280_4-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_27-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_7-.LJTI280_2
	.long	.LBB280_28-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_14-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_18-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_29-.LJTI280_2
	.long	.LBB280_30-.LJTI280_2
	.long	.LBB280_31-.LJTI280_2
	.long	.LBB280_32-.LJTI280_2
	.long	.LBB280_33-.LJTI280_2
	.long	.LBB280_34-.LJTI280_2
	.long	.LBB280_35-.LJTI280_2
	.long	.LBB280_36-.LJTI280_2
	.long	.LBB280_37-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_38-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_39-.LJTI280_2
	.long	.LBB280_40-.LJTI280_2
	.long	.LBB280_41-.LJTI280_2
	.long	.LBB280_42-.LJTI280_2
	.long	.LBB280_43-.LJTI280_2
	.long	.LBB280_44-.LJTI280_2
	.long	.LBB280_16-.LJTI280_2
	.long	.LBB280_45-.LJTI280_2
	.long	.LBB280_46-.LJTI280_2
	.long	.LBB280_47-.LJTI280_2
	.long	.LBB280_48-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_49-.LJTI280_2
	.long	.LBB280_50-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_19-.LJTI280_2
	.long	.LBB280_52-.LJTI280_2
	.long	.LBB280_51-.LJTI280_2
                                        # -- End function
	.def	 snprintf;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,snprintf
	.globl	snprintf                # -- Begin function snprintf
	.p2align	4, 0x90
snprintf:                               # @snprintf
.seh_proc snprintf
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	r14, r8
	mov	rdi, rdx
	mov	rbx, rcx
	mov	qword ptr [rsp + 136], r9
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	lea	rsi, [rsp + 136]
	mov	qword ptr [rsp + 56], rsi
	call	__local_stdio_printf_options
	mov	rcx, qword ptr [rax]
	or	rcx, 2
	mov	qword ptr [rsp + 40], rsi
	mov	qword ptr [rsp + 32], 0
	mov	rdx, rbx
	mov	r8, rdi
	mov	r9, r14
	call	qword ptr [rip + __imp___stdio_common_vsprintf]
	mov	esi, eax
	cmp	eax, -2
	mov	eax, -1
	cmovle	esi, eax
	mov	rcx, qword ptr [rsp + 64]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	eax, esi
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,snprintf
	.seh_endproc
                                        # -- End function
	.def	 __local_stdio_printf_options;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,__local_stdio_printf_options
	.globl	__local_stdio_printf_options # -- Begin function __local_stdio_printf_options
	.p2align	4, 0x90
__local_stdio_printf_options:           # @__local_stdio_printf_options
# %bb.0:
	lea	rax, [rip + "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"]
	ret
                                        # -- End function
	.def	 "?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.globl	"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z" # -- Begin function ?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	.p2align	4, 0x90
"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z": # @"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
.Lfunc_begin116:
.seh_proc "?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 160
	.seh_stackalloc 160
	lea	rbp, [rsp + 128]
	.seh_setframe rbp, 128
	.seh_endprologue
	mov	qword ptr [rbp + 24], -2
	mov	edi, edx
	mov	r14, rcx
	mov	qword ptr [rbp - 16], 0
	lea	rax, [rbp - 16]
	mov	qword ptr [rsp + 32], rax
	mov	qword ptr [rsp + 48], 0
	mov	dword ptr [rsp + 40], 0
	mov	ecx, 4864
	xor	edx, edx
	mov	r8d, edi
	mov	r9d, 1024
	call	qword ptr [rip + __imp_FormatMessageW]
	test	eax, eax
	je	.LBB283_1
# %bb.3:
	mov	r8, qword ptr [rbp - 16]
.Ltmp352:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rsp + 48], xmm0
	mov	dword ptr [rsp + 40], 0
	mov	qword ptr [rsp + 32], 0
	xor	ecx, ecx
	xor	edx, edx
	mov	qword ptr [rbp - 24], r8 # 8-byte Spill
	mov	r9d, -1
	call	qword ptr [rip + __imp_WideCharToMultiByte]
.Ltmp353:
# %bb.4:
	mov	ebx, eax
	test	eax, eax
	je	.LBB283_5
# %bb.10:
	movsxd	rsi, ebx
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rbp + 8], xmm0
	mov	byte ptr [rbp - 8], 0
	cmp	ebx, 15
	jbe	.LBB283_11
# %bb.12:
.Ltmp354:
	lea	rcx, [rbp - 8]
	mov	rdx, rsi
	xor	r9d, r9d
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
.Ltmp355:
# %bb.13:
	cmp	qword ptr [rbp + 16], 15
	jbe	.LBB283_14
.LBB283_15:
	mov	rax, qword ptr [rbp - 8]
	jmp	.LBB283_16
.LBB283_1:
	lea	r8, [rip + "??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@"]
	lea	rsi, [rbp - 64]
	mov	edx, 38
	mov	rcx, rsi
	mov	r9d, edi
	call	snprintf
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [r14 + 16], xmm0
	mov	byte ptr [r14], 0
	mov	rcx, rsi
	call	strlen
	mov	rsi, rax
	cmp	rax, 15
	jbe	.LBB283_2
# %bb.61:
	lea	r9, [rbp - 64]
	mov	rcx, r14
	mov	rdx, rsi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	jmp	.LBB283_62
.LBB283_5:
.Ltmp366:
	lea	r8, [rip + "??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@"]
	lea	rcx, [rbp - 64]
	mov	edx, 38
	mov	r9d, edi
	call	snprintf
.Ltmp367:
# %bb.6:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [r14 + 16], xmm0
	mov	byte ptr [r14], 0
	lea	rcx, [rbp - 64]
	call	strlen
	mov	rsi, rax
	cmp	rax, 15
	jbe	.LBB283_7
# %bb.9:
.Ltmp368:
	lea	r9, [rbp - 64]
	mov	rcx, r14
	mov	rdx, rsi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
.Ltmp369:
	jmp	.LBB283_8
.LBB283_11:
	mov	qword ptr [rbp + 8], rsi
	lea	rcx, [rbp - 8]
	xor	edx, edx
	mov	r8, rsi
	call	memset
	mov	byte ptr [rbp + rsi - 8], 0
	cmp	qword ptr [rbp + 16], 15
	ja	.LBB283_15
.LBB283_14:
	lea	rax, [rbp - 8]
.LBB283_16:
	mov	r8, qword ptr [rbp - 16]
.Ltmp356:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rsp + 48], xmm0
	mov	dword ptr [rsp + 40], ebx
	mov	qword ptr [rsp + 32], rax
	xor	ecx, ecx
	xor	edx, edx
	mov	r9d, -1
	call	qword ptr [rip + __imp_WideCharToMultiByte]
                                        # kill: def $eax killed $eax def $rax
.Ltmp357:
# %bb.17:
	test	eax, eax
	je	.LBB283_28
# %bb.18:
	cmp	eax, 2
	jl	.LBB283_19
# %bb.20:
	cmp	qword ptr [rbp + 16], 15
	jbe	.LBB283_21
# %bb.22:
	mov	rcx, qword ptr [rbp - 8]
	jmp	.LBB283_23
.LBB283_2:
	mov	qword ptr [r14 + 16], rsi
	lea	rdx, [rbp - 64]
	mov	rcx, r14
	mov	r8, rsi
	call	memcpy
	mov	byte ptr [r14 + rsi], 0
	jmp	.LBB283_62
.LBB283_28:
.Ltmp360:
	lea	r8, [rip + "??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@"]
	lea	rcx, [rbp - 64]
	mov	edx, 38
	mov	r9d, edi
	call	snprintf
.Ltmp361:
# %bb.29:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [r14 + 16], xmm0
	mov	byte ptr [r14], 0
	lea	rcx, [rbp - 64]
	call	strlen
	mov	rsi, rax
	cmp	rax, 15
	jbe	.LBB283_30
# %bb.44:
.Ltmp362:
	lea	r9, [rbp - 64]
	mov	rcx, r14
	mov	rdx, rsi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
.Ltmp363:
	jmp	.LBB283_45
.LBB283_19:
	add	eax, -1
	jmp	.LBB283_32
.LBB283_7:
	mov	qword ptr [r14 + 16], rsi
	lea	rdx, [rbp - 64]
	mov	rcx, r14
	mov	r8, rsi
	call	memcpy
	mov	byte ptr [r14 + rsi], 0
	jmp	.LBB283_8
.LBB283_30:
	mov	qword ptr [r14 + 16], rsi
	lea	rdx, [rbp - 64]
	mov	rcx, r14
	mov	r8, rsi
	call	memcpy
	mov	byte ptr [r14 + rsi], 0
.LBB283_45:
	mov	rax, qword ptr [rbp + 16]
	cmp	rax, 16
	jb	.LBB283_8
# %bb.46:
	mov	rcx, qword ptr [rbp - 8]
	lea	rdx, [rax + 1]
	cmp	rdx, 4096
	jb	.LBB283_52
# %bb.47:
	mov	rbx, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rbx
	cmp	rcx, 32
	jae	.LBB283_48
# %bb.51:
	add	rax, 40
	mov	rdx, rax
	mov	rcx, rbx
.LBB283_52:
	call	"??3@YAXPEAX_K@Z"
	jmp	.LBB283_8
.LBB283_21:
	lea	rcx, [rbp - 8]
.LBB283_23:
	mov	eax, eax
	jmp	.LBB283_24
	.p2align	4, 0x90
.LBB283_26:                             #   in Loop: Header=BB283_24 Depth=1
	cmp	rax, 2
	lea	rax, [rax - 1]
	jle	.LBB283_27
.LBB283_24:                             # =>This Inner Loop Header: Depth=1
	lea	edx, [rax - 2]
	movsxd	rdx, edx
	movzx	edx, byte ptr [rcx + rdx]
	cmp	dl, 13
	je	.LBB283_26
# %bb.25:                               #   in Loop: Header=BB283_24 Depth=1
	cmp	dl, 10
	je	.LBB283_26
# %bb.31:
	lea	ecx, [rax - 1]
	add	eax, -2
	cmp	dl, 46
	cmovne	eax, ecx
	jmp	.LBB283_32
.LBB283_27:
	xor	eax, eax
.LBB283_32:
	movsxd	rsi, eax
	mov	rcx, qword ptr [rbp + 8]
	cmp	rcx, rsi
	jae	.LBB283_33
# %bb.37:
	mov	r8, rsi
	sub	r8, rcx
	mov	rax, qword ptr [rbp + 16]
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, r8
	jae	.LBB283_38
# %bb.42:
.Ltmp358:
	mov	byte ptr [rsp + 32], 0
	lea	rcx, [rbp - 8]
	mov	rdx, r8
	mov	r9, r8
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
.Ltmp359:
	jmp	.LBB283_43
.LBB283_33:
	cmp	qword ptr [rbp + 16], 15
	jbe	.LBB283_34
# %bb.35:
	mov	rax, qword ptr [rbp - 8]
	jmp	.LBB283_36
.LBB283_38:
	mov	qword ptr [rbp + 8], rsi
	cmp	rax, 15
	jbe	.LBB283_39
# %bb.40:
	mov	rdi, qword ptr [rbp - 8]
	jmp	.LBB283_41
.LBB283_34:
	lea	rax, [rbp - 8]
.LBB283_36:
	mov	qword ptr [rbp + 8], rsi
	mov	byte ptr [rax + rsi], 0
	jmp	.LBB283_43
.LBB283_39:
	lea	rdi, [rbp - 8]
.LBB283_41:
	add	rcx, rdi
	xor	edx, edx
	call	memset
	mov	byte ptr [rdi + rsi], 0
.LBB283_43:
	movups	xmm0, xmmword ptr [rbp - 8]
	mov	rax, qword ptr [rbp + 8]
	mov	qword ptr [r14 + 16], rax
	mov	rax, qword ptr [rbp + 16]
	mov	qword ptr [r14 + 24], rax
	movups	xmmword ptr [r14], xmm0
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rbp + 8], xmm0
	mov	byte ptr [rbp - 8], 0
.LBB283_8:
.Ltmp370:
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	qword ptr [rip + __imp_LocalFree]
.Ltmp371:
.LBB283_62:
	mov	rax, r14
	add	rsp, 160
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB283_48:
.Ltmp364:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp365:
# %bb.49:
	.seh_handlerdata
	.long	("$cppxdata$?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z")@IMGREL
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
	.def	 "?dtor$50@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$50@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA":
.seh_proc "?dtor$50@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"
.LBB283_50:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rdx + 128]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
	.def	 "?dtor$53@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA":
.seh_proc "?dtor$53@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"
.LBB283_53:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rax, qword ptr [rbp + 16]
	cmp	rax, 16
	jb	.LBB283_58
# %bb.54:
	mov	rcx, qword ptr [rbp - 8]
	lea	rdx, [rax + 1]
	cmp	rdx, 4096
	jb	.LBB283_57
# %bb.55:
	mov	rbx, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rbx
	cmp	rcx, 32
	jae	.LBB283_63
# %bb.56:
	add	rax, 40
	mov	rdx, rax
	mov	rcx, rbx
.LBB283_57:
	call	"??3@YAXPEAX_K@Z"
.LBB283_58:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rbp + 8], xmm0
	mov	byte ptr [rbp - 8], 0
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.LBB283_63:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
	.def	 "?dtor$59@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$59@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA":
.seh_proc "?dtor$59@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"
.LBB283_59:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rdx + 128]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
	.def	 "?dtor$60@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$60@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA":
.seh_proc "?dtor$60@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"
.LBB283_60:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rdx + 128]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	qword ptr [rip + __imp_LocalFree]
	nop
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end116:
	.seh_handlerdata
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.p2align	2
"$cppxdata$?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z":
	.long	429065506               # MagicNumber
	.long	4                       # MaxState
	.long	("$stateUnwindMap$?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	14                      # IPMapEntries
	.long	("$ip2state$?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z")@IMGREL # IPToStateXData
	.long	152                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z":
	.long	-1                      # ToState
	.long	"?dtor$50@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$59@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$60@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"@IMGREL # Action
	.long	2                       # ToState
	.long	"?dtor$53@?0??system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA"@IMGREL # Action
"$ip2state$?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z":
	.long	.Lfunc_begin116@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp352@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp355@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp366@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp369@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp356@IMGREL+1       # IP
	.long	3                       # ToState
	.long	.Ltmp357@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp360@IMGREL+1       # IP
	.long	3                       # ToState
	.long	.Ltmp363@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp358@IMGREL+1       # IP
	.long	3                       # ToState
	.long	.Ltmp359@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp370@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp364@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp365@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?system_category_message_win32@detail@system@boost@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
                                        # -- End function
	.def	 "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	.globl	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z" # -- Begin function ??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z
	.p2align	4, 0x90
"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z": # @"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
.Lfunc_begin117:
.seh_proc "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	test	rdx, rdx
	js	.LBB284_19
# %bb.1:
	mov	r14, r9
	mov	rdi, rdx
	mov	r12, rcx
	mov	r15, qword ptr [rcx + 24]
	mov	rax, rdx
	or	rax, 15
	movabs	rcx, -9223372036854775808
	js	.LBB284_2
# %bb.3:
	mov	rsi, r15
	shr	rsi
	movabs	r13, 9223372036854775807
	mov	rdx, rsi
	xor	rdx, r13
	cmp	rdx, r15
	jb	.LBB284_6
# %bb.4:
	add	rsi, r15
	cmp	rax, rsi
	mov	r13, rsi
	cmovae	r13, rax
	lea	rcx, [r13 + 1]
	cmp	rcx, 4096
	jb	.LBB284_7
# %bb.5:
	cmp	rcx, -39
	jb	.LBB284_6
# %bb.20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
.LBB284_2:
	movabs	r13, 9223372036854775807
.LBB284_6:
	add	rcx, 39
	call	"??2@YAPEAX_K@Z"
	lea	rbx, [rax + 39]
	and	rbx, -32
	mov	qword ptr [rbx - 8], rax
.LBB284_10:
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 24], r13
	mov	rcx, rbx
	mov	rdx, r14
	mov	r8, rdi
	call	memcpy
	mov	byte ptr [rbx + rdi], 0
	cmp	r15, 16
	jb	.LBB284_18
# %bb.11:
	lea	rdx, [r15 + 1]
	mov	rcx, qword ptr [r12]
	cmp	rdx, 4096
	jb	.LBB284_17
# %bb.12:
	mov	rax, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rax
	cmp	rcx, 32
	jae	.LBB284_13
# %bb.16:
	add	r15, 40
	mov	rdx, r15
	mov	rcx, rax
.LBB284_17:
	call	"??3@YAXPEAX_K@Z"
.LBB284_18:
	mov	qword ptr [r12], rbx
	mov	rax, r12
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB284_7:
	test	rcx, rcx
	je	.LBB284_8
# %bb.9:
	call	"??2@YAPEAX_K@Z"
	mov	rbx, rax
	jmp	.LBB284_10
.LBB284_8:
	mov	r13, -1
	xor	ebx, ebx
	jmp	.LBB284_10
.LBB284_19:
	call	"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
.LBB284_13:
.Ltmp372:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp373:
# %bb.14:
	.seh_handlerdata
	.long	("$cppxdata$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z")@IMGREL
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	.seh_endproc
	.def	 "?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z@4HA":
.seh_proc "?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z@4HA"
.LBB284_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end117:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	.p2align	2
"$cppxdata$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z@4HA"@IMGREL # Action
"$ip2state$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z":
	.long	.Lfunc_begin117@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp372@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp373@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
                                        # -- End function
	.def	 "?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
	.globl	"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ" # -- Begin function ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ
	.p2align	4, 0x90
"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ": # @"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
.seh_proc "?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	lea	rcx, [rip + "??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"]
	call	"?_Xlength_error@std@@YAXPEBD@Z"
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?_Throw_bad_array_new_length@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_bad_array_new_length@std@@YAXXZ"
	.globl	"?_Throw_bad_array_new_length@std@@YAXXZ" # -- Begin function ?_Throw_bad_array_new_length@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_bad_array_new_length@std@@YAXXZ": # @"?_Throw_bad_array_new_length@std@@YAXXZ"
.seh_proc "?_Throw_bad_array_new_length@std@@YAXXZ"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	qword ptr [rsp + 48], 0
	lea	rax, [rip + "??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"]
	mov	qword ptr [rsp + 40], rax
	lea	rax, [rip + "??_7bad_array_new_length@std@@6B@"]
	mov	qword ptr [rsp + 32], rax
	lea	rdx, [rip + "_TI3?AVbad_array_new_length@std@@"]
	lea	rcx, [rsp + 32]
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?_Throw_bad_array_new_length@std@@YAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0bad_array_new_length@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
	.globl	"??0bad_array_new_length@std@@QEAA@AEBV01@@Z" # -- Begin function ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0bad_array_new_length@std@@QEAA@AEBV01@@Z": # @"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
.Lfunc_begin118:
.seh_proc "??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp374:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp375:
# %bb.1:
	lea	rax, [rip + "??_7bad_array_new_length@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA"
.LBB287_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end118:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0bad_array_new_length@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0bad_array_new_length@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0bad_array_new_length@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0bad_array_new_length@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin118@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp374@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp375@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??0bad_alloc@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_alloc@std@@QEAA@AEBV01@@Z"
	.globl	"??0bad_alloc@std@@QEAA@AEBV01@@Z" # -- Begin function ??0bad_alloc@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0bad_alloc@std@@QEAA@AEBV01@@Z":     # @"??0bad_alloc@std@@QEAA@AEBV01@@Z"
.Lfunc_begin119:
.seh_proc "??0bad_alloc@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp376:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp377:
# %bb.1:
	lea	rax, [rip + "??_7bad_alloc@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0bad_alloc@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0bad_alloc@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA"
.LBB288_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end119:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0bad_alloc@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0bad_alloc@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0bad_alloc@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0bad_alloc@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0bad_alloc@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0bad_alloc@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0bad_alloc@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin119@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp376@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp377@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0bad_alloc@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??_Gbad_array_new_length@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
	.globl	"??_Gbad_array_new_length@std@@UEAAPEAXI@Z" # -- Begin function ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gbad_array_new_length@std@@UEAAPEAXI@Z": # @"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
.Lfunc_begin120:
.seh_proc "??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp378:
	call	__std_exception_destroy
.Ltmp379:
# %bb.1:
	test	edi, edi
	je	.LBB289_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB289_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gbad_array_new_length@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_array_new_length@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gbad_array_new_length@std@@UEAAPEAXI@Z@4HA"
.LBB289_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end120:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gbad_array_new_length@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gbad_array_new_length@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gbad_array_new_length@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gbad_array_new_length@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gbad_array_new_length@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin120@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp378@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp379@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gbad_alloc@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UEAAPEAXI@Z"
	.globl	"??_Gbad_alloc@std@@UEAAPEAXI@Z" # -- Begin function ??_Gbad_alloc@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gbad_alloc@std@@UEAAPEAXI@Z":       # @"??_Gbad_alloc@std@@UEAAPEAXI@Z"
.Lfunc_begin121:
.seh_proc "??_Gbad_alloc@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp380:
	call	__std_exception_destroy
.Ltmp381:
# %bb.1:
	test	edi, edi
	je	.LBB290_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB290_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gbad_alloc@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gbad_alloc@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_alloc@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gbad_alloc@std@@UEAAPEAXI@Z@4HA"
.LBB290_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end121:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gbad_alloc@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gbad_alloc@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gbad_alloc@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gbad_alloc@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gbad_alloc@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gbad_alloc@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gbad_alloc@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin121@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp380@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp381@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gexception@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.globl	"??_Gexception@std@@UEAAPEAXI@Z" # -- Begin function ??_Gexception@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UEAAPEAXI@Z":       # @"??_Gexception@std@@UEAAPEAXI@Z"
.Lfunc_begin122:
.seh_proc "??_Gexception@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp382:
	call	__std_exception_destroy
.Ltmp383:
# %bb.1:
	test	edi, edi
	je	.LBB291_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB291_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gexception@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gexception@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gexception@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gexception@std@@UEAAPEAXI@Z@4HA"
.LBB291_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end122:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gexception@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gexception@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gexception@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gexception@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gexception@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gexception@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gexception@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin122@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp382@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp383@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
	.globl	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z" # -- Begin function ??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z
	.p2align	4, 0x90
"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z": # @"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
.Lfunc_begin123:
.seh_proc "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	test	rdx, rdx
	js	.LBB292_19
# %bb.1:
	mov	r14d, r9d
	mov	rdi, rdx
	mov	r12, rcx
	mov	r15, qword ptr [rcx + 24]
	mov	rax, rdx
	or	rax, 15
	movabs	rcx, -9223372036854775808
	js	.LBB292_2
# %bb.3:
	mov	rsi, r15
	shr	rsi
	movabs	r13, 9223372036854775807
	mov	rdx, rsi
	xor	rdx, r13
	cmp	rdx, r15
	jb	.LBB292_6
# %bb.4:
	add	rsi, r15
	cmp	rax, rsi
	mov	r13, rsi
	cmovae	r13, rax
	lea	rcx, [r13 + 1]
	cmp	rcx, 4096
	jb	.LBB292_7
# %bb.5:
	cmp	rcx, -39
	jb	.LBB292_6
# %bb.20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
.LBB292_2:
	movabs	r13, 9223372036854775807
.LBB292_6:
	add	rcx, 39
	call	"??2@YAPEAX_K@Z"
	lea	rbx, [rax + 39]
	and	rbx, -32
	mov	qword ptr [rbx - 8], rax
.LBB292_10:
	mov	qword ptr [r12 + 16], rdi
	mov	qword ptr [r12 + 24], r13
	mov	rcx, rbx
	mov	edx, r14d
	mov	r8, rdi
	call	memset
	mov	byte ptr [rbx + rdi], 0
	cmp	r15, 16
	jb	.LBB292_18
# %bb.11:
	lea	rdx, [r15 + 1]
	mov	rcx, qword ptr [r12]
	cmp	rdx, 4096
	jb	.LBB292_17
# %bb.12:
	mov	rax, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rax
	cmp	rcx, 32
	jae	.LBB292_13
# %bb.16:
	add	r15, 40
	mov	rdx, r15
	mov	rcx, rax
.LBB292_17:
	call	"??3@YAXPEAX_K@Z"
.LBB292_18:
	mov	qword ptr [r12], rbx
	mov	rax, r12
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB292_7:
	test	rcx, rcx
	je	.LBB292_8
# %bb.9:
	call	"??2@YAPEAX_K@Z"
	mov	rbx, rax
	jmp	.LBB292_10
.LBB292_8:
	mov	r13, -1
	xor	ebx, ebx
	jmp	.LBB292_10
.LBB292_19:
	call	"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
.LBB292_13:
.Ltmp384:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp385:
# %bb.14:
	.seh_handlerdata
	.long	("$cppxdata$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z")@IMGREL
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
	.seh_endproc
	.def	 "?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z@4HA":
.seh_proc "?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z@4HA"
.LBB292_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end123:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
	.p2align	2
"$cppxdata$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z@4HA"@IMGREL # Action
"$ip2state$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z":
	.long	.Lfunc_begin123@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp384@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp385@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@0D@Z@D@Z"
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
.Lfunc_begin124:
.seh_proc "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rbx, qword ptr [rcx + 16]
	movabs	r12, 9223372036854775807
	mov	rax, r12
	sub	rax, rbx
	cmp	rax, rdx
	jb	.LBB293_19
# %bb.1:
	mov	r14, r9
	mov	rsi, rdx
	mov	r15, rcx
	add	rsi, rbx
	mov	r13, qword ptr [rcx + 24]
	mov	rax, rsi
	or	rax, 15
	movabs	rcx, -9223372036854775808
	js	.LBB293_5
# %bb.2:
	mov	rdi, r13
	shr	rdi
	movabs	r12, 9223372036854775807
	mov	rdx, rdi
	xor	rdx, r12
	cmp	rdx, r13
	jb	.LBB293_5
# %bb.3:
	add	rdi, r13
	cmp	rax, rdi
	mov	r12, rdi
	cmovae	r12, rax
	lea	rcx, [r12 + 1]
	cmp	rcx, 4096
	jb	.LBB293_6
# %bb.4:
	cmp	rcx, -39
	jae	.LBB293_20
.LBB293_5:
	add	rcx, 39
	call	"??2@YAPEAX_K@Z"
	lea	rdi, [rax + 39]
	and	rdi, -32
	mov	qword ptr [rdi - 8], rax
.LBB293_9:
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 24], r12
	cmp	r13, 16
	jb	.LBB293_17
# %bb.10:
	mov	rsi, qword ptr [r15]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8, rbx
	call	memcpy
	lea	rcx, [rdi + rbx]
	mov	dl, byte ptr [rbp + 112]
	mov	r8, r14
	call	memset
	add	rbx, r14
	mov	byte ptr [rdi + rbx], 0
	lea	rdx, [r13 + 1]
	cmp	rdx, 4096
	jb	.LBB293_16
# %bb.11:
	mov	rax, qword ptr [rsi - 8]
	add	rsi, -8
	sub	rsi, rax
	cmp	rsi, 32
	jae	.LBB293_12
# %bb.15:
	add	r13, 40
	mov	rdx, r13
	mov	rsi, rax
.LBB293_16:
	mov	rcx, rsi
	call	"??3@YAXPEAX_K@Z"
	jmp	.LBB293_18
.LBB293_17:
	mov	rcx, rdi
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	lea	rcx, [rdi + rbx]
	mov	dl, byte ptr [rbp + 112]
	mov	r8, r14
	call	memset
	add	rbx, r14
	mov	byte ptr [rdi + rbx], 0
.LBB293_18:
	mov	qword ptr [r15], rdi
	mov	rax, r15
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB293_6:
	test	rcx, rcx
	je	.LBB293_7
# %bb.8:
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	jmp	.LBB293_9
.LBB293_7:
	mov	r12, -1
	xor	edi, edi
	jmp	.LBB293_9
.LBB293_19:
	call	"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
.LBB293_12:
.Ltmp386:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp387:
# %bb.13:
.LBB293_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	int3
	.seh_handlerdata
	.long	("$cppxdata$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z")@IMGREL
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
	.seh_endproc
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z@4HA":
.seh_proc "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z@4HA"
.LBB293_14:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end124:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
	.p2align	2
"$cppxdata$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z":
	.long	-1                      # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z@4HA"@IMGREL # Action
"$ip2state$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z":
	.long	.Lfunc_begin124@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp386@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp387@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
                                        # -- End function
	.def	 "?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ"
	.globl	"?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ" # -- Begin function ?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ
	.p2align	4, 0x90
"?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ": # @"?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ"
# %bb.0:
	lea	rax, [rip + "??_C@_07DCLBNMLN@generic?$AA@"]
	ret
                                        # -- End function
	.def	 "?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.globl	"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z" # -- Begin function ?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z
	.p2align	4, 0x90
"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z": # @"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
.Lfunc_begin125:
.seh_proc "?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, r8
	test	r9, r9
	je	.LBB295_8
# %bb.1:
	mov	rdi, r9
	cmp	r9, 1
	jne	.LBB295_3
# %bb.2:
	mov	byte ptr [rsi], 0
	jmp	.LBB295_8
.LBB295_3:
.Ltmp388:
	mov	ecx, edx
	call	qword ptr [rip + __imp_strerror]
.Ltmp389:
# %bb.4:
	test	rax, rax
	je	.LBB295_5
# %bb.7:
	lea	r8, [rdi - 1]
	mov	rcx, rsi
	mov	rdx, rax
	call	qword ptr [rip + __imp_strncpy]
	mov	byte ptr [rsi + rdi - 1], 0
	jmp	.LBB295_8
.LBB295_5:
	lea	rsi, [rip + "??_C@_0O@NIPGCINC@Unknown?5error?$AA@"]
.LBB295_8:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL
	.section	.text,"xr",discard,"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.def	 "?dtor$6@?0??message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA":
.seh_proc "?dtor$6@?0??message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"
.LBB295_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end125:
	.seh_handlerdata
	.section	.text,"xr",discard,"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.p2align	2
"$cppxdata$?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z@4HA"@IMGREL # Action
"$ip2state$?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z":
	.long	.Lfunc_begin125@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp388@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp389@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
                                        # -- End function
	.def	 "?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.globl	"?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z" # -- Begin function ?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	.p2align	4, 0x90
"?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z": # @"?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
.seh_proc "?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	ecx, r8d
	mov	rsi, rdx
	call	qword ptr [rip + __imp_strerror]
	test	rax, rax
	lea	rdi, [rip + "??_C@_0O@NIPGCINC@Unknown?5error?$AA@"]
	cmovne	rdi, rax
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	byte ptr [rsi], 0
	mov	rcx, rdi
	call	strlen
	mov	rbx, rax
	cmp	rax, 15
	jbe	.LBB296_1
# %bb.2:
	mov	rcx, rsi
	mov	rdx, rbx
	mov	r9, rdi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
	jmp	.LBB296_3
.LBB296_1:
	mov	qword ptr [rsi + 16], rbx
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8, rbx
	call	memmove
	mov	byte ptr [rsi + rbx], 0
.LBB296_3:
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Ginvalid_argument@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
	.globl	"??_Ginvalid_argument@std@@UEAAPEAXI@Z" # -- Begin function ??_Ginvalid_argument@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Ginvalid_argument@std@@UEAAPEAXI@Z": # @"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
.Lfunc_begin126:
.seh_proc "??_Ginvalid_argument@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp390:
	call	__std_exception_destroy
.Ltmp391:
# %bb.1:
	test	edi, edi
	je	.LBB297_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB297_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Ginvalid_argument@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Ginvalid_argument@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Ginvalid_argument@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Ginvalid_argument@std@@UEAAPEAXI@Z@4HA"
.LBB297_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end126:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Ginvalid_argument@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Ginvalid_argument@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Ginvalid_argument@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Ginvalid_argument@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Ginvalid_argument@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Ginvalid_argument@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin126@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp390@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp391@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gout_of_range@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gout_of_range@std@@UEAAPEAXI@Z"
	.globl	"??_Gout_of_range@std@@UEAAPEAXI@Z" # -- Begin function ??_Gout_of_range@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gout_of_range@std@@UEAAPEAXI@Z":    # @"??_Gout_of_range@std@@UEAAPEAXI@Z"
.Lfunc_begin127:
.seh_proc "??_Gout_of_range@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp392:
	call	__std_exception_destroy
.Ltmp393:
# %bb.1:
	test	edi, edi
	je	.LBB298_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB298_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gout_of_range@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gout_of_range@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gout_of_range@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gout_of_range@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gout_of_range@std@@UEAAPEAXI@Z@4HA"
.LBB298_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end127:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gout_of_range@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gout_of_range@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gout_of_range@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gout_of_range@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gout_of_range@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gout_of_range@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gout_of_range@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gout_of_range@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin127@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp392@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp393@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gout_of_range@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Glength_error@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Glength_error@std@@UEAAPEAXI@Z"
	.globl	"??_Glength_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Glength_error@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Glength_error@std@@UEAAPEAXI@Z":    # @"??_Glength_error@std@@UEAAPEAXI@Z"
.Lfunc_begin128:
.seh_proc "??_Glength_error@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp394:
	call	__std_exception_destroy
.Ltmp395:
# %bb.1:
	test	edi, edi
	je	.LBB299_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB299_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Glength_error@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Glength_error@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Glength_error@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Glength_error@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Glength_error@std@@UEAAPEAXI@Z@4HA"
.LBB299_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end128:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Glength_error@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Glength_error@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Glength_error@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Glength_error@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Glength_error@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Glength_error@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Glength_error@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Glength_error@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin128@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp394@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp395@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Glength_error@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gruntime_error@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UEAAPEAXI@Z"
	.globl	"??_Gruntime_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Gruntime_error@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gruntime_error@std@@UEAAPEAXI@Z":   # @"??_Gruntime_error@std@@UEAAPEAXI@Z"
.Lfunc_begin129:
.seh_proc "??_Gruntime_error@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp396:
	call	__std_exception_destroy
.Ltmp397:
# %bb.1:
	test	edi, edi
	je	.LBB300_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB300_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Gruntime_error@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Gruntime_error@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gruntime_error@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Gruntime_error@std@@UEAAPEAXI@Z@4HA"
.LBB300_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end129:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Gruntime_error@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Gruntime_error@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Gruntime_error@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Gruntime_error@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Gruntime_error@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Gruntime_error@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Gruntime_error@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin129@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp396@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp397@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z"
	.globl	"??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z": # @"??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z"
# %bb.0:
	ud2
                                        # -- End function
	.def	 "??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
	.p2align	4, 0x90         # -- Begin function ??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z
"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z": # @"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
.Lfunc_begin130:
.seh_proc "??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp], -2
	sub	qword ptr [rcx + 16], 1
	jae	.LBB302_2
# %bb.1:
	xor	eax, eax
	jmp	.LBB302_6
.LBB302_2:
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 8]
	mov	rax, qword ptr [rsi + 24]
	add	rcx, 16
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 8], rax
	test	al, 1
	je	.LBB302_4
# %bb.3:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB302_4:
	lea	rbx, [rbp - 56]
	lea	r8, [rbp - 8]
	mov	rdx, rbx
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	mov	rax, qword ptr [rsi + 8]
	movups	xmm0, xmmword ptr [rax]
	movaps	xmmword ptr [rbp - 32], xmm0
.Ltmp398:
	lea	rdx, [rbp - 32]
	mov	rcx, rdi
	mov	r8, rbx
	call	"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
.Ltmp399:
# %bb.5:
	lea	rcx, [rbp - 56]
	call	"??1value@json@boost@@QEAA@XZ"
	add	qword ptr [rsi + 8], 56
	mov	al, 1
.LBB302_6:
                                        # kill: def $al killed $al killed $eax
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z")@IMGREL
	.section	.text,"xr",one_only,"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z@4HA":
.seh_proc "?dtor$7@?0???Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z@4HA"
.LBB302_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 96]
	.seh_endprologue
	lea	rcx, [rbp - 56]
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end130:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
	.p2align	2
"$cppxdata$??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z")@IMGREL # IPToStateXData
	.long	96                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0???Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z@4HA"@IMGREL # Action
"$ip2state$??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z":
	.long	.Lfunc_begin130@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp398@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp399@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"
                                        # -- End function
	.def	 "??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
	.globl	"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z" # -- Begin function ??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z
	.p2align	4, 0x90
"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z": # @"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
.Lfunc_begin131:
.seh_proc "??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	movups	xmm0, xmmword ptr [r8]
	movups	xmmword ptr [rcx], xmm0
	mov	rax, qword ptr [r8 + 16]
	mov	qword ptr [rcx + 16], rax
	mov	rax, qword ptr [rcx]
	test	al, 1
	je	.LBB303_2
# %bb.1:
	mov	rdx, rax
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB303_2:
	mov	qword ptr [r8], rax
	mov	byte ptr [r8 + 8], 7
	cmp	qword ptr [rsi + 8], 2147483647
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	jae	.LBB303_3
# %bb.5:
	mov	rdi, qword ptr [rcx]
	test	rdi, rdi
	je	.LBB303_7
# %bb.6:
	and	rdi, -4
	jmp	.LBB303_10
.LBB303_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	edi, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rdx, qword ptr [rdx + 8*rdi]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rdx + _Init_thread_epoch@SECREL32]
	jg	.LBB303_8
.LBB303_10:
	mov	rdx, qword ptr [rsi + 8]
	add	rdx, 1
	mov	rax, qword ptr [rdi]
.Ltmp400:
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
.Ltmp401:
# %bb.11:
	mov	rdi, rax
	mov	rdx, qword ptr [rsi]
	mov	r8, qword ptr [rsi + 8]
	mov	rcx, rax
	call	memcpy
	mov	rax, qword ptr [rsi + 8]
	mov	byte ptr [rdi + rax], 0
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rax + 24], rdi
	mov	rcx, qword ptr [rsi + 8]
	cmp	rcx, 2147483647
	jae	.LBB303_12
# %bb.14:
	mov	dword ptr [rax + 32], ecx
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB303_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB303_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB303_10
.LBB303_3:
.Ltmp404:
	call	"?raise@key_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp405:
# %bb.4:
.LBB303_12:
.Ltmp402:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp403:
# %bb.13:
	.seh_handlerdata
	.long	("$cppxdata$??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
	.seh_endproc
	.def	 "?dtor$15@?0???$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z@4HA":
.seh_proc "?dtor$15@?0???$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z@4HA"
.LBB303_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end131:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
	.p2align	2
"$cppxdata$??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0???$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z":
	.long	.Lfunc_begin131@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp400@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp401@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp404@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp403@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
                                        # -- End function
	.def	 "??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",one_only,"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
	.p2align	4, 0x90         # -- Begin function ??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z
"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z": # @"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
.Lfunc_begin132:
.seh_proc "??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	lea	rbp, [rsp + 96]
	.seh_setframe rbp, 96
	.seh_endprologue
	mov	qword ptr [rbp], -2
	sub	qword ptr [rcx + 16], 1
	jae	.LBB304_2
# %bb.1:
	xor	eax, eax
	jmp	.LBB304_6
.LBB304_2:
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 8]
	mov	rax, qword ptr [rsi + 24]
	add	rcx, 16
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 8], rax
	test	al, 1
	je	.LBB304_4
# %bb.3:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB304_4:
	lea	rbx, [rbp - 56]
	lea	r8, [rbp - 8]
	mov	rdx, rbx
	call	"?make_value@value_ref@json@boost@@AEBA?AVvalue@23@Vstorage_ptr@23@@Z"
	mov	rax, qword ptr [rsi + 8]
	movups	xmm0, xmmword ptr [rax]
	movaps	xmmword ptr [rbp - 32], xmm0
.Ltmp406:
	lea	rdx, [rbp - 32]
	mov	rcx, rdi
	mov	r8, rbx
	call	"??$?0Vvalue@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEAVvalue@12@@Z"
.Ltmp407:
# %bb.5:
	lea	rcx, [rbp - 56]
	call	"??1value@json@boost@@QEAA@XZ"
	add	qword ptr [rsi + 8], 56
	mov	al, 1
.LBB304_6:
                                        # kill: def $al killed $al killed $eax
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z")@IMGREL
	.section	.text,"xr",one_only,"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z@4HA":
.seh_proc "?dtor$7@?0???Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z@4HA"
.LBB304_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 96]
	.seh_endprologue
	lea	rcx, [rbp - 56]
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end132:
	.seh_handlerdata
	.section	.text,"xr",one_only,"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
	.p2align	2
"$cppxdata$??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z")@IMGREL # IPToStateXData
	.long	96                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0???Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z@4HA"@IMGREL # Action
"$ip2state$??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z":
	.long	.Lfunc_begin132@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp406@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp407@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",one_only,"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"
                                        # -- End function
	.def	 "?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
	.globl	"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z" # -- Begin function ?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z
	.p2align	4, 0x90
"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z": # @"?bucket_index@object_impl@detail@json@boost@@SA_K_K0@Z"
# %bb.0:
	add	rdx, -1
	cmp	rdx, 65
	ja	.LBB305_3
# %bb.1:
	lea	rax, [rip + .LJTI305_0]
	movsxd	rdx, dword ptr [rax + 4*rdx]
	add	rdx, rax
	jmp	rdx
.LBB305_2:
	movabs	rdx, -6148914691236517205
	mov	rax, rcx
	mul	rdx
	shr	rdx
	lea	rax, [rdx + 2*rdx]
	jmp	.LBB305_69
.LBB305_3:
	xor	ecx, ecx
	mov	rax, rcx
	ret
.LBB305_4:
	movabs	rdx, 2635249153387078803
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 2
	lea	rdx, [8*rax]
	sub	rax, rdx
	jmp	.LBB305_73
.LBB305_5:
	movabs	rdx, 3353953467947191203
	mov	rax, rcx
	mul	rdx
	shr	rdx
	lea	rax, [rdx + 4*rdx]
	lea	rax, [rdx + 2*rax]
	jmp	.LBB305_69
.LBB305_6:
	movabs	rdx, -1085102592571150095
	mov	rax, rcx
	mul	rdx
	shr	rdx, 4
	mov	rax, rdx
	shl	rax, 4
	add	rax, rdx
	jmp	.LBB305_69
.LBB305_7:
	movabs	rdx, 1908283869694091547
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 4
	lea	rdx, [rax + 8*rax]
	lea	rdx, [rdx + 2*rdx]
	add	rdx, rax
	add	rdx, rax
	jmp	.LBB305_64
.LBB305_8:
	movabs	rdx, 3828569524732171091
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 5
	imul	rax, rax, 53
	jmp	.LBB305_69
.LBB305_9:
	movabs	rdx, 5895351198814392785
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 6
	imul	rax, rax, 97
	jmp	.LBB305_69
.LBB305_10:
	movabs	rdx, 1529263757405973191
	mov	rax, rcx
	mul	rdx
	shr	rdx, 4
	imul	rax, rdx, 193
	jmp	.LBB305_69
.LBB305_11:
	movabs	rdx, 5832775118422300383
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 8
	imul	rax, rax, 389
	jmp	.LBB305_69
.LBB305_12:
	movabs	rdx, -6164906667026469135
	mov	rax, rcx
	mul	rdx
	shr	rdx, 9
	imul	rax, rdx, 769
	jmp	.LBB305_69
.LBB305_13:
	movabs	rdx, 6037333608051408663
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 10
	imul	rax, rax, 1543
	jmp	.LBB305_69
.LBB305_14:
	movabs	rdx, 6134935346371737855
	mov	rax, rcx
	mul	rdx
	shr	rdx, 10
	imul	rax, rdx, 3079
	jmp	.LBB305_69
.LBB305_15:
	movabs	rdx, 6141917064372811203
	mov	rax, rcx
	mul	rdx
	shr	rdx, 11
	imul	rax, rdx, 6151
	jmp	.LBB305_69
.LBB305_16:
	movabs	rdx, 192137947874914363
	mov	rax, rcx
	mul	rdx
	shr	rdx, 7
	imul	rax, rdx, 12289
	jmp	.LBB305_69
.LBB305_17:
	movabs	rdx, 6131912853355653417
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 14
	imul	rax, rax, 24593
	jmp	.LBB305_69
.LBB305_18:
	movabs	rdx, 6146412945934225969
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 15
	imul	rax, rax, 49157
	jmp	.LBB305_69
.LBB305_19:
	movabs	rdx, 6145662521581785075
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 16
	imul	rax, rax, 98317
	jmp	.LBB305_69
.LBB305_20:
	movabs	rdx, 6148758320226176167
	mov	rax, rcx
	mul	rdx
	shr	rdx, 16
	imul	rax, rdx, 196613
	jmp	.LBB305_69
.LBB305_21:
	movabs	rdx, 6148523778622418185
	mov	rax, rcx
	mul	rdx
	shr	rdx, 17
	imul	rax, rdx, 393241
	jmp	.LBB305_69
.LBB305_22:
	movabs	rdx, 6148906872497106173
	mov	rax, rcx
	mul	rdx
	shr	rdx, 18
	imul	rax, rdx, 786433
	jmp	.LBB305_69
.LBB305_23:
	movabs	rdx, -6148953784859007295
	mov	rax, rcx
	mul	rdx
	shr	rdx, 20
	imul	rax, rdx, 1572869
	jmp	.LBB305_69
.LBB305_24:
	movabs	rdx, -6148957694207586071
	mov	rax, rcx
	mul	rdx
	shr	rdx, 21
	imul	rax, rdx, 3145739
	jmp	.LBB305_69
.LBB305_25:
	movabs	rdx, -6148940102119408331
	mov	rax, rcx
	mul	rdx
	shr	rdx, 22
	imul	rax, rdx, 6291469
	jmp	.LBB305_69
.LBB305_26:
	movabs	rdx, 6148904917803709477
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 23
	imul	rax, rax, 12582917
	jmp	.LBB305_69
.LBB305_27:
	movabs	rdx, 6148896121720823495
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 24
	imul	rax, rax, 25165843
	jmp	.LBB305_69
.LBB305_28:
	movabs	rdx, 3074457040198392339
	mov	rax, rcx
	mul	rdx
	shr	rdx, 23
	imul	rax, rdx, 50331653
	jmp	.LBB305_69
.LBB305_29:
	movabs	rdx, 3074456643152656915
	mov	rax, rcx
	mul	rdx
	shr	rdx, 24
	imul	rax, rdx, 100663319
	jmp	.LBB305_69
.LBB305_30:
	movabs	rdx, 3074457055469384211
	mov	rax, rcx
	mul	rdx
	shr	rdx, 25
	imul	rax, rdx, 201326611
	jmp	.LBB305_69
.LBB305_31:
	movabs	rdx, -6148914843946463611
	mov	rax, rcx
	mul	rdx
	shr	rdx, 28
	imul	rax, rdx, 402653189
	jmp	.LBB305_69
.LBB305_32:
	movabs	rdx, -6148916050354906889
	mov	rax, rcx
	mul	rdx
	shr	rdx, 29
	imul	rax, rdx, 805306457
	jmp	.LBB305_69
.LBB305_33:
	movabs	rdx, 6148914672147773727
	mov	rax, rcx
	mul	rdx
	shr	rdx, 29
	imul	rax, rdx, 1610612741
	jmp	.LBB305_69
.LBB305_34:
	movabs	rdx, 6148914683601019793
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 31
	mov	edx, 3221225473
	jmp	.LBB305_63
.LBB305_35:
	movabs	rdx, -6148914681692145429
	mov	rax, rcx
	mul	rdx
	shr	rdx, 32
	movabs	rax, 6442450939
	jmp	.LBB305_68
.LBB305_36:
	movabs	rdx, 6148914681692145441
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 33
	movabs	rdx, 12884901893
	jmp	.LBB305_63
.LBB305_37:
	movabs	rdx, 6148914697201749567
	mov	rax, rcx
	mul	rdx
	shr	rdx, 33
	movabs	rax, 25769803751
	jmp	.LBB305_68
.LBB305_38:
	movabs	rdx, -6148914690997907911
	mov	rax, rcx
	mul	rdx
	shr	rdx, 35
	movabs	rax, 51539607551
	jmp	.LBB305_68
.LBB305_39:
	movabs	rdx, -6148914692071649735
	mov	rax, rcx
	mul	rdx
	shr	rdx, 36
	movabs	rax, 103079215111
	jmp	.LBB305_68
.LBB305_40:
	movabs	rdx, 6148914691117212559
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 37
	movabs	rdx, 206158430209
	jmp	.LBB305_63
.LBB305_41:
	movabs	rdx, 6148914689745209117
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 38
	movabs	rdx, 412316860441
	jmp	.LBB305_63
.LBB305_42:
	movabs	rdx, 3074457345621986873
	mov	rax, rcx
	mul	rdx
	shr	rdx, 37
	movabs	rax, 824633720831
	jmp	.LBB305_68
.LBB305_43:
	movabs	rdx, -6148914691139582179
	mov	rax, rcx
	mul	rdx
	shr	rdx, 40
	movabs	rax, 1649267441651
	jmp	.LBB305_68
.LBB305_44:
	movabs	rdx, -6148914691165680071
	mov	rax, rcx
	mul	rdx
	shr	rdx, 41
	movabs	rax, 3298534883309
	jmp	.LBB305_68
.LBB305_45:
	movabs	rdx, 3074457345617792569
	mov	rax, rcx
	mul	rdx
	shr	rdx, 40
	movabs	rax, 6597069766657
	jmp	.LBB305_68
.LBB305_46:
	movabs	rdx, -6148914691224400327
	mov	rax, rcx
	mul	rdx
	shr	rdx, 43
	movabs	rax, 13194139533299
	jmp	.LBB305_68
.LBB305_47:
	movabs	rdx, -6148914691236051171
	mov	rax, rcx
	mul	rdx
	shr	rdx, 44
	movabs	rax, 26388279066623
	jmp	.LBB305_68
.LBB305_48:
	movabs	rdx, 6148914691230109241
	mov	rax, rcx
	mul	rdx
	shr	rdx, 44
	movabs	rax, 52776558133303
	jmp	.LBB305_68
.LBB305_49:
	movabs	rdx, 6148914691236924985
	mov	rax, rcx
	mul	rdx
	shr	rdx, 45
	movabs	rax, 105553116266489
	jmp	.LBB305_68
.LBB305_50:
	movabs	rdx, 6148914691237187129
	mov	rax, rcx
	mul	rdx
	shr	rdx, 46
	movabs	rax, 211106232532969
	jmp	.LBB305_68
.LBB305_51:
	movabs	rdx, 6148914691236269625
	mov	rax, rcx
	mul	rdx
	shr	rdx, 47
	movabs	rax, 422212465066001
	jmp	.LBB305_68
.LBB305_52:
	movabs	rdx, -6148914691236444387
	mov	rax, rcx
	mul	rdx
	shr	rdx, 49
	movabs	rax, 844424930131963
	jmp	.LBB305_68
.LBB305_53:
	movabs	rdx, -6148914691236640995
	mov	rax, rcx
	mul	rdx
	shr	rdx, 50
	movabs	rax, 1688849860263953
	jmp	.LBB305_68
.LBB305_54:
	movabs	rdx, -6148914691236477155
	mov	rax, rcx
	mul	rdx
	shr	rdx, 51
	movabs	rax, 3377699720527861
	jmp	.LBB305_68
.LBB305_55:
	movabs	rdx, -6148914691236493539
	mov	rax, rcx
	mul	rdx
	shr	rdx, 52
	movabs	rax, 6755399441055731
	jmp	.LBB305_68
.LBB305_56:
	movabs	rdx, 6148914691236519481
	mov	rax, rcx
	mul	rdx
	shr	rdx, 52
	movabs	rax, 13510798882111483
	jmp	.LBB305_68
.LBB305_57:
	movabs	rdx, 6148914691236525625
	mov	rax, rcx
	mul	rdx
	shr	rdx, 53
	movabs	rax, 27021597764222939
	jmp	.LBB305_68
.LBB305_58:
	movabs	rdx, -6148914691236518343
	mov	rax, rcx
	mul	rdx
	shr	rdx, 55
	movabs	rax, 54043195528445957
	jmp	.LBB305_68
.LBB305_59:
	movabs	rdx, -6148914691236517091
	mov	rax, rcx
	mul	rdx
	shr	rdx, 56
	movabs	rax, 108086391056891903
	jmp	.LBB305_68
.LBB305_60:
	movabs	rdx, 3074457345618258105
	mov	rax, rcx
	mul	rdx
	shr	rdx, 55
	movabs	rax, 216172782113783843
	jmp	.LBB305_68
.LBB305_61:
	movabs	rdx, -6148914691236517347
	mov	rax, rcx
	mul	rdx
	shr	rdx, 58
	movabs	rax, 432345564227567621
	jmp	.LBB305_68
.LBB305_62:
	movabs	rdx, 6148914691236517917
	mov	rax, rcx
	mul	rdx
	mov	rax, rcx
	sub	rax, rdx
	shr	rax
	add	rax, rdx
	shr	rax, 59
	movabs	rdx, 864691128455135207
.LBB305_63:
	imul	rdx, rax
.LBB305_64:
	sub	rcx, rdx
	mov	rax, rcx
	ret
.LBB305_65:
	movabs	rdx, 6148914691236517145
	mov	rax, rcx
	mul	rdx
	shr	rdx, 59
	movabs	rax, 1729382256910270481
	jmp	.LBB305_68
.LBB305_66:
	movabs	rdx, -6148914691236517223
	mov	rax, rcx
	mul	rdx
	shr	rdx, 61
	movabs	rax, 3458764513820540933
	jmp	.LBB305_68
.LBB305_67:
	movabs	rdx, 1537228672809129291
	mov	rax, rcx
	mul	rdx
	shr	rdx, 59
	movabs	rax, 6917529027641081903
.LBB305_68:
	imul	rax, rdx
.LBB305_69:
	sub	rcx, rax
	mov	rax, rcx
	ret
.LBB305_70:
	movabs	rax, -4611686018427387887
	mov	rdx, rcx
	sub	rdx, rax
	cmovae	rcx, rdx
	mov	rax, rcx
	ret
.LBB305_71:
	mov	rax, rcx
	sub	rax, -59
	cmovae	rcx, rax
	mov	rax, rcx
	ret
.LBB305_72:
	xor	eax, eax
	cmp	rcx, -1
	sete	al
.LBB305_73:
	add	rcx, rax
	mov	rax, rcx
	ret
	.p2align	2, 0x90
.LJTI305_0:
	.long	.LBB305_2-.LJTI305_0
	.long	.LBB305_4-.LJTI305_0
	.long	.LBB305_5-.LJTI305_0
	.long	.LBB305_6-.LJTI305_0
	.long	.LBB305_7-.LJTI305_0
	.long	.LBB305_8-.LJTI305_0
	.long	.LBB305_9-.LJTI305_0
	.long	.LBB305_10-.LJTI305_0
	.long	.LBB305_11-.LJTI305_0
	.long	.LBB305_12-.LJTI305_0
	.long	.LBB305_13-.LJTI305_0
	.long	.LBB305_14-.LJTI305_0
	.long	.LBB305_15-.LJTI305_0
	.long	.LBB305_16-.LJTI305_0
	.long	.LBB305_17-.LJTI305_0
	.long	.LBB305_18-.LJTI305_0
	.long	.LBB305_19-.LJTI305_0
	.long	.LBB305_20-.LJTI305_0
	.long	.LBB305_21-.LJTI305_0
	.long	.LBB305_22-.LJTI305_0
	.long	.LBB305_23-.LJTI305_0
	.long	.LBB305_24-.LJTI305_0
	.long	.LBB305_25-.LJTI305_0
	.long	.LBB305_26-.LJTI305_0
	.long	.LBB305_27-.LJTI305_0
	.long	.LBB305_28-.LJTI305_0
	.long	.LBB305_29-.LJTI305_0
	.long	.LBB305_30-.LJTI305_0
	.long	.LBB305_31-.LJTI305_0
	.long	.LBB305_32-.LJTI305_0
	.long	.LBB305_33-.LJTI305_0
	.long	.LBB305_34-.LJTI305_0
	.long	.LBB305_35-.LJTI305_0
	.long	.LBB305_36-.LJTI305_0
	.long	.LBB305_37-.LJTI305_0
	.long	.LBB305_38-.LJTI305_0
	.long	.LBB305_39-.LJTI305_0
	.long	.LBB305_40-.LJTI305_0
	.long	.LBB305_41-.LJTI305_0
	.long	.LBB305_42-.LJTI305_0
	.long	.LBB305_43-.LJTI305_0
	.long	.LBB305_44-.LJTI305_0
	.long	.LBB305_45-.LJTI305_0
	.long	.LBB305_46-.LJTI305_0
	.long	.LBB305_47-.LJTI305_0
	.long	.LBB305_48-.LJTI305_0
	.long	.LBB305_49-.LJTI305_0
	.long	.LBB305_50-.LJTI305_0
	.long	.LBB305_51-.LJTI305_0
	.long	.LBB305_52-.LJTI305_0
	.long	.LBB305_53-.LJTI305_0
	.long	.LBB305_54-.LJTI305_0
	.long	.LBB305_55-.LJTI305_0
	.long	.LBB305_56-.LJTI305_0
	.long	.LBB305_57-.LJTI305_0
	.long	.LBB305_58-.LJTI305_0
	.long	.LBB305_59-.LJTI305_0
	.long	.LBB305_60-.LJTI305_0
	.long	.LBB305_61-.LJTI305_0
	.long	.LBB305_62-.LJTI305_0
	.long	.LBB305_65-.LJTI305_0
	.long	.LBB305_66-.LJTI305_0
	.long	.LBB305_67-.LJTI305_0
	.long	.LBB305_70-.LJTI305_0
	.long	.LBB305_71-.LJTI305_0
	.long	.LBB305_72-.LJTI305_0
                                        # -- End function
	.def	 "??_Gsystem_error@system@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gsystem_error@system@boost@@UEAAPEAXI@Z"
	.globl	"??_Gsystem_error@system@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gsystem_error@system@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gsystem_error@system@boost@@UEAAPEAXI@Z": # @"??_Gsystem_error@system@boost@@UEAAPEAXI@Z"
.seh_proc "??_Gsystem_error@system@boost@@UEAAPEAXI@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	edi, edx
	mov	rsi, rcx
	call	"??1system_error@system@boost@@UEAA@XZ"
	test	edi, edi
	je	.LBB306_2
# %bb.1:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB306_2:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gsystem_error@system@boost@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?what@system_error@system@boost@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.globl	"?what@system_error@system@boost@@UEBAPEBDXZ" # -- Begin function ?what@system_error@system@boost@@UEBAPEBDXZ
	.p2align	4, 0x90
"?what@system_error@system@boost@@UEBAPEBDXZ": # @"?what@system_error@system@boost@@UEBAPEBDXZ"
.Lfunc_begin133:
.seh_proc "?what@system_error@system@boost@@UEBAPEBDXZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	r14, [rcx + 40]
	cmp	qword ptr [rcx + 56], 0
	jne	.LBB307_28
# %bb.1:
	mov	rdi, qword ptr [rsi + 8]
	test	rdi, rdi
	lea	rax, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	cmove	rdi, rax
	mov	rcx, rdi
	call	strlen
	mov	rbx, rax
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, rbx
	mov	qword ptr [rbp - 8], rsi # 8-byte Spill
	jae	.LBB307_2
# %bb.5:
.Ltmp408:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r9, rdi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z"
.Ltmp409:
	jmp	.LBB307_6
.LBB307_2:
	mov	r15, r14
	cmp	rax, 16
	jb	.LBB307_4
# %bb.3:
	mov	r15, qword ptr [r14]
.LBB307_4:
	mov	qword ptr [rsi + 56], rbx
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8, rbx
	call	memmove
	mov	byte ptr [r15 + rbx], 0
.LBB307_6:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 56]
	test	rax, rax
	je	.LBB307_12
# %bb.7:
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rbx + 64]
	mov	rdx, rcx
	sub	rdx, rax
	cmp	rdx, 2
	jae	.LBB307_8
# %bb.11:
.Ltmp410:
	mov	qword ptr [rsp + 32], 2
	lea	r9, [rip + "??_C@_02LMMGGCAJ@?3?5?$AA@"]
	mov	edx, 2
	mov	rcx, r14
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
.Ltmp411:
	jmp	.LBB307_12
.LBB307_8:
	lea	rdx, [rax + 2]
	mov	qword ptr [rbx + 56], rdx
	mov	rdx, r14
	cmp	rcx, 16
	jb	.LBB307_10
# %bb.9:
	mov	rdx, qword ptr [r14]
.LBB307_10:
	mov	word ptr [rdx + rax], 8250
	mov	byte ptr [rdx + rax + 2], 0
.LBB307_12:
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 32]
	mov	r8d, dword ptr [rax + 24]
	mov	rax, qword ptr [rcx]
.Ltmp412:
	lea	rdi, [rbp - 40]
	mov	rdx, rdi
	call	qword ptr [rax + 40]
.Ltmp413:
# %bb.13:
	mov	r8, qword ptr [rbp - 24]
	cmp	qword ptr [rbp - 16], 15
	jbe	.LBB307_15
# %bb.14:
	mov	rdi, qword ptr [rbp - 40]
.LBB307_15:
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rbx + 56]
	mov	rax, qword ptr [rbx + 64]
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, r8
	jae	.LBB307_16
# %bb.19:
.Ltmp414:
	mov	qword ptr [rsp + 32], r8
	mov	rcx, r14
	mov	rdx, r8
	mov	r9, rdi
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
.Ltmp415:
	jmp	.LBB307_20
.LBB307_16:
	lea	rsi, [rcx + r8]
	mov	qword ptr [rbx + 56], rsi
	mov	rbx, r14
	cmp	rax, 16
	jb	.LBB307_18
# %bb.17:
	mov	rbx, qword ptr [r14]
.LBB307_18:
	add	rcx, rbx
	mov	rdx, rdi
	call	memmove
	mov	byte ptr [rbx + rsi], 0
.LBB307_20:
	mov	rax, qword ptr [rbp - 16]
	cmp	rax, 16
	mov	rsi, qword ptr [rbp - 8] # 8-byte Reload
	jb	.LBB307_28
# %bb.21:
	mov	rcx, qword ptr [rbp - 40]
	lea	rdx, [rax + 1]
	cmp	rdx, 4096
	jb	.LBB307_27
# %bb.22:
	mov	rbx, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rbx
	cmp	rcx, 32
	jae	.LBB307_23
# %bb.26:
	add	rax, 40
	mov	rdx, rax
	mov	rcx, rbx
.LBB307_27:
	call	"??3@YAXPEAX_K@Z"
.LBB307_28:
	cmp	qword ptr [rsi + 64], 16
	mov	qword ptr [rbp - 8], r14 # 8-byte Spill
	jb	.LBB307_30
# %bb.29:
	mov	rax, qword ptr [r14]
	mov	qword ptr [rbp - 8], rax # 8-byte Spill
.LBB307_30:                             # Block address taken
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB307_23:
.Ltmp416:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp417:
# %bb.24:
	.seh_handlerdata
	.long	("$cppxdata$?what@system_error@system@boost@@UEBAPEBDXZ")@IMGREL
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.seh_endproc
	.def	 "?dtor$25@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA":
.seh_proc "?dtor$25@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"
.LBB307_25:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.seh_endproc
	.def	 "?dtor$31@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$31@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA":
.seh_proc "?dtor$31@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"
.LBB307_31:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16]
	cmp	rax, 16
	jb	.LBB307_36
# %bb.32:
	mov	rcx, qword ptr [rbp - 40]
	lea	rdx, [rax + 1]
	cmp	rdx, 4096
	jb	.LBB307_35
# %bb.33:
	mov	rbx, qword ptr [rcx - 8]
	add	rcx, -8
	sub	rcx, rbx
	cmp	rcx, 32
	jae	.LBB307_39
# %bb.34:
	add	rax, 40
	mov	rdx, rax
	mov	rcx, rbx
.LBB307_35:
	call	"??3@YAXPEAX_K@Z"
.LBB307_36:
	movaps	xmm0, xmmword ptr [rip + __xmm@000000000000000f0000000000000000] # xmm0 = [0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0]
	movups	xmmword ptr [rbp - 24], xmm0
	mov	byte ptr [rbp - 40], 0
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.LBB307_39:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.seh_endproc
	.def	 "?catch$37@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$37@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA":
.seh_proc "?catch$37@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"
	.seh_handler __CxxFrameHandler3, @unwind, @except
.LBB307_37:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax + 8]
	test	rax, rax
	lea	rcx, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	cmovne	rcx, rax
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	lea	rax, [rip + .LBB307_30]
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CATCHRET
	.seh_handlerdata
	.long	("$cppxdata$?what@system_error@system@boost@@UEBAPEBDXZ")@IMGREL
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.seh_endproc
	.def	 "?dtor$38@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA":
.seh_proc "?dtor$38@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"
.LBB307_38:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end133:
	.seh_handlerdata
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?what@system_error@system@boost@@UEBAPEBDXZ"
	.p2align	2
"$cppxdata$?what@system_error@system@boost@@UEBAPEBDXZ":
	.long	429065506               # MagicNumber
	.long	5                       # MaxState
	.long	("$stateUnwindMap$?what@system_error@system@boost@@UEBAPEBDXZ")@IMGREL # UnwindMap
	.long	1                       # NumTryBlocks
	.long	("$tryMap$?what@system_error@system@boost@@UEBAPEBDXZ")@IMGREL # TryBlockMap
	.long	9                       # IPMapEntries
	.long	("$ip2state$?what@system_error@system@boost@@UEBAPEBDXZ")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?what@system_error@system@boost@@UEBAPEBDXZ":
	.long	-1                      # ToState
	.long	"?dtor$25@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$38@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"@IMGREL # Action
	.long	1                       # ToState
	.long	0                       # Action
	.long	2                       # ToState
	.long	"?dtor$31@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"@IMGREL # Action
	.long	1                       # ToState
	.long	0                       # Action
"$tryMap$?what@system_error@system@boost@@UEBAPEBDXZ":
	.long	2                       # TryLow
	.long	3                       # TryHigh
	.long	4                       # CatchHigh
	.long	1                       # NumCatches
	.long	("$handlerMap$0$?what@system_error@system@boost@@UEBAPEBDXZ")@IMGREL # HandlerArray
"$handlerMap$0$?what@system_error@system@boost@@UEBAPEBDXZ":
	.long	64                      # Adjectives
	.long	0                       # Type
	.long	0                       # CatchObjOffset
	.long	"?catch$37@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"@IMGREL # Handler
	.long	104                     # ParentFrameOffset
"$ip2state$?what@system_error@system@boost@@UEBAPEBDXZ":
	.long	.Lfunc_begin133@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp408@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp409@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp410@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp414@IMGREL+1       # IP
	.long	3                       # ToState
	.long	.Ltmp415@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	.Ltmp416@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp417@IMGREL+1       # IP
	.long	-1                      # ToState
	.long	"?catch$37@?0??what@system_error@system@boost@@UEBAPEBDXZ@4HA"@IMGREL # IP
	.long	4                       # ToState
	.section	.text,"xr",discard,"?what@system_error@system@boost@@UEBAPEBDXZ"
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
.Lfunc_begin134:
.seh_proc "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rdi, qword ptr [rcx + 16]
	movabs	r14, 9223372036854775807
	mov	rax, r14
	sub	rax, rdi
	cmp	rax, rdx
	jb	.LBB308_19
# %bb.1:
	mov	rsi, rdx
	mov	r15, rcx
	add	rsi, rdi
	mov	r13, qword ptr [rcx + 24]
	mov	rax, rsi
	or	rax, 15
	movabs	rcx, -9223372036854775808
	mov	qword ptr [rbp - 8], r9 # 8-byte Spill
	js	.LBB308_5
# %bb.2:
	mov	rbx, r13
	shr	rbx
	movabs	r14, 9223372036854775807
	mov	rdx, rbx
	xor	rdx, r14
	cmp	rdx, r13
	jb	.LBB308_5
# %bb.3:
	add	rbx, r13
	cmp	rax, rbx
	mov	r14, rbx
	cmovae	r14, rax
	lea	rcx, [r14 + 1]
	cmp	rcx, 4096
	jb	.LBB308_6
# %bb.4:
	cmp	rcx, -39
	jae	.LBB308_20
.LBB308_5:
	add	rcx, 39
	call	"??2@YAPEAX_K@Z"
	lea	rbx, [rax + 39]
	and	rbx, -32
	mov	qword ptr [rbx - 8], rax
.LBB308_9:
	mov	r12, qword ptr [rbp + 112]
	mov	qword ptr [r15 + 16], rsi
	mov	qword ptr [r15 + 24], r14
	cmp	r13, 16
	jb	.LBB308_17
# %bb.10:
	mov	rsi, qword ptr [r15]
	mov	rcx, rbx
	mov	rdx, rsi
	mov	r8, rdi
	call	memcpy
	lea	rcx, [rbx + rdi]
	mov	rdx, qword ptr [rbp - 8] # 8-byte Reload
	mov	r8, r12
	call	memcpy
	add	rdi, r12
	mov	byte ptr [rbx + rdi], 0
	lea	rdx, [r13 + 1]
	cmp	rdx, 4096
	jb	.LBB308_16
# %bb.11:
	mov	rax, qword ptr [rsi - 8]
	add	rsi, -8
	sub	rsi, rax
	cmp	rsi, 32
	jae	.LBB308_12
# %bb.15:
	add	r13, 40
	mov	rdx, r13
	mov	rsi, rax
.LBB308_16:
	mov	rcx, rsi
	call	"??3@YAXPEAX_K@Z"
	jmp	.LBB308_18
.LBB308_17:
	mov	rcx, rbx
	mov	rdx, r15
	mov	r8, rdi
	call	memcpy
	lea	rcx, [rbx + rdi]
	mov	rdx, qword ptr [rbp - 8] # 8-byte Reload
	mov	r8, r12
	call	memcpy
	add	rdi, r12
	mov	byte ptr [rbx + rdi], 0
.LBB308_18:
	mov	qword ptr [r15], rbx
	mov	rax, r15
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB308_6:
	test	rcx, rcx
	je	.LBB308_7
# %bb.8:
	call	"??2@YAPEAX_K@Z"
	mov	rbx, rax
	jmp	.LBB308_9
.LBB308_7:
	mov	r14, -1
	xor	ebx, ebx
	jmp	.LBB308_9
.LBB308_19:
	call	"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ"
.LBB308_12:
.Ltmp418:
	call	qword ptr [rip + __imp__invalid_parameter_noinfo_noreturn]
	sub	rsp, 32
.Ltmp419:
# %bb.13:
.LBB308_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	int3
	.seh_handlerdata
	.long	("$cppxdata$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z")@IMGREL
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
	.seh_endproc
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z@4HA":
.seh_proc "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z@4HA"
.LBB308_14:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end134:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
	.p2align	2
"$cppxdata$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z@4HA"@IMGREL # Action
"$ip2state$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z":
	.long	.Lfunc_begin134@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp418@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp419@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
                                        # -- End function
	.def	 "??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z"
	.globl	"??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z" # -- Begin function ??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z
	.p2align	4, 0x90
"??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z": # @"??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z"
.seh_proc "??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	r8, rdx
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
	lea	rdx, [rip + "_TI5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Vlogic_error@std@@@boost@@YAXAEBVlogic_error@std@@AEBUsource_location@0@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
# %bb.0:
	mov	r9, qword ptr [rcx]
	movzx	r10d, byte ptr [r9 + 8]
	mov	eax, r10d
	and	eax, 63
	cmp	al, 7
	ja	.LBB310_2
# %bb.1:
	lea	r8, [rip + .LJTI310_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB310_10:
	jmp	"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB310_3:
	jmp	"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB310_2:
	jmp	"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB310_4:
	cmp	r10b, -126
	jne	.LBB310_7
# %bb.5:
	lea	r8, [r9 + 9]
	jmp	.LBB310_6
.LBB310_11:
	mov	r8, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	sub	rax, r8
	cmp	byte ptr [r9 + 9], 0
	je	.LBB310_15
# %bb.12:
	cmp	rax, 4
	jb	.LBB310_14
# %bb.13:
	mov	dword ptr [r8], 1702195828
	jmp	.LBB310_20
.LBB310_18:
	mov	r8, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	sub	rax, r8
	cmp	rax, 4
	jb	.LBB310_22
# %bb.19:
	mov	dword ptr [r8], 1819047278
.LBB310_20:
	add	qword ptr [rdx], 4
	mov	al, 1
	ret
.LBB310_7:
	mov	rax, qword ptr [r9 + 16]
	lea	r8, [rax + 8]
	cmp	r10b, 2
	jne	.LBB310_6
# %bb.8:
	mov	eax, dword ptr [rax]
	jmp	.LBB310_9
.LBB310_6:
	movsx	r9, byte ptr [r9 + 23]
	mov	eax, 14
	sub	rax, r9
.LBB310_9:
	add	rax, r8
	mov	qword ptr [rcx + 40], r8
	mov	qword ptr [rcx + 48], rax
	jmp	"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB310_15:
	cmp	rax, 5
	jb	.LBB310_17
# %bb.16:
	mov	byte ptr [r8 + 4], 101
	mov	dword ptr [r8], 1936482662
	add	qword ptr [rdx], 5
	mov	al, 1
	ret
.LBB310_22:
	jmp	"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB310_14:
	jmp	"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB310_17:
	jmp	"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI310_0:
	.long	.LBB310_3-.LJTI310_0
	.long	.LBB310_2-.LJTI310_0
	.long	.LBB310_4-.LJTI310_0
	.long	.LBB310_10-.LJTI310_0
	.long	.LBB310_10-.LJTI310_0
	.long	.LBB310_10-.LJTI310_0
	.long	.LBB310_11-.LJTI310_0
	.long	.LBB310_18-.LJTI310_0
                                        # -- End function
	.def	 "??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 24]
	test	r8, r8
	je	.LBB311_1
# %bb.24:
	mov	rax, qword ptr [rcx + 32]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 29
	ja	.LBB311_26
# %bb.25:
	movzx	eax, al
	lea	r8, [rip + .LJTI311_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB311_29:
	jmp	"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_1:
	mov	r9, qword ptr [rcx]
	movzx	r10d, byte ptr [r9 + 8]
	mov	eax, r10d
	and	eax, 63
	cmp	al, 7
	ja	.LBB311_3
# %bb.2:
	lea	r8, [rip + .LJTI311_1]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB311_11:
	jmp	"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_32:
	jmp	"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_28:
	jmp	"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_27:
	jmp	"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_31:
	jmp	"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_4:
	jmp	"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_3:
	jmp	"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_5:
	cmp	r10b, -126
	jne	.LBB311_8
# %bb.6:
	lea	r8, [r9 + 9]
	jmp	.LBB311_7
.LBB311_12:
	mov	r8, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	sub	rax, r8
	cmp	byte ptr [r9 + 9], 0
	je	.LBB311_18
# %bb.13:
	cmp	rax, 4
	jb	.LBB311_17
# %bb.14:
	mov	dword ptr [r8], 1702195828
	jmp	.LBB311_15
.LBB311_21:
	mov	r8, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	sub	rax, r8
	cmp	rax, 4
	jb	.LBB311_23
# %bb.22:
	mov	dword ptr [r8], 1819047278
.LBB311_15:
	add	qword ptr [rdx], 4
	mov	al, 1
	ret
.LBB311_8:
	mov	rax, qword ptr [r9 + 16]
	lea	r8, [rax + 8]
	cmp	r10b, 2
	jne	.LBB311_7
# %bb.9:
	mov	eax, dword ptr [rax]
	jmp	.LBB311_10
.LBB311_7:
	movsx	r9, byte ptr [r9 + 23]
	mov	eax, 14
	sub	rax, r9
.LBB311_10:
	add	rax, r8
	mov	qword ptr [rcx + 40], r8
	mov	qword ptr [rcx + 48], rax
	jmp	"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_26:
	jmp	"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_30:
	jmp	"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_18:
	cmp	rax, 5
	jb	.LBB311_20
# %bb.19:
	mov	byte ptr [r8 + 4], 101
	mov	dword ptr [r8], 1936482662
	add	qword ptr [rdx], 5
	mov	al, 1
	ret
.LBB311_23:
	jmp	"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_17:
	jmp	"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
.LBB311_20:
	jmp	"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI311_0:
	.long	.LBB311_27-.LJTI311_0
	.long	.LBB311_27-.LJTI311_0
	.long	.LBB311_27-.LJTI311_0
	.long	.LBB311_27-.LJTI311_0
	.long	.LBB311_28-.LJTI311_0
	.long	.LBB311_28-.LJTI311_0
	.long	.LBB311_28-.LJTI311_0
	.long	.LBB311_28-.LJTI311_0
	.long	.LBB311_28-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_29-.LJTI311_0
	.long	.LBB311_30-.LJTI311_0
	.long	.LBB311_31-.LJTI311_0
	.long	.LBB311_31-.LJTI311_0
	.long	.LBB311_31-.LJTI311_0
	.long	.LBB311_31-.LJTI311_0
	.long	.LBB311_32-.LJTI311_0
	.long	.LBB311_32-.LJTI311_0
	.long	.LBB311_32-.LJTI311_0
	.long	.LBB311_32-.LJTI311_0
	.long	.LBB311_32-.LJTI311_0
	.long	.LBB311_32-.LJTI311_0
.LJTI311_1:
	.long	.LBB311_4-.LJTI311_1
	.long	.LBB311_3-.LJTI311_1
	.long	.LBB311_5-.LJTI311_1
	.long	.LBB311_11-.LJTI311_1
	.long	.LBB311_11-.LJTI311_1
	.long	.LBB311_11-.LJTI311_1
	.long	.LBB311_12-.LJTI311_1
	.long	.LBB311_21-.LJTI311_1
                                        # -- End function
	.def	 "??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
.Lfunc_begin135:
.seh_proc "??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp420:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp421:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z@4HA"
.LBB312_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end135:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin135@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp420@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp421@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBVlogic_error@std@@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin136:
.seh_proc "??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp422:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp423:
# %bb.1:
	lea	rax, [rip + "??_7logic_error@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB313_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp424:
	call	qword ptr [rax + 24]
.Ltmp425:
.LBB313_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB313_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB313_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end136:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin136@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp422@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp424@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp425@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z"
	.globl	"??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z" # -- Begin function ??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z
	.p2align	4, 0x90
"??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z": # @"??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z"
# %bb.0:
	mov	rax, rcx
	lea	rcx, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rax], rcx
	ret
                                        # -- End function
	.def	 "??0exception@boost@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@boost@@QEAA@AEBV01@@Z"
	.globl	"??0exception@boost@@QEAA@AEBV01@@Z" # -- Begin function ??0exception@boost@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0exception@boost@@QEAA@AEBV01@@Z":   # @"??0exception@boost@@QEAA@AEBV01@@Z"
.seh_proc "??0exception@boost@@QEAA@AEBV01@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rdx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx], rax
	mov	rcx, qword ptr [rdx + 8]
	mov	qword ptr [rsi + 8], rcx
	test	rcx, rcx
	je	.LBB315_2
# %bb.1:
	mov	rax, qword ptr [rcx]
	call	qword ptr [rax + 24]
.LBB315_2:
	mov	eax, dword ptr [rdi + 32]
	mov	dword ptr [rsi + 32], eax
	movups	xmm0, xmmword ptr [rdi + 16]
	movups	xmmword ptr [rsi + 16], xmm0
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@boost@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
.Lfunc_begin137:
.seh_proc "??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB316_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp426:
	call	qword ptr [rax + 32]
.Ltmp427:
# %bb.2:
	test	al, al
	je	.LBB316_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB316_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp428:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp429:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA"
.LBB316_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA"
.LBB316_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end137:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin137@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp426@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp428@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp429@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin138:
.seh_proc "?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp430:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp431:
# %bb.1:
	lea	rax, [rip + "??_7logic_error@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB317_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp432:
	call	qword ptr [rax + 24]
.Ltmp433:
.LBB317_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp434:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp435:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB317_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB317_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB317_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end138:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin138@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp430@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp432@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp434@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp435@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin139:
.seh_proc "??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB319_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp436:
	call	qword ptr [rax + 32]
.Ltmp437:
# %bb.2:
	test	al, al
	je	.LBB319_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB319_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp438:
	call	__std_exception_destroy
.Ltmp439:
# %bb.5:
	test	edi, edi
	je	.LBB319_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB319_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA"
.LBB319_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA"
.LBB319_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end139:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin139@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp436@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp438@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp439@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin140:
.seh_proc "??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB320_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp440:
	call	qword ptr [rax + 32]
.Ltmp441:
# %bb.2:
	test	al, al
	je	.LBB320_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB320_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp442:
	call	__std_exception_destroy
.Ltmp443:
# %bb.5:
	test	edi, edi
	je	.LBB320_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB320_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB320_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB320_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end140:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin140@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp440@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp442@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp443@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin141:
.seh_proc "??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB321_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp444:
	call	qword ptr [rax + 32]
.Ltmp445:
# %bb.2:
	test	al, al
	je	.LBB321_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB321_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp446:
	call	__std_exception_destroy
.Ltmp447:
# %bb.5:
	test	edi, edi
	je	.LBB321_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB321_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB321_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB321_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end141:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin141@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp444@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp446@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp447@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z"
	.globl	"??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z" # -- Begin function ??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z": # @"??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z"
# %bb.0:
	ud2
                                        # -- End function
	.def	 "?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.globl	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z" # -- Begin function ?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z
	.p2align	4, 0x90
"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z": # @"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Lfunc_begin142:
.seh_proc "?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rdx + 8]
	test	rcx, rcx
	je	.LBB323_1
# %bb.10:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax + 40]
	mov	qword ptr [rbp - 16], 0
.Ltmp448:
	lea	rdx, [rbp - 8]
	call	rax
.Ltmp449:
# %bb.11:
	mov	rbx, qword ptr [rbp - 8]
	test	rbx, rbx
	je	.LBB323_2
# %bb.12:
	mov	rax, qword ptr [rbx]
.Ltmp450:
	mov	qword ptr [rbp - 24], rbx # 8-byte Spill
	mov	rcx, rbx
	call	qword ptr [rax + 24]
.Ltmp451:
# %bb.13:
	mov	rcx, qword ptr [rbp - 8]
	test	rcx, rcx
	mov	rbx, qword ptr [rbp - 24] # 8-byte Reload
	je	.LBB323_2
# %bb.14:
	mov	rax, qword ptr [rcx]
.Ltmp452:
	call	qword ptr [rax + 32]
.Ltmp453:
# %bb.15:
	test	al, al
	je	.LBB323_2
# %bb.16:
	mov	qword ptr [rbp - 8], 0
	jmp	.LBB323_2
.LBB323_1:
	xor	ebx, ebx
.LBB323_2:
	mov	rax, qword ptr [rdi + 24]
	mov	qword ptr [rsi + 24], rax
	mov	eax, dword ptr [rdi + 32]
	mov	dword ptr [rsi + 32], eax
	mov	rax, qword ptr [rdi + 16]
	mov	qword ptr [rsi + 16], rax
	mov	rcx, qword ptr [rsi + 8]
	test	rcx, rcx
	je	.LBB323_6
# %bb.3:
	mov	rax, qword ptr [rcx]
	mov	rax, qword ptr [rax + 32]
	mov	qword ptr [rbp - 16], rbx
.Ltmp454:
	call	rax
.Ltmp455:
# %bb.4:
	test	al, al
	je	.LBB323_6
# %bb.5:
	mov	qword ptr [rsi + 8], 0
.LBB323_6:
	mov	qword ptr [rsi + 8], rbx
	test	rbx, rbx
	je	.LBB323_9
# %bb.7:
	mov	rax, qword ptr [rbx]
	mov	rax, qword ptr [rax + 24]
	mov	qword ptr [rbp - 16], rbx
.Ltmp456:
	mov	rcx, rbx
	call	rax
.Ltmp457:
# %bb.8:
	mov	rax, qword ptr [rbx]
.Ltmp458:
	mov	rcx, rbx
	call	qword ptr [rax + 32]
.Ltmp459:
.LBB323_9:
	nop
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z")@IMGREL
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.seh_endproc
	.def	 "?dtor$17@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$17@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA":
.seh_proc "?dtor$17@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"
.LBB323_17:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 8]
	test	rcx, rcx
	je	.LBB323_20
# %bb.18:
	mov	rax, qword ptr [rcx]
	call	qword ptr [rax + 32]
	test	al, al
	je	.LBB323_20
# %bb.19:
	mov	qword ptr [rbp - 8], 0
.LBB323_20:
	mov	rax, qword ptr [rbp - 24] # 8-byte Reload
	mov	qword ptr [rbp - 16], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.seh_endproc
	.def	 "?dtor$21@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA":
.seh_proc "?dtor$21@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"
.LBB323_21:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.seh_endproc
	.def	 "?dtor$22@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA":
.seh_proc "?dtor$22@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"
.LBB323_22:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16]
	test	rcx, rcx
	je	.LBB323_24
# %bb.23:
	mov	rax, qword ptr [rcx]
	call	qword ptr [rax + 32]
.LBB323_24:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.seh_endproc
	.def	 "?dtor$25@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA":
.seh_proc "?dtor$25@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"
.LBB323_25:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end142:
	.seh_handlerdata
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
	.p2align	2
"$cppxdata$?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z":
	.long	429065506               # MagicNumber
	.long	4                       # MaxState
	.long	("$stateUnwindMap$?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	7                       # IPMapEntries
	.long	("$ip2state$?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z":
	.long	-1                      # ToState
	.long	"?dtor$25@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$21@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$22@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"@IMGREL # Action
	.long	2                       # ToState
	.long	"?dtor$17@?0??copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z@4HA"@IMGREL # Action
"$ip2state$?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z":
	.long	.Lfunc_begin142@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp448@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp450@IMGREL+1       # IP
	.long	3                       # ToState
	.long	.Ltmp452@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp454@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp458@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp459@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
                                        # -- End function
	.def	 "??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin143:
.seh_proc "??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	qword ptr [rbp - 16], rdx
	mov	r14, qword ptr [rcx]
	mov	rax, qword ptr [r14 + 16]
	lea	rbx, [rax + 32]
	test	rax, rax
	cmove	rbx, rax
	je	.LBB324_1
# %bb.2:
	mov	rax, qword ptr [rax]
	jmp	.LBB324_3
.LBB324_1:
	xor	eax, eax
.LBB324_3:
	mov	rcx, qword ptr [rbp - 32]
	cmp	rcx, qword ptr [rbp - 24]
	jae	.LBB324_12
# %bb.4:
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbp - 32], rdx
	mov	byte ptr [rcx], 123
	test	rax, rax
	je	.LBB324_29
# %bb.5:
	lea	rax, [rax + 4*rax]
	lea	r15, [rbx + 8*rax]
	lea	rdi, [rbp - 32]
	.p2align	4, 0x90
.LBB324_6:                              # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rbx + 24]
	mov	ecx, dword ptr [rbx + 32]
	add	rcx, rax
	mov	qword ptr [rsi + 40], rax
	mov	qword ptr [rsi + 48], rcx
.Ltmp466:
	mov	rcx, rsi
	mov	rdx, rdi
	call	"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Ltmp467:
# %bb.7:                                #   in Loop: Header=BB324_6 Depth=1
	test	al, al
	je	.LBB324_8
# %bb.16:                               #   in Loop: Header=BB324_6 Depth=1
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB324_23
# %bb.17:                               #   in Loop: Header=BB324_6 Depth=1
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 58
	mov	qword ptr [rsi], rbx
.Ltmp480:
	mov	rcx, rsi
	mov	rdx, rdi
	call	"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Ltmp481:
# %bb.18:                               #   in Loop: Header=BB324_6 Depth=1
	test	al, al
	je	.LBB324_19
# %bb.27:                               #   in Loop: Header=BB324_6 Depth=1
	add	rbx, 40
	cmp	rbx, r15
	je	.LBB324_28
# %bb.31:                               #   in Loop: Header=BB324_6 Depth=1
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB324_33
# %bb.32:                               #   in Loop: Header=BB324_6 Depth=1
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 44
	jmp	.LBB324_6
.LBB324_8:
	lea	rdi, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp468:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp469:
# %bb.9:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp470:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp471:
# %bb.10:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp472:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp473:
# %bb.11:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 29
	jmp	.LBB324_41
.LBB324_23:
	lea	rdi, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp474:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp475:
# %bb.24:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp476:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp477:
# %bb.25:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp478:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp479:
# %bb.26:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 30
	jmp	.LBB324_41
.LBB324_19:
	lea	rdi, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp482:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp483:
# %bb.20:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp484:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp485:
# %bb.21:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp486:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp487:
# %bb.22:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 31
	jmp	.LBB324_41
.LBB324_28:
	mov	rbx, r15
.LBB324_29:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB324_37
# %bb.30:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 125
	mov	al, 1
	jmp	.LBB324_42
.LBB324_33:
	lea	rdi, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp488:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp489:
# %bb.34:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp490:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp491:
# %bb.35:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp492:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp493:
# %bb.36:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 32
.LBB324_41:
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
.LBB324_42:
	mov	rcx, qword ptr [rbp - 32]
	mov	rdx, qword ptr [rbp - 16]
	mov	qword ptr [rdx], rcx
                                        # kill: def $al killed $al killed $eax
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB324_12:
	lea	rdi, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp460:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp461:
# %bb.13:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp462:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp463:
# %bb.14:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp464:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp465:
# %bb.15:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 28
	jmp	.LBB324_41
.LBB324_37:
	lea	rdi, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp494:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp495:
# %bb.38:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp496:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp497:
# %bb.39:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp498:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp499:
# %bb.40:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 33
	jmp	.LBB324_41
	.seh_handlerdata
	.long	("$cppxdata$??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$43@?0???$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$43@?0???$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$43@?0???$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB324_43:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32]
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end143:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$43@?0???$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin143@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp466@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp499@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_object@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin144:
.seh_proc "??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	r15, rcx
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	qword ptr [rbp - 16], rdx
	mov	r14, qword ptr [rcx]
	mov	rax, qword ptr [r14 + 16]
	lea	rbx, [rax + 8]
	test	rax, rax
	cmove	rbx, rax
	je	.LBB325_1
# %bb.2:
	mov	eax, dword ptr [rax]
	jmp	.LBB325_3
.LBB325_1:
	xor	eax, eax
.LBB325_3:
	mov	rcx, qword ptr [rbp - 32]
	cmp	rcx, qword ptr [rbp - 24]
	jae	.LBB325_12
# %bb.4:
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbp - 32], rdx
	mov	byte ptr [rcx], 91
	test	rax, rax
	je	.LBB325_18
# %bb.5:
	lea	rax, [rax + 2*rax]
	lea	rsi, [rbx + 8*rax]
	lea	rdi, [rbp - 32]
	.p2align	4, 0x90
.LBB325_6:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [r15], rbx
.Ltmp506:
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$write_value@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Ltmp507:
# %bb.7:                                #   in Loop: Header=BB325_6 Depth=1
	test	al, al
	je	.LBB325_8
# %bb.16:                               #   in Loop: Header=BB325_6 Depth=1
	add	rbx, 24
	cmp	rbx, rsi
	je	.LBB325_17
# %bb.20:                               #   in Loop: Header=BB325_6 Depth=1
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB325_22
# %bb.21:                               #   in Loop: Header=BB325_6 Depth=1
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 44
	jmp	.LBB325_6
.LBB325_8:
	lea	rdi, [r15 + 8]
	mov	rdx, qword ptr [r15 + 24]
	add	rdx, 8
.Ltmp508:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp509:
# %bb.9:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 16
.Ltmp510:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp511:
# %bb.10:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 9
.Ltmp512:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp513:
# %bb.11:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	byte ptr [rcx + rax], 25
.LBB325_30:
	add	qword ptr [r15 + 24], 1
	xor	eax, eax
	jmp	.LBB325_31
.LBB325_17:
	mov	rbx, rsi
.LBB325_18:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB325_26
# %bb.19:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 93
	mov	al, 1
.LBB325_31:
	mov	rcx, qword ptr [rbp - 32]
	mov	rdx, qword ptr [rbp - 16]
	mov	qword ptr [rdx], rcx
                                        # kill: def $al killed $al killed $eax
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB325_22:
	lea	rdi, [r15 + 8]
	mov	rdx, qword ptr [r15 + 24]
	add	rdx, 8
.Ltmp514:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp515:
# %bb.23:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 16
.Ltmp516:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp517:
# %bb.24:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 9
.Ltmp518:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp519:
# %bb.25:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	byte ptr [rcx + rax], 26
	jmp	.LBB325_30
.LBB325_12:
	lea	rdi, [r15 + 8]
	mov	rdx, qword ptr [r15 + 24]
	add	rdx, 8
.Ltmp500:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp501:
# %bb.13:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 16
.Ltmp502:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp503:
# %bb.14:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 9
.Ltmp504:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp505:
# %bb.15:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	byte ptr [rcx + rax], 24
	jmp	.LBB325_30
.LBB325_26:
	lea	rdi, [r15 + 8]
	mov	rdx, qword ptr [r15 + 24]
	add	rdx, 8
.Ltmp520:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp521:
# %bb.27:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], r14
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 16
.Ltmp522:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp523:
# %bb.28:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [r15 + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [r15 + 24], rax
	add	rdx, 9
.Ltmp524:
	mov	rcx, rdi
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp525:
# %bb.29:
	mov	rax, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 32]
	mov	byte ptr [rcx + rax], 27
	jmp	.LBB325_30
	.seh_handlerdata
	.long	("$cppxdata$??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$32@?0???$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$32@?0???$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$32@?0???$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB325_32:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32]
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end144:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$32@?0???$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin144@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp506@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp525@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_array@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@22222222222222222222222222222222 # -- Begin function ??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.section	.rdata,"dr",discard,__xmm@22222222222222222222222222222222
	.p2align	4
__xmm@22222222222222222222222222222222:
	.zero	16,34
	.globl	__xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
	.section	.rdata,"dr",discard,__xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
	.p2align	4
__xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c:
	.zero	16,92
	.globl	__xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f
	.section	.rdata,"dr",discard,__xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f
	.p2align	4
__xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f:
	.zero	16,31
	.section	.text,"xr",discard,"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	4, 0x90
"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin145:
.seh_proc "??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	r12, rdx
	mov	r13, rcx
	mov	r14, qword ptr [rdx]
	mov	rbx, qword ptr [rdx + 8]
	mov	rsi, qword ptr [rcx + 40]
	cmp	r14, rbx
	jae	.LBB326_8
# %bb.1:
	mov	r15, qword ptr [r13 + 48]
	lea	rdi, [r14 + 1]
	mov	byte ptr [r14], 34
	cmp	rdi, rbx
	jae	.LBB326_27
# %bb.2:
	mov	rax, r15
	sub	rax, rsi
	je	.LBB326_20
# %bb.3:
	mov	rcx, rbx
	sub	rcx, rdi
	mov	r14, rsi
	cmp	rcx, rax
	jbe	.LBB326_11
# %bb.4:
	cmp	rax, 16
	jb	.LBB326_16
# %bb.5:
	mov	r14, rax
	and	r14, -16
	add	r14, rsi
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB326_6:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	test	dx, dx
	jne	.LBB326_7
# %bb.10:                               #   in Loop: Header=BB326_6 Depth=1
	add	rcx, 16
	add	rax, -16
	cmp	rax, 15
	ja	.LBB326_6
	jmp	.LBB326_16
.LBB326_11:
	cmp	rcx, 16
	jb	.LBB326_16
# %bb.12:
	mov	r14, rcx
	and	r14, -16
	add	r14, rsi
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rax, rsi
	.p2align	4, 0x90
.LBB326_13:                             # =>This Inner Loop Header: Depth=1
	movdqu	xmm3, xmmword ptr [rax]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	test	dx, dx
	jne	.LBB326_14
# %bb.15:                               #   in Loop: Header=BB326_13 Depth=1
	add	rax, 16
	add	rcx, -16
	cmp	rcx, 15
	ja	.LBB326_13
	jmp	.LBB326_16
.LBB326_7:
	movzx	eax, dx
	bsf	eax, eax
	add	rcx, rax
	mov	r14, rcx
.LBB326_16:
	sub	r14, rsi
	je	.LBB326_21
.LBB326_17:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8, r14
	call	memcpy
	add	rdi, r14
	add	rsi, r14
	cmp	rdi, rbx
	jae	.LBB326_18
.LBB326_21:
	cmp	rdi, rbx
	jae	.LBB326_36
# %bb.22:
	lea	r9, [rip + "?esc@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"]
	lea	r8, [rip + "?hex@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"]
	jmp	.LBB326_23
	.p2align	4, 0x90
.LBB326_26:                             #   in Loop: Header=BB326_23 Depth=1
	mov	byte ptr [rdi], al
	add	rdi, 1
.LBB326_35:                             #   in Loop: Header=BB326_23 Depth=1
	cmp	rdi, rbx
	jae	.LBB326_36
.LBB326_23:                             # =>This Inner Loop Header: Depth=1
	cmp	rsi, r15
	jae	.LBB326_58
# %bb.24:                               #   in Loop: Header=BB326_23 Depth=1
	movzx	eax, byte ptr [rsi]
	movzx	edx, al
	movzx	ecx, byte ptr [rdx + r9]
	add	rsi, 1
	cmp	cl, 117
	je	.LBB326_32
# %bb.25:                               #   in Loop: Header=BB326_23 Depth=1
	test	cl, cl
	je	.LBB326_26
# %bb.28:                               #   in Loop: Header=BB326_23 Depth=1
	lea	r14, [rdi + 1]
	mov	byte ptr [rdi], 92
	cmp	r14, rbx
	jae	.LBB326_30
# %bb.29:                               #   in Loop: Header=BB326_23 Depth=1
	mov	byte ptr [rdi + 1], cl
	add	rdi, 2
	jmp	.LBB326_35
	.p2align	4, 0x90
.LBB326_32:                             #   in Loop: Header=BB326_23 Depth=1
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 6
	jb	.LBB326_38
# %bb.33:                               #   in Loop: Header=BB326_23 Depth=1
	mov	dword ptr [rdi], 808482140
	mov	rax, rdx
	shr	rax, 4
	movzx	eax, byte ptr [rax + r8]
	mov	byte ptr [rdi + 4], al
	and	edx, 15
	movzx	eax, byte ptr [rdx + r8]
.LBB326_34:                             #   in Loop: Header=BB326_23 Depth=1
	mov	byte ptr [rdi + 5], al
	add	rdi, 6
	jmp	.LBB326_35
.LBB326_38:                             #   in Loop: Header=BB326_23 Depth=1
	lea	r14, [rdi + 1]
	mov	byte ptr [rdi], 92
	mov	rax, rdx
	shr	rax, 4
	movzx	eax, byte ptr [rax + r8]
	mov	byte ptr [r13 + 56], al
	and	edx, 15
	movzx	eax, byte ptr [rdx + r8]
	mov	byte ptr [r13 + 57], al
	cmp	r14, rbx
	jae	.LBB326_44
# %bb.39:                               #   in Loop: Header=BB326_23 Depth=1
	lea	r14, [rdi + 2]
	mov	byte ptr [rdi + 1], 117
	cmp	r14, rbx
	jae	.LBB326_46
# %bb.40:                               #   in Loop: Header=BB326_23 Depth=1
	lea	r14, [rdi + 3]
	mov	byte ptr [rdi + 2], 48
	cmp	r14, rbx
	jae	.LBB326_48
# %bb.41:                               #   in Loop: Header=BB326_23 Depth=1
	lea	r14, [rdi + 4]
	mov	byte ptr [rdi + 3], 48
	cmp	r14, rbx
	jae	.LBB326_50
# %bb.42:                               #   in Loop: Header=BB326_23 Depth=1
	movzx	eax, byte ptr [r13 + 56]
	lea	r14, [rdi + 5]
	mov	byte ptr [rdi + 4], al
	cmp	r14, rbx
	jae	.LBB326_52
# %bb.43:                               #   in Loop: Header=BB326_23 Depth=1
	movzx	eax, byte ptr [r13 + 57]
	jmp	.LBB326_34
.LBB326_18:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
	mov	qword ptr [rbp - 32], rsi
.Ltmp530:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp531:
.LBB326_19:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 14
	add	qword ptr [r13 + 24], 1
	xor	eax, eax
	mov	r14, rdi
	jmp	.LBB326_55
.LBB326_36:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	mov	r14, rdi
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
	mov	qword ptr [rbp - 32], rsi
.Ltmp544:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp545:
# %bb.37:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 15
	jmp	.LBB326_54
.LBB326_58:
	mov	byte ptr [rdi], 34
	add	rdi, 1
	mov	al, 1
	mov	r14, rdi
	jmp	.LBB326_56
.LBB326_14:
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	mov	r14, rax
	sub	r14, rsi
	jne	.LBB326_17
	jmp	.LBB326_21
.LBB326_30:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	mov	byte ptr [r13 + 56], cl
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp542:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp543:
# %bb.31:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 17
.LBB326_54:
	add	qword ptr [r13 + 24], 1
	xor	eax, eax
.LBB326_55:
	mov	r12, qword ptr [rbp - 8] # 8-byte Reload
.LBB326_56:
	mov	qword ptr [r13 + 40], rsi
	mov	qword ptr [r12], r14
                                        # kill: def $al killed $al killed $eax
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB326_8:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp526:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp527:
# %bb.9:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 13
	jmp	.LBB326_54
.LBB326_27:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
	mov	qword ptr [rbp - 32], rsi
.Ltmp528:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp529:
	jmp	.LBB326_19
.LBB326_20:
	mov	byte ptr [r14 + 1], 34
	add	r14, 2
	mov	al, 1
	jmp	.LBB326_56
.LBB326_44:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp532:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp533:
# %bb.45:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 18
	jmp	.LBB326_54
.LBB326_46:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp534:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp535:
# %bb.47:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 19
	jmp	.LBB326_54
.LBB326_48:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp536:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp537:
# %bb.49:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 20
	jmp	.LBB326_54
.LBB326_50:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp538:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp539:
# %bb.51:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 21
	jmp	.LBB326_54
.LBB326_52:
	mov	qword ptr [rbp - 8], r12 # 8-byte Spill
	lea	rcx, [r13 + 8]
	mov	rdx, qword ptr [r13 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], r14
	mov	qword ptr [rbp - 32], rsi
.Ltmp540:
	mov	qword ptr [rbp - 16], r13 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp541:
# %bb.53:
	mov	r13, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 32]
	mov	byte ptr [rcx + rax], 22
	jmp	.LBB326_54
	.seh_handlerdata
	.long	("$cppxdata$??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$57@?0???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$57@?0???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$57@?0???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB326_57:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32]
	mov	rcx, qword ptr [rbp - 24]
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rdx + 40], rax
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rax], rcx
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end145:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$57@?0???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin145@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp530@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp541@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin146:
.seh_proc "??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	r12, rdx
	mov	rsi, rcx
	mov	r13, qword ptr [rdx]
	mov	rdi, qword ptr [rdx + 8]
	mov	rax, qword ptr [rcx]
	mov	cl, byte ptr [rax + 8]
	and	cl, 63
	sub	rdi, r13
	cmp	cl, 4
	je	.LBB327_6
# %bb.1:
	cmp	cl, 5
	jne	.LBB327_2
# %bb.30:
	cmp	rdi, 27
	jb	.LBB327_32
# %bb.31:
	movsd	xmm0, qword ptr [rax + 16] # xmm0 = mem[0],zero
	mov	rdx, r13
	call	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	jmp	.LBB327_4
.LBB327_6:
	cmp	rdi, 27
	jb	.LBB327_19
# %bb.7:
	mov	rdx, qword ptr [rax + 16]
	cmp	rdx, 9
	ja	.LBB327_9
# %bb.8:
	add	dl, 48
	mov	byte ptr [r13], dl
	mov	r14d, 1
	add	r13, r14
	jmp	.LBB327_39
.LBB327_2:
	cmp	rdi, 27
	jb	.LBB327_5
# %bb.3:
	mov	rdx, qword ptr [rax + 16]
	mov	rcx, r13
	call	"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
.LBB327_4:
	mov	eax, eax
	add	r13, rax
.LBB327_39:
	mov	al, 1
.LBB327_40:
	mov	qword ptr [r12], r13
                                        # kill: def $al killed $al killed $eax
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB327_9:
	lea	r14, [rbp - 24]
	cmp	rdx, 1000
	jb	.LBB327_10
# %bb.11:
	movabs	r8, 3777893186295716171
	lea	r9, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	rsi, r14
	.p2align	4, 0x90
.LBB327_12:                             # =>This Inner Loop Header: Depth=1
	mov	rbx, rdx
	mov	rax, rdx
	mul	r8
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	ecx, ebx
	sub	ecx, eax
	movzx	eax, cx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	edi, eax, 100
	sub	ecx, edi
	movzx	ecx, cx
	movzx	ecx, word ptr [r9 + 2*rcx]
	mov	word ptr [rsi - 2], cx
	movzx	eax, word ptr [r9 + 2*rax]
	mov	word ptr [rsi - 4], ax
	add	rsi, -4
	cmp	rbx, 9999999
	ja	.LBB327_12
# %bb.13:
	cmp	rbx, 100000
	jae	.LBB327_14
	jmp	.LBB327_15
.LBB327_10:
	mov	rsi, r14
.LBB327_14:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ecx, eax, 100
	sub	edx, ecx
	movzx	ecx, dx
	lea	rdx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	ecx, word ptr [rdx + 2*rcx]
	mov	word ptr [rsi - 2], cx
	add	rsi, -2
	mov	rdx, rax
.LBB327_15:
	test	rdx, rdx
	je	.LBB327_17
# %bb.16:
	add	dl, 48
	mov	byte ptr [rsi - 1], dl
	add	rsi, -1
.LBB327_17:
	sub	r14d, esi
	mov	rcx, r13
	mov	rdx, rsi
	mov	r8, r14
	call	memcpy
	add	r13, r14
	jmp	.LBB327_39
.LBB327_32:
	lea	r15, [rsi + 56]
	movsd	xmm0, qword ptr [rax + 16] # xmm0 = mem[0],zero
	mov	rdx, r15
	call	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	jmp	.LBB327_33
.LBB327_19:
	lea	r15, [rsi + 56]
	mov	rdx, qword ptr [rax + 16]
	cmp	rdx, 9
	ja	.LBB327_21
# %bb.20:
	add	dl, 48
	mov	byte ptr [r15], dl
	mov	r14d, 1
	jmp	.LBB327_34
.LBB327_5:
	lea	r15, [rsi + 56]
	mov	rdx, qword ptr [rax + 16]
	mov	rcx, r15
	call	"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
.LBB327_33:
	mov	r14d, eax
.LBB327_34:
	lea	rbx, [rsi + r14]
	add	rbx, 56
	mov	qword ptr [rsi + 40], r15
	mov	qword ptr [rsi + 48], rbx
	sub	rbx, r15
	cmp	rdi, rbx
	jae	.LBB327_38
# %bb.35:
	mov	qword ptr [rbp - 16], r12 # 8-byte Spill
	mov	rcx, r13
	mov	rdx, r15
	mov	r8, rdi
	call	memcpy
	add	qword ptr [rsi + 40], rdi
	add	r13, rdi
	mov	qword ptr [rbp - 8], r13 # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
.Ltmp546:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp547:
# %bb.36:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 23
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	r13, qword ptr [rbp - 8] # 8-byte Reload
	jmp	.LBB327_40
.LBB327_38:
	mov	rcx, r13
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	add	r13, rbx
	jmp	.LBB327_39
.LBB327_21:
	lea	r14, [rbp - 24]
	cmp	rdx, 1000
	jb	.LBB327_22
# %bb.23:
	movabs	r8, 3777893186295716171
	lea	r9, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	r10, r14
.LBB327_24:                             # =>This Inner Loop Header: Depth=1
	mov	r11, rdx
	mov	rax, rdx
	mul	r8
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	ecx, r11d
	sub	ecx, eax
	movzx	eax, cx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ebx, eax, 100
	sub	ecx, ebx
	movzx	ecx, cx
	movzx	ecx, word ptr [r9 + 2*rcx]
	mov	word ptr [r10 - 2], cx
	movzx	eax, word ptr [r9 + 2*rax]
	mov	word ptr [r10 - 4], ax
	add	r10, -4
	cmp	r11, 9999999
	ja	.LBB327_24
# %bb.25:
	cmp	r11, 100000
	jae	.LBB327_26
	jmp	.LBB327_27
.LBB327_22:
	mov	r10, r14
.LBB327_26:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ecx, eax, 100
	sub	edx, ecx
	movzx	ecx, dx
	lea	rdx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	ecx, word ptr [rdx + 2*rcx]
	mov	word ptr [r10 - 2], cx
	add	r10, -2
	mov	rdx, rax
.LBB327_27:
	test	rdx, rdx
	je	.LBB327_29
# %bb.28:
	add	dl, 48
	mov	byte ptr [r10 - 1], dl
	add	r10, -1
.LBB327_29:
	sub	r14d, r10d
	mov	rcx, r15
	mov	rdx, r10
	mov	r8, r14
	call	memcpy
	jmp	.LBB327_34
	.seh_handlerdata
	.long	("$cppxdata$??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$37@?0???$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$37@?0???$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$37@?0???$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB327_37:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rax], rcx
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end146:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$37@?0???$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin146@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp546@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp547@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_number@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin147:
.seh_proc "??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	mov	rdi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	cmp	rax, rdi
	jbe	.LBB328_5
# %bb.1:
	lea	rbx, [rdi + 1]
	mov	byte ptr [rdi], 116
	cmp	rbx, rax
	jae	.LBB328_7
# %bb.2:
	lea	rbx, [rdi + 2]
	mov	byte ptr [rdi + 1], 114
	cmp	rbx, rax
	jae	.LBB328_9
# %bb.3:
	lea	rbx, [rdi + 3]
	mov	byte ptr [rdi + 2], 117
	cmp	rbx, rax
	jae	.LBB328_11
# %bb.4:
	mov	byte ptr [rdi + 3], 101
	add	rdi, 4
	mov	al, 1
.LBB328_15:
	mov	qword ptr [rdx], rdi
                                        # kill: def $al killed $al killed $eax
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB328_5:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rdi
.Ltmp548:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp549:
# %bb.6:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 4
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	jmp	.LBB328_14
.LBB328_7:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp550:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp551:
# %bb.8:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 5
	jmp	.LBB328_13
.LBB328_9:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp552:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp553:
# %bb.10:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 6
	jmp	.LBB328_13
.LBB328_11:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp554:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp555:
# %bb.12:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 7
.LBB328_13:
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	mov	rdi, rbx
.LBB328_14:
	mov	rdx, qword ptr [rbp - 8] # 8-byte Reload
	jmp	.LBB328_15
	.seh_handlerdata
	.long	("$cppxdata$??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$16@?0???$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB328_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16]
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end147:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin147@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp548@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp555@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_true@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin148:
.seh_proc "??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	mov	rdi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	cmp	rax, rdi
	jbe	.LBB329_6
# %bb.1:
	lea	rbx, [rdi + 1]
	mov	byte ptr [rdi], 102
	cmp	rbx, rax
	jae	.LBB329_8
# %bb.2:
	lea	rbx, [rdi + 2]
	mov	byte ptr [rdi + 1], 97
	cmp	rbx, rax
	jae	.LBB329_10
# %bb.3:
	lea	rbx, [rdi + 3]
	mov	byte ptr [rdi + 2], 108
	cmp	rbx, rax
	jae	.LBB329_12
# %bb.4:
	lea	rbx, [rdi + 4]
	mov	byte ptr [rdi + 3], 115
	cmp	rbx, rax
	jae	.LBB329_14
# %bb.5:
	mov	byte ptr [rdi + 4], 101
	add	rdi, 5
	mov	al, 1
.LBB329_18:
	mov	qword ptr [rdx], rdi
                                        # kill: def $al killed $al killed $eax
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB329_6:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rdi
.Ltmp556:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp557:
# %bb.7:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 8
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	jmp	.LBB329_17
.LBB329_8:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp558:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp559:
# %bb.9:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 9
	jmp	.LBB329_16
.LBB329_10:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp560:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp561:
# %bb.11:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 10
	jmp	.LBB329_16
.LBB329_12:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp562:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp563:
# %bb.13:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 11
	jmp	.LBB329_16
.LBB329_14:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp564:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp565:
# %bb.15:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 12
.LBB329_16:
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	mov	rdi, rbx
.LBB329_17:
	mov	rdx, qword ptr [rbp - 8] # 8-byte Reload
	jmp	.LBB329_18
	.seh_handlerdata
	.long	("$cppxdata$??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$19@?0???$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$19@?0???$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB329_19:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16]
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end148:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$19@?0???$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin148@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp556@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp565@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_false@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin149:
.seh_proc "??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	mov	rdi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	cmp	rax, rdi
	jbe	.LBB330_5
# %bb.1:
	lea	rbx, [rdi + 1]
	mov	byte ptr [rdi], 110
	cmp	rbx, rax
	jae	.LBB330_7
# %bb.2:
	lea	rbx, [rdi + 2]
	mov	byte ptr [rdi + 1], 117
	cmp	rbx, rax
	jae	.LBB330_9
# %bb.3:
	lea	rbx, [rdi + 3]
	mov	byte ptr [rdi + 2], 108
	cmp	rbx, rax
	jae	.LBB330_11
# %bb.4:
	mov	byte ptr [rdi + 3], 108
	add	rdi, 4
	mov	al, 1
.LBB330_15:
	mov	qword ptr [rdx], rdi
                                        # kill: def $al killed $al killed $eax
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB330_5:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rdi
.Ltmp566:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp567:
# %bb.6:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 0
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	jmp	.LBB330_14
.LBB330_7:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp568:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp569:
# %bb.8:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 1
	jmp	.LBB330_13
.LBB330_9:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp570:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp571:
# %bb.10:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 2
	jmp	.LBB330_13
.LBB330_11:
	mov	qword ptr [rbp - 8], rdx # 8-byte Spill
	lea	rcx, [rsi + 8]
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 16], rbx
.Ltmp572:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp573:
# %bb.12:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 3
.LBB330_13:
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	mov	rdi, rbx
.LBB330_14:
	mov	rdx, qword ptr [rbp - 8] # 8-byte Reload
	jmp	.LBB330_15
	.seh_handlerdata
	.long	("$cppxdata$??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$16@?0???$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB330_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16]
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end149:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin149@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp566@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp573@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_null@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin150:
.seh_proc "??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r8, rdx
	mov	r14, rcx
	mov	rdi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	add	rcx, 8
	mov	rsi, qword ptr [r14 + 24]
	test	rsi, rsi
	je	.LBB331_1
# %bb.2:
	lea	rdx, [rsi - 1]
	mov	qword ptr [r14 + 24], rdx
	mov	rbx, qword ptr [r14 + 32]
	mov	bl, byte ptr [rbx + rsi - 1]
	cmp	bl, 1
	je	.LBB331_7
# %bb.3:
	cmp	bl, 2
	je	.LBB331_9
# %bb.4:
	cmp	bl, 3
	jne	.LBB331_5
	jmp	.LBB331_11
.LBB331_1:
	xor	edx, edx
.LBB331_5:
	cmp	rax, rdi
	jbe	.LBB331_13
# %bb.6:
	mov	byte ptr [rdi], 110
	add	rdi, 1
.LBB331_7:
	cmp	rax, rdi
	jbe	.LBB331_15
# %bb.8:
	mov	byte ptr [rdi], 117
	add	rdi, 1
.LBB331_9:
	cmp	rax, rdi
	jbe	.LBB331_17
# %bb.10:
	mov	byte ptr [rdi], 108
	add	rdi, 1
.LBB331_11:
	cmp	rax, rdi
	jbe	.LBB331_19
# %bb.12:
	mov	byte ptr [rdi], 108
	add	rdi, 1
	mov	al, 1
.LBB331_22:
	mov	qword ptr [r8], rdi
                                        # kill: def $al killed $al killed $eax
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB331_19:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp580:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp581:
# %bb.20:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 3
	jmp	.LBB331_21
.LBB331_17:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp578:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp579:
# %bb.18:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 2
	jmp	.LBB331_21
.LBB331_15:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp576:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp577:
# %bb.16:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 1
	jmp	.LBB331_21
.LBB331_13:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp574:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp575:
# %bb.14:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 0
.LBB331_21:
	add	qword ptr [r14 + 24], 1
	xor	eax, eax
	mov	r8, qword ptr [rbp - 16] # 8-byte Reload
	jmp	.LBB331_22
	.seh_handlerdata
	.long	("$cppxdata$??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$23@?0???$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0???$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$23@?0???$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB331_23:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 24]
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end150:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$23@?0???$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin150@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp580@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp575@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_null@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin151:
.seh_proc "??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r8, rdx
	mov	r14, rcx
	mov	rdi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	add	rcx, 8
	mov	rsi, qword ptr [r14 + 24]
	test	rsi, rsi
	je	.LBB332_1
# %bb.2:
	lea	rdx, [rsi - 1]
	mov	qword ptr [r14 + 24], rdx
	mov	rbx, qword ptr [r14 + 32]
	mov	bl, byte ptr [rbx + rsi - 1]
	cmp	bl, 5
	je	.LBB332_7
# %bb.3:
	cmp	bl, 6
	je	.LBB332_9
# %bb.4:
	cmp	bl, 7
	jne	.LBB332_5
	jmp	.LBB332_11
.LBB332_1:
	xor	edx, edx
.LBB332_5:
	cmp	rax, rdi
	jbe	.LBB332_13
# %bb.6:
	mov	byte ptr [rdi], 116
	add	rdi, 1
.LBB332_7:
	cmp	rax, rdi
	jbe	.LBB332_15
# %bb.8:
	mov	byte ptr [rdi], 114
	add	rdi, 1
.LBB332_9:
	cmp	rax, rdi
	jbe	.LBB332_17
# %bb.10:
	mov	byte ptr [rdi], 117
	add	rdi, 1
.LBB332_11:
	cmp	rax, rdi
	jbe	.LBB332_19
# %bb.12:
	mov	byte ptr [rdi], 101
	add	rdi, 1
	mov	al, 1
.LBB332_22:
	mov	qword ptr [r8], rdi
                                        # kill: def $al killed $al killed $eax
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB332_19:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp588:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp589:
# %bb.20:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 7
	jmp	.LBB332_21
.LBB332_17:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp586:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp587:
# %bb.18:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 6
	jmp	.LBB332_21
.LBB332_15:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp584:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp585:
# %bb.16:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 5
	jmp	.LBB332_21
.LBB332_13:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp582:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp583:
# %bb.14:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 4
.LBB332_21:
	add	qword ptr [r14 + 24], 1
	xor	eax, eax
	mov	r8, qword ptr [rbp - 16] # 8-byte Reload
	jmp	.LBB332_22
	.seh_handlerdata
	.long	("$cppxdata$??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$23@?0???$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0???$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$23@?0???$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB332_23:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 24]
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end151:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$23@?0???$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin151@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp588@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp583@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_true@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin152:
.seh_proc "??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r8, rdx
	mov	r14, rcx
	mov	rdi, qword ptr [rdx]
	mov	rax, qword ptr [rdx + 8]
	add	rcx, 8
	mov	rsi, qword ptr [r14 + 24]
	test	rsi, rsi
	je	.LBB333_1
# %bb.12:
	lea	rdx, [rsi - 1]
	mov	qword ptr [r14 + 24], rdx
	mov	rbx, qword ptr [r14 + 32]
	mov	bl, byte ptr [rbx + rsi - 1]
	add	bl, -9
	cmp	bl, 3
	ja	.LBB333_2
# %bb.13:
	movzx	edx, bl
	lea	rbx, [rip + .LJTI333_0]
	movsxd	rdx, dword ptr [rbx + 4*rdx]
	add	rdx, rbx
	jmp	rdx
.LBB333_1:
	xor	edx, edx
.LBB333_2:
	cmp	rax, rdi
	jbe	.LBB333_14
# %bb.3:
	mov	byte ptr [rdi], 102
	add	rdi, 1
.LBB333_4:
	cmp	rax, rdi
	jbe	.LBB333_16
# %bb.5:
	mov	byte ptr [rdi], 97
	add	rdi, 1
.LBB333_6:
	cmp	rax, rdi
	jbe	.LBB333_18
# %bb.7:
	mov	byte ptr [rdi], 108
	add	rdi, 1
.LBB333_8:
	cmp	rax, rdi
	jbe	.LBB333_20
# %bb.9:
	mov	byte ptr [rdi], 115
	add	rdi, 1
.LBB333_10:
	cmp	rax, rdi
	jbe	.LBB333_22
# %bb.11:
	mov	byte ptr [rdi], 101
	add	rdi, 1
	mov	al, 1
.LBB333_25:
	mov	qword ptr [r8], rdi
                                        # kill: def $al killed $al killed $eax
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB333_22:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp598:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp599:
# %bb.23:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 12
	jmp	.LBB333_24
.LBB333_20:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp596:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp597:
# %bb.21:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 11
	jmp	.LBB333_24
.LBB333_18:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp594:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp595:
# %bb.19:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 10
	jmp	.LBB333_24
.LBB333_16:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	mov	rdx, qword ptr [r14 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp592:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp593:
# %bb.17:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 9
	jmp	.LBB333_24
.LBB333_14:
	mov	qword ptr [rbp - 16], r8 # 8-byte Spill
	add	rdx, 1
	mov	qword ptr [rbp - 24], rdi
.Ltmp590:
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp591:
# %bb.15:
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 32]
	mov	byte ptr [rcx + rax], 8
.LBB333_24:
	add	qword ptr [r14 + 24], 1
	xor	eax, eax
	mov	r8, qword ptr [rbp - 16] # 8-byte Reload
	jmp	.LBB333_25
	.seh_handlerdata
	.long	("$cppxdata$??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$26@?0???$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0???$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$26@?0???$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB333_26:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 24]
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end152:
	.p2align	2, 0x90
.LJTI333_0:
	.long	.LBB333_4-.LJTI333_0
	.long	.LBB333_6-.LJTI333_0
	.long	.LBB333_8-.LJTI333_0
	.long	.LBB333_10-.LJTI333_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$26@?0???$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin152@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp598@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp591@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_false@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin153:
.seh_proc "??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	r10, rdx
	mov	r11, rcx
	mov	rbx, qword ptr [rdx]
	mov	r13, qword ptr [rdx + 8]
	mov	rdx, qword ptr [rcx + 24]
	mov	rsi, qword ptr [rcx + 40]
	mov	r12, qword ptr [rcx + 48]
	lea	r14, [rcx + 8]
	test	rdx, rdx
	je	.LBB334_1
# %bb.11:
	lea	rax, [rdx - 1]
	mov	qword ptr [r11 + 24], rax
	mov	rcx, qword ptr [r11 + 32]
	mov	cl, byte ptr [rcx + rdx - 1]
	add	cl, -14
	cmp	cl, 8
	ja	.LBB334_2
# %bb.12:
	movzx	eax, cl
	lea	rcx, [rip + .LJTI334_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB334_42:
	cmp	rbx, r13
	jae	.LBB334_47
# %bb.43:
	mov	byte ptr [rbx], 34
	add	rbx, 1
.LBB334_44:
	cmp	r13, rbx
	jbe	.LBB334_49
# %bb.45:
	mov	al, byte ptr [r11 + 56]
	jmp	.LBB334_46
.LBB334_1:
	xor	eax, eax
.LBB334_2:
	cmp	rbx, r13
	jae	.LBB334_13
# %bb.3:
	mov	byte ptr [rbx], 34
	add	rbx, 1
.LBB334_4:
	mov	rax, r13
	sub	rax, rbx
	jbe	.LBB334_32
# %bb.5:
	mov	rcx, r12
	sub	rcx, rsi
	je	.LBB334_76
# %bb.6:
	mov	r15, rsi
	cmp	rax, rcx
	jbe	.LBB334_16
# %bb.7:
	cmp	rcx, 16
	jb	.LBB334_21
# %bb.8:
	mov	r15, rcx
	and	r15, -16
	add	r15, rsi
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rax, rsi
	.p2align	4, 0x90
.LBB334_9:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm3, xmmword ptr [rax]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	test	dx, dx
	jne	.LBB334_10
# %bb.15:                               #   in Loop: Header=BB334_9 Depth=1
	add	rax, 16
	add	rcx, -16
	cmp	rcx, 15
	ja	.LBB334_9
	jmp	.LBB334_21
.LBB334_16:
	cmp	rax, 16
	jb	.LBB334_21
# %bb.17:
	mov	r15, rax
	and	r15, -16
	add	r15, rsi
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB334_18:                             # =>This Inner Loop Header: Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	test	dx, dx
	jne	.LBB334_19
# %bb.20:                               #   in Loop: Header=BB334_18 Depth=1
	add	rcx, 16
	add	rax, -16
	cmp	rax, 15
	ja	.LBB334_18
	jmp	.LBB334_21
.LBB334_10:
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	mov	r15, rax
.LBB334_21:
	sub	r15, rsi
	je	.LBB334_24
.LBB334_22:
	mov	rdi, r11
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rcx, rbx
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	add	rbx, r15
	add	rsi, r15
	cmp	rbx, r13
	jae	.LBB334_30
# %bb.23:
	mov	r10, qword ptr [rbp - 8] # 8-byte Reload
	mov	r11, rdi
	cmp	r13, rbx
	ja	.LBB334_25
	jmp	.LBB334_40
.LBB334_30:
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	rdx, qword ptr [rdi + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp608:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp609:
.LBB334_31:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 14
	jmp	.LBB334_72
.LBB334_19:
	movzx	eax, dx
	bsf	eax, eax
	add	rcx, rax
	mov	r15, rcx
	sub	r15, rsi
	jne	.LBB334_22
.LBB334_24:
	cmp	r13, rbx
	ja	.LBB334_25
	jmp	.LBB334_40
.LBB334_32:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp606:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp607:
	jmp	.LBB334_31
.LBB334_13:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	add	rax, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp604:
	mov	rcx, r14
	mov	rdx, rax
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp605:
# %bb.14:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 13
	jmp	.LBB334_72
.LBB334_49:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp602:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp603:
# %bb.50:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 17
	jmp	.LBB334_72
.LBB334_47:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp600:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp601:
# %bb.48:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 16
	jmp	.LBB334_72
.LBB334_25:
	lea	r9, [rip + "?esc@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"]
	lea	r8, [rip + "?hex@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"]
	jmp	.LBB334_26
	.p2align	4, 0x90
.LBB334_29:                             #   in Loop: Header=BB334_26 Depth=1
	mov	byte ptr [rbx], cl
	add	rbx, 1
.LBB334_39:                             #   in Loop: Header=BB334_26 Depth=1
	cmp	rbx, r13
	jae	.LBB334_40
.LBB334_26:                             # =>This Inner Loop Header: Depth=1
	cmp	rsi, r12
	jae	.LBB334_76
# %bb.27:                               #   in Loop: Header=BB334_26 Depth=1
	movzx	ecx, byte ptr [rsi]
	movzx	edx, cl
	movzx	eax, byte ptr [rdx + r9]
	add	rsi, 1
	cmp	al, 117
	je	.LBB334_37
# %bb.28:                               #   in Loop: Header=BB334_26 Depth=1
	test	al, al
	je	.LBB334_29
# %bb.33:                               #   in Loop: Header=BB334_26 Depth=1
	lea	rdi, [rbx + 1]
	mov	byte ptr [rbx], 92
	cmp	rdi, r13
	jae	.LBB334_35
# %bb.34:                               #   in Loop: Header=BB334_26 Depth=1
	mov	byte ptr [rbx + 1], al
	add	rbx, 2
	jmp	.LBB334_39
	.p2align	4, 0x90
.LBB334_37:                             #   in Loop: Header=BB334_26 Depth=1
	mov	rax, r13
	sub	rax, rbx
	cmp	rax, 6
	jb	.LBB334_51
# %bb.38:                               #   in Loop: Header=BB334_26 Depth=1
	mov	dword ptr [rbx], 808482140
	mov	rax, rdx
	shr	rax, 4
	movzx	eax, byte ptr [rax + r8]
	mov	byte ptr [rbx + 4], al
	and	edx, 15
	movzx	eax, byte ptr [rdx + r8]
	mov	byte ptr [rbx + 5], al
	add	rbx, 6
	jmp	.LBB334_39
.LBB334_76:
	mov	byte ptr [rbx], 34
	add	rbx, 1
	mov	al, 1
	jmp	.LBB334_74
.LBB334_35:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	byte ptr [r11 + 56], al
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rdi
.Ltmp620:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp621:
# %bb.36:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 17
	add	qword ptr [r11 + 24], 1
	xor	eax, eax
	mov	rbx, rdi
	jmp	.LBB334_73
.LBB334_51:
	mov	byte ptr [rbx], 92
	add	rbx, 1
	mov	rax, rdx
	shr	rax, 4
	mov	al, byte ptr [rax + r8]
	mov	byte ptr [r11 + 56], al
	and	edx, 15
	mov	al, byte ptr [rdx + r8]
	mov	byte ptr [r11 + 57], al
.LBB334_52:
	cmp	r13, rbx
	jbe	.LBB334_62
# %bb.53:
	mov	byte ptr [rbx], 117
	add	rbx, 1
.LBB334_54:
	cmp	r13, rbx
	jbe	.LBB334_64
# %bb.55:
	mov	byte ptr [rbx], 48
	add	rbx, 1
.LBB334_56:
	cmp	r13, rbx
	jbe	.LBB334_66
# %bb.57:
	mov	byte ptr [rbx], 48
	add	rbx, 1
.LBB334_58:
	cmp	r13, rbx
	jbe	.LBB334_68
# %bb.59:
	mov	al, byte ptr [r11 + 56]
	mov	byte ptr [rbx], al
	add	rbx, 1
.LBB334_60:
	cmp	r13, rbx
	jbe	.LBB334_70
# %bb.61:
	mov	al, byte ptr [r11 + 57]
.LBB334_46:
	mov	byte ptr [rbx], al
	add	rbx, 1
	cmp	r13, rbx
	ja	.LBB334_25
.LBB334_40:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp622:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp623:
# %bb.41:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 15
.LBB334_72:
	add	qword ptr [r11 + 24], 1
	xor	eax, eax
.LBB334_73:
	mov	r10, qword ptr [rbp - 8] # 8-byte Reload
.LBB334_74:
	mov	qword ptr [r11 + 40], rsi
	mov	qword ptr [r10], rbx
                                        # kill: def $al killed $al killed $eax
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB334_62:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp610:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp611:
# %bb.63:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 18
	jmp	.LBB334_72
.LBB334_64:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp612:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp613:
# %bb.65:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 19
	jmp	.LBB334_72
.LBB334_66:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp614:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp615:
# %bb.67:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 20
	jmp	.LBB334_72
.LBB334_68:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp616:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp617:
# %bb.69:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 21
	jmp	.LBB334_72
.LBB334_70:
	mov	qword ptr [rbp - 8], r10 # 8-byte Spill
	mov	rdx, qword ptr [r11 + 24]
	add	rdx, 1
	mov	qword ptr [rbp - 24], rsi
	mov	qword ptr [rbp - 32], rbx
.Ltmp618:
	mov	rcx, r14
	mov	qword ptr [rbp - 16], r11 # 8-byte Spill
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp619:
# %bb.71:
	mov	r11, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [r11 + 24]
	mov	rcx, qword ptr [r11 + 32]
	mov	byte ptr [rcx + rax], 22
	jmp	.LBB334_72
	.seh_handlerdata
	.long	("$cppxdata$??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$75@?0???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$75@?0???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$75@?0???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB334_75:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32]
	mov	rcx, qword ptr [rbp - 24]
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rdx + 40], rcx
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end153:
	.p2align	2, 0x90
.LJTI334_0:
	.long	.LBB334_4-.LJTI334_0
	.long	.LBB334_24-.LJTI334_0
	.long	.LBB334_42-.LJTI334_0
	.long	.LBB334_44-.LJTI334_0
	.long	.LBB334_52-.LJTI334_0
	.long	.LBB334_54-.LJTI334_0
	.long	.LBB334_56-.LJTI334_0
	.long	.LBB334_58-.LJTI334_0
	.long	.LBB334_60-.LJTI334_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$75@?0???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin153@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp608@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp619@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin154:
.seh_proc "??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	r12, rdx
	mov	rsi, rcx
	mov	r13, qword ptr [rdx]
	mov	rdi, qword ptr [rdx + 8]
	mov	rax, qword ptr [rcx + 24]
	test	rax, rax
	je	.LBB335_1
# %bb.37:
	add	rax, -1
	mov	qword ptr [rsi + 24], rax
	mov	r15, qword ptr [rsi + 40]
	mov	rbx, qword ptr [rsi + 48]
	sub	rdi, r13
.LBB335_38:
	sub	rbx, r15
	cmp	rdi, rbx
	jae	.LBB335_42
# %bb.39:
	mov	qword ptr [rbp - 16], r12 # 8-byte Spill
	lea	rbx, [rsi + 8]
	mov	rcx, r13
	mov	rdx, r15
	mov	r8, rdi
	call	memcpy
	add	qword ptr [rsi + 40], rdi
	add	r13, rdi
	mov	qword ptr [rbp - 8], r13 # 8-byte Spill
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 1
.Ltmp624:
	mov	rcx, rbx
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp625:
# %bb.40:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 23
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	r13, qword ptr [rbp - 8] # 8-byte Reload
	jmp	.LBB335_44
.LBB335_1:
	mov	rax, qword ptr [rsi]
	mov	cl, byte ptr [rax + 8]
	and	cl, 63
	sub	rdi, r13
	cmp	cl, 4
	je	.LBB335_8
# %bb.2:
	cmp	cl, 5
	jne	.LBB335_3
# %bb.34:
	cmp	rdi, 27
	jb	.LBB335_36
# %bb.35:
	movsd	xmm0, qword ptr [rax + 16] # xmm0 = mem[0],zero
	mov	rdx, r13
	call	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	jmp	.LBB335_5
.LBB335_42:
	mov	rcx, r13
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	add	r13, rbx
	jmp	.LBB335_43
.LBB335_8:
	cmp	rdi, 27
	jb	.LBB335_21
# %bb.9:
	mov	rdx, qword ptr [rax + 16]
	cmp	rdx, 9
	ja	.LBB335_11
# %bb.10:
	add	dl, 48
	mov	byte ptr [r13], dl
	mov	r14d, 1
	add	r13, r14
	jmp	.LBB335_43
.LBB335_3:
	cmp	rdi, 27
	jb	.LBB335_6
# %bb.4:
	mov	rdx, qword ptr [rax + 16]
	mov	rcx, r13
	call	"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
.LBB335_5:
	mov	eax, eax
	add	r13, rax
.LBB335_43:
	mov	al, 1
.LBB335_44:
	mov	qword ptr [r12], r13
                                        # kill: def $al killed $al killed $eax
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB335_11:
	lea	r14, [rbp - 24]
	cmp	rdx, 1000
	jb	.LBB335_12
# %bb.13:
	movabs	r8, 3777893186295716171
	lea	r9, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	rsi, r14
	.p2align	4, 0x90
.LBB335_14:                             # =>This Inner Loop Header: Depth=1
	mov	rbx, rdx
	mov	rax, rdx
	mul	r8
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	ecx, ebx
	sub	ecx, eax
	movzx	eax, cx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	edi, eax, 100
	sub	ecx, edi
	movzx	ecx, cx
	movzx	ecx, word ptr [r9 + 2*rcx]
	mov	word ptr [rsi - 2], cx
	movzx	eax, word ptr [r9 + 2*rax]
	mov	word ptr [rsi - 4], ax
	add	rsi, -4
	cmp	rbx, 9999999
	ja	.LBB335_14
# %bb.15:
	cmp	rbx, 100000
	jae	.LBB335_16
	jmp	.LBB335_17
.LBB335_12:
	mov	rsi, r14
.LBB335_16:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ecx, eax, 100
	sub	edx, ecx
	movzx	ecx, dx
	lea	rdx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	ecx, word ptr [rdx + 2*rcx]
	mov	word ptr [rsi - 2], cx
	add	rsi, -2
	mov	rdx, rax
.LBB335_17:
	test	rdx, rdx
	je	.LBB335_19
# %bb.18:
	add	dl, 48
	mov	byte ptr [rsi - 1], dl
	add	rsi, -1
.LBB335_19:
	sub	r14d, esi
	mov	rcx, r13
	mov	rdx, rsi
	mov	r8, r14
	call	memcpy
	add	r13, r14
	jmp	.LBB335_43
.LBB335_36:
	lea	r15, [rsi + 56]
	movsd	xmm0, qword ptr [rax + 16] # xmm0 = mem[0],zero
	mov	rdx, r15
	call	"?d2s_buffered_n@ryu@detail@json@boost@@YAHNPEAD@Z"
	jmp	.LBB335_7
.LBB335_21:
	lea	r15, [rsi + 56]
	mov	rdx, qword ptr [rax + 16]
	cmp	rdx, 9
	ja	.LBB335_23
# %bb.22:
	add	dl, 48
	mov	byte ptr [r15], dl
	mov	r14d, 1
	jmp	.LBB335_32
.LBB335_6:
	lea	r15, [rsi + 56]
	mov	rdx, qword ptr [rax + 16]
	mov	rcx, r15
	call	"?format_int64@detail@json@boost@@YAIPEAD_J@Z"
.LBB335_7:
	mov	eax, eax
	lea	rbx, [rsi + rax]
	add	rbx, 56
	jmp	.LBB335_33
.LBB335_23:
	lea	r14, [rbp - 24]
	cmp	rdx, 1000
	jb	.LBB335_24
# %bb.25:
	movabs	r9, 3777893186295716171
	lea	r10, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	mov	r8, r14
.LBB335_26:                             # =>This Inner Loop Header: Depth=1
	mov	r11, rdx
	mov	rax, rdx
	mul	r9
	shr	rdx, 11
	imul	eax, edx, 10000
	mov	ecx, r11d
	sub	ecx, eax
	movzx	eax, cx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ebx, eax, 100
	sub	ecx, ebx
	movzx	ecx, cx
	movzx	ecx, word ptr [r10 + 2*rcx]
	mov	word ptr [r8 - 2], cx
	movzx	eax, word ptr [r10 + 2*rax]
	mov	word ptr [r8 - 4], ax
	add	r8, -4
	cmp	r11, 9999999
	ja	.LBB335_26
# %bb.27:
	cmp	r11, 100000
	jae	.LBB335_28
	jmp	.LBB335_29
.LBB335_24:
	mov	r8, r14
.LBB335_28:
	movzx	eax, dx
	shr	eax, 2
	imul	eax, eax, 5243
	shr	eax, 17
	imul	ecx, eax, 100
	sub	edx, ecx
	movzx	ecx, dx
	lea	rdx, [rip + "??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"]
	movzx	ecx, word ptr [rdx + 2*rcx]
	mov	word ptr [r8 - 2], cx
	add	r8, -2
	mov	rdx, rax
.LBB335_29:
	test	rdx, rdx
	je	.LBB335_31
# %bb.30:
	add	dl, 48
	mov	byte ptr [r8 - 1], dl
	add	r8, -1
.LBB335_31:
	sub	r14d, r8d
	mov	rcx, r15
	mov	rdx, r8
	mov	r8, r14
	call	memcpy
.LBB335_32:
	lea	rbx, [rsi + r14]
	add	rbx, 56
.LBB335_33:
	mov	qword ptr [rsi + 40], r15
	mov	qword ptr [rsi + 48], rbx
	jmp	.LBB335_38
	.seh_handlerdata
	.long	("$cppxdata$??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$41@?0???$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$41@?0???$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$41@?0???$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB335_41:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rax], rcx
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end154:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	80                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$41@?0???$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin154@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp624@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp625@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_number@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin155:
.seh_proc "??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	qword ptr [rbp - 16], rdx
	lea	r14, [rcx + 8]
	mov	rcx, qword ptr [rcx + 24]
	test	rcx, rcx
	je	.LBB336_1
# %bb.5:
	lea	rax, [rcx - 1]
	mov	qword ptr [rsi + 24], rax
	mov	rdi, qword ptr [rsi + 32]
	mov	al, byte ptr [rdi + rcx - 1]
	lea	rdx, [rcx - 9]
	mov	qword ptr [rsi + 24], rdx
	mov	rbx, qword ptr [rdi + rcx - 9]
	lea	rdx, [rcx - 17]
	mov	qword ptr [rsi + 24], rdx
	mov	r15, qword ptr [rdi + rcx - 17]
	mov	rdi, qword ptr [r15 + 16]
	lea	rcx, [rdi + 8]
	test	rdi, rdi
	cmove	rcx, rdi
	je	.LBB336_6
# %bb.7:
	mov	edi, dword ptr [rdi]
	jmp	.LBB336_8
.LBB336_1:
	mov	r15, qword ptr [rsi]
	mov	rax, qword ptr [r15 + 16]
	lea	rbx, [rax + 8]
	test	rax, rax
	cmove	rbx, rax
	je	.LBB336_2
# %bb.3:
	mov	eax, dword ptr [rax]
	jmp	.LBB336_4
.LBB336_6:
	xor	edi, edi
.LBB336_8:
	lea	rdi, [rdi + 2*rdi]
	lea	rdi, [rcx + 8*rdi]
	cmp	al, 25
	je	.LBB336_13
# %bb.9:
	cmp	al, 26
	je	.LBB336_24
# %bb.10:
	cmp	al, 27
	jne	.LBB336_11
	jmp	.LBB336_30
.LBB336_2:
	xor	eax, eax
.LBB336_4:
	lea	rax, [rax + 2*rax]
	lea	rdi, [rbx + 8*rax]
	xor	edx, edx
.LBB336_11:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB336_19
# %bb.12:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 91
	cmp	rdi, rbx
	jne	.LBB336_13
.LBB336_30:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB336_32
# %bb.31:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 93
	mov	al, 1
	jmp	.LBB336_37
.LBB336_19:
	add	rdx, 8
.Ltmp626:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp627:
# %bb.20:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp628:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp629:
# %bb.21:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp630:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp631:
# %bb.22:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 24
	jmp	.LBB336_36
.LBB336_32:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp646:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp647:
# %bb.33:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp648:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp649:
# %bb.34:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp650:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp651:
# %bb.35:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 27
	jmp	.LBB336_36
.LBB336_13:
	mov	qword ptr [rsi], rbx
.Ltmp632:
	lea	rdx, [rbp - 32]
	mov	rcx, rsi
	call	"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Ltmp633:
# %bb.14:
	test	al, al
	je	.LBB336_15
# %bb.23:
	add	rbx, 24
	cmp	rbx, rdi
	je	.LBB336_30
.LBB336_24:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB336_26
# %bb.25:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 44
	jmp	.LBB336_13
.LBB336_15:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp634:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp635:
# %bb.16:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp636:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp637:
# %bb.17:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp638:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp639:
# %bb.18:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 25
.LBB336_36:
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
.LBB336_37:
	mov	rcx, qword ptr [rbp - 32]
	mov	rdx, qword ptr [rbp - 16]
	mov	qword ptr [rdx], rcx
                                        # kill: def $al killed $al killed $eax
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB336_26:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp640:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp641:
# %bb.27:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp642:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp643:
# %bb.28:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp644:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp645:
# %bb.29:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 26
	jmp	.LBB336_36
	.seh_handlerdata
	.long	("$cppxdata$??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$38@?0???$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0???$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$38@?0???$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB336_38:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32]
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end155:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$38@?0???$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin155@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp626@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp645@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_array@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.globl	"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z" # -- Begin function ??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z
	.p2align	4, 0x90
"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z": # @"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Lfunc_begin156:
.seh_proc "??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 72
	.seh_stackalloc 72
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rbp - 32], xmm0
	mov	qword ptr [rbp - 16], rdx
	lea	r14, [rcx + 8]
	mov	rcx, qword ptr [rcx + 24]
	test	rcx, rcx
	je	.LBB337_1
# %bb.14:
	lea	rax, [rcx - 1]
	mov	qword ptr [rsi + 24], rax
	mov	rdi, qword ptr [rsi + 32]
	mov	al, byte ptr [rdi + rcx - 1]
	lea	rdx, [rcx - 9]
	mov	qword ptr [rsi + 24], rdx
	mov	rbx, qword ptr [rdi + rcx - 9]
	lea	rdx, [rcx - 17]
	mov	qword ptr [rsi + 24], rdx
	mov	r15, qword ptr [rdi + rcx - 17]
	mov	rdi, qword ptr [r15 + 16]
	lea	rcx, [rdi + 32]
	test	rdi, rdi
	cmove	rcx, rdi
	je	.LBB337_15
# %bb.16:
	mov	rdi, qword ptr [rdi]
	jmp	.LBB337_17
.LBB337_1:
	mov	r15, qword ptr [rsi]
	mov	rax, qword ptr [r15 + 16]
	lea	rbx, [rax + 32]
	test	rax, rax
	cmove	rbx, rax
	je	.LBB337_2
# %bb.3:
	mov	rax, qword ptr [rax]
	jmp	.LBB337_4
.LBB337_15:
	xor	edi, edi
.LBB337_17:
	lea	rdi, [rdi + 4*rdi]
	lea	rdi, [rcx + 8*rdi]
	add	al, -29
	cmp	al, 4
	ja	.LBB337_5
# %bb.18:
	movzx	eax, al
	lea	rcx, [rip + .LJTI337_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB337_2:
	xor	eax, eax
.LBB337_4:
	lea	rax, [rax + 4*rax]
	lea	rdi, [rbx + 8*rax]
	xor	edx, edx
.LBB337_5:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB337_19
# %bb.6:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 123
	cmp	rdi, rbx
	jne	.LBB337_7
	jmp	.LBB337_42
.LBB337_19:
	add	rdx, 8
.Ltmp652:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp653:
# %bb.20:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp654:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp655:
# %bb.21:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp656:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp657:
# %bb.22:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 28
	jmp	.LBB337_48
.LBB337_7:
	mov	rax, qword ptr [rbx + 24]
	mov	ecx, dword ptr [rbx + 32]
	add	rcx, rax
	mov	qword ptr [rsi + 40], rax
	mov	qword ptr [rsi + 48], rcx
.LBB337_8:
.Ltmp658:
	lea	rdx, [rbp - 32]
	mov	rcx, rsi
	call	"??$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Ltmp659:
# %bb.9:
	test	al, al
	je	.LBB337_10
.LBB337_23:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB337_31
# %bb.24:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 58
.LBB337_25:
	mov	qword ptr [rsi], rbx
.Ltmp672:
	lea	rdx, [rbp - 32]
	mov	rcx, rsi
	call	"??$write_value@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
.Ltmp673:
# %bb.26:
	test	al, al
	je	.LBB337_27
# %bb.35:
	add	rbx, 40
	cmp	rbx, rdi
	je	.LBB337_42
.LBB337_36:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB337_38
# %bb.37:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 44
	jmp	.LBB337_7
.LBB337_42:
	mov	rax, qword ptr [rbp - 32]
	cmp	rax, qword ptr [rbp - 24]
	jae	.LBB337_44
# %bb.43:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp - 32], rcx
	mov	byte ptr [rax], 125
	mov	al, 1
	jmp	.LBB337_49
.LBB337_10:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp660:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp661:
# %bb.11:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp662:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp663:
# %bb.12:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp664:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp665:
# %bb.13:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 29
	jmp	.LBB337_48
.LBB337_31:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp666:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp667:
# %bb.32:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp668:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp669:
# %bb.33:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp670:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp671:
# %bb.34:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 30
	jmp	.LBB337_48
.LBB337_27:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp674:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp675:
# %bb.28:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp676:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp677:
# %bb.29:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp678:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp679:
# %bb.30:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 31
	jmp	.LBB337_48
.LBB337_38:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp680:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp681:
# %bb.39:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp682:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp683:
# %bb.40:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp684:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp685:
# %bb.41:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 32
.LBB337_48:
	add	qword ptr [rsi + 24], 1
	xor	eax, eax
.LBB337_49:
	mov	rcx, qword ptr [rbp - 32]
	mov	rdx, qword ptr [rbp - 16]
	mov	qword ptr [rdx], rcx
                                        # kill: def $al killed $al killed $eax
	add	rsp, 72
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB337_44:
	mov	rdx, qword ptr [rsi + 24]
	add	rdx, 8
.Ltmp686:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp687:
# %bb.45:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], r15
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 16
.Ltmp688:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp689:
# %bb.46:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	qword ptr [rcx + rax], rbx
	mov	rdx, qword ptr [rsi + 24]
	lea	rax, [rdx + 8]
	mov	qword ptr [rsi + 24], rax
	add	rdx, 9
.Ltmp690:
	mov	rcx, r14
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
.Ltmp691:
# %bb.47:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 32]
	mov	byte ptr [rcx + rax], 33
	jmp	.LBB337_48
	.seh_handlerdata
	.long	("$cppxdata$??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.def	 "?dtor$50@?0???$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$50@?0???$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA":
.seh_proc "?dtor$50@?0???$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"
.LBB337_50:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32]
	mov	rcx, qword ptr [rbp - 16]
	mov	qword ptr [rcx], rax
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end156:
	.p2align	2, 0x90
.LJTI337_0:
	.long	.LBB337_8-.LJTI337_0
	.long	.LBB337_23-.LJTI337_0
	.long	.LBB337_25-.LJTI337_0
	.long	.LBB337_36-.LJTI337_0
	.long	.LBB337_42-.LJTI337_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
	.p2align	2
"$cppxdata$??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z")@IMGREL # IPToStateXData
	.long	64                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$50@?0???$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z":
	.long	.Lfunc_begin156@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp652@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp691@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$write_object@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@12@@Z"
                                        # -- End function
	.def	 "??_Glogic_error@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.globl	"??_Glogic_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Glogic_error@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Glogic_error@std@@UEAAPEAXI@Z":     # @"??_Glogic_error@std@@UEAAPEAXI@Z"
.Lfunc_begin157:
.seh_proc "??_Glogic_error@std@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
.Ltmp692:
	call	__std_exception_destroy
.Ltmp693:
# %bb.1:
	test	edi, edi
	je	.LBB338_3
# %bb.2:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB338_3:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_Glogic_error@std@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???_Glogic_error@std@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Glogic_error@std@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$4@?0???_Glogic_error@std@@UEAAPEAXI@Z@4HA"
.LBB338_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end157:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_Glogic_error@std@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_Glogic_error@std@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_Glogic_error@std@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_Glogic_error@std@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$4@?0???_Glogic_error@std@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_Glogic_error@std@@UEAAPEAXI@Z":
	.long	.Lfunc_begin157@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp692@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp693@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "?grow_one@stack@value_stack@json@boost@@QEAAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	.globl	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ" # -- Begin function ?grow_one@stack@value_stack@json@boost@@QEAAXXZ
	.p2align	4, 0x90
"?grow_one@stack@value_stack@json@boost@@QEAAXXZ": # @"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
.seh_proc "?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	r14, qword ptr [rcx + 32]
	sub	r14, qword ptr [rcx + 16]
	mov	rcx, r14
	sar	rcx, 3
	movabs	rax, -6148914691236517205
	imul	rax, rcx
	add	rax, 1
	mov	ecx, 16
	.p2align	4, 0x90
.LBB339_1:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rcx
	add	rcx, rcx
	cmp	rbx, rax
	jb	.LBB339_1
# %bb.2:
	mov	rdi, qword ptr [rsi]
	test	rdi, rdi
	je	.LBB339_4
# %bb.3:
	and	rdi, -4
	jmp	.LBB339_7
.LBB339_4:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB339_5
.LBB339_7:
	lea	rax, [8*rbx]
	lea	rdx, [rax + 2*rax]
	mov	rax, qword ptr [rdi]
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
	mov	rdi, rax
	mov	rdx, qword ptr [rsi + 16]
	test	rdx, rdx
	je	.LBB339_15
# %bb.8:
	mov	r8, qword ptr [rsi + 24]
	sub	r8, rdx
	mov	rcx, rdi
	call	memcpy
	mov	rdx, qword ptr [rsi + 16]
	cmp	rdx, qword ptr [rsi + 8]
	je	.LBB339_15
# %bb.9:
	mov	r15, qword ptr [rsi]
	test	r15, r15
	je	.LBB339_11
# %bb.10:
	and	r15, -4
	jmp	.LBB339_14
.LBB339_11:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	r15, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB339_12
.LBB339_14:
	mov	rdx, qword ptr [rsi + 16]
	mov	rax, qword ptr [r15]
	mov	r9d, 8
	mov	rcx, r15
	mov	r8, r14
	call	qword ptr [rax + 16]
	mov	rdx, qword ptr [rsi + 16]
.LBB339_15:
	mov	rax, qword ptr [rsi + 24]
	sub	rax, rdx
	add	rax, rdi
	mov	qword ptr [rsi + 24], rax
	lea	rax, [rbx + 2*rbx]
	lea	rax, [rdi + 8*rax]
	mov	qword ptr [rsi + 32], rax
	mov	qword ptr [rsi + 16], rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB339_5:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB339_7
# %bb.6:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB339_7
.LBB339_12:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB339_14
# %bb.13:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB339_14
	.seh_handlerdata
	.section	.text,"xr",discard,"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?grow@stack@value_stack@json@boost@@QEAAX_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	.globl	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z" # -- Begin function ?grow@stack@value_stack@json@boost@@QEAAX_K@Z
	.p2align	4, 0x90
"?grow@stack@value_stack@json@boost@@QEAAX_K@Z": # @"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
.seh_proc "?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	r15, qword ptr [rcx + 16]
	mov	rcx, qword ptr [rcx + 24]
	sub	rcx, r15
	sar	rcx, 3
	movabs	rbx, -6148914691236517205
	imul	rcx, rbx
	mov	rax, qword ptr [rsi + 40]
	add	rax, rdx
	add	rax, 23
	mul	rbx
	shr	rdx, 4
	lea	rax, [rcx + rdx]
	add	rax, 1
	mov	r14, qword ptr [rsi + 32]
	mov	ecx, 16
	.p2align	4, 0x90
.LBB340_1:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rcx
	add	rcx, rcx
	cmp	rbx, rax
	jb	.LBB340_1
# %bb.2:
	mov	rdi, qword ptr [rsi]
	test	rdi, rdi
	je	.LBB340_4
# %bb.3:
	and	rdi, -4
	jmp	.LBB340_7
.LBB340_4:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB340_5
.LBB340_7:
	lea	rax, [8*rbx]
	lea	rdx, [rax + 2*rax]
	mov	rax, qword ptr [rdi]
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
	mov	rdi, rax
	mov	rdx, qword ptr [rsi + 16]
	test	rdx, rdx
	je	.LBB340_15
# %bb.8:
	mov	rax, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 40]
	sub	rax, rdx
	lea	r8, [rcx + 24]
	test	rcx, rcx
	cmove	r8, rcx
	add	r8, rax
	mov	rcx, rdi
	call	memcpy
	mov	rdx, qword ptr [rsi + 16]
	cmp	rdx, qword ptr [rsi + 8]
	je	.LBB340_15
# %bb.9:
	sub	r14, r15
	mov	r15, qword ptr [rsi]
	test	r15, r15
	je	.LBB340_11
# %bb.10:
	and	r15, -4
	jmp	.LBB340_14
.LBB340_11:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	r15, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB340_12
.LBB340_14:
	mov	rdx, qword ptr [rsi + 16]
	mov	rax, qword ptr [r15]
	mov	r9d, 8
	mov	rcx, r15
	mov	r8, r14
	call	qword ptr [rax + 16]
	mov	rdx, qword ptr [rsi + 16]
.LBB340_15:
	mov	rax, qword ptr [rsi + 24]
	sub	rax, rdx
	add	rax, rdi
	mov	qword ptr [rsi + 24], rax
	lea	rax, [rbx + 2*rbx]
	lea	rax, [rdi + 8*rax]
	mov	qword ptr [rsi + 32], rax
	mov	qword ptr [rsi + 16], rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB340_5:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB340_7
# %bb.6:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB340_7
.LBB340_12:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB340_14
# %bb.13:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB340_14
	.seh_handlerdata
	.section	.text,"xr",discard,"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin158:
.seh_proc "??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp694:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp695:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB341_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end158:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin158@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp694@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp695@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBUarray_index_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin159:
.seh_proc "??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp696:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp697:
# %bb.1:
	lea	rax, [rip + "??_7array_index_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB342_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp698:
	call	qword ptr [rax + 24]
.Ltmp699:
.LBB342_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB342_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB342_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end159:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin159@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp696@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp698@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp699@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0array_index_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0array_index_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0array_index_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0array_index_error@json@boost@@QEAA@AEBU012@@Z": # @"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin160:
.seh_proc "??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp700:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp701:
# %bb.1:
	lea	rax, [rip + "??_7array_index_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array_index_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0array_index_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0array_index_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0array_index_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB343_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end160:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0array_index_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array_index_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array_index_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array_index_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0array_index_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0array_index_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin160@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp700@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp701@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??0out_of_range@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0out_of_range@std@@QEAA@AEBV01@@Z"
	.globl	"??0out_of_range@std@@QEAA@AEBV01@@Z" # -- Begin function ??0out_of_range@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0out_of_range@std@@QEAA@AEBV01@@Z":  # @"??0out_of_range@std@@QEAA@AEBV01@@Z"
.Lfunc_begin161:
.seh_proc "??0out_of_range@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp702:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp703:
# %bb.1:
	lea	rax, [rip + "??_7out_of_range@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0out_of_range@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0out_of_range@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0out_of_range@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0out_of_range@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0out_of_range@std@@QEAA@AEBV01@@Z@4HA"
.LBB344_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end161:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0out_of_range@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0out_of_range@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0out_of_range@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0out_of_range@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0out_of_range@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0out_of_range@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0out_of_range@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0out_of_range@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin161@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp702@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp703@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0out_of_range@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin162:
.seh_proc "??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB345_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp704:
	call	qword ptr [rax + 32]
.Ltmp705:
# %bb.2:
	test	al, al
	je	.LBB345_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB345_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp706:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp707:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB345_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB345_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end162:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin162@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp704@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp706@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp707@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin163:
.seh_proc "?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp708:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp709:
# %bb.1:
	lea	rax, [rip + "??_7array_index_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB346_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp710:
	call	qword ptr [rax + 24]
.Ltmp711:
.LBB346_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp712:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp713:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB346_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB346_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB346_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end163:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin163@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp708@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp710@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp712@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp713@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin164:
.seh_proc "??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB348_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp714:
	call	qword ptr [rax + 32]
.Ltmp715:
# %bb.2:
	test	al, al
	je	.LBB348_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB348_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp716:
	call	__std_exception_destroy
.Ltmp717:
# %bb.5:
	test	edi, edi
	je	.LBB348_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB348_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB348_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB348_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end164:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin164@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp714@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp716@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp717@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin165:
.seh_proc "??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB349_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp718:
	call	qword ptr [rax + 32]
.Ltmp719:
# %bb.2:
	test	al, al
	je	.LBB349_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB349_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp720:
	call	__std_exception_destroy
.Ltmp721:
# %bb.5:
	test	edi, edi
	je	.LBB349_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB349_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB349_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB349_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end165:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin165@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp718@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp720@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp721@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin166:
.seh_proc "??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB350_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp722:
	call	qword ptr [rax + 32]
.Ltmp723:
# %bb.2:
	test	al, al
	je	.LBB350_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB350_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp724:
	call	__std_exception_destroy
.Ltmp725:
# %bb.5:
	test	edi, edi
	je	.LBB350_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB350_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB350_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB350_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end166:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin166@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp722@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp724@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp725@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin167:
.seh_proc "??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp726:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp727:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB351_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end167:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin167@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp726@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp727@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBUarray_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin168:
.seh_proc "??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp728:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp729:
# %bb.1:
	lea	rax, [rip + "??_7array_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB352_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp730:
	call	qword ptr [rax + 24]
.Ltmp731:
.LBB352_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB352_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB352_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end168:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin168@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp728@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp730@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp731@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0array_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0array_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0array_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0array_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin169:
.seh_proc "??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp732:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp733:
# %bb.1:
	lea	rax, [rip + "??_7array_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0array_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0array_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0array_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB353_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end169:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0array_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0array_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0array_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin169@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp732@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp733@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??0type_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0type_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0type_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0type_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0type_error@json@boost@@QEAA@AEBU012@@Z": # @"??0type_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin170:
.seh_proc "??0type_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp734:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp735:
# %bb.1:
	lea	rax, [rip + "??_7type_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0type_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0type_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0type_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0type_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0type_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB354_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end170:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0type_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0type_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0type_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0type_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0type_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0type_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0type_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0type_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin170@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp734@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp735@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0type_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??0invalid_argument@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0invalid_argument@std@@QEAA@AEBV01@@Z"
	.globl	"??0invalid_argument@std@@QEAA@AEBV01@@Z" # -- Begin function ??0invalid_argument@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0invalid_argument@std@@QEAA@AEBV01@@Z": # @"??0invalid_argument@std@@QEAA@AEBV01@@Z"
.Lfunc_begin171:
.seh_proc "??0invalid_argument@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp736:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp737:
# %bb.1:
	lea	rax, [rip + "??_7invalid_argument@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0invalid_argument@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0invalid_argument@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0invalid_argument@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0invalid_argument@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0invalid_argument@std@@QEAA@AEBV01@@Z@4HA"
.LBB355_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end171:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0invalid_argument@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0invalid_argument@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0invalid_argument@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0invalid_argument@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0invalid_argument@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0invalid_argument@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0invalid_argument@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0invalid_argument@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin171@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp736@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp737@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0invalid_argument@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin172:
.seh_proc "??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB356_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp738:
	call	qword ptr [rax + 32]
.Ltmp739:
# %bb.2:
	test	al, al
	je	.LBB356_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB356_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp740:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp741:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB356_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB356_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end172:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin172@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp738@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp740@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp741@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin173:
.seh_proc "?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp742:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp743:
# %bb.1:
	lea	rax, [rip + "??_7array_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB357_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp744:
	call	qword ptr [rax + 24]
.Ltmp745:
.LBB357_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp746:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp747:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB357_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB357_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB357_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end173:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin173@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp742@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp744@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp746@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp747@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin174:
.seh_proc "??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB359_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp748:
	call	qword ptr [rax + 32]
.Ltmp749:
# %bb.2:
	test	al, al
	je	.LBB359_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB359_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp750:
	call	__std_exception_destroy
.Ltmp751:
# %bb.5:
	test	edi, edi
	je	.LBB359_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB359_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB359_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB359_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end174:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin174@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp748@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp750@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp751@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin175:
.seh_proc "??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB360_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp752:
	call	qword ptr [rax + 32]
.Ltmp753:
# %bb.2:
	test	al, al
	je	.LBB360_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB360_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp754:
	call	__std_exception_destroy
.Ltmp755:
# %bb.5:
	test	edi, edi
	je	.LBB360_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB360_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB360_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB360_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end175:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin175@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp752@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp754@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp755@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin176:
.seh_proc "??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB361_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp756:
	call	qword ptr [rax + 32]
.Ltmp757:
# %bb.2:
	test	al, al
	je	.LBB361_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB361_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp758:
	call	__std_exception_destroy
.Ltmp759:
# %bb.5:
	test	edi, edi
	je	.LBB361_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB361_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB361_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB361_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end176:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin176@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp756@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp758@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp759@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin177:
.seh_proc "??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp760:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp761:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z@4HA"
.LBB362_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end177:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin177@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp760@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp761@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBUarray_too_large@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin178:
.seh_proc "??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp762:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp763:
# %bb.1:
	lea	rax, [rip + "??_7array_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB363_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp764:
	call	qword ptr [rax + 24]
.Ltmp765:
.LBB363_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB363_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB363_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end178:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin178@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp762@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp764@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp765@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0array_too_large@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0array_too_large@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0array_too_large@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0array_too_large@json@boost@@QEAA@AEBU012@@Z": # @"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin179:
.seh_proc "??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp766:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp767:
# %bb.1:
	lea	rax, [rip + "??_7array_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0array_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0array_too_large@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0array_too_large@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0array_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB364_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end179:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0array_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0array_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0array_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0array_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0array_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0array_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin179@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp766@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp767@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??0length_error@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0length_error@std@@QEAA@AEBV01@@Z"
	.globl	"??0length_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0length_error@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0length_error@std@@QEAA@AEBV01@@Z":  # @"??0length_error@std@@QEAA@AEBV01@@Z"
.Lfunc_begin180:
.seh_proc "??0length_error@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp768:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp769:
# %bb.1:
	lea	rax, [rip + "??_7length_error@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0length_error@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0length_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0length_error@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0length_error@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0length_error@std@@QEAA@AEBV01@@Z@4HA"
.LBB365_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end180:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0length_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0length_error@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0length_error@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0length_error@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0length_error@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0length_error@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0length_error@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0length_error@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin180@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp768@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp769@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0length_error@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin181:
.seh_proc "??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB366_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp770:
	call	qword ptr [rax + 32]
.Ltmp771:
# %bb.2:
	test	al, al
	je	.LBB366_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB366_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp772:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp773:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB366_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB366_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end181:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin181@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp770@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp772@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp773@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin182:
.seh_proc "?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp774:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp775:
# %bb.1:
	lea	rax, [rip + "??_7array_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB367_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp776:
	call	qword ptr [rax + 24]
.Ltmp777:
.LBB367_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp778:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp779:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB367_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB367_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB367_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end182:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin182@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp774@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp776@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp778@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp779@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin183:
.seh_proc "??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB369_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp780:
	call	qword ptr [rax + 32]
.Ltmp781:
# %bb.2:
	test	al, al
	je	.LBB369_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB369_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp782:
	call	__std_exception_destroy
.Ltmp783:
# %bb.5:
	test	edi, edi
	je	.LBB369_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB369_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB369_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB369_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end183:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin183@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp780@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp782@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp783@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin184:
.seh_proc "??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB370_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp784:
	call	qword ptr [rax + 32]
.Ltmp785:
# %bb.2:
	test	al, al
	je	.LBB370_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB370_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp786:
	call	__std_exception_destroy
.Ltmp787:
# %bb.5:
	test	edi, edi
	je	.LBB370_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB370_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB370_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB370_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end184:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin184@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp784@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp786@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp787@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin185:
.seh_proc "??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB371_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp788:
	call	qword ptr [rax + 32]
.Ltmp789:
# %bb.2:
	test	al, al
	je	.LBB371_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB371_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp790:
	call	__std_exception_destroy
.Ltmp791:
# %bb.5:
	test	edi, edi
	je	.LBB371_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB371_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB371_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB371_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end185:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin185@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp788@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp790@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp791@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin186:
.seh_proc "??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp792:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp793:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB372_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end186:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin186@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp792@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp793@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBUbool_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin187:
.seh_proc "??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp794:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp795:
# %bb.1:
	lea	rax, [rip + "??_7bool_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB373_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp796:
	call	qword ptr [rax + 24]
.Ltmp797:
.LBB373_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB373_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB373_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end187:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin187@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp794@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp796@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp797@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0bool_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0bool_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin188:
.seh_proc "??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp798:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp799:
# %bb.1:
	lea	rax, [rip + "??_7bool_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0bool_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0bool_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bool_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0bool_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB374_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end188:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0bool_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0bool_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0bool_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0bool_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0bool_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0bool_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin188@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp798@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp799@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin189:
.seh_proc "??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB375_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp800:
	call	qword ptr [rax + 32]
.Ltmp801:
# %bb.2:
	test	al, al
	je	.LBB375_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB375_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp802:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp803:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB375_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB375_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end189:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin189@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp800@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp802@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp803@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin190:
.seh_proc "?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp804:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp805:
# %bb.1:
	lea	rax, [rip + "??_7bool_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB376_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp806:
	call	qword ptr [rax + 24]
.Ltmp807:
.LBB376_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp808:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp809:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB376_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB376_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB376_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end190:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin190@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp804@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp806@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp808@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp809@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin191:
.seh_proc "??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB378_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp810:
	call	qword ptr [rax + 32]
.Ltmp811:
# %bb.2:
	test	al, al
	je	.LBB378_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB378_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp812:
	call	__std_exception_destroy
.Ltmp813:
# %bb.5:
	test	edi, edi
	je	.LBB378_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB378_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB378_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB378_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end191:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin191@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp810@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp812@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp813@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin192:
.seh_proc "??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB379_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp814:
	call	qword ptr [rax + 32]
.Ltmp815:
# %bb.2:
	test	al, al
	je	.LBB379_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB379_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp816:
	call	__std_exception_destroy
.Ltmp817:
# %bb.5:
	test	edi, edi
	je	.LBB379_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB379_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB379_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB379_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end192:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin192@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp814@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp816@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp817@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin193:
.seh_proc "??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB380_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp818:
	call	qword ptr [rax + 32]
.Ltmp819:
# %bb.2:
	test	al, al
	je	.LBB380_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB380_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp820:
	call	__std_exception_destroy
.Ltmp821:
# %bb.5:
	test	edi, edi
	je	.LBB380_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB380_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB380_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB380_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end193:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin193@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp818@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp820@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp821@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin194:
.seh_proc "??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp822:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp823:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB381_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end194:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin194@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp822@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp823@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBUchar_pos_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin195:
.seh_proc "??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp824:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp825:
# %bb.1:
	lea	rax, [rip + "??_7char_pos_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB382_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp826:
	call	qword ptr [rax + 24]
.Ltmp827:
.LBB382_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB382_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB382_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end195:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin195@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp824@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp826@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp827@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0char_pos_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0char_pos_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z": # @"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin196:
.seh_proc "??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp828:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp829:
# %bb.1:
	lea	rax, [rip + "??_7char_pos_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0char_pos_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0char_pos_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0char_pos_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0char_pos_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB383_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end196:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0char_pos_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0char_pos_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0char_pos_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0char_pos_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0char_pos_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0char_pos_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin196@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp828@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp829@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin197:
.seh_proc "??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB384_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp830:
	call	qword ptr [rax + 32]
.Ltmp831:
# %bb.2:
	test	al, al
	je	.LBB384_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB384_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp832:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp833:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB384_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB384_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end197:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin197@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp830@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp832@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp833@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin198:
.seh_proc "?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp834:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp835:
# %bb.1:
	lea	rax, [rip + "??_7char_pos_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB385_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp836:
	call	qword ptr [rax + 24]
.Ltmp837:
.LBB385_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp838:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp839:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB385_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB385_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB385_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end198:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin198@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp834@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp836@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp838@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp839@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin199:
.seh_proc "??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB387_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp840:
	call	qword ptr [rax + 32]
.Ltmp841:
# %bb.2:
	test	al, al
	je	.LBB387_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB387_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp842:
	call	__std_exception_destroy
.Ltmp843:
# %bb.5:
	test	edi, edi
	je	.LBB387_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB387_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB387_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB387_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end199:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin199@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp840@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp842@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp843@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin200:
.seh_proc "??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB388_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp844:
	call	qword ptr [rax + 32]
.Ltmp845:
# %bb.2:
	test	al, al
	je	.LBB388_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB388_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp846:
	call	__std_exception_destroy
.Ltmp847:
# %bb.5:
	test	edi, edi
	je	.LBB388_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB388_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB388_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB388_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end200:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin200@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp844@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp846@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp847@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin201:
.seh_proc "??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB389_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp848:
	call	qword ptr [rax + 32]
.Ltmp849:
# %bb.2:
	test	al, al
	je	.LBB389_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB389_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp850:
	call	__std_exception_destroy
.Ltmp851:
# %bb.5:
	test	edi, edi
	je	.LBB389_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB389_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB389_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB389_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end201:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin201@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp848@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp850@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp851@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin202:
.seh_proc "??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp852:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp853:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB390_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end202:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin202@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp852@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp853@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBUdouble_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin203:
.seh_proc "??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp854:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp855:
# %bb.1:
	lea	rax, [rip + "??_7double_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB391_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp856:
	call	qword ptr [rax + 24]
.Ltmp857:
.LBB391_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB391_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB391_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end203:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin203@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp854@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp856@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp857@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0double_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0double_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0double_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0double_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin204:
.seh_proc "??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp858:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp859:
# %bb.1:
	lea	rax, [rip + "??_7double_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0double_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0double_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0double_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0double_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB392_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end204:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0double_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0double_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0double_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0double_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0double_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0double_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin204@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp858@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp859@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??0number_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0number_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0number_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0number_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin205:
.seh_proc "??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp860:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp861:
# %bb.1:
	lea	rax, [rip + "??_7number_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0number_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0number_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0number_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0number_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB393_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end205:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0number_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0number_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0number_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0number_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0number_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0number_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin205@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp860@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp861@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin206:
.seh_proc "??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB394_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp862:
	call	qword ptr [rax + 32]
.Ltmp863:
# %bb.2:
	test	al, al
	je	.LBB394_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB394_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp864:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp865:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB394_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB394_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end206:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin206@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp862@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp864@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp865@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin207:
.seh_proc "?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp866:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp867:
# %bb.1:
	lea	rax, [rip + "??_7double_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB395_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp868:
	call	qword ptr [rax + 24]
.Ltmp869:
.LBB395_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp870:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp871:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB395_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB395_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB395_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end207:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin207@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp866@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp868@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp870@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp871@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin208:
.seh_proc "??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB397_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp872:
	call	qword ptr [rax + 32]
.Ltmp873:
# %bb.2:
	test	al, al
	je	.LBB397_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB397_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp874:
	call	__std_exception_destroy
.Ltmp875:
# %bb.5:
	test	edi, edi
	je	.LBB397_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB397_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB397_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB397_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end208:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin208@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp872@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp874@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp875@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin209:
.seh_proc "??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB398_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp876:
	call	qword ptr [rax + 32]
.Ltmp877:
# %bb.2:
	test	al, al
	je	.LBB398_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB398_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp878:
	call	__std_exception_destroy
.Ltmp879:
# %bb.5:
	test	edi, edi
	je	.LBB398_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB398_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB398_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB398_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end209:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin209@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp876@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp878@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp879@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin210:
.seh_proc "??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB399_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp880:
	call	qword ptr [rax + 32]
.Ltmp881:
# %bb.2:
	test	al, al
	je	.LBB399_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB399_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp882:
	call	__std_exception_destroy
.Ltmp883:
# %bb.5:
	test	edi, edi
	je	.LBB399_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB399_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB399_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB399_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end210:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin210@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp880@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp882@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp883@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin211:
.seh_proc "??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp884:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp885:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB400_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end211:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin211@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp884@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp885@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBUint64_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin212:
.seh_proc "??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp886:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp887:
# %bb.1:
	lea	rax, [rip + "??_7int64_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB401_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp888:
	call	qword ptr [rax + 24]
.Ltmp889:
.LBB401_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB401_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB401_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end212:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin212@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp886@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp888@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp889@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0int64_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0int64_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin213:
.seh_proc "??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp890:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp891:
# %bb.1:
	lea	rax, [rip + "??_7int64_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0int64_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0int64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0int64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0int64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB402_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end213:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0int64_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0int64_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0int64_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0int64_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0int64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0int64_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin213@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp890@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp891@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin214:
.seh_proc "??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB403_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp892:
	call	qword ptr [rax + 32]
.Ltmp893:
# %bb.2:
	test	al, al
	je	.LBB403_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB403_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp894:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp895:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB403_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB403_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end214:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin214@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp892@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp894@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp895@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin215:
.seh_proc "?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp896:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp897:
# %bb.1:
	lea	rax, [rip + "??_7int64_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB404_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp898:
	call	qword ptr [rax + 24]
.Ltmp899:
.LBB404_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp900:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp901:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB404_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB404_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB404_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end215:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin215@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp896@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp898@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp900@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp901@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin216:
.seh_proc "??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB406_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp902:
	call	qword ptr [rax + 32]
.Ltmp903:
# %bb.2:
	test	al, al
	je	.LBB406_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB406_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp904:
	call	__std_exception_destroy
.Ltmp905:
# %bb.5:
	test	edi, edi
	je	.LBB406_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB406_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB406_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB406_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end216:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin216@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp902@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp904@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp905@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin217:
.seh_proc "??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB407_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp906:
	call	qword ptr [rax + 32]
.Ltmp907:
# %bb.2:
	test	al, al
	je	.LBB407_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB407_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp908:
	call	__std_exception_destroy
.Ltmp909:
# %bb.5:
	test	edi, edi
	je	.LBB407_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB407_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB407_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB407_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end217:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin217@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp906@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp908@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp909@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin218:
.seh_proc "??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB408_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp910:
	call	qword ptr [rax + 32]
.Ltmp911:
# %bb.2:
	test	al, al
	je	.LBB408_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB408_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp912:
	call	__std_exception_destroy
.Ltmp913:
# %bb.5:
	test	edi, edi
	je	.LBB408_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB408_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB408_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB408_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end218:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin218@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp910@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp912@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp913@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin219:
.seh_proc "??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp914:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp915:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z@4HA"
.LBB409_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end219:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin219@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp914@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp915@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBUkey_not_found@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin220:
.seh_proc "??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp916:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp917:
# %bb.1:
	lea	rax, [rip + "??_7key_not_found@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB410_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp918:
	call	qword ptr [rax + 24]
.Ltmp919:
.LBB410_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB410_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB410_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end220:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin220@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp916@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp918@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp919@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0key_not_found@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0key_not_found@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0key_not_found@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0key_not_found@json@boost@@QEAA@AEBU012@@Z": # @"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin221:
.seh_proc "??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp920:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp921:
# %bb.1:
	lea	rax, [rip + "??_7key_not_found@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0key_not_found@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0key_not_found@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0key_not_found@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0key_not_found@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB411_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end221:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0key_not_found@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0key_not_found@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0key_not_found@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0key_not_found@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0key_not_found@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0key_not_found@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin221@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp920@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp921@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin222:
.seh_proc "??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB412_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp922:
	call	qword ptr [rax + 32]
.Ltmp923:
# %bb.2:
	test	al, al
	je	.LBB412_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB412_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp924:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp925:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB412_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB412_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end222:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin222@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp922@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp924@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp925@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin223:
.seh_proc "?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp926:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp927:
# %bb.1:
	lea	rax, [rip + "??_7key_not_found@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB413_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp928:
	call	qword ptr [rax + 24]
.Ltmp929:
.LBB413_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp930:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp931:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB413_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB413_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB413_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end223:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin223@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp926@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp928@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp930@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp931@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin224:
.seh_proc "??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB415_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp932:
	call	qword ptr [rax + 32]
.Ltmp933:
# %bb.2:
	test	al, al
	je	.LBB415_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB415_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp934:
	call	__std_exception_destroy
.Ltmp935:
# %bb.5:
	test	edi, edi
	je	.LBB415_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB415_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB415_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB415_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end224:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin224@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp932@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp934@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp935@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin225:
.seh_proc "??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB416_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp936:
	call	qword ptr [rax + 32]
.Ltmp937:
# %bb.2:
	test	al, al
	je	.LBB416_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB416_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp938:
	call	__std_exception_destroy
.Ltmp939:
# %bb.5:
	test	edi, edi
	je	.LBB416_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB416_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB416_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB416_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end225:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin225@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp936@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp938@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp939@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin226:
.seh_proc "??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB417_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp940:
	call	qword ptr [rax + 32]
.Ltmp941:
# %bb.2:
	test	al, al
	je	.LBB417_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB417_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp942:
	call	__std_exception_destroy
.Ltmp943:
# %bb.5:
	test	edi, edi
	je	.LBB417_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB417_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB417_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB417_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end226:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin226@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp940@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp942@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp943@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin227:
.seh_proc "??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp944:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp945:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z@4HA"
.LBB418_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end227:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin227@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp944@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp945@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBUkey_too_large@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin228:
.seh_proc "??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp946:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp947:
# %bb.1:
	lea	rax, [rip + "??_7key_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB419_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp948:
	call	qword ptr [rax + 24]
.Ltmp949:
.LBB419_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB419_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB419_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end228:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin228@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp946@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp948@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp949@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0key_too_large@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0key_too_large@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0key_too_large@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0key_too_large@json@boost@@QEAA@AEBU012@@Z": # @"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin229:
.seh_proc "??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp950:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp951:
# %bb.1:
	lea	rax, [rip + "??_7key_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0key_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0key_too_large@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0key_too_large@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0key_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB420_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end229:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0key_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0key_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0key_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0key_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0key_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0key_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin229@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp950@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp951@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin230:
.seh_proc "??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB421_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp952:
	call	qword ptr [rax + 32]
.Ltmp953:
# %bb.2:
	test	al, al
	je	.LBB421_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB421_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp954:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp955:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB421_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB421_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end230:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin230@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp952@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp954@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp955@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin231:
.seh_proc "?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp956:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp957:
# %bb.1:
	lea	rax, [rip + "??_7key_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB422_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp958:
	call	qword ptr [rax + 24]
.Ltmp959:
.LBB422_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp960:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp961:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB422_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB422_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB422_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end231:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin231@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp956@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp958@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp960@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp961@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin232:
.seh_proc "??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB424_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp962:
	call	qword ptr [rax + 32]
.Ltmp963:
# %bb.2:
	test	al, al
	je	.LBB424_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB424_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp964:
	call	__std_exception_destroy
.Ltmp965:
# %bb.5:
	test	edi, edi
	je	.LBB424_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB424_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB424_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB424_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end232:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin232@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp962@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp964@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp965@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin233:
.seh_proc "??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB425_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp966:
	call	qword ptr [rax + 32]
.Ltmp967:
# %bb.2:
	test	al, al
	je	.LBB425_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB425_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp968:
	call	__std_exception_destroy
.Ltmp969:
# %bb.5:
	test	edi, edi
	je	.LBB425_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB425_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB425_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB425_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end233:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin233@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp966@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp968@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp969@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin234:
.seh_proc "??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB426_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp970:
	call	qword ptr [rax + 32]
.Ltmp971:
# %bb.2:
	test	al, al
	je	.LBB426_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB426_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp972:
	call	__std_exception_destroy
.Ltmp973:
# %bb.5:
	test	edi, edi
	je	.LBB426_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB426_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB426_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB426_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end234:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin234@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp970@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp972@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp973@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin235:
.seh_proc "??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp974:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp975:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB427_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end235:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin235@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp974@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp975@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBUobject_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin236:
.seh_proc "??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp976:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp977:
# %bb.1:
	lea	rax, [rip + "??_7object_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB428_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp978:
	call	qword ptr [rax + 24]
.Ltmp979:
.LBB428_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB428_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB428_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end236:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin236@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp976@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp978@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp979@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0object_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0object_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0object_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0object_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin237:
.seh_proc "??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp980:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp981:
# %bb.1:
	lea	rax, [rip + "??_7object_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0object_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0object_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0object_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB429_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end237:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0object_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0object_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0object_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin237@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp980@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp981@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin238:
.seh_proc "??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB430_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp982:
	call	qword ptr [rax + 32]
.Ltmp983:
# %bb.2:
	test	al, al
	je	.LBB430_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB430_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp984:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp985:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB430_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB430_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end238:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin238@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp982@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp984@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp985@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin239:
.seh_proc "?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp986:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp987:
# %bb.1:
	lea	rax, [rip + "??_7object_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB431_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp988:
	call	qword ptr [rax + 24]
.Ltmp989:
.LBB431_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp990:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp991:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB431_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB431_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB431_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end239:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin239@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp986@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp988@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp990@IMGREL+1       # IP
	.long	2                       # ToState
	.long	.Ltmp991@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin240:
.seh_proc "??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB433_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp992:
	call	qword ptr [rax + 32]
.Ltmp993:
# %bb.2:
	test	al, al
	je	.LBB433_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB433_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp994:
	call	__std_exception_destroy
.Ltmp995:
# %bb.5:
	test	edi, edi
	je	.LBB433_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB433_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB433_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB433_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end240:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin240@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp992@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp994@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp995@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin241:
.seh_proc "??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB434_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp996:
	call	qword ptr [rax + 32]
.Ltmp997:
# %bb.2:
	test	al, al
	je	.LBB434_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB434_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp998:
	call	__std_exception_destroy
.Ltmp999:
# %bb.5:
	test	edi, edi
	je	.LBB434_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB434_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB434_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB434_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end241:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin241@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp996@IMGREL+1       # IP
	.long	0                       # ToState
	.long	.Ltmp998@IMGREL+1       # IP
	.long	1                       # ToState
	.long	.Ltmp999@IMGREL+1       # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin242:
.seh_proc "??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB435_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1000:
	call	qword ptr [rax + 32]
.Ltmp1001:
# %bb.2:
	test	al, al
	je	.LBB435_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB435_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1002:
	call	__std_exception_destroy
.Ltmp1003:
# %bb.5:
	test	edi, edi
	je	.LBB435_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB435_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB435_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB435_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end242:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin242@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1000@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1002@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1003@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin243:
.seh_proc "??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1004:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1005:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z@4HA"
.LBB436_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end243:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin243@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1004@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1005@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBUobject_too_large@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin244:
.seh_proc "??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1006:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1007:
# %bb.1:
	lea	rax, [rip + "??_7object_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB437_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1008:
	call	qword ptr [rax + 24]
.Ltmp1009:
.LBB437_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB437_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB437_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end244:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin244@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1006@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1008@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1009@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0object_too_large@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0object_too_large@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0object_too_large@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0object_too_large@json@boost@@QEAA@AEBU012@@Z": # @"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin245:
.seh_proc "??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp1010:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1011:
# %bb.1:
	lea	rax, [rip + "??_7object_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0object_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0object_too_large@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0object_too_large@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0object_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB438_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end245:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0object_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0object_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0object_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0object_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0object_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0object_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin245@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1010@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1011@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin246:
.seh_proc "??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB439_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1012:
	call	qword ptr [rax + 32]
.Ltmp1013:
# %bb.2:
	test	al, al
	je	.LBB439_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB439_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp1014:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp1015:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB439_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB439_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end246:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin246@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1012@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1014@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1015@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin247:
.seh_proc "?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1016:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1017:
# %bb.1:
	lea	rax, [rip + "??_7object_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB440_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1018:
	call	qword ptr [rax + 24]
.Ltmp1019:
.LBB440_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp1020:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1021:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB440_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB440_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB440_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end247:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin247@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1016@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1018@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1020@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1021@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin248:
.seh_proc "??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB442_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1022:
	call	qword ptr [rax + 32]
.Ltmp1023:
# %bb.2:
	test	al, al
	je	.LBB442_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB442_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1024:
	call	__std_exception_destroy
.Ltmp1025:
# %bb.5:
	test	edi, edi
	je	.LBB442_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB442_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB442_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB442_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end248:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin248@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1022@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1024@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1025@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin249:
.seh_proc "??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB443_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1026:
	call	qword ptr [rax + 32]
.Ltmp1027:
# %bb.2:
	test	al, al
	je	.LBB443_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB443_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1028:
	call	__std_exception_destroy
.Ltmp1029:
# %bb.5:
	test	edi, edi
	je	.LBB443_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB443_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB443_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB443_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end249:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin249@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1026@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1028@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1029@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin250:
.seh_proc "??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB444_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1030:
	call	qword ptr [rax + 32]
.Ltmp1031:
# %bb.2:
	test	al, al
	je	.LBB444_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB444_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1032:
	call	__std_exception_destroy
.Ltmp1033:
# %bb.5:
	test	edi, edi
	je	.LBB444_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB444_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB444_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB444_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end250:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin250@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1030@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1032@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1033@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin251:
.seh_proc "??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1034:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1035:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z@4HA"
.LBB445_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end251:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin251@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1034@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1035@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBUstack_overflow@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin252:
.seh_proc "??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1036:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1037:
# %bb.1:
	lea	rax, [rip + "??_7stack_overflow@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB446_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1038:
	call	qword ptr [rax + 24]
.Ltmp1039:
.LBB446_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB446_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB446_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end252:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin252@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1036@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1038@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1039@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0stack_overflow@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0stack_overflow@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z": # @"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin253:
.seh_proc "??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp1040:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1041:
# %bb.1:
	lea	rax, [rip + "??_7stack_overflow@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0stack_overflow@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0stack_overflow@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0stack_overflow@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0stack_overflow@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB447_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end253:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0stack_overflow@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0stack_overflow@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0stack_overflow@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0stack_overflow@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0stack_overflow@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0stack_overflow@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin253@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1040@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1041@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??0runtime_error@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0runtime_error@std@@QEAA@AEBV01@@Z"
	.globl	"??0runtime_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0runtime_error@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0runtime_error@std@@QEAA@AEBV01@@Z": # @"??0runtime_error@std@@QEAA@AEBV01@@Z"
.Lfunc_begin254:
.seh_proc "??0runtime_error@std@@QEAA@AEBV01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp1042:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1043:
# %bb.1:
	lea	rax, [rip + "??_7runtime_error@std@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0runtime_error@std@@QEAA@AEBV01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0runtime_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0runtime_error@std@@QEAA@AEBV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0runtime_error@std@@QEAA@AEBV01@@Z@4HA":
.seh_proc "?dtor$2@?0???0runtime_error@std@@QEAA@AEBV01@@Z@4HA"
.LBB448_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end254:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0runtime_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0runtime_error@std@@QEAA@AEBV01@@Z"
	.p2align	2
"$cppxdata$??0runtime_error@std@@QEAA@AEBV01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0runtime_error@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0runtime_error@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0runtime_error@std@@QEAA@AEBV01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0runtime_error@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
"$ip2state$??0runtime_error@std@@QEAA@AEBV01@@Z":
	.long	.Lfunc_begin254@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1042@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1043@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0runtime_error@std@@QEAA@AEBV01@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin255:
.seh_proc "??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB449_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1044:
	call	qword ptr [rax + 32]
.Ltmp1045:
# %bb.2:
	test	al, al
	je	.LBB449_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB449_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp1046:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp1047:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB449_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB449_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end255:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin255@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1044@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1046@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1047@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin256:
.seh_proc "?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1048:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1049:
# %bb.1:
	lea	rax, [rip + "??_7stack_overflow@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB450_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1050:
	call	qword ptr [rax + 24]
.Ltmp1051:
.LBB450_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp1052:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1053:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB450_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB450_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB450_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end256:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin256@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1048@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1050@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1052@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1053@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin257:
.seh_proc "??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB452_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1054:
	call	qword ptr [rax + 32]
.Ltmp1055:
# %bb.2:
	test	al, al
	je	.LBB452_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB452_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1056:
	call	__std_exception_destroy
.Ltmp1057:
# %bb.5:
	test	edi, edi
	je	.LBB452_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB452_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB452_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB452_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end257:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin257@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1054@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1056@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1057@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin258:
.seh_proc "??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB453_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1058:
	call	qword ptr [rax + 32]
.Ltmp1059:
# %bb.2:
	test	al, al
	je	.LBB453_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB453_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1060:
	call	__std_exception_destroy
.Ltmp1061:
# %bb.5:
	test	edi, edi
	je	.LBB453_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB453_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB453_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB453_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end258:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin258@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1058@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1060@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1061@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin259:
.seh_proc "??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB454_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1062:
	call	qword ptr [rax + 32]
.Ltmp1063:
# %bb.2:
	test	al, al
	je	.LBB454_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB454_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1064:
	call	__std_exception_destroy
.Ltmp1065:
# %bb.5:
	test	edi, edi
	je	.LBB454_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB454_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB454_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB454_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end259:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin259@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1062@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1064@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1065@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin260:
.seh_proc "??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1066:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1067:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB455_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end260:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin260@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1066@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1067@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBUstring_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin261:
.seh_proc "??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1068:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1069:
# %bb.1:
	lea	rax, [rip + "??_7string_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB456_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1070:
	call	qword ptr [rax + 24]
.Ltmp1071:
.LBB456_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB456_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB456_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end261:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin261@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1068@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1070@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1071@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0string_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0string_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0string_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0string_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin262:
.seh_proc "??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp1072:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1073:
# %bb.1:
	lea	rax, [rip + "??_7string_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0string_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0string_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0string_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB457_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end262:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0string_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0string_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0string_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin262@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1072@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1073@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin263:
.seh_proc "??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB458_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1074:
	call	qword ptr [rax + 32]
.Ltmp1075:
# %bb.2:
	test	al, al
	je	.LBB458_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB458_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp1076:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp1077:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB458_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB458_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end263:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin263@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1074@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1076@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1077@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin264:
.seh_proc "?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1078:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1079:
# %bb.1:
	lea	rax, [rip + "??_7string_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB459_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1080:
	call	qword ptr [rax + 24]
.Ltmp1081:
.LBB459_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp1082:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1083:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB459_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB459_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB459_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end264:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin264@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1078@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1080@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1082@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1083@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin265:
.seh_proc "??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB461_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1084:
	call	qword ptr [rax + 32]
.Ltmp1085:
# %bb.2:
	test	al, al
	je	.LBB461_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB461_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1086:
	call	__std_exception_destroy
.Ltmp1087:
# %bb.5:
	test	edi, edi
	je	.LBB461_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB461_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB461_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB461_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end265:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin265@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1084@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1086@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1087@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin266:
.seh_proc "??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB462_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1088:
	call	qword ptr [rax + 32]
.Ltmp1089:
# %bb.2:
	test	al, al
	je	.LBB462_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB462_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1090:
	call	__std_exception_destroy
.Ltmp1091:
# %bb.5:
	test	edi, edi
	je	.LBB462_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB462_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB462_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB462_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end266:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin266@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1088@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1090@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1091@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin267:
.seh_proc "??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB463_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1092:
	call	qword ptr [rax + 32]
.Ltmp1093:
# %bb.2:
	test	al, al
	je	.LBB463_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB463_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1094:
	call	__std_exception_destroy
.Ltmp1095:
# %bb.5:
	test	edi, edi
	je	.LBB463_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB463_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB463_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB463_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end267:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin267@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1092@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1094@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1095@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin268:
.seh_proc "??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1096:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1097:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z@4HA"
.LBB464_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end268:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin268@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1096@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1097@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBUstring_too_large@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin269:
.seh_proc "??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1098:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1099:
# %bb.1:
	lea	rax, [rip + "??_7string_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB465_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1100:
	call	qword ptr [rax + 24]
.Ltmp1101:
.LBB465_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB465_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB465_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end269:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin269@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1098@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1100@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1101@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0string_too_large@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0string_too_large@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0string_too_large@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0string_too_large@json@boost@@QEAA@AEBU012@@Z": # @"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin270:
.seh_proc "??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp1102:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1103:
# %bb.1:
	lea	rax, [rip + "??_7string_too_large@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0string_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0string_too_large@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0string_too_large@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0string_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB466_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end270:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0string_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string_too_large@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0string_too_large@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0string_too_large@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin270@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1102@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1103@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin271:
.seh_proc "??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB467_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1104:
	call	qword ptr [rax + 32]
.Ltmp1105:
# %bb.2:
	test	al, al
	je	.LBB467_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB467_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp1106:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp1107:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB467_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB467_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end271:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin271@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1104@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1106@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1107@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin272:
.seh_proc "?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1108:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1109:
# %bb.1:
	lea	rax, [rip + "??_7string_too_large@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB468_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1110:
	call	qword ptr [rax + 24]
.Ltmp1111:
.LBB468_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp1112:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1113:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB468_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB468_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB468_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end272:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin272@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1108@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1110@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1112@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1113@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin273:
.seh_proc "??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB470_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1114:
	call	qword ptr [rax + 32]
.Ltmp1115:
# %bb.2:
	test	al, al
	je	.LBB470_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB470_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1116:
	call	__std_exception_destroy
.Ltmp1117:
# %bb.5:
	test	edi, edi
	je	.LBB470_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB470_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB470_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB470_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end273:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin273@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1114@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1116@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1117@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin274:
.seh_proc "??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB471_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1118:
	call	qword ptr [rax + 32]
.Ltmp1119:
# %bb.2:
	test	al, al
	je	.LBB471_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB471_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1120:
	call	__std_exception_destroy
.Ltmp1121:
# %bb.5:
	test	edi, edi
	je	.LBB471_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB471_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB471_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB471_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end274:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin274@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1118@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1120@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1121@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin275:
.seh_proc "??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB472_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1122:
	call	qword ptr [rax + 32]
.Ltmp1123:
# %bb.2:
	test	al, al
	je	.LBB472_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB472_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1124:
	call	__std_exception_destroy
.Ltmp1125:
# %bb.5:
	test	edi, edi
	je	.LBB472_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB472_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB472_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB472_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end275:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin275@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1122@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1124@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1125@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
.Lfunc_begin276:
.seh_proc "??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1126:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1127:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z@4HA"
.LBB473_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end276:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin276@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1126@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1127@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBUuint64_required_error@json@1@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin277:
.seh_proc "??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1128:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1129:
# %bb.1:
	lea	rax, [rip + "??_7uint64_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB474_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1130:
	call	qword ptr [rax + 24]
.Ltmp1131:
.LBB474_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB474_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB474_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end277:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin277@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1128@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1130@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1131@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.globl	"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z" # -- Begin function ??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z
	.p2align	4, 0x90
"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z": # @"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
.Lfunc_begin278:
.seh_proc "??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rcx + 8]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 8], xmm0
	lea	rcx, [rdx + 8]
.Ltmp1132:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1133:
# %bb.1:
	lea	rax, [rip + "??_7uint64_required_error@json@boost@@6B@"]
	mov	qword ptr [rsi], rax
	mov	rax, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA":
.seh_proc "?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"
.LBB475_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end278:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
	.p2align	2
"$cppxdata$??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0uint64_required_error@json@boost@@QEAA@AEBU012@@Z@4HA"@IMGREL # Action
"$ip2state$??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z":
	.long	.Lfunc_begin278@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1132@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1133@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
.Lfunc_begin279:
.seh_proc "??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB476_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1134:
	call	qword ptr [rax + 32]
.Ltmp1135:
# %bb.2:
	test	al, al
	je	.LBB476_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB476_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp1136:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp1137:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB476_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"
.LBB476_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end279:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin279@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1134@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1136@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1137@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin280:
.seh_proc "?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1138:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1139:
# %bb.1:
	lea	rax, [rip + "??_7uint64_required_error@json@boost@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB477_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1140:
	call	qword ptr [rax + 24]
.Ltmp1141:
.LBB477_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp1142:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1143:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB477_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB477_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB477_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end280:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin280@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1138@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1140@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1142@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1143@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin281:
.seh_proc "??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB479_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1144:
	call	qword ptr [rax + 32]
.Ltmp1145:
# %bb.2:
	test	al, al
	je	.LBB479_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB479_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1146:
	call	__std_exception_destroy
.Ltmp1147:
# %bb.5:
	test	edi, edi
	je	.LBB479_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB479_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB479_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB479_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end281:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin281@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1144@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1146@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1147@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin282:
.seh_proc "??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB480_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1148:
	call	qword ptr [rax + 32]
.Ltmp1149:
# %bb.2:
	test	al, al
	je	.LBB480_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB480_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1150:
	call	__std_exception_destroy
.Ltmp1151:
# %bb.5:
	test	edi, edi
	je	.LBB480_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB480_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB480_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB480_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end282:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin282@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1148@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1150@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1151@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin283:
.seh_proc "??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB481_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1152:
	call	qword ptr [rax + 32]
.Ltmp1153:
# %bb.2:
	test	al, al
	je	.LBB481_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB481_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1154:
	call	__std_exception_destroy
.Ltmp1155:
# %bb.5:
	test	edi, edi
	je	.LBB481_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB481_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB481_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB481_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end283:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin283@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1152@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1154@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1155@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
	.globl	"??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z" # -- Begin function ??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z
	.p2align	4, 0x90
"??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z": # @"??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
.seh_proc "??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	sub	qword ptr [rcx + 16], 1
	jae	.LBB482_2
# %bb.1:
	xor	esi, esi
	jmp	.LBB482_5
.LBB482_2:
	mov	rax, qword ptr [rcx + 24]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rsp + 32], rax
	test	al, 1
	je	.LBB482_4
# %bb.3:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB482_4:
	mov	rax, qword ptr [rcx + 8]
	lea	rsi, [rax + 40]
	mov	qword ptr [rcx + 8], rsi
	lea	r8, [rsp + 32]
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	mov	sil, 1
.LBB482_5:
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	eax, esi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
	.globl	"??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z" # -- Begin function ??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z
	.p2align	4, 0x90
"??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z": # @"??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
.seh_proc "??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 40], rax
	sub	qword ptr [rcx + 16], 1
	jae	.LBB483_2
# %bb.1:
	xor	esi, esi
	jmp	.LBB483_5
.LBB483_2:
	mov	rax, qword ptr [rcx + 24]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rsp + 32], rax
	test	al, 1
	je	.LBB483_4
# %bb.3:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB483_4:
	mov	rax, qword ptr [rcx + 8]
	lea	rsi, [rax + 40]
	mov	qword ptr [rcx + 8], rsi
	lea	r8, [rsp + 32]
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0key_value_pair@json@boost@@QEAA@AEBV012@Vstorage_ptr@12@@Z"
	mov	sil, 1
.LBB483_5:
	mov	rcx, qword ptr [rsp + 40]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	eax, esi
	add	rsp, 48
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z"
	.globl	"??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z" # -- Begin function ??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z
	.p2align	4, 0x90
"??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z": # @"??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z"
.seh_proc "??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z"
# %bb.0:
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rax, rdx
	mov	rdx, qword ptr [rip + __security_cookie]
	xor	rdx, rsp
	mov	qword ptr [rsp + 48], rdx
	mov	r9, qword ptr [rcx + 32]
	mov	r8, qword ptr [rcx + 24]
	movups	xmm0, xmmword ptr [rcx + 8]
	movaps	xmmword ptr [rsp + 32], xmm0
	lea	rdx, [rsp + 32]
	mov	rcx, rax
	call	"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
	mov	rcx, qword ptr [rsp + 48]
	xor	rcx, rsp
	call	__security_check_cookie
	nop
	add	rsp, 56
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
	.globl	"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z" # -- Begin function ??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z
	.p2align	4, 0x90
"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z": # @"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
.Lfunc_begin284:
.seh_proc "??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, qword ptr [r9]
	test	dil, 1
	je	.LBB485_2
# %bb.1:
	mov	rax, rdi
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB485_2:
	mov	qword ptr [rcx], rdi
	mov	byte ptr [rcx + 8], 7
	cmp	qword ptr [rsi + 8], 2147483647
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	jae	.LBB485_3
# %bb.5:
	test	rdi, rdi
	je	.LBB485_7
# %bb.6:
	and	rdi, -4
	jmp	.LBB485_10
.LBB485_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	edi, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rdx, qword ptr [rdx + 8*rdi]
	lea	rdi, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rdx + _Init_thread_epoch@SECREL32]
	jg	.LBB485_8
.LBB485_10:
	mov	rdx, qword ptr [rsi + 8]
	add	rdx, 1
	mov	rax, qword ptr [rdi]
.Ltmp1156:
	mov	r8d, 8
	mov	rcx, rdi
	call	qword ptr [rax + 8]
.Ltmp1157:
# %bb.11:
	mov	rdi, rax
	mov	rdx, qword ptr [rsi]
	mov	r8, qword ptr [rsi + 8]
	mov	rcx, rax
	call	memcpy
	mov	rax, qword ptr [rsi + 8]
	mov	byte ptr [rdi + rax], 0
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rax + 24], rdi
	mov	rcx, qword ptr [rsi + 8]
	cmp	rcx, 2147483647
	jae	.LBB485_12
# %bb.14:
	mov	dword ptr [rax + 32], ecx
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB485_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB485_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB485_10
.LBB485_3:
.Ltmp1160:
	call	"?raise@key_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp1161:
# %bb.4:
.LBB485_12:
.Ltmp1158:
	call	"?raise@string_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp1159:
# %bb.13:
	.seh_handlerdata
	.long	("$cppxdata$??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$15@?0???$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$15@?0???$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z@4HA"
.LBB485_15:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end284:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$15@?0???$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z":
	.long	.Lfunc_begin284@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1156@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1157@IMGREL+1      # IP
	.long	-1                      # ToState
	.long	.Ltmp1160@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1159@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$$TAEBVstorage_ptr@json@boost@@@key_value_pair@json@boost@@QEAA@V?$basic_string_view@DU?$char_traits@D@std@@@2@$$QEA$$TAEBVstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z"
.seh_proc "??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, r8
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
	call	"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 88], xmm0
	mov	qword ptr [rdi + 104], 0
	mov	dword ptr [rdi + 112], -1
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 80], rax
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rdi + 104], rax
	mov	eax, dword ptr [rsi + 16]
	mov	dword ptr [rdi + 112], eax
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [rdi + 96], rax
	mov	rax, rdi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBVsystem_error@system@1@AEBUsource_location@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin285:
.seh_proc "??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rdx
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	add	rcx, 8
	add	rdx, 8
	mov	qword ptr [rbp - 16], rcx # 8-byte Spill
	call	"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rsi + 80], rax
	mov	rcx, qword ptr [rdi + 88]
	mov	qword ptr [rsi + 88], rcx
	test	rcx, rcx
	je	.LBB487_2
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1162:
	call	qword ptr [rax + 24]
.Ltmp1163:
.LBB487_2:
	mov	eax, dword ptr [rdi + 112]
	mov	dword ptr [rsi + 112], eax
	movups	xmm0, xmmword ptr [rdi + 96]
	movups	xmmword ptr [rsi + 96], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 80], rax
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$3@?0???0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$3@?0???0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB487_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1system_error@system@boost@@UEAA@XZ"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end285:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$3@?0???0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin285@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1162@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1163@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??0system_error@system@boost@@QEAA@AEBV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	.globl	"??0system_error@system@boost@@QEAA@AEBV012@@Z" # -- Begin function ??0system_error@system@boost@@QEAA@AEBV012@@Z
	.p2align	4, 0x90
"??0system_error@system@boost@@QEAA@AEBV012@@Z": # @"??0system_error@system@boost@@QEAA@AEBV012@@Z"
.Lfunc_begin286:
.seh_proc "??0system_error@system@boost@@QEAA@AEBV012@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 88
	.seh_stackalloc 88
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 64
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rbx, [rcx + 8]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 8], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1164:
	mov	rdx, rbx
	call	__std_exception_copy
.Ltmp1165:
# %bb.1:
	lea	rax, [rip + "??_7system_error@system@boost@@6B@"]
	mov	qword ptr [rdi], rax
	movups	xmm0, xmmword ptr [rsi + 24]
	movups	xmmword ptr [rdi + 24], xmm0
	movups	xmmword ptr [rdi + 56], xmm6
	mov	r15, qword ptr [rsi + 56]
	cmp	qword ptr [rsi + 64], 15
	jbe	.LBB488_2
# %bb.3:
	mov	rsi, qword ptr [rsi + 40]
	jmp	.LBB488_4
.LBB488_2:
	add	rsi, 40
.LBB488_4:
	lea	r14, [rdi + 40]
	cmp	r15, 15
	ja	.LBB488_6
# %bb.5:
	movups	xmm0, xmmword ptr [rsi]
	movups	xmmword ptr [r14], xmm0
	mov	ebx, 15
	jmp	.LBB488_12
.LBB488_6:
	mov	qword ptr [rbp - 40], rbx # 8-byte Spill
	mov	qword ptr [rbp - 32], rdi # 8-byte Spill
	mov	rbx, r15
	or	rbx, 15
	movabs	rax, 9223372036854775807
	cmp	rbx, rax
	cmovae	rbx, rax
	cmp	rbx, 4095
	jb	.LBB488_9
# %bb.7:
	lea	rcx, [rbx + 40]
.Ltmp1168:
	call	"??2@YAPEAX_K@Z"
.Ltmp1169:
# %bb.8:
	mov	rcx, rax
	add	rcx, 39
	and	rcx, -32
	mov	qword ptr [rcx - 8], rax
	jmp	.LBB488_11
.LBB488_9:
	lea	rcx, [rbx + 1]
.Ltmp1166:
	call	"??2@YAPEAX_K@Z"
.Ltmp1167:
# %bb.10:
	mov	rcx, rax
.LBB488_11:
	mov	qword ptr [r14], rcx
	lea	r8, [r15 + 1]
	mov	rdx, rsi
	call	memcpy
	mov	rdi, qword ptr [rbp - 32] # 8-byte Reload
.LBB488_12:
	mov	qword ptr [rdi + 56], r15
	mov	qword ptr [rdi + 64], rbx
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 88
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0system_error@system@boost@@QEAA@AEBV012@@Z")@IMGREL
	.section	.text,"xr",discard,"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$13@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA":
.seh_proc "?dtor$13@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA"
.LBB488_13:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rdx + 80]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rbp - 40] # 8-byte Reload
	call	__std_exception_destroy
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.def	 "?dtor$14@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA":
.seh_proc "?dtor$14@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA"
.LBB488_14:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rdx + 80]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end286:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0system_error@system@boost@@QEAA@AEBV012@@Z"
	.p2align	2
"$cppxdata$??0system_error@system@boost@@QEAA@AEBV012@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0system_error@system@boost@@QEAA@AEBV012@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0system_error@system@boost@@QEAA@AEBV012@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0system_error@system@boost@@QEAA@AEBV012@@Z":
	.long	-1                      # ToState
	.long	"?dtor$14@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$13@?0???0system_error@system@boost@@QEAA@AEBV012@@Z@4HA"@IMGREL # Action
"$ip2state$??0system_error@system@boost@@QEAA@AEBV012@@Z":
	.long	.Lfunc_begin286@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1164@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1168@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1167@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0system_error@system@boost@@QEAA@AEBV012@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
.Lfunc_begin287:
.seh_proc "??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 80], rax
	mov	rcx, qword ptr [rcx + 88]
	test	rcx, rcx
	je	.LBB489_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1170:
	call	qword ptr [rax + 32]
.Ltmp1171:
# %bb.2:
	test	al, al
	je	.LBB489_4
# %bb.3:
	mov	qword ptr [rsi + 88], 0
.LBB489_4:
	add	rsi, 8
	mov	rcx, rsi
	add	rsp, 40
	pop	rsi
	pop	rbp
	jmp	"??1system_error@system@boost@@UEAA@XZ" # TAILCALL
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0???1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$5@?0???1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ@4HA"
.LBB489_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end287:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin287@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1170@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1171@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin288:
.seh_proc "?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rcx
	mov	ecx, 120
	call	"??2@YAPEAX_K@Z"
	lea	rcx, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	qword ptr [rbp - 16], rax # 8-byte Spill
	lea	rcx, [rax + 8]
	lea	rdx, [rdi + 8]
.Ltmp1172:
	mov	qword ptr [rbp - 24], rcx # 8-byte Spill
	call	"??0system_error@system@boost@@QEAA@AEBV012@@Z"
.Ltmp1173:
# %bb.1:
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rdx + 80], rax
	mov	rcx, qword ptr [rdi + 88]
	mov	qword ptr [rdx + 88], rcx
	test	rcx, rcx
	je	.LBB490_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1174:
	call	qword ptr [rax + 24]
.Ltmp1175:
.LBB490_3:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rsi
	add	rcx, 80
	mov	eax, dword ptr [rdi + 112]
	mov	dword ptr [rsi + 112], eax
	movups	xmm0, xmmword ptr [rdi + 96]
	lea	rdx, [rdi + 80]
	movups	xmmword ptr [rsi + 96], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 80], rax
.Ltmp1176:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1177:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB490_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB490_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB490_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	"??1system_error@system@boost@@UEAA@XZ"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end288:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	0                       # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin288@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1172@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1174@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1176@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1177@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 160
	.seh_stackalloc 160
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin289:
.seh_proc "??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 80], rax
	mov	rcx, qword ptr [rcx + 88]
	test	rcx, rcx
	je	.LBB492_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1178:
	call	qword ptr [rax + 32]
.Ltmp1179:
# %bb.2:
	test	al, al
	je	.LBB492_4
# %bb.3:
	mov	qword ptr [rsi + 88], 0
.LBB492_4:
	lea	rcx, [rsi + 8]
	call	"??1system_error@system@boost@@UEAA@XZ"
	test	edi, edi
	je	.LBB492_6
# %bb.5:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB492_6:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$7@?0???_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z@4HA"
.LBB492_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end289:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0???_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin289@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1178@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1179@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin290:
.seh_proc "??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 72], rcx
	mov	rcx, qword ptr [rax + 80]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB493_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1180:
	call	qword ptr [rax + 32]
.Ltmp1181:
# %bb.2:
	test	al, al
	je	.LBB493_4
# %bb.3:
	mov	qword ptr [rsi + 88], 0
.LBB493_4:
	lea	rcx, [rsi + 8]
	call	"??1system_error@system@boost@@UEAA@XZ"
	test	edi, edi
	je	.LBB493_6
# %bb.5:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB493_6:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB493_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end290:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin290@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1180@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1181@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
.Lfunc_begin291:
.seh_proc "??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 80]
	test	rcx, rcx
	je	.LBB494_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1182:
	call	qword ptr [rax + 32]
.Ltmp1183:
# %bb.2:
	test	al, al
	je	.LBB494_4
# %bb.3:
	mov	qword ptr [rsi + 88], 0
.LBB494_4:
	lea	rcx, [rsi + 8]
	call	"??1system_error@system@boost@@UEAA@XZ"
	test	edi, edi
	je	.LBB494_6
# %bb.5:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB494_6:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z@4HA"
.LBB494_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end291:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$7@?0???_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z":
	.long	.Lfunc_begin291@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1182@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1183@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a # -- Begin function ??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.section	.rdata,"dr",discard,__xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a
	.p2align	4
__xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a:
	.zero	16,10
	.globl	__xmm@20202020202020202020202020202020
	.section	.rdata,"dr",discard,__xmm@20202020202020202020202020202020
	.p2align	4
__xmm@20202020202020202020202020202020:
	.zero	16,32
	.globl	__xmm@04040404040404040404040404040404
	.section	.rdata,"dr",discard,__xmm@04040404040404040404040404040404
	.p2align	4
__xmm@04040404040404040404040404040404:
	.zero	16,4
	.globl	__xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d
	.section	.rdata,"dr",discard,__xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d
	.p2align	4
__xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d:
	.zero	16,13
	.section	.text,"xr",discard,"??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.p2align	4, 0x90
"??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 96
	.seh_stackalloc 96
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	cmp	rdi, rdx
	je	.LBB495_11
# %bb.1:
	cmp	byte ptr [rdx], 32
	ja	.LBB495_11
# %bb.2:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB495_3:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB495_4
# %bb.9:                                #   in Loop: Header=BB495_3 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdx, 16
	cmp	ax, -1
	je	.LBB495_3
# %bb.10:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB495_11:
	cmp	rdx, rdi
	jae	.LBB495_12
# %bb.14:
	movzx	eax, byte ptr [rsi + 176]
	movzx	ecx, byte ptr [rsi + 177]
	add	ecx, ecx
	or	ecx, eax
	movzx	eax, byte ptr [rsi + 178]
	shl	eax, 2
	or	eax, ecx
	add	eax, -1
	cmp	eax, 6
	ja	.LBB495_16
# %bb.15:
	lea	rcx, [rip + .LJTI495_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB495_17:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_4:
	cmp	rdi, rdx
	je	.LBB495_13
# %bb.5:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB495_6:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB495_11
# %bb.7:                                #   in Loop: Header=BB495_6 Depth=1
	bt	rax, rcx
	jae	.LBB495_11
# %bb.8:                                #   in Loop: Header=BB495_6 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB495_6
.LBB495_13:
	mov	rcx, rsi
	mov	rdx, rdi
	xor	r8d, r8d
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 96
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB495_16:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_18:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_19:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_20:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_21:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_22:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB495_24
.LBB495_23:
	movzx	eax, byte ptr [rdx]
	lea	rbx, [rip + "?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
.LBB495_24:
	mov	rcx, rsi
	call	qword ptr [rbx + 8*rax]
	cmp	rax, rsi
	je	.LBB495_33
# %bb.25:
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	rbx, 4294977024
	jmp	.LBB495_26
.LBB495_51:                             #   in Loop: Header=BB495_26 Depth=1
	mov	rcx, rsi
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB495_52:                             #   in Loop: Header=BB495_26 Depth=1
	cmp	rax, rsi
	je	.LBB495_53
.LBB495_26:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB495_28 Depth 2
                                        #     Child Loop BB495_29 Depth 2
	cmp	rax, rdi
	je	.LBB495_39
# %bb.27:                               #   in Loop: Header=BB495_26 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB495_37
	.p2align	4, 0x90
.LBB495_28:                             #   Parent Loop BB495_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB495_29
# %bb.35:                               #   in Loop: Header=BB495_28 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB495_28
# %bb.36:                               #   in Loop: Header=BB495_26 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB495_37
	.p2align	4, 0x90
.LBB495_32:                             #   in Loop: Header=BB495_29 Depth=2
	add	rax, 1
.LBB495_29:                             #   Parent Loop BB495_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rax
	je	.LBB495_39
# %bb.30:                               #   in Loop: Header=BB495_29 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB495_37
# %bb.31:                               #   in Loop: Header=BB495_29 Depth=2
	bt	rbx, rcx
	jb	.LBB495_32
	.p2align	4, 0x90
.LBB495_37:                             #   in Loop: Header=BB495_26 Depth=1
	cmp	rax, rdi
	jae	.LBB495_38
# %bb.43:                               #   in Loop: Header=BB495_26 Depth=1
	cmp	byte ptr [rsi + 176], 0
	je	.LBB495_41
# %bb.44:                               #   in Loop: Header=BB495_26 Depth=1
	cmp	byte ptr [rax], 47
	jne	.LBB495_41
# %bb.45:                               #   in Loop: Header=BB495_26 Depth=1
	movzx	edx, byte ptr [rsi + 177]
	movzx	ecx, byte ptr [rsi + 178]
	add	ecx, ecx
	or	ecx, edx
	cmp	ecx, 1
	je	.LBB495_49
# %bb.46:                               #   in Loop: Header=BB495_26 Depth=1
	cmp	ecx, 2
	je	.LBB495_50
# %bb.47:                               #   in Loop: Header=BB495_26 Depth=1
	cmp	ecx, 3
	je	.LBB495_51
# %bb.48:                               #   in Loop: Header=BB495_26 Depth=1
	mov	rcx, rsi
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB495_52
.LBB495_49:                             #   in Loop: Header=BB495_26 Depth=1
	mov	rcx, rsi
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB495_52
.LBB495_50:                             #   in Loop: Header=BB495_26 Depth=1
	mov	rcx, rsi
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB495_52
.LBB495_38:
	mov	rdi, rax
.LBB495_39:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB495_40
# %bb.42:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 2
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 96
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB495_40:
	mov	rax, rdi
.LBB495_41:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 96
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB495_53:
	mov	rcx, rsi
	mov	dl, 3
	jmp	.LBB495_34
.LBB495_12:
	mov	rdi, rdx
	jmp	.LBB495_13
.LBB495_33:
	mov	rcx, rsi
	mov	dl, 1
.LBB495_34:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 96
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI495_0:
	.long	.LBB495_17-.LJTI495_0
	.long	.LBB495_18-.LJTI495_0
	.long	.LBB495_19-.LJTI495_0
	.long	.LBB495_20-.LJTI495_0
	.long	.LBB495_21-.LJTI495_0
	.long	.LBB495_22-.LJTI495_0
	.long	.LBB495_23-.LJTI495_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_document@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB496_1
# %bb.2:
	lea	r9, [rcx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rax, qword ptr [rsi + 128]
	mov	cl, byte ptr [rax + rcx - 1]
	cmp	cl, 1
	je	.LBB496_19
# %bb.3:
	cmp	cl, 2
	je	.LBB496_49
# %bb.4:
	cmp	cl, 3
	je	.LBB496_68
# %bb.5:
	cmp	rdi, rdx
	jne	.LBB496_6
	jmp	.LBB496_18
.LBB496_1:
	xor	r9d, r9d
	cmp	rdi, rdx
	je	.LBB496_18
.LBB496_6:
	cmp	byte ptr [rdx], 32
	ja	.LBB496_18
# %bb.7:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB496_8:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB496_9
# %bb.16:                               #   in Loop: Header=BB496_8 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	ecx, xmm4
	add	rdx, 16
	cmp	cx, -1
	je	.LBB496_8
# %bb.17:
	not	ecx
	movzx	eax, cx
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB496_18:
	cmp	rdx, rdi
	jae	.LBB496_11
.LBB496_19:
	movzx	ecx, byte ptr [rsi + 176]
	movzx	eax, byte ptr [rsi + 177]
	add	eax, eax
	or	eax, ecx
	movzx	ecx, byte ptr [rsi + 178]
	shl	ecx, 2
	or	ecx, eax
	add	ecx, -1
	cmp	ecx, 6
	ja	.LBB496_21
# %bb.20:
	lea	rax, [rip + .LJTI496_0]
	movsxd	rcx, dword ptr [rax + 4*rcx]
	add	rcx, rax
	jmp	rcx
.LBB496_25:
	test	r9, r9
	je	.LBB496_26
# %bb.27:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_9:
	cmp	rdi, rdx
	je	.LBB496_10
# %bb.12:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB496_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB496_18
# %bb.14:                               #   in Loop: Header=BB496_13 Depth=1
	bt	r8, rcx
	jae	.LBB496_18
# %bb.15:                               #   in Loop: Header=BB496_13 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB496_13
.LBB496_10:
	mov	rdx, rdi
.LBB496_11:
	mov	rcx, rsi
	xor	r8d, r8d
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB496_21:
	test	r9, r9
	je	.LBB496_22
# %bb.24:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_28:
	test	r9, r9
	je	.LBB496_29
# %bb.30:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_31:
	test	r9, r9
	je	.LBB496_32
# %bb.33:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_34:
	test	r9, r9
	je	.LBB496_35
# %bb.36:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_37:
	test	r9, r9
	je	.LBB496_38
# %bb.39:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_40:
	test	r9, r9
	je	.LBB496_41
# %bb.42:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_43:
	test	r9, r9
	je	.LBB496_44
# %bb.45:
	mov	rcx, rsi
	call	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_46
.LBB496_26:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_22:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_29:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_32:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_35:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_38:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_41:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB496_23
.LBB496_44:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
.LBB496_23:
	mov	rcx, rsi
	call	qword ptr [r8 + 8*rax]
.LBB496_46:
	mov	rdx, rax
	cmp	rax, rsi
	jne	.LBB496_49
# %bb.47:
	mov	rcx, rsi
	mov	dl, 1
.LBB496_48:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z" # TAILCALL
.LBB496_49:
	cmp	rdx, rdi
	je	.LBB496_62
# %bb.50:
	cmp	byte ptr [rdx], 32
	ja	.LBB496_60
# %bb.51:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB496_52:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB496_53
# %bb.58:                               #   in Loop: Header=BB496_52 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdx, 16
	cmp	ax, -1
	je	.LBB496_52
# %bb.59:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB496_60:
	cmp	rdx, rdi
	jae	.LBB496_61
# %bb.66:
	cmp	byte ptr [rsi + 176], 0
	je	.LBB496_64
# %bb.67:
	cmp	byte ptr [rdx], 47
	jne	.LBB496_64
.LBB496_68:
	movzx	ecx, byte ptr [rsi + 177]
	movzx	eax, byte ptr [rsi + 178]
	add	eax, eax
	or	eax, ecx
	mov	rcx, rsi
	cmp	eax, 1
	je	.LBB496_72
# %bb.69:
	cmp	eax, 2
	je	.LBB496_73
# %bb.70:
	cmp	eax, 3
	jne	.LBB496_71
# %bb.74:
	call	"??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_75
.LBB496_72:
	call	"??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_75
.LBB496_73:
	call	"??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB496_75
.LBB496_71:
	call	"??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB496_75:
	mov	rdx, rax
	cmp	rax, rsi
	jne	.LBB496_49
# %bb.76:
	mov	rcx, rsi
	mov	dl, 3
	jmp	.LBB496_48
.LBB496_53:
	cmp	rdi, rdx
	je	.LBB496_62
# %bb.54:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB496_55:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB496_60
# %bb.56:                               #   in Loop: Header=BB496_55 Depth=1
	bt	rax, rcx
	jae	.LBB496_60
# %bb.57:                               #   in Loop: Header=BB496_55 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB496_55
.LBB496_62:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB496_63
.LBB496_65:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 2
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB496_61:
	mov	rdi, rdx
	cmp	byte ptr [rsi + 152], 0
	jne	.LBB496_65
.LBB496_63:
	mov	rdx, rdi
.LBB496_64:
	mov	rax, rdx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
	.p2align	2, 0x90
.LJTI496_0:
	.long	.LBB496_25-.LJTI496_0
	.long	.LBB496_28-.LJTI496_0
	.long	.LBB496_31-.LJTI496_0
	.long	.LBB496_34-.LJTI496_0
	.long	.LBB496_37-.LJTI496_0
	.long	.LBB496_40-.LJTI496_0
	.long	.LBB496_43-.LJTI496_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_document@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
	.globl	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # -- Begin function ?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z
	.p2align	4, 0x90
"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z": # @"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
.seh_proc "?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	qword ptr [rcx + 160], rdx
	cmp	byte ptr [rcx + 152], 0
	je	.LBB497_4
# %bb.1:
	mov	ebx, r8d
	mov	rax, qword ptr [rsi + 120]
	test	rax, rax
	je	.LBB497_2
.LBB497_3:
	mov	rcx, qword ptr [rsi + 128]
	mov	byte ptr [rcx + rax], bl
	add	qword ptr [rsi + 120], 1
.LBB497_4:
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rsi
	ret
.LBB497_2:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB497_3
	.seh_handlerdata
	.section	.text,"xr",discard,"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z"
	.globl	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z" # -- Begin function ?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z
	.p2align	4, 0x90
"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z": # @"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z"
.seh_proc "?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	cmp	dword ptr [rcx + 88], 0
	jne	.LBB498_5
# %bb.1:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB498_5
# %bb.2:
	mov	ebx, edx
	mov	rax, qword ptr [rsi + 120]
	test	rax, rax
	je	.LBB498_3
.LBB498_4:
	mov	rcx, qword ptr [rsi + 128]
	mov	byte ptr [rcx + rax], bl
	add	qword ptr [rsi + 120], 1
.LBB498_5:
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rsi
	ret
.LBB498_3:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB498_4
	.seh_handlerdata
	.section	.text,"xr",discard,"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
	.globl	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # -- Begin function ?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z
	.p2align	4, 0x90
"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z": # @"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
.seh_proc "?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	ebx, r8d
	mov	rsi, rcx
	mov	qword ptr [rcx + 160], rdx
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB499_1
.LBB499_2:
	mov	rcx, qword ptr [rsi + 128]
	mov	byte ptr [rcx + rax], bl
	add	qword ptr [rsi + 120], 1
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rsi
	ret
.LBB499_1:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB499_2
	.seh_handlerdata
	.section	.text,"xr",discard,"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rdi, rcx
	mov	rsi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rsi
	jae	.LBB500_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB500_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB500_18
	.p2align	4, 0x90
.LBB500_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB500_6
# %bb.13:                               #   in Loop: Header=BB500_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB500_14
	.p2align	4, 0x90
.LBB500_6:                              #   in Loop: Header=BB500_5 Depth=1
	mov	rax, rdi
.LBB500_14:                             #   in Loop: Header=BB500_5 Depth=1
	test	rax, rax
	cmove	rax, rdi
	cmp	rax, rdi
	je	.LBB500_15
# %bb.16:                               #   in Loop: Header=BB500_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rsi
	jae	.LBB500_17
# %bb.19:                               #   in Loop: Header=BB500_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB500_5
	jmp	.LBB500_20
.LBB500_7:
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB500_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB500_10
.LBB500_18:
	mov	rcx, rdi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB500_9:
	mov	rdx, rdi
.LBB500_10:
	test	rdx, rdx
	cmove	rdx, rdi
	cmp	rdi, rdx
	je	.LBB500_11
.LBB500_20:
	add	rdx, 1
	mov	rsi, rdx
.LBB500_21:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB500_15:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 6
	jmp	.LBB500_2
.LBB500_17:
	mov	rcx, rdi
	mov	r8b, 7
.LBB500_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB500_1:
	mov	rcx, rdi
	mov	r8b, 4
	jmp	.LBB500_2
.LBB500_11:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB500_21
# %bb.12:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 5
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rdi, rcx
	mov	rsi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rsi
	jae	.LBB501_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB501_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB501_18
	.p2align	4, 0x90
.LBB501_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB501_6
# %bb.13:                               #   in Loop: Header=BB501_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB501_14
	.p2align	4, 0x90
.LBB501_6:                              #   in Loop: Header=BB501_5 Depth=1
	mov	rax, rdi
.LBB501_14:                             #   in Loop: Header=BB501_5 Depth=1
	test	rax, rax
	cmove	rax, rdi
	cmp	rax, rdi
	je	.LBB501_15
# %bb.16:                               #   in Loop: Header=BB501_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rsi
	jae	.LBB501_17
# %bb.19:                               #   in Loop: Header=BB501_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB501_5
	jmp	.LBB501_20
.LBB501_7:
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB501_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB501_10
.LBB501_18:
	mov	rcx, rdi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB501_9:
	mov	rdx, rdi
.LBB501_10:
	test	rdx, rdx
	cmove	rdx, rdi
	cmp	rdi, rdx
	je	.LBB501_11
.LBB501_20:
	add	rdx, 1
	mov	rsi, rdx
.LBB501_21:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB501_15:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 6
	jmp	.LBB501_2
.LBB501_17:
	mov	rcx, rdi
	mov	r8b, 7
.LBB501_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB501_1:
	mov	rcx, rdi
	mov	r8b, 4
	jmp	.LBB501_2
.LBB501_11:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB501_21
# %bb.12:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 5
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rdi, rcx
	mov	rsi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rsi
	jae	.LBB502_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB502_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB502_18
	.p2align	4, 0x90
.LBB502_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB502_6
# %bb.13:                               #   in Loop: Header=BB502_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB502_14
	.p2align	4, 0x90
.LBB502_6:                              #   in Loop: Header=BB502_5 Depth=1
	mov	rax, rdi
.LBB502_14:                             #   in Loop: Header=BB502_5 Depth=1
	test	rax, rax
	cmove	rax, rdi
	cmp	rax, rdi
	je	.LBB502_15
# %bb.16:                               #   in Loop: Header=BB502_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rsi
	jae	.LBB502_17
# %bb.19:                               #   in Loop: Header=BB502_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB502_5
	jmp	.LBB502_20
.LBB502_7:
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB502_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB502_10
.LBB502_18:
	mov	rcx, rdi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB502_9:
	mov	rdx, rdi
.LBB502_10:
	test	rdx, rdx
	cmove	rdx, rdi
	cmp	rdi, rdx
	je	.LBB502_11
.LBB502_20:
	add	rdx, 1
	mov	rsi, rdx
.LBB502_21:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB502_15:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 6
	jmp	.LBB502_2
.LBB502_17:
	mov	rcx, rdi
	mov	r8b, 7
.LBB502_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB502_1:
	mov	rcx, rdi
	mov	r8b, 4
	jmp	.LBB502_2
.LBB502_11:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB502_21
# %bb.12:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 5
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rdi, rcx
	mov	rsi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rsi
	jae	.LBB503_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB503_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB503_18
	.p2align	4, 0x90
.LBB503_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB503_6
# %bb.13:                               #   in Loop: Header=BB503_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB503_14
	.p2align	4, 0x90
.LBB503_6:                              #   in Loop: Header=BB503_5 Depth=1
	mov	rax, rdi
.LBB503_14:                             #   in Loop: Header=BB503_5 Depth=1
	test	rax, rax
	cmove	rax, rdi
	cmp	rax, rdi
	je	.LBB503_15
# %bb.16:                               #   in Loop: Header=BB503_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rsi
	jae	.LBB503_17
# %bb.19:                               #   in Loop: Header=BB503_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB503_5
	jmp	.LBB503_20
.LBB503_7:
	add	rax, 2
	mov	r8, rsi
	sub	r8, rax
	je	.LBB503_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB503_10
.LBB503_18:
	mov	rcx, rdi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB503_9:
	mov	rdx, rdi
.LBB503_10:
	test	rdx, rdx
	cmove	rdx, rdi
	cmp	rdi, rdx
	je	.LBB503_11
.LBB503_20:
	add	rdx, 1
	mov	rsi, rdx
.LBB503_21:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB503_15:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 6
	jmp	.LBB503_2
.LBB503_17:
	mov	rcx, rdi
	mov	r8b, 7
.LBB503_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB503_1:
	mov	rcx, rdi
	mov	r8b, 4
	jmp	.LBB503_2
.LBB503_11:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB503_21
# %bb.12:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 5
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@46464646464646464646464646464646 # -- Begin function ??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.section	.rdata,"dr",discard,__xmm@46464646464646464646464646464646
	.p2align	4
__xmm@46464646464646464646464646464646:
	.zero	16,70
	.globl	__xmm@76767676767676767676767676767676
	.section	.rdata,"dr",discard,__xmm@76767676767676767676767676767676
	.p2align	4
__xmm@76767676767676767676767676767676:
	.zero	16,118
	.globl	__xmm@00000000000000004530000043300000
	.section	.rdata,"dr",discard,__xmm@00000000000000004530000043300000
	.p2align	4
__xmm@00000000000000004530000043300000:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
	.globl	__xmm@45300000000000004330000000000000
	.section	.rdata,"dr",discard,__xmm@45300000000000004330000000000000
	.p2align	4
__xmm@45300000000000004330000000000000:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.globl	__real@4024000000000000
	.section	.rdata,"dr",discard,__real@4024000000000000
	.p2align	3
__real@4024000000000000:
	.quad	4621819117588971520     # double 10
	.section	.text,"xr",discard,"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.p2align	4, 0x90
"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 120
	.seh_stackalloc 120
	movapd	xmmword ptr [rsp + 96], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 96
	movapd	xmmword ptr [rsp + 80], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 80
	movapd	xmmword ptr [rsp + 64], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 64
	.seh_endprologue
	mov	rax, rdx
	mov	r14, rcx
	mov	rdx, qword ptr [rcx + 160]
	mov	rcx, rdx
	sub	rcx, rax
	mov	word ptr [rsp + 56], 0
	mov	qword ptr [rsp + 48], 0
	cmp	rcx, 33
	jb	.LBB504_3
# %bb.1:
	movdqu	xmm1, xmmword ptr [rax]
	movdqa	xmm2, xmmword ptr [rip + __xmm@46464646464646464646464646464646] # xmm2 = [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70]
	paddb	xmm2, xmm1
	movdqa	xmm0, xmmword ptr [rip + __xmm@76767676767676767676767676767676] # xmm0 = [118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118]
	movdqa	xmm3, xmm0
	pcmpgtb	xmm3, xmm2
	pmovmskb	ecx, xmm3
	test	cx, cx
	je	.LBB504_4
# %bb.2:
	bsf	r9d, ecx
	jmp	.LBB504_5
.LBB504_3:
	movsx	rbx, byte ptr [rax]
	add	rax, 1
	add	rbx, -48
	mov	qword ptr [rsp + 40], rbx
	mov	rdi, rax
	jmp	.LBB504_17
.LBB504_4:
	mov	r9d, 16
.LBB504_5:
	mov	r10d, r9d
	cmp	r9d, 4
	jb	.LBB504_9
# %bb.6:
	movd	ebp, xmm1
	lea	rsi, [r10 - 4]
	mov	r11, rsi
	and	r11, -4
	lea	r8, [r11 + 4]
	lea	rdi, [rax + 4]
	xor	ebx, ebx
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB504_7:                              # =>This Inner Loop Header: Depth=1
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, bpl
	lea	rbx, [2*rbx]
	add	rbx, rbp
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rdi - 3]
	lea	rbx, [rbp + 2*rbx]
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rdi - 2]
	lea	rbx, [rbp + 2*rbx]
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rdi - 1]
	lea	rbx, [2*rbx - 53328]
	add	rbx, rbp
	cmp	rcx, 4
	jb	.LBB504_13
# %bb.8:                                #   in Loop: Header=BB504_7 Depth=1
	movzx	ebp, byte ptr [rdi]
	add	rdi, 4
	add	rcx, -4
	jmp	.LBB504_7
.LBB504_9:
	xor	ebx, ebx
	mov	rsi, r10
	mov	r8, rax
	cmp	rsi, 3
	je	.LBB504_14
.LBB504_10:
	cmp	rsi, 2
	je	.LBB504_15
# %bb.11:
	cmp	rsi, 1
	jne	.LBB504_16
# %bb.12:
	lea	rcx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r8]
	lea	rbx, [2*rcx - 48]
	add	rbx, rbp
	jmp	.LBB504_16
.LBB504_13:
	add	r8, rax
	sub	rsi, r11
	cmp	rsi, 3
	jne	.LBB504_10
.LBB504_14:
	lea	rcx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r8]
	lea	rcx, [2*rcx]
	add	rcx, rbp
	lea	rcx, [rcx + 4*rcx]
	movsx	rbp, byte ptr [r8 + 1]
	lea	rcx, [rbp + 2*rcx]
	lea	rcx, [rcx + 4*rcx]
	movsx	rbp, byte ptr [r8 + 2]
	lea	rbx, [2*rcx - 5328]
	add	rbx, rbp
	jmp	.LBB504_16
.LBB504_15:
	lea	rcx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r8]
	lea	rcx, [2*rcx]
	add	rcx, rbp
	lea	rcx, [rcx + 4*rcx]
	movsx	rbp, byte ptr [r8 + 1]
	lea	rbx, [2*rcx - 528]
	add	rbx, rbp
.LBB504_16:
	mov	qword ptr [rsp + 40], rbx
	lea	rdi, [rax + r10]
	cmp	r9d, 16
	jne	.LBB504_53
.LBB504_17:
	mov	rax, rdx
	sub	rax, rdi
	jbe	.LBB504_124
# %bb.18:
	mov	cl, byte ptr [rdi]
	lea	ebp, [rcx - 48]
	cmp	bpl, 9
	ja	.LBB504_25
# %bb.19:
	add	rax, -2
	movabs	rsi, 1844674407370955161
	mov	r15, rdi
	.p2align	4, 0x90
.LBB504_20:                             # =>This Inner Loop Header: Depth=1
	lea	rdi, [r15 + 1]
	cmp	rbx, rsi
	ja	.LBB504_30
# %bb.21:                               #   in Loop: Header=BB504_20 Depth=1
	cmp	cl, 54
	jl	.LBB504_23
# %bb.22:                               #   in Loop: Header=BB504_20 Depth=1
	cmp	rbx, rsi
	je	.LBB504_30
.LBB504_23:                             #   in Loop: Header=BB504_20 Depth=1
	lea	rbp, [rbx + 4*rbx]
	movzx	ecx, cl
	lea	rbx, [rcx + 2*rbp]
	add	rbx, -48
	mov	qword ptr [rsp + 40], rbx
	cmp	rdi, rdx
	je	.LBB504_113
# %bb.24:                               #   in Loop: Header=BB504_20 Depth=1
	movzx	ecx, byte ptr [rdi]
	lea	ebp, [rcx - 48]
	add	rax, -1
	mov	r15, rdi
	cmp	bpl, 9
	jbe	.LBB504_20
.LBB504_25:
	cmp	rdx, rdi
	jbe	.LBB504_142
# %bb.26:
	mov	al, byte ptr [rdi]
	cmp	al, 46
	jne	.LBB504_144
# %bb.27:
	add	rdi, 1
	cmp	rdi, rdx
	jae	.LBB504_146
# %bb.28:
	mov	al, byte ptr [rdi]
	add	al, -48
	cmp	al, 10
	jae	.LBB504_147
# %bb.29:
	xor	r8d, r8d
	mov	r15, rdi
	jmp	.LBB504_106
.LBB504_30:
	mov	dword ptr [rsp + 48], 1
	cmp	rdx, rdi
	jbe	.LBB504_126
# %bb.31:
	mov	r9b, byte ptr [rdi]
	lea	ecx, [r9 - 48]
	cmp	cl, 9
	jbe	.LBB504_129
# %bb.32:
	mov	r8d, 1
	mov	r15, rdi
	cmp	r9b, 46
	jne	.LBB504_133
.LBB504_33:
	add	rdi, 1
	cmp	rdi, rdx
	jae	.LBB504_67
.LBB504_34:
	mov	al, byte ptr [rdi]
	add	al, -48
	cmp	al, 9
	ja	.LBB504_147
# %bb.35:
	add	rdi, 1
.LBB504_36:
	cmp	rdx, rdi
	jbe	.LBB504_123
# %bb.37:
	mov	al, byte ptr [rdi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB504_41
# %bb.38:
	lea	rcx, [rdx - 1]
	.p2align	4, 0x90
.LBB504_39:                             # =>This Inner Loop Header: Depth=1
	cmp	rcx, rdi
	je	.LBB504_43
# %bb.40:                               #   in Loop: Header=BB504_39 Depth=1
	movzx	eax, byte ptr [rdi + 1]
	add	rdi, 1
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB504_39
.LBB504_41:
	mov	r15, rdi
.LBB504_42:
	or	al, 32
	xor	ecx, ecx
	cmp	al, 101
	jne	.LBB504_45
	jmp	.LBB504_82
.LBB504_43:
	mov	r15, rdx
	mov	rdi, rdx
.LBB504_44:
	xor	ecx, ecx
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB504_134
.LBB504_45:
	movq	xmm7, rbx
	punpckldq	xmm7, xmmword ptr [rip + __xmm@00000000000000004530000043300000] # xmm7 = xmm7[0],mem[0],xmm7[1],mem[1]
	subpd	xmm7, xmmword ptr [rip + __xmm@45300000000000004330000000000000]
	movapd	xmm6, xmm7
	unpckhpd	xmm6, xmm7      # xmm6 = xmm6[1],xmm7[1]
	lea	eax, [rcx + r8]
	add	eax, 308
	cmp	eax, 617
	jb	.LBB504_47
# %bb.46:
	add	ecx, r8d
	xorps	xmm1, xmm1
	cvtsi2sd	xmm1, ecx
	movq	xmm0, qword ptr [rip + __real@4024000000000000] # xmm0 = mem[0],zero
	call	pow
	movdqa	xmm8, xmm0
	jmp	.LBB504_48
.LBB504_47:
	mov	eax, eax
	lea	rcx, [rip + "?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"]
	movq	xmm8, qword ptr [rcx + 8*rax] # xmm8 = mem[0],zero
.LBB504_48:
	addsd	xmm6, xmm7
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB504_50
# %bb.49:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB504_50:
	mulsd	xmm8, xmm6
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB504_52
# %bb.51:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB504_52:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 5
	movsd	qword ptr [rax + 16], xmm8
	add	qword ptr [r14 + 24], 24
	mov	rdi, r15
	jmp	.LBB504_151
.LBB504_53:
	mov	cl, byte ptr [rdi]
	cmp	cl, 46
	jne	.LBB504_56
# %bb.54:
	movdqu	xmm1, xmmword ptr [rdi + 1]
	movdqa	xmm2, xmmword ptr [rip + __xmm@46464646464646464646464646464646] # xmm2 = [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70]
	paddb	xmm2, xmm1
	pcmpgtb	xmm0, xmm2
	pmovmskb	ecx, xmm0
	test	cx, cx
	je	.LBB504_63
# %bb.55:
	bsf	r8d, ecx
	jmp	.LBB504_64
.LBB504_56:
	or	cl, 32
	xor	r8d, r8d
	cmp	cl, 101
	je	.LBB504_82
.LBB504_57:
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB504_59
# %bb.58:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB504_59:
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB504_61
# %bb.60:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB504_61:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 3
.LBB504_62:
	mov	qword ptr [rax + 16], rbx
	add	qword ptr [r14 + 24], 24
	jmp	.LBB504_151
.LBB504_63:
	mov	r8d, 16
.LBB504_64:
	add	rdi, 1
	test	r8d, r8d
	je	.LBB504_147
# %bb.65:
	add	r9d, r8d
	cmp	r9d, 18
	jbe	.LBB504_68
# %bb.66:
	xor	r8d, r8d
	cmp	rdi, rdx
	jb	.LBB504_34
.LBB504_67:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 53
	jmp	.LBB504_137
.LBB504_68:
	mov	r9d, r8d
	cmp	r8d, 4
	jb	.LBB504_72
# %bb.69:
	movd	ebp, xmm1
	lea	rsi, [r9 - 4]
	mov	r15, rsi
	and	r15, -4
	lea	r11, [r15 + 4]
	add	rax, r10
	add	rax, 5
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB504_70:                             # =>This Inner Loop Header: Depth=1
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, bpl
	lea	rbp, [rbp + 2*rbx]
	lea	rbp, [rbp + 4*rbp]
	movsx	rbx, byte ptr [rax - 3]
	lea	rbp, [rbx + 2*rbp]
	lea	rbp, [rbp + 4*rbp]
	movsx	rbx, byte ptr [rax - 2]
	lea	rbp, [rbx + 2*rbp]
	lea	rbp, [rbp + 4*rbp]
	movsx	rbx, byte ptr [rax - 1]
	lea	rbx, [rbx + 2*rbp]
	add	rbx, -53328
	cmp	rcx, 4
	jb	.LBB504_73
# %bb.71:                               #   in Loop: Header=BB504_70 Depth=1
	movzx	ebp, byte ptr [rax]
	add	rax, 4
	add	rcx, -4
	jmp	.LBB504_70
.LBB504_72:
	mov	rsi, r9
	mov	r11, rdi
	jmp	.LBB504_74
.LBB504_73:
	add	r11, rdi
	sub	rsi, r15
.LBB504_74:
	cmp	rsi, 3
	je	.LBB504_78
# %bb.75:
	cmp	rsi, 2
	je	.LBB504_79
# %bb.76:
	cmp	rsi, 1
	jne	.LBB504_80
# %bb.77:
	lea	rax, [rbx + 4*rbx]
	movsx	rcx, byte ptr [r11]
	lea	rbx, [rcx + 2*rax]
	add	rbx, -48
	jmp	.LBB504_80
.LBB504_78:
	lea	rax, [rbx + 4*rbx]
	movsx	rcx, byte ptr [r11]
	lea	rax, [rcx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rcx, byte ptr [r11 + 1]
	lea	rax, [rcx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rcx, byte ptr [r11 + 2]
	lea	rbx, [rcx + 2*rax]
	add	rbx, -5328
	jmp	.LBB504_80
.LBB504_79:
	lea	rax, [rbx + 4*rbx]
	movsx	rcx, byte ptr [r11]
	lea	rax, [rcx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rcx, byte ptr [r11 + 1]
	lea	rbx, [rcx + 2*rax]
	add	rbx, -528
.LBB504_80:
	mov	qword ptr [rsp + 40], rbx
	neg	r8d
	mov	dword ptr [rsp + 48], r8d
	lea	r15, [rdi + r9]
	mov	al, byte ptr [rdi + r9]
	mov	ecx, eax
	or	cl, 32
	cmp	cl, 101
	jne	.LBB504_105
# %bb.81:
	mov	rdi, r15
.LBB504_82:
	lea	rax, [rdi + 1]
	cmp	rax, rdx
	jae	.LBB504_136
# %bb.83:
	mov	cl, byte ptr [rax]
	cmp	cl, 45
	je	.LBB504_86
# %bb.84:
	cmp	cl, 43
	jne	.LBB504_99
# %bb.85:
	add	rdi, 2
	xor	r9d, r9d
	jmp	.LBB504_87
.LBB504_86:
	add	rdi, 2
	mov	byte ptr [rsp + 56], 1
	mov	r9b, 1
.LBB504_87:
	mov	rax, rdi
	cmp	rax, rdx
	jae	.LBB504_100
.LBB504_88:
	movzx	ecx, byte ptr [rax]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jae	.LBB504_101
# %bb.89:
	lea	r15, [rax + 1]
	add	ecx, -48
	mov	dword ptr [rsp + 52], ecx
	cmp	r15, rdx
	jae	.LBB504_138
# %bb.90:
	mov	dil, byte ptr [r15]
	lea	ebp, [rdi - 48]
	cmp	bpl, 9
	ja	.LBB504_103
# %bb.91:
	add	rax, 2
	.p2align	4, 0x90
.LBB504_92:                             # =>This Inner Loop Header: Depth=1
	cmp	ecx, 214748364
	jg	.LBB504_98
# %bb.93:                               #   in Loop: Header=BB504_92 Depth=1
	cmp	dil, 56
	jl	.LBB504_95
# %bb.94:                               #   in Loop: Header=BB504_92 Depth=1
	cmp	ecx, 214748364
	je	.LBB504_98
.LBB504_95:                             #   in Loop: Header=BB504_92 Depth=1
	movsx	ebp, dil
	lea	ecx, [rcx + 4*rcx]
	lea	ecx, [rbp + 2*rcx - 48]
	mov	dword ptr [rsp + 52], ecx
	cmp	rdx, rax
	je	.LBB504_102
# %bb.96:                               #   in Loop: Header=BB504_92 Depth=1
	movzx	edi, byte ptr [rax]
	lea	ebp, [rdi - 48]
	add	rax, 1
	cmp	bpl, 9
	jbe	.LBB504_92
# %bb.97:
	add	rax, -1
	mov	r15, rax
	jmp	.LBB504_103
.LBB504_98:
	add	rax, -1
	mov	rcx, r14
	mov	rdx, rax
	mov	r8d, 5
	jmp	.LBB504_149
.LBB504_99:
	xor	r9d, r9d
	cmp	rax, rdx
	jb	.LBB504_88
.LBB504_100:
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB504_153
.LBB504_101:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB504_148
.LBB504_102:
	mov	r15, rdx
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB504_139
.LBB504_103:
	test	r9b, r9b
	je	.LBB504_45
# %bb.104:
	neg	ecx
	jmp	.LBB504_45
.LBB504_105:
	add	al, -48
	xor	ecx, ecx
	cmp	al, 10
	jae	.LBB504_45
.LBB504_106:
	cmp	rdx, r15
	jbe	.LBB504_140
# %bb.107:
	mov	al, byte ptr [r15]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB504_141
# %bb.108:
	add	r15, 1
	mov	rdi, r15
	.p2align	4, 0x90
.LBB504_109:                            # =>This Inner Loop Header: Depth=1
	mov	rcx, rbx
	shr	rcx, 53
	jne	.LBB504_36
# %bb.110:                              #   in Loop: Header=BB504_109 Depth=1
	lea	ecx, [r8 - 1]
	mov	dword ptr [rsp + 48], ecx
	lea	rbp, [rbx + 4*rbx]
	movzx	eax, al
	lea	rbx, [rax + 2*rbp]
	add	rbx, -48
	mov	qword ptr [rsp + 40], rbx
	cmp	rdx, rdi
	je	.LBB504_120
# %bb.111:                              #   in Loop: Header=BB504_109 Depth=1
	movzx	eax, byte ptr [rdi]
	lea	ebp, [rax - 48]
	add	rdi, 1
	mov	r8d, ecx
	cmp	bpl, 9
	jbe	.LBB504_109
# %bb.112:
	add	rdi, -1
	mov	r8d, ecx
	jmp	.LBB504_41
.LBB504_113:
	mov	rdi, rdx
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB504_125
.LBB504_114:
	test	rbx, rbx
	jns	.LBB504_57
# %bb.115:
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB504_117
# %bb.116:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB504_117:
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB504_119
# %bb.118:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB504_119:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 4
	jmp	.LBB504_62
.LBB504_120:
	add	r8d, -1
	mov	r15, rdx
.LBB504_121:
	xor	ecx, ecx
	cmp	byte ptr [r14 + 152], 0
	je	.LBB504_45
# %bb.122:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 57
	jmp	.LBB504_135
.LBB504_123:
	mov	r15, rdi
	jmp	.LBB504_44
.LBB504_124:
	mov	rdx, rdi
	cmp	byte ptr [r14 + 152], 0
	je	.LBB504_114
.LBB504_125:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 51
	jmp	.LBB504_135
.LBB504_126:
	mov	r8d, 1
	mov	r15, rdi
.LBB504_127:
	xor	ecx, ecx
	cmp	byte ptr [r14 + 152], 0
	je	.LBB504_45
# %bb.128:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 52
	jmp	.LBB504_135
.LBB504_129:
	mov	rcx, -1
	mov	r8d, 2
.LBB504_130:                            # =>This Inner Loop Header: Depth=1
	mov	dword ptr [rsp + 48], r8d
	test	rax, rax
	je	.LBB504_152
# %bb.131:                              #   in Loop: Header=BB504_130 Depth=1
	movzx	r9d, byte ptr [r15 + r8]
	lea	ebp, [r9 - 48]
	add	rcx, -1
	add	r8, 1
	add	rax, -1
	cmp	bpl, 10
	jb	.LBB504_130
# %bb.132:
	mov	r8d, ecx
	neg	r8d
	sub	r15, rcx
	mov	rdi, r15
	cmp	r9b, 46
	je	.LBB504_33
.LBB504_133:
	or	r9b, 32
	xor	ecx, ecx
	cmp	r9b, 101
	jne	.LBB504_45
	jmp	.LBB504_82
.LBB504_134:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 54
.LBB504_135:
	call	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	jmp	.LBB504_150
.LBB504_136:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 58
.LBB504_137:
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	jmp	.LBB504_150
.LBB504_138:
	mov	rdx, r15
	cmp	byte ptr [r14 + 152], 0
	je	.LBB504_103
.LBB504_139:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 60
	jmp	.LBB504_135
.LBB504_140:
	mov	rdx, r15
	jmp	.LBB504_121
.LBB504_141:
	mov	rdi, r15
	jmp	.LBB504_42
.LBB504_142:
	cmp	byte ptr [r14 + 152], 0
	je	.LBB504_114
# %bb.143:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 55
	jmp	.LBB504_135
.LBB504_144:
	or	al, 32
	cmp	al, 101
	jne	.LBB504_114
# %bb.145:
	xor	r8d, r8d
	jmp	.LBB504_82
.LBB504_146:
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB504_154
.LBB504_147:
	mov	rcx, r14
	mov	rdx, rdi
.LBB504_148:
	mov	r8d, 1
.LBB504_149:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
.LBB504_150:
	mov	rdi, rax
.LBB504_151:
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 80] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 96] # 16-byte Reload
	add	rsp, 120
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB504_152:
	mov	r15, rdx
	mov	rdi, rdx
	jmp	.LBB504_127
.LBB504_153:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 59
	jmp	.LBB504_135
.LBB504_154:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 56
	jmp	.LBB504_135
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	qword ptr [rcx + 160], rdx
	lea	rdi, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rdi
	mov	edx, 1
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rsi + 88], 1
	mov	byte ptr [rsi + 92], al
	mov	qword ptr [rsi + 96], rdi
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rdx
	mov	r14, rcx
	mov	rbx, qword ptr [rcx + 160]
	add	rsi, 1
	mov	rcx, rsi
	mov	rdx, rbx
	call	"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
	mov	rdi, rax
	mov	r15, rax
	sub	r15, rsi
	cmp	r15, 2147483647
	jae	.LBB506_1
# %bb.3:
	cmp	rdi, rbx
	jae	.LBB506_4
# %bb.10:
	movzx	eax, byte ptr [rdi]
	cmp	rax, 34
	jne	.LBB506_11
# %bb.21:
	mov	qword ptr [rsp + 32], rsi
	mov	qword ptr [rsp + 40], r15
	lea	rdx, [rsp + 32]
	mov	rcx, r14
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
	mov	rax, rdi
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB506_1:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 27
.LBB506_2:
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB506_4:
	test	r15, r15
	je	.LBB506_8
# %bb.5:
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r14 + 40]
	lea	rbx, [r15 + rcx]
	add	rbx, 24
	cmp	rbx, rdx
	jbe	.LBB506_7
# %bb.6:
	mov	rcx, r14
	mov	rdx, r15
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB506_7:
	add	rcx, rax
	add	rcx, 24
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	add	qword ptr [r14 + 40], r15
.LBB506_8:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 19
	jmp	.LBB506_9
.LBB506_11:
	test	al, al
	js	.LBB506_12
# %bb.15:
	cmp	al, 92
	jne	.LBB506_13
# %bb.16:
	test	r15, r15
	je	.LBB506_20
# %bb.17:
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r14 + 40]
	lea	rbx, [r15 + rcx]
	add	rbx, 24
	cmp	rbx, rdx
	jbe	.LBB506_19
# %bb.18:
	mov	rcx, r14
	mov	rdx, r15
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB506_19:
	add	rcx, rax
	add	rcx, 24
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	add	qword ptr [r14 + 40], r15
.LBB506_20:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8, r15
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB506_12:
	mov	rdx, rbx
	sub	rdx, rdi
	and	eax, 127
	lea	rcx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	movzx	eax, word ptr [rcx + 2*rax]
	lea	rcx, [r14 + 136]
	mov	word ptr [r14 + 140], ax
	movzx	esi, al
	cmp	rdx, rsi
	cmovae	rdx, rax
	mov	byte ptr [r14 + 142], dl
	movzx	r8d, dl
	mov	rdx, rdi
	call	memcpy
	mov	al, byte ptr [r14 + 142]
	cmp	al, byte ptr [r14 + 140]
	jae	.LBB506_13
# %bb.14:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 26
.LBB506_9:
	mov	r9, r15
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB506_13:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB506_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@80000000000000008000000000000000 # -- Begin function ??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.section	.rdata,"dr",discard,__xmm@80000000000000008000000000000000
	.p2align	4
__xmm@80000000000000008000000000000000:
	.quad	-9223372036854775808    # double -0
	.quad	-9223372036854775808    # double -0
	.section	.text,"xr",discard,"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.p2align	4, 0x90
"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movapd	xmmword ptr [rsp + 80], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 80
	movapd	xmmword ptr [rsp + 64], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 64
	.seh_endprologue
	mov	rax, rdx
	mov	r14, rcx
	mov	rdx, qword ptr [rcx + 160]
	lea	rdi, [rax + 1]
	mov	rcx, rdx
	sub	rcx, rdi
	mov	qword ptr [rsp + 48], 0
	mov	word ptr [rsp + 56], 256
	cmp	rcx, 33
	jb	.LBB507_3
# %bb.1:
	cmp	byte ptr [rdi], 48
	jne	.LBB507_35
# %bb.2:
	mov	qword ptr [rsp + 40], 0
	add	rax, 2
	xor	ebx, ebx
	mov	rdi, rax
	xor	r15d, r15d
	jmp	.LBB507_50
.LBB507_3:
	cmp	rdi, rdx
	jae	.LBB507_134
# %bb.4:
	mov	cl, byte ptr [rdi]
	lea	ebp, [rcx - 49]
	cmp	bpl, 8
	ja	.LBB507_135
# %bb.5:
	movzx	ebx, cl
	add	rax, 2
	add	rbx, -48
	mov	qword ptr [rsp + 40], rbx
.LBB507_6:
	mov	rsi, rdx
	sub	rsi, rax
	jbe	.LBB507_124
# %bb.7:
	mov	cl, byte ptr [rax]
	lea	ebp, [rcx - 48]
	cmp	bpl, 9
	ja	.LBB507_152
# %bb.8:
	add	rsi, -2
	movabs	r8, 922337203685477580
	.p2align	4, 0x90
.LBB507_9:                              # =>This Inner Loop Header: Depth=1
	lea	rdi, [rax + 1]
	cmp	rbx, r8
	ja	.LBB507_19
# %bb.10:                               #   in Loop: Header=BB507_9 Depth=1
	cmp	cl, 57
	jl	.LBB507_12
# %bb.11:                               #   in Loop: Header=BB507_9 Depth=1
	cmp	rbx, r8
	je	.LBB507_19
.LBB507_12:                             #   in Loop: Header=BB507_9 Depth=1
	lea	rax, [rbx + 4*rbx]
	movzx	ecx, cl
	lea	rbx, [rcx + 2*rax]
	add	rbx, -48
	mov	qword ptr [rsp + 40], rbx
	cmp	rdi, rdx
	je	.LBB507_120
# %bb.13:                               #   in Loop: Header=BB507_9 Depth=1
	movzx	ecx, byte ptr [rdi]
	lea	ebp, [rcx - 48]
	add	rsi, -1
	mov	rax, rdi
	cmp	bpl, 9
	jbe	.LBB507_9
# %bb.14:
	cmp	rdx, rdi
	jbe	.LBB507_153
.LBB507_15:
	mov	al, byte ptr [rdi]
	cmp	al, 46
	jne	.LBB507_146
# %bb.16:
	add	rdi, 1
	cmp	rdi, rdx
	jae	.LBB507_148
# %bb.17:
	mov	al, byte ptr [rdi]
	add	al, -48
	cmp	al, 10
	jae	.LBB507_136
# %bb.18:
	xor	r11d, r11d
	jmp	.LBB507_110
.LBB507_19:
	mov	dword ptr [rsp + 48], 1
	cmp	rdx, rdi
	jbe	.LBB507_126
# %bb.20:
	mov	r8b, byte ptr [rdi]
	lea	ecx, [r8 - 48]
	cmp	cl, 9
	jbe	.LBB507_129
# %bb.21:
	mov	r11d, 1
	cmp	r8b, 46
	jne	.LBB507_133
.LBB507_22:
	add	rdi, 1
	mov	rax, rdi
	cmp	rax, rdx
	jae	.LBB507_63
.LBB507_23:
	mov	cl, byte ptr [rax]
	add	cl, -48
	cmp	cl, 9
	ja	.LBB507_96
# %bb.24:
	add	rax, 1
	mov	rdi, rax
.LBB507_25:
	cmp	rdx, rdi
	jbe	.LBB507_32
# %bb.26:
	mov	al, byte ptr [rdi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB507_30
# %bb.27:
	lea	rcx, [rdx - 1]
	.p2align	4, 0x90
.LBB507_28:                             # =>This Inner Loop Header: Depth=1
	cmp	rcx, rdi
	je	.LBB507_31
# %bb.29:                               #   in Loop: Header=BB507_28 Depth=1
	movzx	eax, byte ptr [rdi + 1]
	add	rdi, 1
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB507_28
.LBB507_30:
	or	al, 32
	xor	esi, esi
	cmp	al, 101
	je	.LBB507_77
	jmp	.LBB507_100
.LBB507_31:
	mov	rdi, rdx
.LBB507_32:
	xor	esi, esi
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_100
# %bb.33:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 54
.LBB507_34:
	call	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	jmp	.LBB507_139
.LBB507_35:
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmmword ptr [rip + __xmm@46464646464646464646464646464646] # xmm1 = [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70]
	paddb	xmm1, xmm0
	movdqa	xmm2, xmmword ptr [rip + __xmm@76767676767676767676767676767676] # xmm2 = [118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118]
	pcmpgtb	xmm2, xmm1
	pmovmskb	ecx, xmm2
	test	cx, cx
	je	.LBB507_37
# %bb.36:
	bsf	r15d, ecx
	test	r15d, r15d
	jne	.LBB507_38
	jmp	.LBB507_136
.LBB507_37:
	mov	r15d, 16
	test	r15d, r15d
	je	.LBB507_136
.LBB507_38:
	mov	r8d, r15d
	cmp	r15d, 4
	jb	.LBB507_42
# %bb.39:
	movd	ebp, xmm0
	lea	rsi, [r8 - 4]
	mov	r10, rsi
	and	r10, -4
	lea	r9, [r10 + 4]
	add	rax, 5
	xor	ebx, ebx
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB507_40:                             # =>This Inner Loop Header: Depth=1
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, bpl
	lea	rbp, [rbp + 2*rbx]
	lea	rbp, [rbp + 4*rbp]
	movsx	rbx, byte ptr [rax - 3]
	lea	rbp, [rbx + 2*rbp]
	lea	rbp, [rbp + 4*rbp]
	movsx	rbx, byte ptr [rax - 2]
	lea	rbp, [rbx + 2*rbp]
	lea	rbp, [rbp + 4*rbp]
	movsx	rbx, byte ptr [rax - 1]
	lea	rbx, [rbx + 2*rbp]
	add	rbx, -53328
	cmp	rcx, 4
	jb	.LBB507_46
# %bb.41:                               #   in Loop: Header=BB507_40 Depth=1
	movzx	ebp, byte ptr [rax]
	add	rax, 4
	add	rcx, -4
	jmp	.LBB507_40
.LBB507_42:
	xor	ebx, ebx
	mov	rsi, r8
	mov	r9, rdi
	cmp	rsi, 3
	je	.LBB507_47
.LBB507_43:
	cmp	rsi, 2
	je	.LBB507_48
# %bb.44:
	cmp	rsi, 1
	jne	.LBB507_49
# %bb.45:
	lea	rax, [rbx + 4*rbx]
	movsx	rcx, byte ptr [r9]
	lea	rbx, [rcx + 2*rax]
	add	rbx, -48
	jmp	.LBB507_49
.LBB507_46:
	add	r9, rdi
	sub	rsi, r10
	cmp	rsi, 3
	jne	.LBB507_43
.LBB507_47:
	lea	rax, [rbx + 4*rbx]
	movsx	rcx, byte ptr [r9]
	lea	rax, [rcx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rcx, byte ptr [r9 + 1]
	lea	rax, [rcx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rcx, byte ptr [r9 + 2]
	lea	rbx, [rcx + 2*rax]
	add	rbx, -5328
	jmp	.LBB507_49
.LBB507_48:
	lea	rax, [rbx + 4*rbx]
	movsx	rcx, byte ptr [r9]
	lea	rax, [rcx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rcx, byte ptr [r9 + 1]
	lea	rbx, [rcx + 2*rax]
	add	rbx, -528
.LBB507_49:
	mov	qword ptr [rsp + 40], rbx
	add	rdi, r8
	mov	rax, rdi
	cmp	r15d, 16
	je	.LBB507_6
.LBB507_50:
	mov	al, byte ptr [rdi]
	cmp	al, 46
	jne	.LBB507_53
# %bb.51:
	movdqu	xmm0, xmmword ptr [rdi + 1]
	movdqa	xmm1, xmmword ptr [rip + __xmm@46464646464646464646464646464646] # xmm1 = [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70]
	paddb	xmm1, xmm0
	movdqa	xmm2, xmmword ptr [rip + __xmm@76767676767676767676767676767676] # xmm2 = [118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118]
	pcmpgtb	xmm2, xmm1
	pmovmskb	eax, xmm2
	test	ax, ax
	je	.LBB507_59
# %bb.52:
	bsf	r11d, eax
	jmp	.LBB507_60
.LBB507_53:
	or	al, 32
	xor	r11d, r11d
	cmp	al, 101
	je	.LBB507_77
# %bb.54:
	neg	rbx
	mov	qword ptr [rsp + 40], rbx
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB507_56
# %bb.55:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB507_56:
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB507_58
# %bb.57:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB507_58:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 3
	mov	qword ptr [rax + 16], rbx
	jmp	.LBB507_108
.LBB507_59:
	mov	r11d, 16
.LBB507_60:
	lea	rax, [rdi + 1]
	test	r11d, r11d
	je	.LBB507_96
# %bb.61:
	add	r15d, r11d
	cmp	r15d, 18
	jle	.LBB507_64
# %bb.62:
	xor	r11d, r11d
	cmp	rax, rdx
	jb	.LBB507_23
.LBB507_63:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 53
	jmp	.LBB507_142
.LBB507_64:
	mov	r8d, r11d
	cmp	r11d, 4
	jb	.LBB507_68
# %bb.65:
	movd	ebp, xmm0
	lea	rsi, [r8 - 4]
	mov	r10, rsi
	and	r10, -4
	lea	r9, [r10 + 4]
	add	rdi, 5
	mov	rcx, rsi
	.p2align	4, 0x90
.LBB507_66:                             # =>This Inner Loop Header: Depth=1
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, bpl
	lea	rbx, [2*rbx]
	add	rbx, rbp
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rdi - 3]
	lea	rbx, [rbp + 2*rbx]
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rdi - 2]
	lea	rbx, [rbp + 2*rbx]
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rdi - 1]
	lea	rbx, [2*rbx - 53328]
	add	rbx, rbp
	cmp	rcx, 4
	jb	.LBB507_69
# %bb.67:                               #   in Loop: Header=BB507_66 Depth=1
	movzx	ebp, byte ptr [rdi]
	add	rdi, 4
	add	rcx, -4
	jmp	.LBB507_66
.LBB507_68:
	mov	rsi, r8
	mov	r9, rax
	jmp	.LBB507_70
.LBB507_69:
	add	r9, rax
	sub	rsi, r10
.LBB507_70:
	cmp	rsi, 3
	je	.LBB507_74
# %bb.71:
	cmp	rsi, 2
	je	.LBB507_75
# %bb.72:
	cmp	rsi, 1
	jne	.LBB507_76
# %bb.73:
	lea	rcx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r9]
	lea	rbx, [2*rcx - 48]
	add	rbx, rbp
	jmp	.LBB507_76
.LBB507_74:
	lea	rcx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r9]
	lea	rcx, [2*rcx]
	add	rcx, rbp
	lea	rcx, [rcx + 4*rcx]
	movsx	rbp, byte ptr [r9 + 1]
	lea	rcx, [rbp + 2*rcx]
	lea	rcx, [rcx + 4*rcx]
	movsx	rbp, byte ptr [r9 + 2]
	lea	rbx, [2*rcx - 5328]
	add	rbx, rbp
	jmp	.LBB507_76
.LBB507_75:
	lea	rcx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r9]
	lea	rcx, [2*rcx]
	add	rcx, rbp
	lea	rcx, [rcx + 4*rcx]
	movsx	rbp, byte ptr [r9 + 1]
	lea	rbx, [2*rcx - 528]
	add	rbx, rbp
.LBB507_76:
	mov	qword ptr [rsp + 40], rbx
	neg	r11d
	mov	dword ptr [rsp + 48], r11d
	lea	rdi, [rax + r8]
	mov	al, byte ptr [rax + r8]
	mov	ecx, eax
	or	cl, 32
	cmp	cl, 101
	jne	.LBB507_109
.LBB507_77:
	lea	rax, [rdi + 1]
	cmp	rax, rdx
	jae	.LBB507_141
# %bb.78:
	mov	cl, byte ptr [rax]
	cmp	cl, 45
	je	.LBB507_81
# %bb.79:
	cmp	cl, 43
	jne	.LBB507_94
# %bb.80:
	add	rdi, 2
	xor	r8d, r8d
	jmp	.LBB507_82
.LBB507_81:
	add	rdi, 2
	mov	byte ptr [rsp + 56], 1
	mov	r8b, 1
.LBB507_82:
	mov	rax, rdi
	cmp	rax, rdx
	jae	.LBB507_95
.LBB507_83:
	movzx	esi, byte ptr [rax]
	lea	ecx, [rsi - 48]
	cmp	cl, 10
	jae	.LBB507_96
# %bb.84:
	lea	rdi, [rax + 1]
	add	esi, -48
	mov	dword ptr [rsp + 52], esi
	cmp	rdi, rdx
	jae	.LBB507_143
# %bb.85:
	mov	cl, byte ptr [rdi]
	lea	ebp, [rcx - 48]
	cmp	bpl, 9
	ja	.LBB507_98
# %bb.86:
	add	rax, 2
	.p2align	4, 0x90
.LBB507_87:                             # =>This Inner Loop Header: Depth=1
	cmp	esi, 214748364
	jg	.LBB507_93
# %bb.88:                               #   in Loop: Header=BB507_87 Depth=1
	cmp	cl, 56
	jl	.LBB507_90
# %bb.89:                               #   in Loop: Header=BB507_87 Depth=1
	cmp	esi, 214748364
	je	.LBB507_93
.LBB507_90:                             #   in Loop: Header=BB507_87 Depth=1
	movsx	ecx, cl
	lea	ebp, [rsi + 4*rsi]
	lea	esi, [rcx + 2*rbp]
	add	esi, -48
	mov	dword ptr [rsp + 52], esi
	cmp	rdx, rax
	je	.LBB507_97
# %bb.91:                               #   in Loop: Header=BB507_87 Depth=1
	movzx	ecx, byte ptr [rax]
	lea	ebp, [rcx - 48]
	add	rax, 1
	cmp	bpl, 9
	jbe	.LBB507_87
# %bb.92:
	add	rax, -1
	mov	rdi, rax
	jmp	.LBB507_98
.LBB507_93:
	add	rax, -1
	mov	rcx, r14
	mov	rdx, rax
	mov	r8d, 5
	jmp	.LBB507_138
.LBB507_94:
	xor	r8d, r8d
	cmp	rax, rdx
	jb	.LBB507_83
.LBB507_95:
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB507_155
.LBB507_96:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB507_137
.LBB507_97:
	mov	rdi, rdx
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB507_144
.LBB507_98:
	test	r8b, r8b
	je	.LBB507_100
# %bb.99:
	neg	esi
.LBB507_100:
	movq	xmm0, rbx
	punpckldq	xmm0, xmmword ptr [rip + __xmm@00000000000000004530000043300000] # xmm0 = xmm0[0],mem[0],xmm0[1],mem[1]
	subpd	xmm0, xmmword ptr [rip + __xmm@45300000000000004330000000000000]
	movapd	xmm7, xmm0
	unpckhpd	xmm7, xmm0      # xmm7 = xmm7[1],xmm0[1]
	addsd	xmm7, xmm0
	xorpd	xmm7, xmmword ptr [rip + __xmm@80000000000000008000000000000000]
	lea	eax, [rsi + r11]
	add	eax, 308
	cmp	eax, 617
	jb	.LBB507_102
# %bb.101:
	add	esi, r11d
	xorps	xmm1, xmm1
	cvtsi2sd	xmm1, esi
	movsd	xmm0, qword ptr [rip + __real@4024000000000000] # xmm0 = mem[0],zero
	call	pow
	movapd	xmm6, xmm0
	jmp	.LBB507_103
.LBB507_102:
	mov	eax, eax
	lea	rcx, [rip + "?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"]
	movsd	xmm6, qword ptr [rcx + 8*rax] # xmm6 = mem[0],zero
.LBB507_103:
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB507_105
# %bb.104:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB507_105:
	mulsd	xmm6, xmm7
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB507_107
# %bb.106:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB507_107:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 5
	movsd	qword ptr [rax + 16], xmm6
.LBB507_108:
	add	qword ptr [r14 + 24], 24
	jmp	.LBB507_140
.LBB507_109:
	add	al, -48
	xor	esi, esi
	cmp	al, 10
	jae	.LBB507_100
.LBB507_110:
	cmp	rdx, rdi
	jbe	.LBB507_145
# %bb.111:
	mov	al, byte ptr [rdi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB507_30
# %bb.112:
	add	rdi, 1
	.p2align	4, 0x90
.LBB507_113:                            # =>This Inner Loop Header: Depth=1
	mov	rcx, rbx
	shr	rcx, 53
	jne	.LBB507_25
# %bb.114:                              #   in Loop: Header=BB507_113 Depth=1
	lea	ecx, [r11 - 1]
	mov	dword ptr [rsp + 48], ecx
	lea	rbp, [rbx + 4*rbx]
	movzx	eax, al
	lea	rbx, [rax + 2*rbp]
	add	rbx, -48
	mov	qword ptr [rsp + 40], rbx
	cmp	rdx, rdi
	je	.LBB507_117
# %bb.115:                              #   in Loop: Header=BB507_113 Depth=1
	movzx	eax, byte ptr [rdi]
	lea	ebp, [rax - 48]
	add	rdi, 1
	mov	r11d, ecx
	cmp	bpl, 9
	jbe	.LBB507_113
# %bb.116:
	add	rdi, -1
	mov	r11d, ecx
	jmp	.LBB507_30
.LBB507_117:
	add	r11d, -1
	mov	rdi, rdx
.LBB507_118:
	xor	esi, esi
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_100
# %bb.119:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 57
	jmp	.LBB507_34
.LBB507_120:
	mov	rdi, rdx
	mov	rax, rdx
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB507_125
.LBB507_121:
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB507_123
# %bb.122:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB507_123:
	neg	rbx
	jmp	.LBB507_56
.LBB507_124:
	mov	rdi, rax
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_121
.LBB507_125:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 51
	jmp	.LBB507_34
.LBB507_126:
	mov	r11d, 1
.LBB507_127:
	xor	esi, esi
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_100
# %bb.128:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 52
	jmp	.LBB507_34
.LBB507_129:
	mov	rcx, -1
	mov	r11d, 2
.LBB507_130:                            # =>This Inner Loop Header: Depth=1
	mov	dword ptr [rsp + 48], r11d
	test	rsi, rsi
	je	.LBB507_150
# %bb.131:                              #   in Loop: Header=BB507_130 Depth=1
	movzx	r8d, byte ptr [rax + r11]
	lea	ebp, [r8 - 48]
	add	rcx, -1
	add	r11, 1
	add	rsi, -1
	cmp	bpl, 10
	jb	.LBB507_130
# %bb.132:
	mov	r11d, ecx
	neg	r11d
	sub	rax, rcx
	mov	rdi, rax
	cmp	r8b, 46
	je	.LBB507_22
.LBB507_133:
	or	r8b, 32
	xor	esi, esi
	cmp	r8b, 101
	je	.LBB507_77
	jmp	.LBB507_100
.LBB507_134:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 50
	jmp	.LBB507_142
.LBB507_135:
	cmp	cl, 48
	je	.LBB507_151
.LBB507_136:
	mov	rcx, r14
	mov	rdx, rdi
.LBB507_137:
	mov	r8d, 1
.LBB507_138:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
.LBB507_139:
	mov	rdi, rax
.LBB507_140:
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB507_141:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 58
.LBB507_142:
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	jmp	.LBB507_139
.LBB507_143:
	mov	rdx, rdi
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_98
.LBB507_144:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 60
	jmp	.LBB507_34
.LBB507_145:
	mov	rdx, rdi
	jmp	.LBB507_118
.LBB507_146:
	or	al, 32
	cmp	al, 101
	jne	.LBB507_121
# %bb.147:
	xor	r11d, r11d
	jmp	.LBB507_77
.LBB507_148:
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_136
# %bb.149:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 56
	jmp	.LBB507_34
.LBB507_150:
	mov	rdi, rdx
	jmp	.LBB507_127
.LBB507_151:
	add	rax, 2
	mov	qword ptr [rsp + 40], 0
	xor	ebx, ebx
.LBB507_152:
	mov	rdi, rax
	cmp	rdx, rdi
	ja	.LBB507_15
.LBB507_153:
	cmp	byte ptr [r14 + 152], 0
	je	.LBB507_121
# %bb.154:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 55
	jmp	.LBB507_34
.LBB507_155:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 59
	jmp	.LBB507_34
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 120
	.seh_stackalloc 120
	movapd	xmmword ptr [rsp + 96], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 96
	movapd	xmmword ptr [rsp + 80], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 80
	movapd	xmmword ptr [rsp + 64], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 64
	.seh_endprologue
	mov	rax, rdx
	mov	r14, rcx
	mov	rdx, qword ptr [rcx + 160]
	mov	rcx, rdx
	sub	rcx, rax
	mov	word ptr [rsp + 56], 0
	mov	qword ptr [rsp + 48], 0
	cmp	rcx, 33
	jb	.LBB508_4
# %bb.1:
	mov	qword ptr [rsp + 40], 0
	mov	cl, byte ptr [rax + 1]
	cmp	cl, 46
	jne	.LBB508_17
# %bb.2:
	movdqu	xmm0, xmmword ptr [rax + 2]
	movdqa	xmm1, xmmword ptr [rip + __xmm@46464646464646464646464646464646] # xmm1 = [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70]
	paddb	xmm1, xmm0
	movdqa	xmm2, xmmword ptr [rip + __xmm@76767676767676767676767676767676] # xmm2 = [118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118]
	pcmpgtb	xmm2, xmm1
	pmovmskb	ecx, xmm2
	test	cx, cx
	je	.LBB508_28
# %bb.3:
	bsf	r12d, ecx
	jmp	.LBB508_29
.LBB508_4:
	lea	r15, [rax + 1]
	mov	qword ptr [rsp + 40], 0
	cmp	r15, rdx
	jae	.LBB508_94
# %bb.5:
	mov	cl, byte ptr [r15]
	cmp	cl, 46
	jne	.LBB508_96
# %bb.6:
	add	rax, 2
	cmp	rax, rdx
	jae	.LBB508_97
# %bb.7:
	mov	cl, byte ptr [rax]
	add	cl, -48
	cmp	cl, 10
	jae	.LBB508_102
# %bb.8:
	xor	r12d, r12d
	xor	esi, esi
	mov	r15, rax
.LBB508_9:
	cmp	rdx, r15
	jbe	.LBB508_93
# %bb.10:
	mov	dil, byte ptr [r15]
	lea	eax, [rdi - 48]
	cmp	al, 9
	ja	.LBB508_16
# %bb.11:
	add	r15, 1
	mov	rax, r15
	.p2align	4, 0x90
.LBB508_12:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	shr	rcx, 53
	jne	.LBB508_34
# %bb.13:                               #   in Loop: Header=BB508_12 Depth=1
	lea	ebx, [r12 - 1]
	mov	dword ptr [rsp + 48], ebx
	lea	rcx, [rsi + 4*rsi]
	movzx	edi, dil
	lea	rsi, [rdi + 2*rcx]
	add	rsi, -48
	mov	qword ptr [rsp + 40], rsi
	cmp	rdx, rax
	je	.LBB508_19
# %bb.14:                               #   in Loop: Header=BB508_12 Depth=1
	movzx	edi, byte ptr [rax]
	lea	ecx, [rdi - 48]
	add	rax, 1
	mov	r12d, ebx
	cmp	cl, 9
	jbe	.LBB508_12
# %bb.15:
	add	rax, -1
	mov	r12d, ebx
	mov	r15, rax
.LBB508_16:
	or	dil, 32
	xor	ebx, ebx
	cmp	dil, 101
	je	.LBB508_59
	jmp	.LBB508_82
.LBB508_17:
	or	cl, 32
	cmp	cl, 101
	jne	.LBB508_22
.LBB508_18:
	add	rax, 2
	xor	esi, esi
	xor	r12d, r12d
	jmp	.LBB508_60
.LBB508_19:
	add	r12d, -1
	mov	r15, rdx
.LBB508_20:
	xor	ebx, ebx
	cmp	byte ptr [r14 + 152], 0
	je	.LBB508_82
# %bb.21:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 57
	jmp	.LBB508_105
.LBB508_22:
	add	rax, 1
	mov	r15, rax
.LBB508_23:
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB508_25
# %bb.24:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB508_25:
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB508_27
# %bb.26:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB508_27:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 3
	mov	qword ptr [rax + 16], 0
	jmp	.LBB508_90
.LBB508_28:
	mov	r12d, 16
.LBB508_29:
	lea	r8, [rax + 2]
	test	r12d, r12d
	je	.LBB508_44
# %bb.30:
	movd	edi, xmm0
	cmp	r12d, 18
	jbe	.LBB508_46
# %bb.31:
	cmp	r8, rdx
	jae	.LBB508_107
# %bb.32:
	add	dil, -48
	cmp	dil, 9
	ja	.LBB508_44
# %bb.33:
	add	rax, 3
	xor	esi, esi
	xor	r12d, r12d
.LBB508_34:
	cmp	rdx, rax
	jbe	.LBB508_106
# %bb.35:
	mov	dil, byte ptr [rax]
	lea	ebx, [rdi - 48]
	cmp	bl, 9
	ja	.LBB508_39
# %bb.36:
	lea	rbx, [rdx - 1]
	.p2align	4, 0x90
.LBB508_37:                             # =>This Inner Loop Header: Depth=1
	cmp	rbx, rax
	je	.LBB508_41
# %bb.38:                               #   in Loop: Header=BB508_37 Depth=1
	movzx	edi, byte ptr [rax + 1]
	add	rax, 1
	lea	ecx, [rdi - 48]
	cmp	cl, 10
	jb	.LBB508_37
.LBB508_39:
	mov	r15, rax
	or	dil, 32
	xor	ebx, ebx
	cmp	dil, 101
	jne	.LBB508_82
# %bb.40:
	add	rax, 1
	jmp	.LBB508_60
.LBB508_41:
	mov	r15, rdx
	mov	rax, rdx
.LBB508_42:
	xor	ebx, ebx
	cmp	byte ptr [r14 + 152], 0
	je	.LBB508_82
# %bb.43:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 54
	jmp	.LBB508_105
.LBB508_44:
	mov	rcx, r14
	mov	rdx, r8
.LBB508_45:
	mov	r8d, 1
	jmp	.LBB508_78
.LBB508_46:
	mov	r9d, r12d
	cmp	r12d, 4
	jb	.LBB508_50
# %bb.47:
	lea	r15, [r9 - 4]
	mov	r11, r15
	and	r11, -4
	lea	r10, [r11 + 4]
	add	rax, 6
	xor	esi, esi
	mov	rbx, r15
	.p2align	4, 0x90
.LBB508_48:                             # =>This Inner Loop Header: Depth=1
	lea	rsi, [rsi + 4*rsi]
	movsx	rdi, dil
	lea	rsi, [rdi + 2*rsi]
	lea	rsi, [rsi + 4*rsi]
	movsx	rdi, byte ptr [rax - 3]
	lea	rsi, [rdi + 2*rsi]
	lea	rsi, [rsi + 4*rsi]
	movsx	rdi, byte ptr [rax - 2]
	lea	rsi, [rdi + 2*rsi]
	lea	rsi, [rsi + 4*rsi]
	movsx	rdi, byte ptr [rax - 1]
	lea	rsi, [rdi + 2*rsi]
	add	rsi, -53328
	cmp	rbx, 4
	jb	.LBB508_51
# %bb.49:                               #   in Loop: Header=BB508_48 Depth=1
	movzx	edi, byte ptr [rax]
	add	rax, 4
	add	rbx, -4
	jmp	.LBB508_48
.LBB508_50:
	xor	esi, esi
	mov	r15, r9
	mov	r10, r8
	jmp	.LBB508_52
.LBB508_51:
	add	r10, r8
	sub	r15, r11
.LBB508_52:
	cmp	r15, 3
	je	.LBB508_56
# %bb.53:
	cmp	r15, 2
	je	.LBB508_57
# %bb.54:
	cmp	r15, 1
	jne	.LBB508_58
# %bb.55:
	lea	rax, [rsi + 4*rsi]
	movsx	rbx, byte ptr [r10]
	lea	rsi, [rbx + 2*rax]
	add	rsi, -48
	jmp	.LBB508_58
.LBB508_56:
	lea	rax, [rsi + 4*rsi]
	movsx	rbx, byte ptr [r10]
	lea	rax, [rbx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rbx, byte ptr [r10 + 1]
	lea	rax, [rbx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rbx, byte ptr [r10 + 2]
	lea	rsi, [rbx + 2*rax]
	add	rsi, -5328
	jmp	.LBB508_58
.LBB508_57:
	lea	rax, [rsi + 4*rsi]
	movsx	rbx, byte ptr [r10]
	lea	rax, [rbx + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rbx, byte ptr [r10 + 1]
	lea	rsi, [rbx + 2*rax]
	add	rsi, -528
.LBB508_58:
	mov	qword ptr [rsp + 40], rsi
	neg	r12d
	mov	dword ptr [rsp + 48], r12d
	lea	r15, [r8 + r9]
	mov	r8b, byte ptr [r8 + r9]
	mov	eax, r8d
	or	al, 32
	cmp	al, 101
	jne	.LBB508_92
.LBB508_59:
	add	r15, 1
	mov	rax, r15
.LBB508_60:
	cmp	rax, rdx
	jae	.LBB508_99
# %bb.61:
	mov	bl, byte ptr [rax]
	cmp	bl, 45
	je	.LBB508_64
# %bb.62:
	cmp	bl, 43
	jne	.LBB508_65
# %bb.63:
	add	rax, 1
.LBB508_65:
	xor	r8d, r8d
	cmp	rax, rdx
	jae	.LBB508_101
.LBB508_67:
	movzx	ebx, byte ptr [rax]
	lea	ecx, [rbx - 48]
	cmp	cl, 10
	jae	.LBB508_102
# %bb.68:
	lea	r15, [rax + 1]
	add	ebx, -48
	mov	dword ptr [rsp + 52], ebx
	cmp	r15, rdx
	jae	.LBB508_103
# %bb.69:
	mov	dil, byte ptr [r15]
	lea	ecx, [rdi - 48]
	cmp	cl, 9
	ja	.LBB508_80
# %bb.70:
	add	rax, 2
	.p2align	4, 0x90
.LBB508_71:                             # =>This Inner Loop Header: Depth=1
	cmp	ebx, 214748364
	jg	.LBB508_77
# %bb.72:                               #   in Loop: Header=BB508_71 Depth=1
	cmp	dil, 56
	jl	.LBB508_74
# %bb.73:                               #   in Loop: Header=BB508_71 Depth=1
	cmp	ebx, 214748364
	je	.LBB508_77
.LBB508_74:                             #   in Loop: Header=BB508_71 Depth=1
	movsx	ecx, dil
	lea	ebx, [rbx + 4*rbx]
	lea	ebx, [rcx + 2*rbx]
	add	ebx, -48
	mov	dword ptr [rsp + 52], ebx
	cmp	rdx, rax
	je	.LBB508_79
# %bb.75:                               #   in Loop: Header=BB508_71 Depth=1
	movzx	edi, byte ptr [rax]
	lea	ecx, [rdi - 48]
	add	rax, 1
	cmp	cl, 9
	jbe	.LBB508_71
# %bb.76:
	add	rax, -1
	mov	r15, rax
	jmp	.LBB508_80
.LBB508_77:
	add	rax, -1
	mov	rcx, r14
	mov	rdx, rax
	mov	r8d, 5
.LBB508_78:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	r15, rax
	jmp	.LBB508_91
.LBB508_64:
	add	rax, 1
	mov	byte ptr [rsp + 56], 1
	mov	r8b, 1
	cmp	rax, rdx
	jb	.LBB508_67
.LBB508_101:
	cmp	byte ptr [r14 + 152], 0
	je	.LBB508_102
# %bb.108:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 59
	jmp	.LBB508_105
.LBB508_79:
	mov	r15, rdx
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB508_104
.LBB508_80:
	test	r8b, r8b
	je	.LBB508_82
# %bb.81:
	neg	ebx
.LBB508_82:
	movq	xmm7, rsi
	punpckldq	xmm7, xmmword ptr [rip + __xmm@00000000000000004530000043300000] # xmm7 = xmm7[0],mem[0],xmm7[1],mem[1]
	subpd	xmm7, xmmword ptr [rip + __xmm@45300000000000004330000000000000]
	movapd	xmm6, xmm7
	unpckhpd	xmm6, xmm7      # xmm6 = xmm6[1],xmm7[1]
	lea	eax, [rbx + r12]
	add	eax, 308
	cmp	eax, 617
	jb	.LBB508_84
# %bb.83:
	add	ebx, r12d
	xorps	xmm1, xmm1
	cvtsi2sd	xmm1, ebx
	movq	xmm0, qword ptr [rip + __real@4024000000000000] # xmm0 = mem[0],zero
	call	pow
	movdqa	xmm8, xmm0
	jmp	.LBB508_85
.LBB508_84:
	mov	eax, eax
	lea	rcx, [rip + "?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"]
	movq	xmm8, qword ptr [rcx + 8*rax] # xmm8 = mem[0],zero
.LBB508_85:
	addsd	xmm6, xmm7
	mov	rax, qword ptr [r14 + 24]
	cmp	rax, qword ptr [r14 + 32]
	jb	.LBB508_87
# %bb.86:
	mov	rcx, r14
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [r14 + 24]
.LBB508_87:
	mulsd	xmm8, xmm6
	mov	rcx, qword ptr [r14 + 56]
	test	cl, 1
	je	.LBB508_89
# %bb.88:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB508_89:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 5
	movsd	qword ptr [rax + 16], xmm8
.LBB508_90:
	add	qword ptr [r14 + 24], 24
.LBB508_91:
	mov	rax, r15
	movaps	xmm6, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 80] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 96] # 16-byte Reload
	add	rsp, 120
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB508_92:
	add	r8b, -48
	xor	ebx, ebx
	cmp	r8b, 10
	jb	.LBB508_9
	jmp	.LBB508_82
.LBB508_93:
	mov	rdx, r15
	jmp	.LBB508_20
.LBB508_94:
	cmp	byte ptr [r14 + 152], 0
	je	.LBB508_23
# %bb.95:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, r15
	mov	r8b, 55
	jmp	.LBB508_105
.LBB508_96:
	or	cl, 32
	cmp	cl, 101
	je	.LBB508_18
	jmp	.LBB508_23
.LBB508_97:
	cmp	byte ptr [r14 + 152], 0
	jne	.LBB508_98
.LBB508_102:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB508_45
.LBB508_99:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 58
.LBB508_100:
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	mov	r15, rax
	jmp	.LBB508_91
.LBB508_103:
	mov	rdx, r15
	cmp	byte ptr [r14 + 152], 0
	je	.LBB508_80
.LBB508_104:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	r8b, 60
.LBB508_105:
	call	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	mov	r15, rax
	jmp	.LBB508_91
.LBB508_106:
	mov	r15, rax
	jmp	.LBB508_42
.LBB508_107:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, r8
	mov	r8b, 53
	jmp	.LBB508_100
.LBB508_98:
	lea	r9, [rsp + 40]
	mov	rcx, r14
	mov	rdx, rax
	mov	r8b, 56
	jmp	.LBB508_105
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB509_51
# %bb.1:
	mov	rbx, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	cmp	rdi, rbx
	je	.LBB509_39
# %bb.2:
	cmp	byte ptr [rdi], 32
	ja	.LBB509_7
# %bb.3:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB509_4:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB509_34
# %bb.5:                                #   in Loop: Header=BB509_4 Depth=1
	movdqu	xmm4, xmmword ptr [rdi]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdi, 16
	cmp	ax, -1
	je	.LBB509_4
# %bb.6:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
.LBB509_7:
	cmp	rdi, rbx
	jae	.LBB509_53
# %bb.8:
	cmp	byte ptr [rdi], 93
	je	.LBB509_54
# %bb.9:
	xor	esi, esi
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
	jmp	.LBB509_11
	.p2align	4, 0x90
.LBB509_10:                             #   in Loop: Header=BB509_11 Depth=1
	cmp	rdi, rbx
	jae	.LBB509_41
.LBB509_11:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB509_15 Depth 2
                                        #     Child Loop BB509_19 Depth 2
                                        #     Child Loop BB509_26 Depth 2
                                        #     Child Loop BB509_30 Depth 2
	cmp	rsi, 2147483646
	je	.LBB509_43
# %bb.12:                               #   in Loop: Header=BB509_11 Depth=1
	add	rsi, 1
	movzx	eax, byte ptr [rdi]
	mov	rcx, r14
	mov	rdx, rdi
	call	qword ptr [r15 + 8*rax]
	cmp	rax, r14
	je	.LBB509_44
# %bb.13:                               #   in Loop: Header=BB509_11 Depth=1
	mov	rdi, rax
	cmp	rax, rbx
	je	.LBB509_46
# %bb.14:                               #   in Loop: Header=BB509_11 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB509_22
	.p2align	4, 0x90
.LBB509_15:                             #   Parent Loop BB509_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB509_19
# %bb.16:                               #   in Loop: Header=BB509_15 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB509_15
# %bb.17:                               #   in Loop: Header=BB509_11 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB509_22
	.p2align	4, 0x90
.LBB509_18:                             #   in Loop: Header=BB509_19 Depth=2
	add	rdi, 1
.LBB509_19:                             #   Parent Loop BB509_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB509_46
# %bb.20:                               #   in Loop: Header=BB509_19 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB509_22
# %bb.21:                               #   in Loop: Header=BB509_19 Depth=2
	bt	r12, rax
	jb	.LBB509_18
	.p2align	4, 0x90
.LBB509_22:                             #   in Loop: Header=BB509_11 Depth=1
	cmp	rdi, rbx
	jae	.LBB509_45
# %bb.23:                               #   in Loop: Header=BB509_11 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 44
	jne	.LBB509_49
# %bb.24:                               #   in Loop: Header=BB509_11 Depth=1
	add	rdi, 1
	cmp	rdi, rbx
	je	.LBB509_40
# %bb.25:                               #   in Loop: Header=BB509_11 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB509_10
	.p2align	4, 0x90
.LBB509_26:                             #   Parent Loop BB509_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB509_29
# %bb.27:                               #   in Loop: Header=BB509_26 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB509_26
# %bb.28:                               #   in Loop: Header=BB509_11 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB509_10
	.p2align	4, 0x90
.LBB509_29:                             #   in Loop: Header=BB509_11 Depth=1
	cmp	rbx, rdi
	je	.LBB509_40
	.p2align	4, 0x90
.LBB509_30:                             #   Parent Loop BB509_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB509_10
# %bb.31:                               #   in Loop: Header=BB509_30 Depth=2
	bt	r12, rax
	jae	.LBB509_10
# %bb.32:                               #   in Loop: Header=BB509_30 Depth=2
	add	rdi, 1
	cmp	rbx, rdi
	jne	.LBB509_30
.LBB509_40:
	mov	rdi, rbx
.LBB509_41:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB509_47
.LBB509_34:
	cmp	rbx, rdi
	je	.LBB509_39
# %bb.35:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB509_36:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdi]
	cmp	rcx, 32
	ja	.LBB509_7
# %bb.37:                               #   in Loop: Header=BB509_36 Depth=1
	bt	rax, rcx
	jae	.LBB509_7
# %bb.38:                               #   in Loop: Header=BB509_36 Depth=1
	add	rdi, 1
	cmp	rbx, rdi
	jne	.LBB509_36
.LBB509_39:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 44
	xor	r9d, r9d
	jmp	.LBB509_48
.LBB509_43:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 25
	jmp	.LBB509_52
.LBB509_44:
	mov	rcx, r14
	mov	dl, 46
	mov	r8, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB509_45:
	mov	rbx, rdi
.LBB509_46:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 47
.LBB509_47:
	mov	r9, rsi
.LBB509_48:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB509_49:
	cmp	al, 93
	je	.LBB509_55
# %bb.50:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB509_52
.LBB509_51:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
.LBB509_52:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB509_53:
	mov	rbx, rdi
	jmp	.LBB509_39
.LBB509_54:
	xor	esi, esi
.LBB509_55:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rdi, rdx
	mov	rsi, rcx
	mov	rax, qword ptr [rcx + 160]
	mov	rcx, rax
	sub	rcx, rdx
	add	rdx, 1
	cmp	rcx, 5
	jb	.LBB510_3
# %bb.1:
	cmp	dword ptr [rdx], 1702063201
	jne	.LBB510_2
.LBB510_18:
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rsi + 32]
	jb	.LBB510_20
# %bb.19:
	mov	rcx, rsi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rsi + 24]
.LBB510_20:
	mov	rcx, qword ptr [rsi + 56]
	test	cl, 1
	je	.LBB510_22
# %bb.21:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB510_22:
	mov	qword ptr [rax], rcx
	mov	word ptr [rax + 8], 6
	add	qword ptr [rsi + 24], 24
	add	rdi, 5
	mov	rax, rdi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB510_3:
	cmp	rdx, rax
	jae	.LBB510_4
# %bb.6:
	cmp	byte ptr [rdx], 97
	jne	.LBB510_7
# %bb.9:
	lea	rdx, [rdi + 2]
	cmp	rdx, rax
	jae	.LBB510_10
# %bb.11:
	cmp	byte ptr [rdx], 108
	jne	.LBB510_7
# %bb.12:
	lea	rdx, [rdi + 3]
	cmp	rdx, rax
	jae	.LBB510_13
# %bb.14:
	cmp	byte ptr [rdx], 115
	jne	.LBB510_7
# %bb.15:
	lea	rdx, [rdi + 4]
	cmp	rdx, rax
	jae	.LBB510_16
# %bb.17:
	cmp	byte ptr [rdx], 101
	je	.LBB510_18
.LBB510_7:
	mov	rcx, rsi
	mov	r8d, 1
	jmp	.LBB510_8
.LBB510_2:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8d, 22
.LBB510_8:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB510_4:
	mov	rcx, rsi
	mov	r8b, 15
	jmp	.LBB510_5
.LBB510_10:
	mov	rcx, rsi
	mov	r8b, 16
	jmp	.LBB510_5
.LBB510_13:
	mov	rcx, rsi
	mov	r8b, 17
	jmp	.LBB510_5
.LBB510_16:
	mov	rcx, rsi
	mov	r8b, 18
.LBB510_5:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rcx + 160]
	mov	rcx, rax
	sub	rcx, rdx
	cmp	rcx, 4
	jb	.LBB511_3
# %bb.1:
	cmp	dword ptr [rsi], 1819047278
	jne	.LBB511_2
.LBB511_15:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB511_17
# %bb.16:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB511_17:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB511_19
# %bb.18:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB511_19:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 7
	add	qword ptr [rdi + 24], 24
	add	rsi, 4
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB511_3:
	lea	rdx, [rsi + 1]
	cmp	rdx, rax
	jae	.LBB511_4
# %bb.6:
	cmp	byte ptr [rdx], 117
	jne	.LBB511_7
# %bb.9:
	lea	rdx, [rsi + 2]
	cmp	rdx, rax
	jae	.LBB511_10
# %bb.11:
	cmp	byte ptr [rdx], 108
	jne	.LBB511_7
# %bb.12:
	lea	rdx, [rsi + 3]
	cmp	rdx, rax
	jae	.LBB511_13
# %bb.14:
	cmp	byte ptr [rdx], 108
	je	.LBB511_15
.LBB511_7:
	mov	rcx, rdi
	jmp	.LBB511_8
.LBB511_2:
	mov	rcx, rdi
	mov	rdx, rsi
.LBB511_8:
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB511_4:
	mov	rcx, rdi
	mov	r8b, 9
	jmp	.LBB511_5
.LBB511_10:
	mov	rcx, rdi
	mov	r8b, 10
	jmp	.LBB511_5
.LBB511_13:
	mov	rcx, rdi
	mov	r8b, 11
.LBB511_5:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rax, qword ptr [rcx + 160]
	mov	rcx, rax
	sub	rcx, rdx
	cmp	rcx, 4
	jb	.LBB512_3
# %bb.1:
	cmp	dword ptr [rsi], 1702195828
	jne	.LBB512_2
.LBB512_15:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB512_17
# %bb.16:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB512_17:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB512_19
# %bb.18:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB512_19:
	mov	qword ptr [rax], rcx
	mov	word ptr [rax + 8], 262
	add	qword ptr [rdi + 24], 24
	add	rsi, 4
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB512_3:
	lea	rdx, [rsi + 1]
	cmp	rdx, rax
	jae	.LBB512_4
# %bb.6:
	cmp	byte ptr [rdx], 114
	jne	.LBB512_7
# %bb.9:
	lea	rdx, [rsi + 2]
	cmp	rdx, rax
	jae	.LBB512_10
# %bb.11:
	cmp	byte ptr [rdx], 117
	jne	.LBB512_7
# %bb.12:
	lea	rdx, [rsi + 3]
	cmp	rdx, rax
	jae	.LBB512_13
# %bb.14:
	cmp	byte ptr [rdx], 101
	je	.LBB512_15
.LBB512_7:
	mov	rcx, rdi
	jmp	.LBB512_8
.LBB512_2:
	mov	rcx, rdi
	mov	rdx, rsi
.LBB512_8:
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB512_4:
	mov	rcx, rdi
	mov	r8b, 12
	jmp	.LBB512_5
.LBB512_10:
	mov	rcx, rdi
	mov	r8b, 13
	jmp	.LBB512_5
.LBB512_13:
	mov	rcx, rdi
	mov	r8b, 14
.LBB512_5:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB513_1
# %bb.2:
	mov	rsi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB513_15
# %bb.3:
	cmp	byte ptr [rdi], 32
	ja	.LBB513_13
# %bb.4:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB513_5:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB513_6
# %bb.11:                               #   in Loop: Header=BB513_5 Depth=1
	movdqu	xmm4, xmmword ptr [rdi]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdi, 16
	cmp	ax, -1
	je	.LBB513_5
# %bb.12:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
.LBB513_13:
	cmp	rdi, rsi
	jae	.LBB513_14
# %bb.16:
	mov	al, byte ptr [rdi]
	cmp	al, 34
	jne	.LBB513_17
# %bb.24:
	xor	ebx, ebx
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
.LBB513_25:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB513_32 Depth 2
                                        #     Child Loop BB513_33 Depth 2
                                        #     Child Loop BB513_48 Depth 2
                                        #     Child Loop BB513_49 Depth 2
                                        #     Child Loop BB513_62 Depth 2
                                        #     Child Loop BB513_63 Depth 2
                                        #     Child Loop BB513_76 Depth 2
                                        #     Child Loop BB513_77 Depth 2
	cmp	rbx, 2147483646
	je	.LBB513_26
# %bb.27:                               #   in Loop: Header=BB513_25 Depth=1
	add	rbx, 1
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r14
	je	.LBB513_28
# %bb.30:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	rax, rsi
	je	.LBB513_41
# %bb.31:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB513_39
	.p2align	4, 0x90
.LBB513_32:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB513_33
# %bb.37:                               #   in Loop: Header=BB513_32 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB513_32
# %bb.38:                               #   in Loop: Header=BB513_25 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB513_39
	.p2align	4, 0x90
.LBB513_36:                             #   in Loop: Header=BB513_33 Depth=2
	add	rax, 1
.LBB513_33:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB513_41
# %bb.34:                               #   in Loop: Header=BB513_33 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB513_39
# %bb.35:                               #   in Loop: Header=BB513_33 Depth=2
	bt	r12, rcx
	jb	.LBB513_36
	.p2align	4, 0x90
.LBB513_39:                             #   in Loop: Header=BB513_25 Depth=1
	cmp	rax, rsi
	jae	.LBB513_40
# %bb.44:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	byte ptr [rax], 58
	jne	.LBB513_45
# %bb.46:                               #   in Loop: Header=BB513_25 Depth=1
	add	rax, 1
	cmp	rax, rsi
	je	.LBB513_57
# %bb.47:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB513_55
	.p2align	4, 0x90
.LBB513_48:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB513_49
# %bb.53:                               #   in Loop: Header=BB513_48 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB513_48
# %bb.54:                               #   in Loop: Header=BB513_25 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB513_55
	.p2align	4, 0x90
.LBB513_52:                             #   in Loop: Header=BB513_49 Depth=2
	add	rax, 1
.LBB513_49:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB513_57
# %bb.50:                               #   in Loop: Header=BB513_49 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB513_55
# %bb.51:                               #   in Loop: Header=BB513_49 Depth=2
	bt	r12, rcx
	jb	.LBB513_52
	.p2align	4, 0x90
.LBB513_55:                             #   in Loop: Header=BB513_25 Depth=1
	cmp	rax, rsi
	jae	.LBB513_56
# %bb.58:                               #   in Loop: Header=BB513_25 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r14
	mov	rdx, rax
	call	qword ptr [r15 + 8*rdi]
	cmp	rax, r14
	je	.LBB513_59
# %bb.60:                               #   in Loop: Header=BB513_25 Depth=1
	mov	rdi, rax
	cmp	rax, rsi
	je	.LBB513_71
# %bb.61:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB513_69
	.p2align	4, 0x90
.LBB513_62:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB513_63
# %bb.67:                               #   in Loop: Header=BB513_62 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB513_62
# %bb.68:                               #   in Loop: Header=BB513_25 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB513_69
	.p2align	4, 0x90
.LBB513_66:                             #   in Loop: Header=BB513_63 Depth=2
	add	rdi, 1
.LBB513_63:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB513_71
# %bb.64:                               #   in Loop: Header=BB513_63 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB513_69
# %bb.65:                               #   in Loop: Header=BB513_63 Depth=2
	bt	r12, rax
	jb	.LBB513_66
	.p2align	4, 0x90
.LBB513_69:                             #   in Loop: Header=BB513_25 Depth=1
	cmp	rdi, rsi
	jae	.LBB513_70
# %bb.72:                               #   in Loop: Header=BB513_25 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 44
	jne	.LBB513_73
# %bb.74:                               #   in Loop: Header=BB513_25 Depth=1
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB513_85
# %bb.75:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB513_83
	.p2align	4, 0x90
.LBB513_76:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB513_77
# %bb.81:                               #   in Loop: Header=BB513_76 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB513_76
# %bb.82:                               #   in Loop: Header=BB513_25 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB513_83
	.p2align	4, 0x90
.LBB513_80:                             #   in Loop: Header=BB513_77 Depth=2
	add	rdi, 1
.LBB513_77:                             #   Parent Loop BB513_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB513_85
# %bb.78:                               #   in Loop: Header=BB513_77 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB513_83
# %bb.79:                               #   in Loop: Header=BB513_77 Depth=2
	bt	r12, rax
	jb	.LBB513_80
	.p2align	4, 0x90
.LBB513_83:                             #   in Loop: Header=BB513_25 Depth=1
	cmp	rdi, rsi
	jae	.LBB513_84
# %bb.20:                               #   in Loop: Header=BB513_25 Depth=1
	cmp	byte ptr [rdi], 34
	je	.LBB513_25
	jmp	.LBB513_21
.LBB513_6:
	cmp	rsi, rdi
	je	.LBB513_15
# %bb.7:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB513_8:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdi]
	cmp	rcx, 32
	ja	.LBB513_13
# %bb.9:                                #   in Loop: Header=BB513_8 Depth=1
	bt	rax, rcx
	jae	.LBB513_13
# %bb.10:                               #   in Loop: Header=BB513_8 Depth=1
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB513_8
.LBB513_15:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB513_43
.LBB513_26:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB513_23
.LBB513_28:
	mov	rcx, r14
	mov	dl, 35
	jmp	.LBB513_29
.LBB513_1:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB513_23
.LBB513_17:
	cmp	al, 125
	jne	.LBB513_21
# %bb.18:
	xor	ebx, ebx
	jmp	.LBB513_19
.LBB513_40:
	mov	rsi, rax
.LBB513_41:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 36
	jmp	.LBB513_42
.LBB513_45:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB513_22
.LBB513_56:
	mov	rsi, rax
.LBB513_57:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 38
	jmp	.LBB513_42
.LBB513_59:
	mov	rcx, r14
	mov	dl, 39
.LBB513_29:
	mov	r8, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB513_70:
	mov	rsi, rdi
.LBB513_71:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 40
	jmp	.LBB513_42
.LBB513_73:
	cmp	al, 125
	jne	.LBB513_21
.LBB513_19:
	mov	rcx, r14
	mov	rdx, rbx
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB513_21:
	mov	rcx, r14
	mov	rdx, rdi
.LBB513_22:
	mov	r8d, 1
.LBB513_23:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB513_14:
	mov	rsi, rdi
	jmp	.LBB513_15
.LBB513_84:
	mov	rsi, rdi
.LBB513_85:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 41
.LBB513_42:
	mov	r9, rbx
.LBB513_43:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	.globl	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # -- Begin function ?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z
	.p2align	4, 0x90
"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z": # @"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
.seh_proc "?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	esi, r8d
	mov	rdi, rcx
	mov	qword ptr [rcx + 160], rdx
	lea	rbx, [rip + "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"]
	mov	rcx, rbx
	mov	edx, r8d
	call	qword ptr [rip + "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"+48]
	mov	dword ptr [rdi + 88], esi
	mov	byte ptr [rdi + 92], al
	mov	qword ptr [rdi + 96], rbx
	mov	rax, rdi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	.globl	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z" # -- Begin function ?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z
	.p2align	4, 0x90
"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z": # @"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
.seh_proc "?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	ebx, r8d
	mov	rsi, rcx
	mov	qword ptr [rcx + 160], rdx
	movups	xmm0, xmmword ptr [r9]
	movups	xmmword ptr [rcx + 64], xmm0
	mov	rax, qword ptr [r9 + 16]
	mov	qword ptr [rcx + 80], rax
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB515_1
.LBB515_2:
	mov	rcx, qword ptr [rsi + 128]
	mov	byte ptr [rcx + rax], bl
	add	qword ptr [rsi + 120], 1
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rsi
	ret
.LBB515_1:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB515_2
	.seh_handlerdata
	.section	.text,"xr",discard,"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	.globl	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z" # -- Begin function ?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z
	.p2align	4, 0x90
"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z": # @"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
.seh_proc "?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rcx
	mov	qword ptr [rcx + 160], rdx
	cmp	byte ptr [rcx + 152], 0
	je	.LBB516_4
# %bb.1:
	mov	ebx, r8d
	mov	rax, qword ptr [r9 + 16]
	mov	qword ptr [rsi + 80], rax
	movups	xmm0, xmmword ptr [r9]
	movups	xmmword ptr [rsi + 64], xmm0
	mov	rax, qword ptr [rsi + 120]
	test	rax, rax
	je	.LBB516_2
.LBB516_3:
	mov	rcx, qword ptr [rsi + 128]
	mov	byte ptr [rcx + rax], bl
	add	qword ptr [rsi + 120], 1
.LBB516_4:
	mov	rax, rsi
	add	rsp, 40
	pop	rbx
	pop	rsi
	ret
.LBB516_2:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB516_3
	.seh_handlerdata
	.section	.text,"xr",discard,"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
	.globl	"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z" # -- Begin function ??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z
	.p2align	4, 0x90
"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z": # @"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
.seh_proc "??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	.seh_endprologue
	mov	rax, rdx
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	.p2align	4, 0x90
.LBB517_1:                              # =>This Inner Loop Header: Depth=1
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, 16
	jl	.LBB517_4
# %bb.2:                                #   in Loop: Header=BB517_1 Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	pcmpeqb	xmm4, xmm0
	movdqa	xmm5, xmm2
	pcmpgtb	xmm5, xmm3
	pcmpeqb	xmm3, xmm1
	por	xmm3, xmm4
	por	xmm3, xmm5
	pmovmskb	edx, xmm3
	add	rcx, 16
	test	dx, dx
	je	.LBB517_1
# %bb.3:
	movzx	edx, dx
	bsf	edx, edx
	add	rcx, rdx
	add	rcx, -16
.LBB517_4:
	cmp	rcx, rax
	je	.LBB517_26
# %bb.5:
	lea	r8, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rdx, [rip + .LJTI517_0]
	mov	r9d, -1061093632
	mov	r10d, -1061109760
	mov	r11d, -1061097472
	jmp	.LBB517_8
.LBB517_6:                              #   in Loop: Header=BB517_8 Depth=1
	mov	edi, dword ptr [rcx]
	and	edi, r11d
	cmp	edi, -2139062272
	jne	.LBB517_25
	.p2align	4, 0x90
.LBB517_7:                              #   in Loop: Header=BB517_8 Depth=1
	add	rcx, rsi
	cmp	rcx, rax
	je	.LBB517_26
.LBB517_8:                              # =>This Inner Loop Header: Depth=1
	movzx	edi, byte ptr [rcx]
	cmp	rdi, 34
	je	.LBB517_25
# %bb.9:                                #   in Loop: Header=BB517_8 Depth=1
	cmp	dil, 92
	je	.LBB517_25
# %bb.10:                               #   in Loop: Header=BB517_8 Depth=1
	cmp	dil, 32
	jb	.LBB517_25
# %bb.11:                               #   in Loop: Header=BB517_8 Depth=1
	mov	esi, 1
	test	dil, dil
	jns	.LBB517_7
# %bb.12:                               #   in Loop: Header=BB517_8 Depth=1
	and	edi, 127
	movzx	edi, word ptr [r8 + 2*rdi]
	mov	rbx, rax
	sub	rbx, rcx
	movzx	esi, dil
	cmp	rbx, rsi
	jl	.LBB517_25
# %bb.13:                               #   in Loop: Header=BB517_8 Depth=1
	shr	edi, 8
	add	dil, -1
	cmp	dil, 6
	ja	.LBB517_25
# %bb.14:                               #   in Loop: Header=BB517_8 Depth=1
	movzx	edi, dil
	movsxd	rdi, dword ptr [rdx + 4*rdi]
	add	rdi, rdx
	jmp	rdi
.LBB517_15:                             #   in Loop: Header=BB517_8 Depth=1
	movzx	edi, word ptr [rcx]
	and	edi, 49152
	cmp	edi, 32768
	je	.LBB517_7
	jmp	.LBB517_25
.LBB517_16:                             #   in Loop: Header=BB517_8 Depth=1
	movzx	edi, word ptr [rcx]
	movzx	ebx, byte ptr [rcx + 2]
	shl	ebx, 16
	or	ebx, edi
	and	ebx, 12640256
	cmp	ebx, 8429568
	je	.LBB517_7
	jmp	.LBB517_25
.LBB517_17:                             #   in Loop: Header=BB517_8 Depth=1
	movzx	edi, word ptr [rcx]
	movzx	ebx, byte ptr [rcx + 2]
	shl	ebx, 16
	or	ebx, edi
	and	ebx, 12632064
	cmp	ebx, 8421376
	je	.LBB517_7
	jmp	.LBB517_25
.LBB517_18:                             #   in Loop: Header=BB517_8 Depth=1
	movzx	edi, word ptr [rcx]
	movzx	ebx, byte ptr [rcx + 2]
	shl	ebx, 16
	or	ebx, edi
	and	ebx, 12640256
	cmp	ebx, 8421376
	je	.LBB517_7
	jmp	.LBB517_25
.LBB517_19:                             #   in Loop: Header=BB517_8 Depth=1
	mov	edi, dword ptr [rcx]
	and	edi, r9d
	add	edi, 2139058176
	cmp	edi, 12033
	jb	.LBB517_7
	jmp	.LBB517_25
.LBB517_20:                             #   in Loop: Header=BB517_8 Depth=1
	mov	edi, dword ptr [rcx]
	and	edi, r10d
	cmp	edi, -2139062272
	je	.LBB517_7
.LBB517_25:
	mov	rax, rcx
.LBB517_26:
	pop	rbx
	pop	rdi
	pop	rsi
	ret
	.p2align	2, 0x90
.LJTI517_0:
	.long	.LBB517_15-.LJTI517_0
	.long	.LBB517_16-.LJTI517_0
	.long	.LBB517_17-.LJTI517_0
	.long	.LBB517_18-.LJTI517_0
	.long	.LBB517_19-.LJTI517_0
	.long	.LBB517_20-.LJTI517_0
	.long	.LBB517_6-.LJTI517_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	.globl	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # -- Begin function ?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z
	.p2align	4, 0x90
"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z": # @"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
.seh_proc "?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	mov	qword ptr [rcx + 160], rdx
	cmp	byte ptr [rcx + 152], 0
	je	.LBB518_4
# %bb.1:
	mov	rdi, r9
	mov	ebx, r8d
	mov	rax, qword ptr [rsi + 120]
	test	rax, rax
	je	.LBB518_2
.LBB518_3:
	mov	rcx, qword ptr [rsi + 128]
	mov	qword ptr [rcx + rax], rdi
	mov	rax, qword ptr [rsi + 120]
	mov	rcx, qword ptr [rsi + 128]
	lea	rdx, [rax + 8]
	mov	qword ptr [rsi + 120], rdx
	mov	byte ptr [rcx + rax + 8], bl
	add	qword ptr [rsi + 120], 1
.LBB518_4:
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB518_2:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB518_3
	.seh_handlerdata
	.section	.text,"xr",discard,"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2120
	.seh_stackalloc 2120
	.seh_endprologue
	mov	rdi, rdx
	mov	r13, rcx
	mov	r15, qword ptr [rcx + 160]
	mov	rax, r15
	sub	rax, rdx
	lea	r14, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r14, r15
	mov	r12, r8
	mov	qword ptr [rsp + 2112], 0
	lea	r10, [rcx + 136]
	lea	r11, [rip + .LJTI519_0]
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI519_1]
	lea	r9, [rsp + 64]
.LBB519_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB519_120 Depth 2
	lea	rsi, [rdi + 1]
	cmp	rsi, r14
	jae	.LBB519_30
.LBB519_2:                              #   in Loop: Header=BB519_1 Depth=1
	movsx	eax, byte ptr [rsi]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB519_149
# %bb.3:                                #   in Loop: Header=BB519_1 Depth=1
	movsxd	rax, dword ptr [r11 + 4*rax]
	add	rax, r11
	jmp	rax
.LBB519_4:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 34
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_5:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 9
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_6:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 92
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_7:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 13
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_8:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 47
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_9:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 8
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_10:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 12
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_11:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rax, r14
	sub	rax, rsi
	cmp	rax, 11
	jb	.LBB519_37
# %bb.12:                               #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, dword ptr [rdi + 2]
	mov	edx, ecx
	shr	edx, 24
	lea	r8d, [rdx - 48]
	cmp	r8b, 10
	jb	.LBB519_14
# %bb.13:                               #   in Loop: Header=BB519_1 Depth=1
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	r8d, dl
	mov	eax, 255
	cmovae	r8d, eax
.LBB519_14:                             #   in Loop: Header=BB519_1 Depth=1
	mov	edx, ecx
	shr	edx, 16
	lea	ebp, [rdx - 48]
	cmp	bpl, 10
	jb	.LBB519_16
# %bb.15:                               #   in Loop: Header=BB519_1 Depth=1
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	ebp, dl
	mov	eax, 255
	cmovae	ebp, eax
.LBB519_16:                             #   in Loop: Header=BB519_1 Depth=1
	mov	eax, ecx
	shr	eax, 8
	lea	edx, [rax - 48]
	cmp	dl, 10
	jb	.LBB519_18
# %bb.17:                               #   in Loop: Header=BB519_1 Depth=1
	and	al, -33
	lea	edx, [rax - 65]
	add	al, -55
	cmp	dl, 6
	movzx	edx, al
	mov	eax, 255
	cmovae	edx, eax
.LBB519_18:                             #   in Loop: Header=BB519_1 Depth=1
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB519_20
# %bb.19:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	eax, [rcx - 65]
	add	cl, -55
	cmp	al, 6
	movzx	ebx, cl
	mov	eax, 255
	cmovae	ebx, eax
.LBB519_20:                             #   in Loop: Header=BB519_1 Depth=1
	mov	eax, ebp
	or	al, r8b
	or	al, dl
	or	al, bl
	cmp	al, -1
	je	.LBB519_154
# %bb.21:                               #   in Loop: Header=BB519_1 Depth=1
	movsx	eax, bpl
	movsx	ecx, dl
	movsx	edx, bl
	movsx	ebp, r8b
	shl	edx, 12
	shl	ecx, 8
	shl	eax, 4
	add	eax, ebp
	add	eax, ecx
	add	eax, edx
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB519_61
# %bb.22:                               #   in Loop: Header=BB519_1 Depth=1
	add	rdi, 6
	mov	rcx, qword ptr [rsp + 2112]
	cmp	eax, 127
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI519_1]
	ja	.LBB519_25
# %bb.23:                               #   in Loop: Header=BB519_1 Depth=1
	mov	byte ptr [rsp + rcx + 64], al
	add	qword ptr [rsp + 2112], 1
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_24:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 10
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_25:                             #   in Loop: Header=BB519_1 Depth=1
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB519_27
# %bb.26:                               #   in Loop: Header=BB519_1 Depth=1
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 64], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 65], al
	add	qword ptr [rsp + 2112], 2
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_27:                             #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 65535
	ja	.LBB519_29
# %bb.28:                               #   in Loop: Header=BB519_1 Depth=1
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 66], al
	add	qword ptr [rsp + 2112], 3
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_29:                             #   in Loop: Header=BB519_1 Depth=1
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 66], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 67], al
	add	qword ptr [rsp + 2112], 4
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_30:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rbx, qword ptr [rsp + 2112]
	test	rbx, rbx
	mov	qword ptr [rsp + 40], r10 # 8-byte Spill
	je	.LBB519_88
# %bb.31:                               #   in Loop: Header=BB519_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r12
	cmp	rbx, rax
	ja	.LBB519_157
# %bb.32:                               #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB519_34
# %bb.33:                               #   in Loop: Header=BB519_1 Depth=1
	mov	rcx, r13
	mov	rdx, rbx
	mov	rbp, r9
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, rbp
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB519_34:                             #   in Loop: Header=BB519_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rbp, r9
	mov	rdx, r9
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r13 + 40], rbx
	add	r12, rbx
	mov	qword ptr [rsp + 2112], 0
.LBB519_35:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rax, r15
	sub	rax, rsi
	lea	r14, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r14, r15
	cmp	rsi, r14
	mov	r10, qword ptr [rsp + 40] # 8-byte Reload
	lea	r11, [rip + .LJTI519_0]
	lea	rbx, [rip + .LJTI519_1]
	jae	.LBB519_158
# %bb.36:                               #   in Loop: Header=BB519_1 Depth=1
	mov	r9, rbp
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	jmp	.LBB519_2
.LBB519_37:                             #   in Loop: Header=BB519_1 Depth=1
	mov	qword ptr [rsp + 40], r10 # 8-byte Spill
	mov	rbx, qword ptr [rsp + 2112]
	test	rbx, rbx
	je	.LBB519_42
# %bb.38:                               #   in Loop: Header=BB519_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r12
	cmp	rbx, rax
	ja	.LBB519_157
# %bb.39:                               #   in Loop: Header=BB519_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB519_41
# %bb.40:                               #   in Loop: Header=BB519_1 Depth=1
	mov	rcx, r13
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB519_41:                             #   in Loop: Header=BB519_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 64]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r13 + 40], rbx
	add	r12, rbx
	mov	qword ptr [rsp + 2112], 0
	mov	rax, r15
	sub	rax, rsi
	lea	r14, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r14, r15
.LBB519_42:                             #   in Loop: Header=BB519_1 Depth=1
	lea	rdx, [rdi + 2]
	cmp	rdx, r14
	jae	.LBB519_161
# %bb.43:                               #   in Loop: Header=BB519_1 Depth=1
	mov	al, byte ptr [rdx]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB519_46
# %bb.44:                               #   in Loop: Header=BB519_1 Depth=1
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB519_156
# %bb.45:                               #   in Loop: Header=BB519_1 Depth=1
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB519_156
.LBB519_46:                             #   in Loop: Header=BB519_1 Depth=1
	movsx	eax, cl
	lea	rdx, [rdi + 3]
	shl	eax, 12
	mov	dword ptr [r13 + 144], eax
	cmp	rdx, r14
	jae	.LBB519_168
# %bb.47:                               #   in Loop: Header=BB519_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB519_50
# %bb.48:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	cmp	bpl, 5
	ja	.LBB519_156
# %bb.49:                               #   in Loop: Header=BB519_1 Depth=1
	add	cl, -55
	mov	ebp, ecx
	cmp	cl, -1
	je	.LBB519_156
.LBB519_50:                             #   in Loop: Header=BB519_1 Depth=1
	movsx	ecx, bpl
	lea	rdx, [rdi + 4]
	shl	ecx, 8
	add	ecx, eax
	mov	dword ptr [r13 + 144], ecx
	cmp	rdx, r14
	jae	.LBB519_169
# %bb.51:                               #   in Loop: Header=BB519_1 Depth=1
	mov	al, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB519_54
# %bb.52:                               #   in Loop: Header=BB519_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB519_156
# %bb.53:                               #   in Loop: Header=BB519_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB519_156
.LBB519_54:                             #   in Loop: Header=BB519_1 Depth=1
	movsx	eax, bpl
	lea	rdx, [rdi + 5]
	shl	eax, 4
	add	eax, ecx
	mov	dword ptr [r13 + 144], eax
	cmp	rdx, r14
	jae	.LBB519_170
# %bb.55:                               #   in Loop: Header=BB519_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB519_58
# %bb.56:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	cmp	bpl, 5
	ja	.LBB519_156
# %bb.57:                               #   in Loop: Header=BB519_1 Depth=1
	add	cl, -55
	mov	ebp, ecx
	cmp	cl, -1
	je	.LBB519_156
.LBB519_58:                             #   in Loop: Header=BB519_1 Depth=1
	movsx	ecx, bpl
	lea	rdx, [rdi + 6]
	add	eax, ecx
	mov	dword ptr [r13 + 144], eax
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB519_89
# %bb.59:                               #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 127
	ja	.LBB519_80
# %bb.60:                               #   in Loop: Header=BB519_1 Depth=1
	mov	byte ptr [rsp + 64], al
	add	qword ptr [rsp + 2112], 1
	jmp	.LBB519_86
.LBB519_61:                             #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 56320
	jae	.LBB519_162
# %bb.62:                               #   in Loop: Header=BB519_1 Depth=1
	cmp	byte ptr [rdi + 6], 92
	jne	.LBB519_163
# %bb.63:                               #   in Loop: Header=BB519_1 Depth=1
	cmp	byte ptr [rdi + 7], 117
	jne	.LBB519_164
# %bb.64:                               #   in Loop: Header=BB519_1 Depth=1
	mov	edx, dword ptr [rdi + 8]
	mov	ecx, edx
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB519_66
# %bb.65:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	r8d, cl
	mov	ecx, 255
	cmovae	r8d, ecx
.LBB519_66:                             #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, edx
	shr	ecx, 16
	lea	esi, [rcx - 48]
	cmp	sil, 10
	jb	.LBB519_68
# %bb.67:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	esi, cl
	mov	ecx, 255
	cmovae	esi, ecx
.LBB519_68:                             #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, edx
	shr	ecx, 8
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB519_70
# %bb.69:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	ebp, cl
	mov	ecx, 255
	cmovae	ebp, ecx
.LBB519_70:                             #   in Loop: Header=BB519_1 Depth=1
	lea	ecx, [rdx - 48]
	cmp	cl, 10
	jb	.LBB519_72
# %bb.71:                               #   in Loop: Header=BB519_1 Depth=1
	and	dl, -33
	lea	ecx, [rdx - 65]
	add	dl, -55
	cmp	cl, 6
	movzx	ecx, dl
	mov	edx, 255
	cmovae	ecx, edx
.LBB519_72:                             #   in Loop: Header=BB519_1 Depth=1
	lea	rdx, [rdi + 8]
	mov	ebx, esi
	or	bl, r8b
	or	bl, bpl
	or	bl, cl
	cmp	bl, -1
	je	.LBB519_166
# %bb.73:                               #   in Loop: Header=BB519_1 Depth=1
	movsx	esi, sil
	movsx	ebp, bpl
	movsx	ecx, cl
	movsx	ebx, r8b
	shl	ecx, 12
	shl	ebp, 8
	shl	esi, 4
	add	esi, ebx
	add	esi, ebp
	add	esi, ecx
	mov	ecx, esi
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB519_167
# %bb.74:                               #   in Loop: Header=BB519_1 Depth=1
	add	rdi, 12
	shl	eax, 10
	add	eax, esi
	add	eax, -56613888
	mov	rcx, qword ptr [rsp + 2112]
	cmp	eax, 127
	ja	.LBB519_76
# %bb.75:                               #   in Loop: Header=BB519_1 Depth=1
	mov	byte ptr [rsp + rcx + 64], al
	add	qword ptr [rsp + 2112], 1
	jmp	.LBB519_119
.LBB519_76:                             #   in Loop: Header=BB519_1 Depth=1
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB519_78
# %bb.77:                               #   in Loop: Header=BB519_1 Depth=1
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 64], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 65], al
	add	qword ptr [rsp + 2112], 2
	jmp	.LBB519_119
.LBB519_78:                             #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 65535
	ja	.LBB519_82
# %bb.79:                               #   in Loop: Header=BB519_1 Depth=1
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 66], al
	add	qword ptr [rsp + 2112], 3
	jmp	.LBB519_119
.LBB519_80:                             #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB519_83
# %bb.81:                               #   in Loop: Header=BB519_1 Depth=1
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 64], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 65], al
	add	qword ptr [rsp + 2112], 2
	jmp	.LBB519_86
.LBB519_82:                             #   in Loop: Header=BB519_1 Depth=1
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 66], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 67], al
	add	qword ptr [rsp + 2112], 4
	jmp	.LBB519_119
.LBB519_83:                             #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 65535
	ja	.LBB519_85
# %bb.84:                               #   in Loop: Header=BB519_1 Depth=1
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 66], al
	add	qword ptr [rsp + 2112], 3
	jmp	.LBB519_86
.LBB519_85:                             #   in Loop: Header=BB519_1 Depth=1
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 66], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 67], al
	add	qword ptr [rsp + 2112], 4
.LBB519_86:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rdi, rdx
.LBB519_87:                             #   in Loop: Header=BB519_1 Depth=1
	lea	r9, [rsp + 64]
	mov	r10, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB519_118
.LBB519_88:                             #   in Loop: Header=BB519_1 Depth=1
	mov	rbp, r9
	jmp	.LBB519_35
.LBB519_89:                             #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 56320
	jae	.LBB519_167
# %bb.90:                               #   in Loop: Header=BB519_1 Depth=1
	cmp	rdx, r14
	jae	.LBB519_172
# %bb.91:                               #   in Loop: Header=BB519_1 Depth=1
	cmp	byte ptr [rdx], 92
	jne	.LBB519_174
# %bb.92:                               #   in Loop: Header=BB519_1 Depth=1
	lea	rdx, [rdi + 7]
	cmp	rdx, r14
	jae	.LBB519_173
# %bb.93:                               #   in Loop: Header=BB519_1 Depth=1
	cmp	byte ptr [rdx], 117
	jne	.LBB519_174
# %bb.94:                               #   in Loop: Header=BB519_1 Depth=1
	lea	rdx, [rdi + 8]
	cmp	rdx, r14
	jae	.LBB519_175
# %bb.95:                               #   in Loop: Header=BB519_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB519_98
# %bb.96:                               #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	cmp	bpl, 5
	ja	.LBB519_156
# %bb.97:                               #   in Loop: Header=BB519_1 Depth=1
	add	cl, -55
	mov	ebp, ecx
	cmp	cl, -1
	je	.LBB519_156
.LBB519_98:                             #   in Loop: Header=BB519_1 Depth=1
	movsx	ecx, bpl
	lea	rdx, [rdi + 9]
	shl	ecx, 12
	mov	dword ptr [r13 + 148], ecx
	cmp	rdx, r14
	jae	.LBB519_176
# %bb.99:                               #   in Loop: Header=BB519_1 Depth=1
	mov	bpl, byte ptr [rdx]
	lea	ebx, [rbp - 48]
	cmp	bl, 10
	jb	.LBB519_102
# %bb.100:                              #   in Loop: Header=BB519_1 Depth=1
	and	bpl, -33
	lea	ebx, [rbp - 65]
	cmp	bl, 5
	ja	.LBB519_156
# %bb.101:                              #   in Loop: Header=BB519_1 Depth=1
	add	bpl, -55
	mov	ebx, ebp
	cmp	bpl, -1
	je	.LBB519_156
.LBB519_102:                            #   in Loop: Header=BB519_1 Depth=1
	movsx	ebp, bl
	lea	rdx, [rdi + 10]
	shl	ebp, 8
	add	ebp, ecx
	mov	dword ptr [r13 + 148], ebp
	cmp	rdx, r14
	jae	.LBB519_177
# %bb.103:                              #   in Loop: Header=BB519_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB519_106
# %bb.104:                              #   in Loop: Header=BB519_1 Depth=1
	and	cl, -33
	lea	ebx, [rcx - 65]
	cmp	bl, 5
	ja	.LBB519_156
# %bb.105:                              #   in Loop: Header=BB519_1 Depth=1
	add	cl, -55
	mov	ebx, ecx
	cmp	cl, -1
	je	.LBB519_156
.LBB519_106:                            #   in Loop: Header=BB519_1 Depth=1
	movsx	ecx, bl
	lea	rdx, [rdi + 11]
	shl	ecx, 4
	add	ecx, ebp
	mov	dword ptr [r13 + 148], ecx
	cmp	rdx, r14
	jae	.LBB519_178
# %bb.107:                              #   in Loop: Header=BB519_1 Depth=1
	mov	bpl, byte ptr [rdx]
	lea	ebx, [rbp - 48]
	cmp	bl, 10
	jb	.LBB519_110
# %bb.108:                              #   in Loop: Header=BB519_1 Depth=1
	and	bpl, -33
	lea	ebx, [rbp - 65]
	cmp	bl, 5
	ja	.LBB519_156
# %bb.109:                              #   in Loop: Header=BB519_1 Depth=1
	add	bpl, -55
	mov	ebx, ebp
	cmp	bpl, -1
	je	.LBB519_156
.LBB519_110:                            #   in Loop: Header=BB519_1 Depth=1
	movsx	edx, bl
	add	rdi, 12
	add	ecx, edx
	mov	dword ptr [r13 + 148], ecx
	mov	edx, ecx
	and	edx, -1024
	cmp	edx, 56320
	jne	.LBB519_179
# %bb.111:                              #   in Loop: Header=BB519_1 Depth=1
	shl	eax, 10
	add	eax, ecx
	add	eax, -56613888
	cmp	eax, 127
	ja	.LBB519_113
# %bb.112:                              #   in Loop: Header=BB519_1 Depth=1
	mov	byte ptr [rsp + 64], al
	add	qword ptr [rsp + 2112], 1
	jmp	.LBB519_87
.LBB519_113:                            #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB519_115
# %bb.114:                              #   in Loop: Header=BB519_1 Depth=1
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 64], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 65], al
	add	qword ptr [rsp + 2112], 2
	jmp	.LBB519_87
.LBB519_115:                            #   in Loop: Header=BB519_1 Depth=1
	cmp	eax, 65535
	ja	.LBB519_117
# %bb.116:                              #   in Loop: Header=BB519_1 Depth=1
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 66], al
	add	qword ptr [rsp + 2112], 3
	jmp	.LBB519_87
.LBB519_117:                            #   in Loop: Header=BB519_1 Depth=1
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 66], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 67], al
	add	qword ptr [rsp + 2112], 4
	jmp	.LBB519_87
.LBB519_125:                            #   in Loop: Header=BB519_1 Depth=1
	mov	rsi, qword ptr [rsp + 2112]
	test	rsi, rsi
	mov	qword ptr [rsp + 40], r10 # 8-byte Spill
	je	.LBB519_132
# %bb.126:                              #   in Loop: Header=BB519_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r12
	cmp	rsi, rax
	ja	.LBB519_152
# %bb.127:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rbx, r11
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rsi + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB519_129
# %bb.128:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rcx, r13
	mov	rdx, rsi
	mov	rbp, r9
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, rbp
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB519_129:                            #   in Loop: Header=BB519_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rbp, r9
	mov	rdx, r9
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r13 + 40], rsi
	add	r12, rsi
	mov	qword ptr [rsp + 2112], 0
.LBB519_130:                            #   in Loop: Header=BB519_1 Depth=1
	mov	rax, r15
	sub	rax, rdi
	lea	r14, [rdi + 2048]
	cmp	rax, 2048
	cmovbe	r14, r15
	cmp	r14, rdi
	mov	r10, qword ptr [rsp + 40] # 8-byte Reload
	jbe	.LBB519_159
# %bb.131:                              #   in Loop: Header=BB519_1 Depth=1
	mov	r11, rbx
	mov	r9, rbp
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI519_1]
	.p2align	4, 0x90
.LBB519_120:                            #   Parent Loop BB519_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 34
	je	.LBB519_146
# %bb.121:                              #   in Loop: Header=BB519_120 Depth=2
	test	al, al
	js	.LBB519_133
# %bb.122:                              #   in Loop: Header=BB519_120 Depth=2
	cmp	al, 92
	je	.LBB519_1
# %bb.123:                              #   in Loop: Header=BB519_120 Depth=2
	cmp	al, 31
	jbe	.LBB519_165
# %bb.124:                              #   in Loop: Header=BB519_120 Depth=2
	mov	rcx, qword ptr [rsp + 2112]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rsp + 2112], rdx
	mov	byte ptr [rsp + rcx + 64], al
	mov	eax, 1
	add	rdi, rax
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_132:                            #   in Loop: Header=BB519_1 Depth=1
	mov	rbx, r11
	mov	rbp, r9
	jmp	.LBB519_130
.LBB519_133:                            #   in Loop: Header=BB519_1 Depth=1
	mov	rcx, r14
	sub	rcx, rdi
	and	eax, 127
	movzx	eax, word ptr [rbp + 2*rax]
	mov	word ptr [r13 + 140], ax
	movzx	edx, al
	cmp	rcx, rdx
	cmovae	rcx, rax
	mov	byte ptr [r13 + 142], cl
	movzx	r8d, cl
	mov	rbp, r10
	mov	rcx, r10
	mov	rdx, rdi
	call	memcpy
	movzx	eax, word ptr [r13 + 140]
	cmp	byte ptr [r13 + 142], al
	jb	.LBB519_160
# %bb.134:                              #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	lea	rbx, [rsp + 64]
	ja	.LBB519_165
# %bb.135:                              #   in Loop: Header=BB519_1 Depth=1
	mov	rdx, rbp
	movzx	ecx, cl
	lea	rsi, [rip + .LJTI519_1]
	movsxd	rcx, dword ptr [rsi + 4*rcx]
	add	rcx, rsi
	jmp	rcx
.LBB519_136:                            #   in Loop: Header=BB519_1 Depth=1
	movzx	ecx, word ptr [rdx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB519_145
	jmp	.LBB519_165
.LBB519_137:                            #   in Loop: Header=BB519_1 Depth=1
	movzx	ecx, word ptr [rdx]
	movzx	esi, byte ptr [rdx + 2]
	shl	esi, 16
	or	esi, ecx
	and	esi, 12640256
	cmp	esi, 8429568
	je	.LBB519_145
	jmp	.LBB519_165
.LBB519_138:                            #   in Loop: Header=BB519_1 Depth=1
	movzx	ecx, word ptr [rdx]
	movzx	esi, byte ptr [rdx + 2]
	shl	esi, 16
	or	esi, ecx
	and	esi, 12632064
	jmp	.LBB519_140
.LBB519_139:                            #   in Loop: Header=BB519_1 Depth=1
	movzx	ecx, word ptr [rdx]
	movzx	esi, byte ptr [rdx + 2]
	shl	esi, 16
	or	esi, ecx
	and	esi, 12640256
.LBB519_140:                            #   in Loop: Header=BB519_1 Depth=1
	cmp	esi, 8421376
	je	.LBB519_145
	jmp	.LBB519_165
.LBB519_141:                            #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, dword ptr [rdx]
	mov	esi, -1061093632
	and	ecx, esi
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB519_145
	jmp	.LBB519_165
.LBB519_142:                            #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, dword ptr [rdx]
	mov	esi, -1061109760
	jmp	.LBB519_144
.LBB519_143:                            #   in Loop: Header=BB519_1 Depth=1
	mov	ecx, dword ptr [rdx]
	mov	esi, -1061097472
.LBB519_144:                            #   in Loop: Header=BB519_1 Depth=1
	and	ecx, esi
	cmp	ecx, -2139062272
	jne	.LBB519_165
.LBB519_145:                            #   in Loop: Header=BB519_1 Depth=1
	movzx	eax, ax
	movzx	esi, al
	mov	rcx, qword ptr [rsp + 2112]
	add	rcx, rbx
	mov	r8, rsi
	call	memcpy
	mov	r10, rbp
	lea	r9, [rsp + 64]
	add	qword ptr [rsp + 2112], rsi
	add	rdi, rsi
.LBB519_118:                            #   in Loop: Header=BB519_1 Depth=1
	lea	r11, [rip + .LJTI519_0]
	.p2align	4, 0x90
.LBB519_119:                            #   in Loop: Header=BB519_1 Depth=1
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI519_1]
	cmp	rdi, r14
	jb	.LBB519_120
	jmp	.LBB519_125
.LBB519_146:
	mov	rax, qword ptr [rsp + 2112]
	mov	ecx, 2147483646
	sub	rcx, r12
	cmp	rax, rcx
	ja	.LBB519_152
# %bb.147:
	mov	qword ptr [rsp + 48], r9
	mov	qword ptr [rsp + 56], rax
	lea	rdx, [rsp + 48]
	mov	rcx, r13
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
.LBB519_148:
	mov	rax, rdi
	add	rsp, 2120
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB519_149:
	mov	rcx, r13
	mov	rdx, rsi
.LBB519_150:
	mov	r8d, 1
.LBB519_151:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rdi, rax
	jmp	.LBB519_148
.LBB519_152:
	mov	rcx, r13
	mov	rdx, rdi
.LBB519_153:
	mov	r8d, 27
	jmp	.LBB519_151
.LBB519_154:
	add	rdi, 2
	cmp	bl, -1
	cmove	rdi, rsi
	lea	rax, [rdi + 1]
	cmp	dl, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	bpl, -1
.LBB519_155:
	cmove	rdx, rax
.LBB519_156:
	mov	rcx, r13
	mov	r8d, 16
	jmp	.LBB519_151
.LBB519_157:
	mov	rcx, r13
	mov	rdx, rsi
	jmp	.LBB519_153
.LBB519_158:
	mov	rcx, r13
	mov	rdx, rsi
	mov	r8b, 21
	jmp	.LBB519_171
.LBB519_159:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8b, 20
	jmp	.LBB519_171
.LBB519_160:
	mov	rcx, r13
	mov	rdx, r14
	mov	r8b, 26
	jmp	.LBB519_171
.LBB519_161:
	mov	rcx, r13
	mov	r8b, 22
	jmp	.LBB519_171
.LBB519_162:
	mov	rcx, r13
	mov	rdx, rsi
	mov	r8d, 11
	jmp	.LBB519_151
.LBB519_163:
	add	rdi, 6
	jmp	.LBB519_165
.LBB519_164:
	add	rdi, 7
.LBB519_165:
	mov	rcx, r13
	mov	rdx, rdi
	jmp	.LBB519_150
.LBB519_166:
	add	rdi, 9
	cmp	cl, -1
	cmove	rdi, rdx
	lea	rax, [rdi + 1]
	cmp	bpl, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	sil, -1
	jmp	.LBB519_155
.LBB519_167:
	mov	rcx, r13
	mov	r8d, 11
	jmp	.LBB519_151
.LBB519_168:
	mov	rcx, r13
	mov	r8b, 23
	jmp	.LBB519_171
.LBB519_169:
	mov	rcx, r13
	mov	r8b, 24
	jmp	.LBB519_171
.LBB519_170:
	mov	rcx, r13
	mov	r8b, 25
.LBB519_171:
	mov	r9, r12
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rdi, rax
	jmp	.LBB519_148
.LBB519_172:
	mov	rcx, r13
	mov	r8b, 27
	jmp	.LBB519_171
.LBB519_173:
	mov	rcx, r13
	mov	r8b, 28
	jmp	.LBB519_171
.LBB519_174:
	mov	rcx, r13
	jmp	.LBB519_150
.LBB519_175:
	mov	rcx, r13
	mov	r8b, 29
	jmp	.LBB519_171
.LBB519_176:
	mov	rcx, r13
	mov	r8b, 30
	jmp	.LBB519_171
.LBB519_177:
	mov	rcx, r13
	mov	r8b, 31
	jmp	.LBB519_171
.LBB519_178:
	mov	rcx, r13
	mov	r8b, 32
	jmp	.LBB519_171
.LBB519_179:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8d, 16
	jmp	.LBB519_151
	.p2align	2, 0x90
.LJTI519_0:
	.long	.LBB519_4-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_8-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_6-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_9-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_10-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_24-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_7-.LJTI519_0
	.long	.LBB519_149-.LJTI519_0
	.long	.LBB519_5-.LJTI519_0
	.long	.LBB519_11-.LJTI519_0
.LJTI519_1:
	.long	.LBB519_136-.LJTI519_1
	.long	.LBB519_137-.LJTI519_1
	.long	.LBB519_138-.LJTI519_1
	.long	.LBB519_139-.LJTI519_1
	.long	.LBB519_141-.LJTI519_1
	.long	.LBB519_142-.LJTI519_1
	.long	.LBB519_143-.LJTI519_1
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB520_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB520_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB520_17
	.p2align	4, 0x90
.LBB520_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB520_6
# %bb.12:                               #   in Loop: Header=BB520_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB520_13
	.p2align	4, 0x90
.LBB520_6:                              #   in Loop: Header=BB520_5 Depth=1
	mov	rax, rsi
.LBB520_13:                             #   in Loop: Header=BB520_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB520_14
# %bb.15:                               #   in Loop: Header=BB520_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB520_16
# %bb.18:                               #   in Loop: Header=BB520_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB520_5
	jmp	.LBB520_19
.LBB520_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB520_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB520_10
.LBB520_17:
	mov	rcx, rsi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB520_9:
	mov	rdx, rsi
.LBB520_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB520_11
.LBB520_19:
	add	rdx, 1
	mov	rax, rdx
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB520_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB520_2
.LBB520_16:
	mov	rcx, rsi
	mov	r8b, 7
.LBB520_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB520_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB520_2
.LBB520_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB520_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z"
	.globl	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # -- Begin function ?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z
	.p2align	4, 0x90
"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z": # @"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z"
.seh_proc "?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	.seh_endprologue
	mov	rsi, rcx
	cmp	dword ptr [rcx + 88], 0
	jne	.LBB521_5
# %bb.1:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB521_5
# %bb.2:
	mov	rdi, r8
	mov	ebx, edx
	mov	rax, qword ptr [rsi + 120]
	test	rax, rax
	je	.LBB521_3
.LBB521_4:
	mov	rcx, qword ptr [rsi + 128]
	mov	qword ptr [rcx + rax], rdi
	mov	rax, qword ptr [rsi + 120]
	mov	rcx, qword ptr [rsi + 128]
	lea	rdx, [rax + 8]
	mov	qword ptr [rsi + 120], rdx
	mov	byte ptr [rcx + rax + 8], bl
	add	qword ptr [rsi + 120], 1
.LBB521_5:
	mov	rax, rsi
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	ret
.LBB521_3:
	lea	rcx, [rsi + 104]
	mov	rax, qword ptr [rsi + 168]
	sub	rax, qword ptr [rsi + 184]
	lea	rdx, [rax + 8*rax]
	add	rdx, 11
	call	"?reserve@stack@detail@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rsi + 120]
	jmp	.LBB521_4
	.seh_handlerdata
	.section	.text,"xr",discard,"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	rsi, rdx
	mov	r14, rcx
	mov	rbx, qword ptr [rcx + 160]
	add	rsi, 1
	mov	rcx, rsi
	mov	rdx, rbx
	call	"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
	mov	rdi, rax
	mov	r15, rax
	sub	r15, rsi
	cmp	r15, 2147483647
	jae	.LBB522_1
# %bb.3:
	cmp	rdi, rbx
	jae	.LBB522_4
# %bb.10:
	movzx	eax, byte ptr [rdi]
	cmp	rax, 34
	jne	.LBB522_11
# %bb.21:
	mov	qword ptr [rsp + 32], rsi
	mov	qword ptr [rsp + 40], r15
	lea	rdx, [rsp + 32]
	mov	rcx, r14
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
	mov	rax, rdi
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB522_1:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 26
.LBB522_2:
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB522_4:
	test	r15, r15
	je	.LBB522_8
# %bb.5:
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r14 + 40]
	lea	rbx, [r15 + rcx]
	add	rbx, 24
	cmp	rbx, rdx
	jbe	.LBB522_7
# %bb.6:
	mov	rcx, r14
	mov	rdx, r15
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB522_7:
	add	rcx, rax
	add	rcx, 24
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	add	qword ptr [r14 + 40], r15
.LBB522_8:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 19
	jmp	.LBB522_9
.LBB522_11:
	test	al, al
	js	.LBB522_12
# %bb.15:
	cmp	al, 92
	jne	.LBB522_13
# %bb.16:
	test	r15, r15
	je	.LBB522_20
# %bb.17:
	mov	rax, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r14 + 40]
	lea	rbx, [r15 + rcx]
	add	rbx, 24
	cmp	rbx, rdx
	jbe	.LBB522_19
# %bb.18:
	mov	rcx, r14
	mov	rdx, r15
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB522_19:
	add	rcx, rax
	add	rcx, 24
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	add	qword ptr [r14 + 40], r15
.LBB522_20:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8, r15
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB522_12:
	mov	rdx, rbx
	sub	rdx, rdi
	and	eax, 127
	lea	rcx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	movzx	eax, word ptr [rcx + 2*rax]
	lea	rcx, [r14 + 136]
	mov	word ptr [r14 + 140], ax
	movzx	esi, al
	cmp	rdx, rsi
	cmovae	rdx, rax
	mov	byte ptr [r14 + 142], dl
	movzx	r8d, dl
	mov	rdx, rdi
	call	memcpy
	mov	al, byte ptr [r14 + 142]
	cmp	al, byte ptr [r14 + 140]
	jae	.LBB522_13
# %bb.14:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 26
.LBB522_9:
	mov	r9, r15
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB522_13:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB522_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2120
	.seh_stackalloc 2120
	.seh_endprologue
	mov	rdi, rdx
	mov	r13, rcx
	mov	r15, qword ptr [rcx + 160]
	mov	rax, r15
	sub	rax, rdx
	lea	r14, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r14, r15
	mov	r12, r8
	mov	qword ptr [rsp + 2112], 0
	lea	r10, [rcx + 136]
	lea	r11, [rip + .LJTI523_0]
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI523_1]
	lea	r9, [rsp + 64]
.LBB523_1:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB523_120 Depth 2
	lea	rsi, [rdi + 1]
	cmp	rsi, r14
	jae	.LBB523_30
.LBB523_2:                              #   in Loop: Header=BB523_1 Depth=1
	movsx	eax, byte ptr [rsi]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB523_149
# %bb.3:                                #   in Loop: Header=BB523_1 Depth=1
	movsxd	rax, dword ptr [r11 + 4*rax]
	add	rax, r11
	jmp	rax
.LBB523_4:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 34
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_5:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 9
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_6:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 92
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_7:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 13
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_8:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 47
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_9:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 8
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_10:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 12
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_11:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rax, r14
	sub	rax, rsi
	cmp	rax, 11
	jb	.LBB523_37
# %bb.12:                               #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, dword ptr [rdi + 2]
	mov	edx, ecx
	shr	edx, 24
	lea	r8d, [rdx - 48]
	cmp	r8b, 10
	jb	.LBB523_14
# %bb.13:                               #   in Loop: Header=BB523_1 Depth=1
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	r8d, dl
	mov	eax, 255
	cmovae	r8d, eax
.LBB523_14:                             #   in Loop: Header=BB523_1 Depth=1
	mov	edx, ecx
	shr	edx, 16
	lea	ebp, [rdx - 48]
	cmp	bpl, 10
	jb	.LBB523_16
# %bb.15:                               #   in Loop: Header=BB523_1 Depth=1
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	ebp, dl
	mov	eax, 255
	cmovae	ebp, eax
.LBB523_16:                             #   in Loop: Header=BB523_1 Depth=1
	mov	eax, ecx
	shr	eax, 8
	lea	edx, [rax - 48]
	cmp	dl, 10
	jb	.LBB523_18
# %bb.17:                               #   in Loop: Header=BB523_1 Depth=1
	and	al, -33
	lea	edx, [rax - 65]
	add	al, -55
	cmp	dl, 6
	movzx	edx, al
	mov	eax, 255
	cmovae	edx, eax
.LBB523_18:                             #   in Loop: Header=BB523_1 Depth=1
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB523_20
# %bb.19:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	eax, [rcx - 65]
	add	cl, -55
	cmp	al, 6
	movzx	ebx, cl
	mov	eax, 255
	cmovae	ebx, eax
.LBB523_20:                             #   in Loop: Header=BB523_1 Depth=1
	mov	eax, ebp
	or	al, r8b
	or	al, dl
	or	al, bl
	cmp	al, -1
	je	.LBB523_154
# %bb.21:                               #   in Loop: Header=BB523_1 Depth=1
	movsx	eax, bpl
	movsx	ecx, dl
	movsx	edx, bl
	movsx	ebp, r8b
	shl	edx, 12
	shl	ecx, 8
	shl	eax, 4
	add	eax, ebp
	add	eax, ecx
	add	eax, edx
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB523_61
# %bb.22:                               #   in Loop: Header=BB523_1 Depth=1
	add	rdi, 6
	mov	rcx, qword ptr [rsp + 2112]
	cmp	eax, 127
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI523_1]
	ja	.LBB523_25
# %bb.23:                               #   in Loop: Header=BB523_1 Depth=1
	mov	byte ptr [rsp + rcx + 64], al
	add	qword ptr [rsp + 2112], 1
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_24:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [rsp + 2112]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2112], rcx
	mov	byte ptr [rsp + rax + 64], 10
	add	rdi, 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_25:                             #   in Loop: Header=BB523_1 Depth=1
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB523_27
# %bb.26:                               #   in Loop: Header=BB523_1 Depth=1
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 64], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 65], al
	add	qword ptr [rsp + 2112], 2
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_27:                             #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 65535
	ja	.LBB523_29
# %bb.28:                               #   in Loop: Header=BB523_1 Depth=1
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 66], al
	add	qword ptr [rsp + 2112], 3
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_29:                             #   in Loop: Header=BB523_1 Depth=1
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 66], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 67], al
	add	qword ptr [rsp + 2112], 4
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_30:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rbx, qword ptr [rsp + 2112]
	test	rbx, rbx
	mov	qword ptr [rsp + 40], r10 # 8-byte Spill
	je	.LBB523_88
# %bb.31:                               #   in Loop: Header=BB523_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r12
	cmp	rbx, rax
	ja	.LBB523_157
# %bb.32:                               #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB523_34
# %bb.33:                               #   in Loop: Header=BB523_1 Depth=1
	mov	rcx, r13
	mov	rdx, rbx
	mov	rbp, r9
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, rbp
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB523_34:                             #   in Loop: Header=BB523_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rbp, r9
	mov	rdx, r9
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r13 + 40], rbx
	add	r12, rbx
	mov	qword ptr [rsp + 2112], 0
.LBB523_35:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rax, r15
	sub	rax, rsi
	lea	r14, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r14, r15
	cmp	rsi, r14
	mov	r10, qword ptr [rsp + 40] # 8-byte Reload
	lea	r11, [rip + .LJTI523_0]
	lea	rbx, [rip + .LJTI523_1]
	jae	.LBB523_158
# %bb.36:                               #   in Loop: Header=BB523_1 Depth=1
	mov	r9, rbp
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	jmp	.LBB523_2
.LBB523_37:                             #   in Loop: Header=BB523_1 Depth=1
	mov	qword ptr [rsp + 40], r10 # 8-byte Spill
	mov	rbx, qword ptr [rsp + 2112]
	test	rbx, rbx
	je	.LBB523_42
# %bb.38:                               #   in Loop: Header=BB523_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r12
	cmp	rbx, rax
	ja	.LBB523_157
# %bb.39:                               #   in Loop: Header=BB523_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB523_41
# %bb.40:                               #   in Loop: Header=BB523_1 Depth=1
	mov	rcx, r13
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB523_41:                             #   in Loop: Header=BB523_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 64]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r13 + 40], rbx
	add	r12, rbx
	mov	qword ptr [rsp + 2112], 0
	mov	rax, r15
	sub	rax, rsi
	lea	r14, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r14, r15
.LBB523_42:                             #   in Loop: Header=BB523_1 Depth=1
	lea	rdx, [rdi + 2]
	cmp	rdx, r14
	jae	.LBB523_161
# %bb.43:                               #   in Loop: Header=BB523_1 Depth=1
	mov	al, byte ptr [rdx]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB523_46
# %bb.44:                               #   in Loop: Header=BB523_1 Depth=1
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB523_156
# %bb.45:                               #   in Loop: Header=BB523_1 Depth=1
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB523_156
.LBB523_46:                             #   in Loop: Header=BB523_1 Depth=1
	movsx	eax, cl
	lea	rdx, [rdi + 3]
	shl	eax, 12
	mov	dword ptr [r13 + 144], eax
	cmp	rdx, r14
	jae	.LBB523_168
# %bb.47:                               #   in Loop: Header=BB523_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB523_50
# %bb.48:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	cmp	bpl, 5
	ja	.LBB523_156
# %bb.49:                               #   in Loop: Header=BB523_1 Depth=1
	add	cl, -55
	mov	ebp, ecx
	cmp	cl, -1
	je	.LBB523_156
.LBB523_50:                             #   in Loop: Header=BB523_1 Depth=1
	movsx	ecx, bpl
	lea	rdx, [rdi + 4]
	shl	ecx, 8
	add	ecx, eax
	mov	dword ptr [r13 + 144], ecx
	cmp	rdx, r14
	jae	.LBB523_169
# %bb.51:                               #   in Loop: Header=BB523_1 Depth=1
	mov	al, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB523_54
# %bb.52:                               #   in Loop: Header=BB523_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB523_156
# %bb.53:                               #   in Loop: Header=BB523_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB523_156
.LBB523_54:                             #   in Loop: Header=BB523_1 Depth=1
	movsx	eax, bpl
	lea	rdx, [rdi + 5]
	shl	eax, 4
	add	eax, ecx
	mov	dword ptr [r13 + 144], eax
	cmp	rdx, r14
	jae	.LBB523_170
# %bb.55:                               #   in Loop: Header=BB523_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB523_58
# %bb.56:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	cmp	bpl, 5
	ja	.LBB523_156
# %bb.57:                               #   in Loop: Header=BB523_1 Depth=1
	add	cl, -55
	mov	ebp, ecx
	cmp	cl, -1
	je	.LBB523_156
.LBB523_58:                             #   in Loop: Header=BB523_1 Depth=1
	movsx	ecx, bpl
	lea	rdx, [rdi + 6]
	add	eax, ecx
	mov	dword ptr [r13 + 144], eax
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB523_89
# %bb.59:                               #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 127
	ja	.LBB523_80
# %bb.60:                               #   in Loop: Header=BB523_1 Depth=1
	mov	byte ptr [rsp + 64], al
	add	qword ptr [rsp + 2112], 1
	jmp	.LBB523_86
.LBB523_61:                             #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 56320
	jae	.LBB523_162
# %bb.62:                               #   in Loop: Header=BB523_1 Depth=1
	cmp	byte ptr [rdi + 6], 92
	jne	.LBB523_163
# %bb.63:                               #   in Loop: Header=BB523_1 Depth=1
	cmp	byte ptr [rdi + 7], 117
	jne	.LBB523_164
# %bb.64:                               #   in Loop: Header=BB523_1 Depth=1
	mov	edx, dword ptr [rdi + 8]
	mov	ecx, edx
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB523_66
# %bb.65:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	r8d, cl
	mov	ecx, 255
	cmovae	r8d, ecx
.LBB523_66:                             #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, edx
	shr	ecx, 16
	lea	esi, [rcx - 48]
	cmp	sil, 10
	jb	.LBB523_68
# %bb.67:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	esi, cl
	mov	ecx, 255
	cmovae	esi, ecx
.LBB523_68:                             #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, edx
	shr	ecx, 8
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB523_70
# %bb.69:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	ebp, cl
	mov	ecx, 255
	cmovae	ebp, ecx
.LBB523_70:                             #   in Loop: Header=BB523_1 Depth=1
	lea	ecx, [rdx - 48]
	cmp	cl, 10
	jb	.LBB523_72
# %bb.71:                               #   in Loop: Header=BB523_1 Depth=1
	and	dl, -33
	lea	ecx, [rdx - 65]
	add	dl, -55
	cmp	cl, 6
	movzx	ecx, dl
	mov	edx, 255
	cmovae	ecx, edx
.LBB523_72:                             #   in Loop: Header=BB523_1 Depth=1
	lea	rdx, [rdi + 8]
	mov	ebx, esi
	or	bl, r8b
	or	bl, bpl
	or	bl, cl
	cmp	bl, -1
	je	.LBB523_166
# %bb.73:                               #   in Loop: Header=BB523_1 Depth=1
	movsx	esi, sil
	movsx	ebp, bpl
	movsx	ecx, cl
	movsx	ebx, r8b
	shl	ecx, 12
	shl	ebp, 8
	shl	esi, 4
	add	esi, ebx
	add	esi, ebp
	add	esi, ecx
	mov	ecx, esi
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB523_167
# %bb.74:                               #   in Loop: Header=BB523_1 Depth=1
	add	rdi, 12
	shl	eax, 10
	add	eax, esi
	add	eax, -56613888
	mov	rcx, qword ptr [rsp + 2112]
	cmp	eax, 127
	ja	.LBB523_76
# %bb.75:                               #   in Loop: Header=BB523_1 Depth=1
	mov	byte ptr [rsp + rcx + 64], al
	add	qword ptr [rsp + 2112], 1
	jmp	.LBB523_119
.LBB523_76:                             #   in Loop: Header=BB523_1 Depth=1
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB523_78
# %bb.77:                               #   in Loop: Header=BB523_1 Depth=1
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 64], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 65], al
	add	qword ptr [rsp + 2112], 2
	jmp	.LBB523_119
.LBB523_78:                             #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 65535
	ja	.LBB523_82
# %bb.79:                               #   in Loop: Header=BB523_1 Depth=1
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 66], al
	add	qword ptr [rsp + 2112], 3
	jmp	.LBB523_119
.LBB523_80:                             #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB523_83
# %bb.81:                               #   in Loop: Header=BB523_1 Depth=1
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 64], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 65], al
	add	qword ptr [rsp + 2112], 2
	jmp	.LBB523_86
.LBB523_82:                             #   in Loop: Header=BB523_1 Depth=1
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 64], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 65], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 66], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 67], al
	add	qword ptr [rsp + 2112], 4
	jmp	.LBB523_119
.LBB523_83:                             #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 65535
	ja	.LBB523_85
# %bb.84:                               #   in Loop: Header=BB523_1 Depth=1
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 66], al
	add	qword ptr [rsp + 2112], 3
	jmp	.LBB523_86
.LBB523_85:                             #   in Loop: Header=BB523_1 Depth=1
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 66], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 67], al
	add	qword ptr [rsp + 2112], 4
.LBB523_86:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rdi, rdx
.LBB523_87:                             #   in Loop: Header=BB523_1 Depth=1
	lea	r9, [rsp + 64]
	mov	r10, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB523_118
.LBB523_88:                             #   in Loop: Header=BB523_1 Depth=1
	mov	rbp, r9
	jmp	.LBB523_35
.LBB523_89:                             #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 56320
	jae	.LBB523_167
# %bb.90:                               #   in Loop: Header=BB523_1 Depth=1
	cmp	rdx, r14
	jae	.LBB523_172
# %bb.91:                               #   in Loop: Header=BB523_1 Depth=1
	cmp	byte ptr [rdx], 92
	jne	.LBB523_174
# %bb.92:                               #   in Loop: Header=BB523_1 Depth=1
	lea	rdx, [rdi + 7]
	cmp	rdx, r14
	jae	.LBB523_173
# %bb.93:                               #   in Loop: Header=BB523_1 Depth=1
	cmp	byte ptr [rdx], 117
	jne	.LBB523_174
# %bb.94:                               #   in Loop: Header=BB523_1 Depth=1
	lea	rdx, [rdi + 8]
	cmp	rdx, r14
	jae	.LBB523_175
# %bb.95:                               #   in Loop: Header=BB523_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB523_98
# %bb.96:                               #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebp, [rcx - 65]
	cmp	bpl, 5
	ja	.LBB523_156
# %bb.97:                               #   in Loop: Header=BB523_1 Depth=1
	add	cl, -55
	mov	ebp, ecx
	cmp	cl, -1
	je	.LBB523_156
.LBB523_98:                             #   in Loop: Header=BB523_1 Depth=1
	movsx	ecx, bpl
	lea	rdx, [rdi + 9]
	shl	ecx, 12
	mov	dword ptr [r13 + 148], ecx
	cmp	rdx, r14
	jae	.LBB523_176
# %bb.99:                               #   in Loop: Header=BB523_1 Depth=1
	mov	bpl, byte ptr [rdx]
	lea	ebx, [rbp - 48]
	cmp	bl, 10
	jb	.LBB523_102
# %bb.100:                              #   in Loop: Header=BB523_1 Depth=1
	and	bpl, -33
	lea	ebx, [rbp - 65]
	cmp	bl, 5
	ja	.LBB523_156
# %bb.101:                              #   in Loop: Header=BB523_1 Depth=1
	add	bpl, -55
	mov	ebx, ebp
	cmp	bpl, -1
	je	.LBB523_156
.LBB523_102:                            #   in Loop: Header=BB523_1 Depth=1
	movsx	ebp, bl
	lea	rdx, [rdi + 10]
	shl	ebp, 8
	add	ebp, ecx
	mov	dword ptr [r13 + 148], ebp
	cmp	rdx, r14
	jae	.LBB523_177
# %bb.103:                              #   in Loop: Header=BB523_1 Depth=1
	mov	cl, byte ptr [rdx]
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB523_106
# %bb.104:                              #   in Loop: Header=BB523_1 Depth=1
	and	cl, -33
	lea	ebx, [rcx - 65]
	cmp	bl, 5
	ja	.LBB523_156
# %bb.105:                              #   in Loop: Header=BB523_1 Depth=1
	add	cl, -55
	mov	ebx, ecx
	cmp	cl, -1
	je	.LBB523_156
.LBB523_106:                            #   in Loop: Header=BB523_1 Depth=1
	movsx	ecx, bl
	lea	rdx, [rdi + 11]
	shl	ecx, 4
	add	ecx, ebp
	mov	dword ptr [r13 + 148], ecx
	cmp	rdx, r14
	jae	.LBB523_178
# %bb.107:                              #   in Loop: Header=BB523_1 Depth=1
	mov	bpl, byte ptr [rdx]
	lea	ebx, [rbp - 48]
	cmp	bl, 10
	jb	.LBB523_110
# %bb.108:                              #   in Loop: Header=BB523_1 Depth=1
	and	bpl, -33
	lea	ebx, [rbp - 65]
	cmp	bl, 5
	ja	.LBB523_156
# %bb.109:                              #   in Loop: Header=BB523_1 Depth=1
	add	bpl, -55
	mov	ebx, ebp
	cmp	bpl, -1
	je	.LBB523_156
.LBB523_110:                            #   in Loop: Header=BB523_1 Depth=1
	movsx	edx, bl
	add	rdi, 12
	add	ecx, edx
	mov	dword ptr [r13 + 148], ecx
	mov	edx, ecx
	and	edx, -1024
	cmp	edx, 56320
	jne	.LBB523_179
# %bb.111:                              #   in Loop: Header=BB523_1 Depth=1
	shl	eax, 10
	add	eax, ecx
	add	eax, -56613888
	cmp	eax, 127
	ja	.LBB523_113
# %bb.112:                              #   in Loop: Header=BB523_1 Depth=1
	mov	byte ptr [rsp + 64], al
	add	qword ptr [rsp + 2112], 1
	jmp	.LBB523_87
.LBB523_113:                            #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB523_115
# %bb.114:                              #   in Loop: Header=BB523_1 Depth=1
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 64], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 65], al
	add	qword ptr [rsp + 2112], 2
	jmp	.LBB523_87
.LBB523_115:                            #   in Loop: Header=BB523_1 Depth=1
	cmp	eax, 65535
	ja	.LBB523_117
# %bb.116:                              #   in Loop: Header=BB523_1 Depth=1
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 66], al
	add	qword ptr [rsp + 2112], 3
	jmp	.LBB523_87
.LBB523_117:                            #   in Loop: Header=BB523_1 Depth=1
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 64], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 65], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 66], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 67], al
	add	qword ptr [rsp + 2112], 4
	jmp	.LBB523_87
.LBB523_125:                            #   in Loop: Header=BB523_1 Depth=1
	mov	rsi, qword ptr [rsp + 2112]
	test	rsi, rsi
	mov	qword ptr [rsp + 40], r10 # 8-byte Spill
	je	.LBB523_132
# %bb.126:                              #   in Loop: Header=BB523_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r12
	cmp	rsi, rax
	ja	.LBB523_152
# %bb.127:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rbx, r11
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rsi + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB523_129
# %bb.128:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rcx, r13
	mov	rdx, rsi
	mov	rbp, r9
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, rbp
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB523_129:                            #   in Loop: Header=BB523_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rbp, r9
	mov	rdx, r9
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r13 + 40], rsi
	add	r12, rsi
	mov	qword ptr [rsp + 2112], 0
.LBB523_130:                            #   in Loop: Header=BB523_1 Depth=1
	mov	rax, r15
	sub	rax, rdi
	lea	r14, [rdi + 2048]
	cmp	rax, 2048
	cmovbe	r14, r15
	cmp	r14, rdi
	mov	r10, qword ptr [rsp + 40] # 8-byte Reload
	jbe	.LBB523_159
# %bb.131:                              #   in Loop: Header=BB523_1 Depth=1
	mov	r11, rbx
	mov	r9, rbp
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI523_1]
	.p2align	4, 0x90
.LBB523_120:                            #   Parent Loop BB523_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 34
	je	.LBB523_146
# %bb.121:                              #   in Loop: Header=BB523_120 Depth=2
	test	al, al
	js	.LBB523_133
# %bb.122:                              #   in Loop: Header=BB523_120 Depth=2
	cmp	al, 92
	je	.LBB523_1
# %bb.123:                              #   in Loop: Header=BB523_120 Depth=2
	cmp	al, 31
	jbe	.LBB523_165
# %bb.124:                              #   in Loop: Header=BB523_120 Depth=2
	mov	rcx, qword ptr [rsp + 2112]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rsp + 2112], rdx
	mov	byte ptr [rsp + rcx + 64], al
	mov	eax, 1
	add	rdi, rax
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_132:                            #   in Loop: Header=BB523_1 Depth=1
	mov	rbx, r11
	mov	rbp, r9
	jmp	.LBB523_130
.LBB523_133:                            #   in Loop: Header=BB523_1 Depth=1
	mov	rcx, r14
	sub	rcx, rdi
	and	eax, 127
	movzx	eax, word ptr [rbp + 2*rax]
	mov	word ptr [r13 + 140], ax
	movzx	edx, al
	cmp	rcx, rdx
	cmovae	rcx, rax
	mov	byte ptr [r13 + 142], cl
	movzx	r8d, cl
	mov	rbp, r10
	mov	rcx, r10
	mov	rdx, rdi
	call	memcpy
	movzx	eax, word ptr [r13 + 140]
	cmp	byte ptr [r13 + 142], al
	jb	.LBB523_160
# %bb.134:                              #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	lea	rbx, [rsp + 64]
	ja	.LBB523_165
# %bb.135:                              #   in Loop: Header=BB523_1 Depth=1
	mov	rdx, rbp
	movzx	ecx, cl
	lea	rsi, [rip + .LJTI523_1]
	movsxd	rcx, dword ptr [rsi + 4*rcx]
	add	rcx, rsi
	jmp	rcx
.LBB523_136:                            #   in Loop: Header=BB523_1 Depth=1
	movzx	ecx, word ptr [rdx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB523_145
	jmp	.LBB523_165
.LBB523_137:                            #   in Loop: Header=BB523_1 Depth=1
	movzx	ecx, word ptr [rdx]
	movzx	esi, byte ptr [rdx + 2]
	shl	esi, 16
	or	esi, ecx
	and	esi, 12640256
	cmp	esi, 8429568
	je	.LBB523_145
	jmp	.LBB523_165
.LBB523_138:                            #   in Loop: Header=BB523_1 Depth=1
	movzx	ecx, word ptr [rdx]
	movzx	esi, byte ptr [rdx + 2]
	shl	esi, 16
	or	esi, ecx
	and	esi, 12632064
	jmp	.LBB523_140
.LBB523_139:                            #   in Loop: Header=BB523_1 Depth=1
	movzx	ecx, word ptr [rdx]
	movzx	esi, byte ptr [rdx + 2]
	shl	esi, 16
	or	esi, ecx
	and	esi, 12640256
.LBB523_140:                            #   in Loop: Header=BB523_1 Depth=1
	cmp	esi, 8421376
	je	.LBB523_145
	jmp	.LBB523_165
.LBB523_141:                            #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, dword ptr [rdx]
	mov	esi, -1061093632
	and	ecx, esi
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB523_145
	jmp	.LBB523_165
.LBB523_142:                            #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, dword ptr [rdx]
	mov	esi, -1061109760
	jmp	.LBB523_144
.LBB523_143:                            #   in Loop: Header=BB523_1 Depth=1
	mov	ecx, dword ptr [rdx]
	mov	esi, -1061097472
.LBB523_144:                            #   in Loop: Header=BB523_1 Depth=1
	and	ecx, esi
	cmp	ecx, -2139062272
	jne	.LBB523_165
.LBB523_145:                            #   in Loop: Header=BB523_1 Depth=1
	movzx	eax, ax
	movzx	esi, al
	mov	rcx, qword ptr [rsp + 2112]
	add	rcx, rbx
	mov	r8, rsi
	call	memcpy
	mov	r10, rbp
	lea	r9, [rsp + 64]
	add	qword ptr [rsp + 2112], rsi
	add	rdi, rsi
.LBB523_118:                            #   in Loop: Header=BB523_1 Depth=1
	lea	r11, [rip + .LJTI523_0]
	.p2align	4, 0x90
.LBB523_119:                            #   in Loop: Header=BB523_1 Depth=1
	lea	rbp, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	rbx, [rip + .LJTI523_1]
	cmp	rdi, r14
	jb	.LBB523_120
	jmp	.LBB523_125
.LBB523_146:
	mov	rax, qword ptr [rsp + 2112]
	mov	ecx, 2147483646
	sub	rcx, r12
	cmp	rax, rcx
	ja	.LBB523_152
# %bb.147:
	mov	qword ptr [rsp + 48], r9
	mov	qword ptr [rsp + 56], rax
	lea	rdx, [rsp + 48]
	mov	rcx, r13
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
.LBB523_148:
	mov	rax, rdi
	add	rsp, 2120
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB523_149:
	mov	rcx, r13
	mov	rdx, rsi
.LBB523_150:
	mov	r8d, 1
.LBB523_151:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rdi, rax
	jmp	.LBB523_148
.LBB523_152:
	mov	rcx, r13
	mov	rdx, rdi
.LBB523_153:
	mov	r8d, 26
	jmp	.LBB523_151
.LBB523_154:
	add	rdi, 2
	cmp	bl, -1
	cmove	rdi, rsi
	lea	rax, [rdi + 1]
	cmp	dl, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	bpl, -1
.LBB523_155:
	cmove	rdx, rax
.LBB523_156:
	mov	rcx, r13
	mov	r8d, 16
	jmp	.LBB523_151
.LBB523_157:
	mov	rcx, r13
	mov	rdx, rsi
	jmp	.LBB523_153
.LBB523_158:
	mov	rcx, r13
	mov	rdx, rsi
	mov	r8b, 21
	jmp	.LBB523_171
.LBB523_159:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8b, 20
	jmp	.LBB523_171
.LBB523_160:
	mov	rcx, r13
	mov	rdx, r14
	mov	r8b, 26
	jmp	.LBB523_171
.LBB523_161:
	mov	rcx, r13
	mov	r8b, 22
	jmp	.LBB523_171
.LBB523_162:
	mov	rcx, r13
	mov	rdx, rsi
	mov	r8d, 11
	jmp	.LBB523_151
.LBB523_163:
	add	rdi, 6
	jmp	.LBB523_165
.LBB523_164:
	add	rdi, 7
.LBB523_165:
	mov	rcx, r13
	mov	rdx, rdi
	jmp	.LBB523_150
.LBB523_166:
	add	rdi, 9
	cmp	cl, -1
	cmove	rdi, rdx
	lea	rax, [rdi + 1]
	cmp	bpl, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	sil, -1
	jmp	.LBB523_155
.LBB523_167:
	mov	rcx, r13
	mov	r8d, 11
	jmp	.LBB523_151
.LBB523_168:
	mov	rcx, r13
	mov	r8b, 23
	jmp	.LBB523_171
.LBB523_169:
	mov	rcx, r13
	mov	r8b, 24
	jmp	.LBB523_171
.LBB523_170:
	mov	rcx, r13
	mov	r8b, 25
.LBB523_171:
	mov	r9, r12
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rdi, rax
	jmp	.LBB523_148
.LBB523_172:
	mov	rcx, r13
	mov	r8b, 27
	jmp	.LBB523_171
.LBB523_173:
	mov	rcx, r13
	mov	r8b, 28
	jmp	.LBB523_171
.LBB523_174:
	mov	rcx, r13
	jmp	.LBB523_150
.LBB523_175:
	mov	rcx, r13
	mov	r8b, 29
	jmp	.LBB523_171
.LBB523_176:
	mov	rcx, r13
	mov	r8b, 30
	jmp	.LBB523_171
.LBB523_177:
	mov	rcx, r13
	mov	r8b, 31
	jmp	.LBB523_171
.LBB523_178:
	mov	rcx, r13
	mov	r8b, 32
	jmp	.LBB523_171
.LBB523_179:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8d, 16
	jmp	.LBB523_151
	.p2align	2, 0x90
.LJTI523_0:
	.long	.LBB523_4-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_8-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_6-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_9-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_10-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_24-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_7-.LJTI523_0
	.long	.LBB523_149-.LJTI523_0
	.long	.LBB523_5-.LJTI523_0
	.long	.LBB523_11-.LJTI523_0
.LJTI523_1:
	.long	.LBB523_136-.LJTI523_1
	.long	.LBB523_137-.LJTI523_1
	.long	.LBB523_138-.LJTI523_1
	.long	.LBB523_139-.LJTI523_1
	.long	.LBB523_141-.LJTI523_1
	.long	.LBB523_142-.LJTI523_1
	.long	.LBB523_143-.LJTI523_1
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB524_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB524_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB524_17
	.p2align	4, 0x90
.LBB524_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB524_6
# %bb.12:                               #   in Loop: Header=BB524_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB524_13
	.p2align	4, 0x90
.LBB524_6:                              #   in Loop: Header=BB524_5 Depth=1
	mov	rax, rsi
.LBB524_13:                             #   in Loop: Header=BB524_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB524_14
# %bb.15:                               #   in Loop: Header=BB524_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB524_16
# %bb.18:                               #   in Loop: Header=BB524_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB524_5
	jmp	.LBB524_19
.LBB524_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB524_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB524_10
.LBB524_17:
	mov	rcx, rsi
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB524_9:
	mov	rdx, rsi
.LBB524_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB524_11
.LBB524_19:
	add	rdx, 1
	cmp	rdx, rdi
	je	.LBB524_32
# %bb.20:
	cmp	byte ptr [rdx], 32
	ja	.LBB524_30
# %bb.21:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB524_22:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB524_23
# %bb.28:                               #   in Loop: Header=BB524_22 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdx, 16
	cmp	ax, -1
	je	.LBB524_22
# %bb.29:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB524_30:
	cmp	rdx, rdi
	jae	.LBB524_31
# %bb.33:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r8 + 8*rax] # TAILCALL
.LBB524_23:
	cmp	rdi, rdx
	je	.LBB524_32
# %bb.24:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB524_25:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB524_30
# %bb.26:                               #   in Loop: Header=BB524_25 Depth=1
	bt	rax, rcx
	jae	.LBB524_30
# %bb.27:                               #   in Loop: Header=BB524_25 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB524_25
.LBB524_32:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
.LBB524_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB524_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB524_2
.LBB524_16:
	mov	rcx, rsi
	mov	r8b, 7
	jmp	.LBB524_2
.LBB524_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB524_2
.LBB524_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB524_2
.LBB524_31:
	mov	rdi, rdx
	jmp	.LBB524_32
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB525_58
# %bb.1:
	mov	rbx, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r15, 4294977024
.LBB525_2:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB525_4 Depth 2
                                        #     Child Loop BB525_8 Depth 2
	cmp	rdi, rbx
	je	.LBB525_56
# %bb.3:                                #   in Loop: Header=BB525_2 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB525_11
	.p2align	4, 0x90
.LBB525_4:                              #   Parent Loop BB525_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB525_8
# %bb.5:                                #   in Loop: Header=BB525_4 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB525_4
# %bb.6:                                #   in Loop: Header=BB525_2 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB525_11
	.p2align	4, 0x90
.LBB525_7:                              #   in Loop: Header=BB525_8 Depth=2
	add	rdi, 1
.LBB525_8:                              #   Parent Loop BB525_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB525_56
# %bb.9:                                #   in Loop: Header=BB525_8 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB525_11
# %bb.10:                               #   in Loop: Header=BB525_8 Depth=2
	bt	r15, rax
	jb	.LBB525_7
	.p2align	4, 0x90
.LBB525_11:                             #   in Loop: Header=BB525_2 Depth=1
	cmp	rdi, rbx
	jae	.LBB525_55
# %bb.12:                               #   in Loop: Header=BB525_2 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 47
	jne	.LBB525_15
# %bb.13:                               #   in Loop: Header=BB525_2 Depth=1
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r14
	jne	.LBB525_2
# %bb.14:
	mov	rcx, r14
	mov	dl, 45
	xor	r8d, r8d
	jmp	.LBB525_51
.LBB525_15:
	xor	esi, esi
	cmp	al, 93
	je	.LBB525_47
# %bb.16:
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB525_18
	.p2align	4, 0x90
.LBB525_17:                             #   in Loop: Header=BB525_18 Depth=1
	cmp	rdi, rbx
	jae	.LBB525_45
.LBB525_18:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB525_20 Depth 2
                                        #       Child Loop BB525_22 Depth 3
                                        #       Child Loop BB525_26 Depth 3
                                        #     Child Loop BB525_36 Depth 2
                                        #     Child Loop BB525_40 Depth 2
	cmp	rsi, 2147483646
	je	.LBB525_48
# %bb.19:                               #   in Loop: Header=BB525_18 Depth=1
	add	rsi, 1
	movzx	eax, byte ptr [rdi]
	mov	rcx, r14
	mov	rdx, rdi
	call	qword ptr [r12 + 8*rax]
	mov	rdi, rax
	cmp	rax, r14
	je	.LBB525_49
.LBB525_20:                             #   Parent Loop BB525_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB525_22 Depth 3
                                        #       Child Loop BB525_26 Depth 3
	cmp	rdi, rbx
	je	.LBB525_53
# %bb.21:                               #   in Loop: Header=BB525_20 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB525_29
	.p2align	4, 0x90
.LBB525_22:                             #   Parent Loop BB525_18 Depth=1
                                        #     Parent Loop BB525_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB525_26
# %bb.23:                               #   in Loop: Header=BB525_22 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB525_22
# %bb.24:                               #   in Loop: Header=BB525_20 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB525_29
	.p2align	4, 0x90
.LBB525_25:                             #   in Loop: Header=BB525_26 Depth=3
	add	rdi, 1
.LBB525_26:                             #   Parent Loop BB525_18 Depth=1
                                        #     Parent Loop BB525_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB525_53
# %bb.27:                               #   in Loop: Header=BB525_26 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB525_29
# %bb.28:                               #   in Loop: Header=BB525_26 Depth=3
	bt	r15, rax
	jb	.LBB525_25
	.p2align	4, 0x90
.LBB525_29:                             #   in Loop: Header=BB525_20 Depth=2
	cmp	rdi, rbx
	jae	.LBB525_52
# %bb.30:                               #   in Loop: Header=BB525_20 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 44
	je	.LBB525_34
# %bb.31:                               #   in Loop: Header=BB525_20 Depth=2
	cmp	al, 93
	je	.LBB525_47
# %bb.32:                               #   in Loop: Header=BB525_20 Depth=2
	cmp	al, 47
	jne	.LBB525_60
# %bb.33:                               #   in Loop: Header=BB525_20 Depth=2
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r14
	jne	.LBB525_20
	jmp	.LBB525_61
	.p2align	4, 0x90
.LBB525_34:                             #   in Loop: Header=BB525_18 Depth=1
	add	rdi, 1
	cmp	rdi, rbx
	je	.LBB525_44
# %bb.35:                               #   in Loop: Header=BB525_18 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB525_17
	.p2align	4, 0x90
.LBB525_36:                             #   Parent Loop BB525_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB525_39
# %bb.37:                               #   in Loop: Header=BB525_36 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB525_36
# %bb.38:                               #   in Loop: Header=BB525_18 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB525_17
	.p2align	4, 0x90
.LBB525_39:                             #   in Loop: Header=BB525_18 Depth=1
	cmp	rbx, rdi
	je	.LBB525_44
	.p2align	4, 0x90
.LBB525_40:                             #   Parent Loop BB525_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB525_17
# %bb.41:                               #   in Loop: Header=BB525_40 Depth=2
	bt	r15, rax
	jae	.LBB525_17
# %bb.42:                               #   in Loop: Header=BB525_40 Depth=2
	add	rdi, 1
	cmp	rbx, rdi
	jne	.LBB525_40
.LBB525_44:
	mov	rdi, rbx
.LBB525_45:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB525_54
.LBB525_47:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB525_48:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 25
	jmp	.LBB525_59
.LBB525_49:
	mov	rcx, r14
	mov	dl, 46
.LBB525_50:
	mov	r8, rsi
.LBB525_51:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB525_52:
	mov	rbx, rdi
.LBB525_53:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 47
.LBB525_54:
	mov	r9, rsi
	jmp	.LBB525_57
.LBB525_55:
	mov	rbx, rdi
.LBB525_56:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 44
	xor	r9d, r9d
.LBB525_57:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB525_58:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
.LBB525_59:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB525_60:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB525_59
.LBB525_61:
	mov	rcx, r14
	mov	dl, 49
	jmp	.LBB525_50
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r15, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB526_1
# %bb.2:
	mov	rbx, qword ptr [r15 + 160]
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rdi, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	rsi, 4294977024
.LBB526_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB526_5 Depth 2
                                        #     Child Loop BB526_6 Depth 2
	cmp	rdi, rbx
	je	.LBB526_14
# %bb.4:                                #   in Loop: Header=BB526_3 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB526_12
	.p2align	4, 0x90
.LBB526_5:                              #   Parent Loop BB526_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB526_6
# %bb.10:                               #   in Loop: Header=BB526_5 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB526_5
# %bb.11:                               #   in Loop: Header=BB526_3 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB526_12
	.p2align	4, 0x90
.LBB526_9:                              #   in Loop: Header=BB526_6 Depth=2
	add	rdi, 1
.LBB526_6:                              #   Parent Loop BB526_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB526_14
# %bb.7:                                #   in Loop: Header=BB526_6 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB526_12
# %bb.8:                                #   in Loop: Header=BB526_6 Depth=2
	bt	rsi, rax
	jb	.LBB526_9
	.p2align	4, 0x90
.LBB526_12:                             #   in Loop: Header=BB526_3 Depth=1
	cmp	rdi, rbx
	jae	.LBB526_13
# %bb.15:                               #   in Loop: Header=BB526_3 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB526_25
# %bb.16:                               #   in Loop: Header=BB526_3 Depth=1
	cmp	al, 125
	je	.LBB526_97
# %bb.17:                               #   in Loop: Header=BB526_3 Depth=1
	cmp	al, 47
	jne	.LBB526_20
# %bb.18:                               #   in Loop: Header=BB526_3 Depth=1
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB526_3
# %bb.19:
	mov	rcx, r15
	mov	dl, 34
	xor	r8d, r8d
	jmp	.LBB526_29
.LBB526_25:
	mov	r14d, 1
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB526_26
	.p2align	4, 0x90
.LBB526_81:                             #   Parent Loop BB526_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB526_83 Depth 3
                                        #       Child Loop BB526_84 Depth 3
	cmp	rdi, rbx
	je	.LBB526_92
# %bb.82:                               #   in Loop: Header=BB526_81 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB526_90
	.p2align	4, 0x90
.LBB526_83:                             #   Parent Loop BB526_26 Depth=1
                                        #     Parent Loop BB526_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB526_84
# %bb.88:                               #   in Loop: Header=BB526_83 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB526_83
# %bb.89:                               #   in Loop: Header=BB526_81 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB526_90
	.p2align	4, 0x90
.LBB526_87:                             #   in Loop: Header=BB526_84 Depth=3
	add	rdi, 1
.LBB526_84:                             #   Parent Loop BB526_26 Depth=1
                                        #     Parent Loop BB526_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB526_92
# %bb.85:                               #   in Loop: Header=BB526_84 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB526_90
# %bb.86:                               #   in Loop: Header=BB526_84 Depth=3
	bt	rsi, rax
	jb	.LBB526_87
	.p2align	4, 0x90
.LBB526_90:                             #   in Loop: Header=BB526_81 Depth=2
	cmp	rdi, rbx
	jae	.LBB526_91
# %bb.93:                               #   in Loop: Header=BB526_81 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB526_23
# %bb.94:                               #   in Loop: Header=BB526_81 Depth=2
	cmp	al, 47
	jne	.LBB526_20
# %bb.95:                               #   in Loop: Header=BB526_81 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB526_81
	jmp	.LBB526_96
	.p2align	4, 0x90
.LBB526_23:                             #   in Loop: Header=BB526_26 Depth=1
	add	r14, 1
	cmp	r14, 2147483647
	je	.LBB526_24
.LBB526_26:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB526_30 Depth 2
                                        #       Child Loop BB526_32 Depth 3
                                        #       Child Loop BB526_33 Depth 3
                                        #     Child Loop BB526_51 Depth 2
                                        #     Child Loop BB526_52 Depth 2
                                        #     Child Loop BB526_63 Depth 2
                                        #       Child Loop BB526_65 Depth 3
                                        #       Child Loop BB526_66 Depth 3
                                        #     Child Loop BB526_81 Depth 2
                                        #       Child Loop BB526_83 Depth 3
                                        #       Child Loop BB526_84 Depth 3
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB526_27
.LBB526_30:                             #   Parent Loop BB526_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB526_32 Depth 3
                                        #       Child Loop BB526_33 Depth 3
	cmp	rax, rbx
	je	.LBB526_41
# %bb.31:                               #   in Loop: Header=BB526_30 Depth=2
	cmp	byte ptr [rax], 32
	ja	.LBB526_39
	.p2align	4, 0x90
.LBB526_32:                             #   Parent Loop BB526_26 Depth=1
                                        #     Parent Loop BB526_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB526_33
# %bb.37:                               #   in Loop: Header=BB526_32 Depth=3
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB526_32
# %bb.38:                               #   in Loop: Header=BB526_30 Depth=2
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB526_39
	.p2align	4, 0x90
.LBB526_36:                             #   in Loop: Header=BB526_33 Depth=3
	add	rax, 1
.LBB526_33:                             #   Parent Loop BB526_26 Depth=1
                                        #     Parent Loop BB526_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rax
	je	.LBB526_41
# %bb.34:                               #   in Loop: Header=BB526_33 Depth=3
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB526_39
# %bb.35:                               #   in Loop: Header=BB526_33 Depth=3
	bt	rsi, rcx
	jb	.LBB526_36
	.p2align	4, 0x90
.LBB526_39:                             #   in Loop: Header=BB526_30 Depth=2
	cmp	rax, rbx
	jae	.LBB526_40
# %bb.44:                               #   in Loop: Header=BB526_30 Depth=2
	mov	cl, byte ptr [rax]
	cmp	cl, 58
	je	.LBB526_49
# %bb.45:                               #   in Loop: Header=BB526_30 Depth=2
	cmp	cl, 47
	jne	.LBB526_48
# %bb.46:                               #   in Loop: Header=BB526_30 Depth=2
	mov	rcx, r15
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	jne	.LBB526_30
	jmp	.LBB526_47
	.p2align	4, 0x90
.LBB526_49:                             #   in Loop: Header=BB526_26 Depth=1
	add	rax, 1
	cmp	rax, rbx
	je	.LBB526_60
# %bb.50:                               #   in Loop: Header=BB526_26 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB526_58
	.p2align	4, 0x90
.LBB526_51:                             #   Parent Loop BB526_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB526_52
# %bb.56:                               #   in Loop: Header=BB526_51 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB526_51
# %bb.57:                               #   in Loop: Header=BB526_26 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB526_58
	.p2align	4, 0x90
.LBB526_55:                             #   in Loop: Header=BB526_52 Depth=2
	add	rax, 1
.LBB526_52:                             #   Parent Loop BB526_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rax
	je	.LBB526_60
# %bb.53:                               #   in Loop: Header=BB526_52 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB526_58
# %bb.54:                               #   in Loop: Header=BB526_52 Depth=2
	bt	rsi, rcx
	jb	.LBB526_55
	.p2align	4, 0x90
.LBB526_58:                             #   in Loop: Header=BB526_26 Depth=1
	cmp	rax, rbx
	jae	.LBB526_59
# %bb.61:                               #   in Loop: Header=BB526_26 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r15
	mov	rdx, rax
	call	qword ptr [r12 + 8*rdi]
	mov	rdi, rax
	cmp	rax, r15
	je	.LBB526_62
.LBB526_63:                             #   Parent Loop BB526_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB526_65 Depth 3
                                        #       Child Loop BB526_66 Depth 3
	cmp	rdi, rbx
	je	.LBB526_74
# %bb.64:                               #   in Loop: Header=BB526_63 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB526_72
	.p2align	4, 0x90
.LBB526_65:                             #   Parent Loop BB526_26 Depth=1
                                        #     Parent Loop BB526_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB526_66
# %bb.70:                               #   in Loop: Header=BB526_65 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB526_65
# %bb.71:                               #   in Loop: Header=BB526_63 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB526_72
	.p2align	4, 0x90
.LBB526_69:                             #   in Loop: Header=BB526_66 Depth=3
	add	rdi, 1
.LBB526_66:                             #   Parent Loop BB526_26 Depth=1
                                        #     Parent Loop BB526_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB526_74
# %bb.67:                               #   in Loop: Header=BB526_66 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB526_72
# %bb.68:                               #   in Loop: Header=BB526_66 Depth=3
	bt	rsi, rax
	jb	.LBB526_69
	.p2align	4, 0x90
.LBB526_72:                             #   in Loop: Header=BB526_63 Depth=2
	cmp	rdi, rbx
	jae	.LBB526_73
# %bb.75:                               #   in Loop: Header=BB526_63 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 44
	je	.LBB526_80
# %bb.76:                               #   in Loop: Header=BB526_63 Depth=2
	cmp	al, 125
	je	.LBB526_98
# %bb.77:                               #   in Loop: Header=BB526_63 Depth=2
	cmp	al, 47
	jne	.LBB526_20
# %bb.78:                               #   in Loop: Header=BB526_63 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB526_63
	jmp	.LBB526_79
	.p2align	4, 0x90
.LBB526_80:                             #   in Loop: Header=BB526_26 Depth=1
	add	rdi, 1
	jmp	.LBB526_81
.LBB526_27:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB526_28
.LBB526_40:
	mov	rbx, rax
.LBB526_41:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 36
	jmp	.LBB526_42
.LBB526_59:
	mov	rbx, rax
.LBB526_60:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 38
	jmp	.LBB526_42
.LBB526_62:
	mov	rcx, r15
	mov	dl, 39
.LBB526_28:
	mov	r8, r14
.LBB526_29:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB526_73:
	mov	rbx, rdi
.LBB526_74:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 40
	jmp	.LBB526_42
.LBB526_1:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB526_22
.LBB526_91:
	mov	rbx, rdi
.LBB526_92:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 41
.LBB526_42:
	mov	r9, r14
.LBB526_43:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB526_24:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB526_22
.LBB526_20:
	mov	rcx, r15
	mov	rdx, rdi
	jmp	.LBB526_21
.LBB526_13:
	mov	rbx, rdi
.LBB526_14:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB526_43
.LBB526_97:
	xor	r14d, r14d
.LBB526_98:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB526_48:
	mov	rcx, r15
	mov	rdx, rax
.LBB526_21:
	mov	r8d, 1
.LBB526_22:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB526_47:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB526_28
.LBB526_96:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB526_28
.LBB526_79:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB526_28
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB527_1
# %bb.3:
	mov	rdi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rbx, 1
	cmp	rbx, rdi
	je	.LBB527_16
# %bb.4:
	cmp	byte ptr [rbx], 32
	ja	.LBB527_14
# %bb.5:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB527_6:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB527_7
# %bb.12:                               #   in Loop: Header=BB527_6 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB527_6
# %bb.13:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB527_14:
	cmp	rbx, rdi
	jae	.LBB527_15
# %bb.17:
	mov	al, byte ptr [rbx]
	xor	esi, esi
	cmp	al, 93
	je	.LBB527_52
# %bb.18:
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
.LBB527_19:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB527_24 Depth 2
                                        #     Child Loop BB527_25 Depth 2
                                        #     Child Loop BB527_41 Depth 2
                                        #     Child Loop BB527_42 Depth 2
	cmp	rsi, 2147483646
	je	.LBB527_20
# %bb.21:                               #   in Loop: Header=BB527_19 Depth=1
	add	rsi, 1
	movzx	eax, al
	mov	rcx, r14
	mov	rdx, rbx
	call	qword ptr [r15 + 8*rax]
	cmp	rax, r14
	je	.LBB527_53
# %bb.22:                               #   in Loop: Header=BB527_19 Depth=1
	mov	rbx, rax
	cmp	rax, rdi
	je	.LBB527_33
# %bb.23:                               #   in Loop: Header=BB527_19 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB527_31
	.p2align	4, 0x90
.LBB527_24:                             #   Parent Loop BB527_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB527_25
# %bb.29:                               #   in Loop: Header=BB527_24 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB527_24
# %bb.30:                               #   in Loop: Header=BB527_19 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB527_31
	.p2align	4, 0x90
.LBB527_28:                             #   in Loop: Header=BB527_25 Depth=2
	add	rbx, 1
.LBB527_25:                             #   Parent Loop BB527_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB527_33
# %bb.26:                               #   in Loop: Header=BB527_25 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB527_31
# %bb.27:                               #   in Loop: Header=BB527_25 Depth=2
	bt	r12, rax
	jb	.LBB527_28
	.p2align	4, 0x90
.LBB527_31:                             #   in Loop: Header=BB527_19 Depth=1
	cmp	rbx, rdi
	jae	.LBB527_32
# %bb.36:                               #   in Loop: Header=BB527_19 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB527_37
# %bb.39:                               #   in Loop: Header=BB527_19 Depth=1
	add	rbx, 1
	cmp	rbx, rdi
	je	.LBB527_50
# %bb.40:                               #   in Loop: Header=BB527_19 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB527_48
	.p2align	4, 0x90
.LBB527_41:                             #   Parent Loop BB527_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB527_42
# %bb.46:                               #   in Loop: Header=BB527_41 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB527_41
# %bb.47:                               #   in Loop: Header=BB527_19 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB527_48
	.p2align	4, 0x90
.LBB527_45:                             #   in Loop: Header=BB527_42 Depth=2
	add	rbx, 1
.LBB527_42:                             #   Parent Loop BB527_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB527_50
# %bb.43:                               #   in Loop: Header=BB527_42 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB527_48
# %bb.44:                               #   in Loop: Header=BB527_42 Depth=2
	bt	r12, rax
	jb	.LBB527_45
	.p2align	4, 0x90
.LBB527_48:                             #   in Loop: Header=BB527_19 Depth=1
	cmp	rbx, rdi
	jae	.LBB527_49
# %bb.51:                               #   in Loop: Header=BB527_19 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 93
	jne	.LBB527_19
.LBB527_52:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB527_7:
	cmp	rdi, rbx
	je	.LBB527_16
# %bb.8:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB527_9:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB527_14
# %bb.10:                               #   in Loop: Header=BB527_9 Depth=1
	bt	rax, rcx
	jae	.LBB527_14
# %bb.11:                               #   in Loop: Header=BB527_9 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB527_9
.LBB527_16:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 44
	xor	r9d, r9d
	jmp	.LBB527_35
.LBB527_20:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB527_2
.LBB527_53:
	mov	rcx, r14
	mov	dl, 46
	mov	r8, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB527_32:
	mov	rdi, rbx
.LBB527_33:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB527_34
.LBB527_37:
	cmp	al, 93
	je	.LBB527_52
# %bb.38:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB527_2
.LBB527_49:
	mov	rdi, rbx
.LBB527_50:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
.LBB527_34:
	mov	r9, rsi
.LBB527_35:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB527_1:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 6
.LBB527_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB527_15:
	mov	rdi, rbx
	jmp	.LBB527_16
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB528_1
# %bb.2:
	mov	rsi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB528_15
# %bb.3:
	cmp	byte ptr [rdi], 32
	ja	.LBB528_13
# %bb.4:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB528_5:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB528_6
# %bb.11:                               #   in Loop: Header=BB528_5 Depth=1
	movdqu	xmm4, xmmword ptr [rdi]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdi, 16
	cmp	ax, -1
	je	.LBB528_5
# %bb.12:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
.LBB528_13:
	cmp	rdi, rsi
	jae	.LBB528_14
# %bb.16:
	mov	al, byte ptr [rdi]
	cmp	al, 34
	jne	.LBB528_17
# %bb.23:
	xor	ebx, ebx
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
.LBB528_24:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB528_31 Depth 2
                                        #     Child Loop BB528_32 Depth 2
                                        #     Child Loop BB528_47 Depth 2
                                        #     Child Loop BB528_48 Depth 2
                                        #     Child Loop BB528_61 Depth 2
                                        #     Child Loop BB528_62 Depth 2
                                        #     Child Loop BB528_75 Depth 2
                                        #     Child Loop BB528_76 Depth 2
	cmp	rbx, 2147483646
	je	.LBB528_25
# %bb.26:                               #   in Loop: Header=BB528_24 Depth=1
	add	rbx, 1
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r14
	je	.LBB528_27
# %bb.29:                               #   in Loop: Header=BB528_24 Depth=1
	cmp	rax, rsi
	je	.LBB528_40
# %bb.30:                               #   in Loop: Header=BB528_24 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB528_38
	.p2align	4, 0x90
.LBB528_31:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB528_32
# %bb.36:                               #   in Loop: Header=BB528_31 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB528_31
# %bb.37:                               #   in Loop: Header=BB528_24 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB528_38
	.p2align	4, 0x90
.LBB528_35:                             #   in Loop: Header=BB528_32 Depth=2
	add	rax, 1
.LBB528_32:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB528_40
# %bb.33:                               #   in Loop: Header=BB528_32 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB528_38
# %bb.34:                               #   in Loop: Header=BB528_32 Depth=2
	bt	r12, rcx
	jb	.LBB528_35
	.p2align	4, 0x90
.LBB528_38:                             #   in Loop: Header=BB528_24 Depth=1
	cmp	rax, rsi
	jae	.LBB528_39
# %bb.43:                               #   in Loop: Header=BB528_24 Depth=1
	cmp	byte ptr [rax], 58
	jne	.LBB528_44
# %bb.45:                               #   in Loop: Header=BB528_24 Depth=1
	add	rax, 1
	cmp	rax, rsi
	je	.LBB528_56
# %bb.46:                               #   in Loop: Header=BB528_24 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB528_54
	.p2align	4, 0x90
.LBB528_47:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB528_48
# %bb.52:                               #   in Loop: Header=BB528_47 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB528_47
# %bb.53:                               #   in Loop: Header=BB528_24 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB528_54
	.p2align	4, 0x90
.LBB528_51:                             #   in Loop: Header=BB528_48 Depth=2
	add	rax, 1
.LBB528_48:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB528_56
# %bb.49:                               #   in Loop: Header=BB528_48 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB528_54
# %bb.50:                               #   in Loop: Header=BB528_48 Depth=2
	bt	r12, rcx
	jb	.LBB528_51
	.p2align	4, 0x90
.LBB528_54:                             #   in Loop: Header=BB528_24 Depth=1
	cmp	rax, rsi
	jae	.LBB528_55
# %bb.57:                               #   in Loop: Header=BB528_24 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r14
	mov	rdx, rax
	call	qword ptr [r15 + 8*rdi]
	cmp	rax, r14
	je	.LBB528_58
# %bb.59:                               #   in Loop: Header=BB528_24 Depth=1
	mov	rdi, rax
	cmp	rax, rsi
	je	.LBB528_70
# %bb.60:                               #   in Loop: Header=BB528_24 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB528_68
	.p2align	4, 0x90
.LBB528_61:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB528_62
# %bb.66:                               #   in Loop: Header=BB528_61 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB528_61
# %bb.67:                               #   in Loop: Header=BB528_24 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB528_68
	.p2align	4, 0x90
.LBB528_65:                             #   in Loop: Header=BB528_62 Depth=2
	add	rdi, 1
.LBB528_62:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB528_70
# %bb.63:                               #   in Loop: Header=BB528_62 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB528_68
# %bb.64:                               #   in Loop: Header=BB528_62 Depth=2
	bt	r12, rax
	jb	.LBB528_65
	.p2align	4, 0x90
.LBB528_68:                             #   in Loop: Header=BB528_24 Depth=1
	cmp	rdi, rsi
	jae	.LBB528_69
# %bb.71:                               #   in Loop: Header=BB528_24 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 44
	jne	.LBB528_72
# %bb.73:                               #   in Loop: Header=BB528_24 Depth=1
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB528_84
# %bb.74:                               #   in Loop: Header=BB528_24 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB528_82
	.p2align	4, 0x90
.LBB528_75:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB528_76
# %bb.80:                               #   in Loop: Header=BB528_75 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB528_75
# %bb.81:                               #   in Loop: Header=BB528_24 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB528_82
	.p2align	4, 0x90
.LBB528_79:                             #   in Loop: Header=BB528_76 Depth=2
	add	rdi, 1
.LBB528_76:                             #   Parent Loop BB528_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB528_84
# %bb.77:                               #   in Loop: Header=BB528_76 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB528_82
# %bb.78:                               #   in Loop: Header=BB528_76 Depth=2
	bt	r12, rax
	jb	.LBB528_79
	.p2align	4, 0x90
.LBB528_82:                             #   in Loop: Header=BB528_24 Depth=1
	cmp	rdi, rsi
	jae	.LBB528_83
# %bb.85:                               #   in Loop: Header=BB528_24 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB528_24
.LBB528_72:
	cmp	al, 125
	je	.LBB528_19
	jmp	.LBB528_20
.LBB528_6:
	cmp	rsi, rdi
	je	.LBB528_15
# %bb.7:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB528_8:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdi]
	cmp	rcx, 32
	ja	.LBB528_13
# %bb.9:                                #   in Loop: Header=BB528_8 Depth=1
	bt	rax, rcx
	jae	.LBB528_13
# %bb.10:                               #   in Loop: Header=BB528_8 Depth=1
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB528_8
.LBB528_15:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB528_42
.LBB528_25:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB528_22
.LBB528_27:
	mov	rcx, r14
	mov	dl, 35
	jmp	.LBB528_28
.LBB528_1:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB528_22
.LBB528_17:
	cmp	al, 125
	jne	.LBB528_20
# %bb.18:
	xor	ebx, ebx
.LBB528_19:
	mov	rcx, r14
	mov	rdx, rbx
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB528_39:
	mov	rsi, rax
.LBB528_40:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 36
	jmp	.LBB528_41
.LBB528_44:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB528_21
.LBB528_20:
	mov	rcx, r14
	mov	rdx, rdi
.LBB528_21:
	mov	r8d, 1
.LBB528_22:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB528_55:
	mov	rsi, rax
.LBB528_56:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 38
	jmp	.LBB528_41
.LBB528_58:
	mov	rcx, r14
	mov	dl, 39
.LBB528_28:
	mov	r8, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB528_69:
	mov	rsi, rdi
.LBB528_70:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 40
	jmp	.LBB528_41
.LBB528_14:
	mov	rsi, rdi
	jmp	.LBB528_15
.LBB528_83:
	mov	rsi, rdi
.LBB528_84:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 41
.LBB528_41:
	mov	r9, rbx
.LBB528_42:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB529_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB529_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB529_17
	.p2align	4, 0x90
.LBB529_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB529_6
# %bb.12:                               #   in Loop: Header=BB529_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB529_13
	.p2align	4, 0x90
.LBB529_6:                              #   in Loop: Header=BB529_5 Depth=1
	mov	rax, rsi
.LBB529_13:                             #   in Loop: Header=BB529_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB529_14
# %bb.15:                               #   in Loop: Header=BB529_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB529_16
# %bb.18:                               #   in Loop: Header=BB529_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB529_5
	jmp	.LBB529_19
.LBB529_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB529_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB529_10
.LBB529_17:
	mov	rcx, rsi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB529_9:
	mov	rdx, rsi
.LBB529_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB529_11
.LBB529_19:
	add	rdx, 1
	mov	rax, rdx
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB529_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB529_2
.LBB529_16:
	mov	rcx, rsi
	mov	r8b, 7
.LBB529_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB529_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB529_2
.LBB529_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB529_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB530_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB530_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB530_17
	.p2align	4, 0x90
.LBB530_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB530_6
# %bb.12:                               #   in Loop: Header=BB530_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB530_13
	.p2align	4, 0x90
.LBB530_6:                              #   in Loop: Header=BB530_5 Depth=1
	mov	rax, rsi
.LBB530_13:                             #   in Loop: Header=BB530_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB530_14
# %bb.15:                               #   in Loop: Header=BB530_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB530_16
# %bb.18:                               #   in Loop: Header=BB530_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB530_5
	jmp	.LBB530_19
.LBB530_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB530_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB530_10
.LBB530_17:
	mov	rcx, rsi
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB530_9:
	mov	rdx, rsi
.LBB530_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB530_11
.LBB530_19:
	add	rdx, 1
	cmp	rdx, rdi
	je	.LBB530_32
# %bb.20:
	cmp	byte ptr [rdx], 32
	ja	.LBB530_30
# %bb.21:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB530_22:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB530_23
# %bb.28:                               #   in Loop: Header=BB530_22 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdx, 16
	cmp	ax, -1
	je	.LBB530_22
# %bb.29:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB530_30:
	cmp	rdx, rdi
	jae	.LBB530_31
# %bb.33:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r8 + 8*rax] # TAILCALL
.LBB530_23:
	cmp	rdi, rdx
	je	.LBB530_32
# %bb.24:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB530_25:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB530_30
# %bb.26:                               #   in Loop: Header=BB530_25 Depth=1
	bt	rax, rcx
	jae	.LBB530_30
# %bb.27:                               #   in Loop: Header=BB530_25 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB530_25
.LBB530_32:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
.LBB530_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB530_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB530_2
.LBB530_16:
	mov	rcx, rsi
	mov	r8b, 7
	jmp	.LBB530_2
.LBB530_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB530_2
.LBB530_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB530_2
.LBB530_31:
	mov	rdi, rdx
	jmp	.LBB530_32
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB531_1
# %bb.3:
	mov	rdi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rbx, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r15, 4294977024
.LBB531_4:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB531_6 Depth 2
                                        #     Child Loop BB531_7 Depth 2
	cmp	rbx, rdi
	je	.LBB531_15
# %bb.5:                                #   in Loop: Header=BB531_4 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB531_13
	.p2align	4, 0x90
.LBB531_6:                              #   Parent Loop BB531_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB531_7
# %bb.11:                               #   in Loop: Header=BB531_6 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB531_6
# %bb.12:                               #   in Loop: Header=BB531_4 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB531_13
	.p2align	4, 0x90
.LBB531_10:                             #   in Loop: Header=BB531_7 Depth=2
	add	rbx, 1
.LBB531_7:                              #   Parent Loop BB531_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB531_15
# %bb.8:                                #   in Loop: Header=BB531_7 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB531_13
# %bb.9:                                #   in Loop: Header=BB531_7 Depth=2
	bt	r15, rax
	jb	.LBB531_10
	.p2align	4, 0x90
.LBB531_13:                             #   in Loop: Header=BB531_4 Depth=1
	cmp	rbx, rdi
	jae	.LBB531_14
# %bb.16:                               #   in Loop: Header=BB531_4 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 47
	jne	.LBB531_17
# %bb.21:                               #   in Loop: Header=BB531_4 Depth=1
	mov	rcx, r14
	mov	rdx, rbx
	call	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rbx, rax
	cmp	rax, r14
	jne	.LBB531_4
# %bb.22:
	mov	rcx, r14
	mov	dl, 45
	xor	r8d, r8d
	jmp	.LBB531_26
.LBB531_17:
	xor	esi, esi
	cmp	al, 93
	je	.LBB531_59
# %bb.18:
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
.LBB531_19:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB531_27 Depth 2
                                        #       Child Loop BB531_29 Depth 3
                                        #       Child Loop BB531_30 Depth 3
                                        #     Child Loop BB531_48 Depth 2
                                        #     Child Loop BB531_49 Depth 2
	cmp	rsi, 2147483646
	je	.LBB531_20
# %bb.23:                               #   in Loop: Header=BB531_19 Depth=1
	add	rsi, 1
	movzx	eax, al
	mov	rcx, r14
	mov	rdx, rbx
	call	qword ptr [r12 + 8*rax]
	mov	rbx, rax
	cmp	rax, r14
	je	.LBB531_24
.LBB531_27:                             #   Parent Loop BB531_19 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB531_29 Depth 3
                                        #       Child Loop BB531_30 Depth 3
	cmp	rbx, rdi
	je	.LBB531_38
# %bb.28:                               #   in Loop: Header=BB531_27 Depth=2
	cmp	byte ptr [rbx], 32
	ja	.LBB531_36
	.p2align	4, 0x90
.LBB531_29:                             #   Parent Loop BB531_19 Depth=1
                                        #     Parent Loop BB531_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB531_30
# %bb.34:                               #   in Loop: Header=BB531_29 Depth=3
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB531_29
# %bb.35:                               #   in Loop: Header=BB531_27 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB531_36
	.p2align	4, 0x90
.LBB531_33:                             #   in Loop: Header=BB531_30 Depth=3
	add	rbx, 1
.LBB531_30:                             #   Parent Loop BB531_19 Depth=1
                                        #     Parent Loop BB531_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rdi, rbx
	je	.LBB531_38
# %bb.31:                               #   in Loop: Header=BB531_30 Depth=3
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB531_36
# %bb.32:                               #   in Loop: Header=BB531_30 Depth=3
	bt	r15, rax
	jb	.LBB531_33
	.p2align	4, 0x90
.LBB531_36:                             #   in Loop: Header=BB531_27 Depth=2
	cmp	rbx, rdi
	jae	.LBB531_37
# %bb.41:                               #   in Loop: Header=BB531_27 Depth=2
	mov	al, byte ptr [rbx]
	cmp	al, 44
	je	.LBB531_46
# %bb.42:                               #   in Loop: Header=BB531_27 Depth=2
	cmp	al, 93
	je	.LBB531_59
# %bb.43:                               #   in Loop: Header=BB531_27 Depth=2
	cmp	al, 47
	jne	.LBB531_60
# %bb.44:                               #   in Loop: Header=BB531_27 Depth=2
	mov	rcx, r14
	mov	rdx, rbx
	call	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rbx, rax
	cmp	rax, r14
	jne	.LBB531_27
	jmp	.LBB531_45
	.p2align	4, 0x90
.LBB531_46:                             #   in Loop: Header=BB531_19 Depth=1
	add	rbx, 1
	cmp	rbx, rdi
	je	.LBB531_57
# %bb.47:                               #   in Loop: Header=BB531_19 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB531_55
	.p2align	4, 0x90
.LBB531_48:                             #   Parent Loop BB531_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB531_49
# %bb.53:                               #   in Loop: Header=BB531_48 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB531_48
# %bb.54:                               #   in Loop: Header=BB531_19 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB531_55
	.p2align	4, 0x90
.LBB531_52:                             #   in Loop: Header=BB531_49 Depth=2
	add	rbx, 1
.LBB531_49:                             #   Parent Loop BB531_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB531_57
# %bb.50:                               #   in Loop: Header=BB531_49 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB531_55
# %bb.51:                               #   in Loop: Header=BB531_49 Depth=2
	bt	r15, rax
	jb	.LBB531_52
	.p2align	4, 0x90
.LBB531_55:                             #   in Loop: Header=BB531_19 Depth=1
	cmp	rbx, rdi
	jae	.LBB531_56
# %bb.58:                               #   in Loop: Header=BB531_19 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 93
	jne	.LBB531_19
.LBB531_59:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB531_20:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB531_2
.LBB531_24:
	mov	rcx, r14
	mov	dl, 46
.LBB531_25:
	mov	r8, rsi
.LBB531_26:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB531_37:
	mov	rdi, rbx
.LBB531_38:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB531_39
.LBB531_56:
	mov	rdi, rbx
.LBB531_57:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
.LBB531_39:
	mov	r9, rsi
	jmp	.LBB531_40
.LBB531_14:
	mov	rdi, rbx
.LBB531_15:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 44
	xor	r9d, r9d
.LBB531_40:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB531_1:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 6
.LBB531_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB531_60:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB531_2
.LBB531_45:
	mov	rcx, r14
	mov	dl, 49
	jmp	.LBB531_25
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r15, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB532_1
# %bb.2:
	mov	rbx, qword ptr [r15 + 160]
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rdi, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	rsi, 4294977024
.LBB532_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB532_5 Depth 2
                                        #     Child Loop BB532_6 Depth 2
	cmp	rdi, rbx
	je	.LBB532_14
# %bb.4:                                #   in Loop: Header=BB532_3 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB532_12
	.p2align	4, 0x90
.LBB532_5:                              #   Parent Loop BB532_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB532_6
# %bb.10:                               #   in Loop: Header=BB532_5 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB532_5
# %bb.11:                               #   in Loop: Header=BB532_3 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB532_12
	.p2align	4, 0x90
.LBB532_9:                              #   in Loop: Header=BB532_6 Depth=2
	add	rdi, 1
.LBB532_6:                              #   Parent Loop BB532_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB532_14
# %bb.7:                                #   in Loop: Header=BB532_6 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB532_12
# %bb.8:                                #   in Loop: Header=BB532_6 Depth=2
	bt	rsi, rax
	jb	.LBB532_9
	.p2align	4, 0x90
.LBB532_12:                             #   in Loop: Header=BB532_3 Depth=1
	cmp	rdi, rbx
	jae	.LBB532_13
# %bb.15:                               #   in Loop: Header=BB532_3 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB532_25
# %bb.16:                               #   in Loop: Header=BB532_3 Depth=1
	cmp	al, 125
	je	.LBB532_98
# %bb.17:                               #   in Loop: Header=BB532_3 Depth=1
	cmp	al, 47
	jne	.LBB532_20
# %bb.18:                               #   in Loop: Header=BB532_3 Depth=1
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB532_3
# %bb.19:
	mov	rcx, r15
	mov	dl, 34
	xor	r8d, r8d
	jmp	.LBB532_29
.LBB532_25:
	mov	r14d, 1
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB532_26
	.p2align	4, 0x90
.LBB532_81:                             #   Parent Loop BB532_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB532_83 Depth 3
                                        #       Child Loop BB532_84 Depth 3
	cmp	rdi, rbx
	je	.LBB532_92
# %bb.82:                               #   in Loop: Header=BB532_81 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB532_90
	.p2align	4, 0x90
.LBB532_83:                             #   Parent Loop BB532_26 Depth=1
                                        #     Parent Loop BB532_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB532_84
# %bb.88:                               #   in Loop: Header=BB532_83 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB532_83
# %bb.89:                               #   in Loop: Header=BB532_81 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB532_90
	.p2align	4, 0x90
.LBB532_87:                             #   in Loop: Header=BB532_84 Depth=3
	add	rdi, 1
.LBB532_84:                             #   Parent Loop BB532_26 Depth=1
                                        #     Parent Loop BB532_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB532_92
# %bb.85:                               #   in Loop: Header=BB532_84 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB532_90
# %bb.86:                               #   in Loop: Header=BB532_84 Depth=3
	bt	rsi, rax
	jb	.LBB532_87
	.p2align	4, 0x90
.LBB532_90:                             #   in Loop: Header=BB532_81 Depth=2
	cmp	rdi, rbx
	jae	.LBB532_91
# %bb.93:                               #   in Loop: Header=BB532_81 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB532_23
# %bb.94:                               #   in Loop: Header=BB532_81 Depth=2
	cmp	al, 125
	je	.LBB532_99
# %bb.95:                               #   in Loop: Header=BB532_81 Depth=2
	cmp	al, 47
	jne	.LBB532_20
# %bb.96:                               #   in Loop: Header=BB532_81 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB532_81
	jmp	.LBB532_97
	.p2align	4, 0x90
.LBB532_23:                             #   in Loop: Header=BB532_26 Depth=1
	add	r14, 1
	cmp	r14, 2147483647
	je	.LBB532_24
.LBB532_26:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB532_30 Depth 2
                                        #       Child Loop BB532_32 Depth 3
                                        #       Child Loop BB532_33 Depth 3
                                        #     Child Loop BB532_51 Depth 2
                                        #     Child Loop BB532_52 Depth 2
                                        #     Child Loop BB532_63 Depth 2
                                        #       Child Loop BB532_65 Depth 3
                                        #       Child Loop BB532_66 Depth 3
                                        #     Child Loop BB532_81 Depth 2
                                        #       Child Loop BB532_83 Depth 3
                                        #       Child Loop BB532_84 Depth 3
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB532_27
.LBB532_30:                             #   Parent Loop BB532_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB532_32 Depth 3
                                        #       Child Loop BB532_33 Depth 3
	cmp	rax, rbx
	je	.LBB532_41
# %bb.31:                               #   in Loop: Header=BB532_30 Depth=2
	cmp	byte ptr [rax], 32
	ja	.LBB532_39
	.p2align	4, 0x90
.LBB532_32:                             #   Parent Loop BB532_26 Depth=1
                                        #     Parent Loop BB532_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB532_33
# %bb.37:                               #   in Loop: Header=BB532_32 Depth=3
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB532_32
# %bb.38:                               #   in Loop: Header=BB532_30 Depth=2
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB532_39
	.p2align	4, 0x90
.LBB532_36:                             #   in Loop: Header=BB532_33 Depth=3
	add	rax, 1
.LBB532_33:                             #   Parent Loop BB532_26 Depth=1
                                        #     Parent Loop BB532_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rax
	je	.LBB532_41
# %bb.34:                               #   in Loop: Header=BB532_33 Depth=3
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB532_39
# %bb.35:                               #   in Loop: Header=BB532_33 Depth=3
	bt	rsi, rcx
	jb	.LBB532_36
	.p2align	4, 0x90
.LBB532_39:                             #   in Loop: Header=BB532_30 Depth=2
	cmp	rax, rbx
	jae	.LBB532_40
# %bb.44:                               #   in Loop: Header=BB532_30 Depth=2
	mov	cl, byte ptr [rax]
	cmp	cl, 58
	je	.LBB532_49
# %bb.45:                               #   in Loop: Header=BB532_30 Depth=2
	cmp	cl, 47
	jne	.LBB532_48
# %bb.46:                               #   in Loop: Header=BB532_30 Depth=2
	mov	rcx, r15
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	jne	.LBB532_30
	jmp	.LBB532_47
	.p2align	4, 0x90
.LBB532_49:                             #   in Loop: Header=BB532_26 Depth=1
	add	rax, 1
	cmp	rax, rbx
	je	.LBB532_60
# %bb.50:                               #   in Loop: Header=BB532_26 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB532_58
	.p2align	4, 0x90
.LBB532_51:                             #   Parent Loop BB532_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB532_52
# %bb.56:                               #   in Loop: Header=BB532_51 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB532_51
# %bb.57:                               #   in Loop: Header=BB532_26 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB532_58
	.p2align	4, 0x90
.LBB532_55:                             #   in Loop: Header=BB532_52 Depth=2
	add	rax, 1
.LBB532_52:                             #   Parent Loop BB532_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rax
	je	.LBB532_60
# %bb.53:                               #   in Loop: Header=BB532_52 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB532_58
# %bb.54:                               #   in Loop: Header=BB532_52 Depth=2
	bt	rsi, rcx
	jb	.LBB532_55
	.p2align	4, 0x90
.LBB532_58:                             #   in Loop: Header=BB532_26 Depth=1
	cmp	rax, rbx
	jae	.LBB532_59
# %bb.61:                               #   in Loop: Header=BB532_26 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r15
	mov	rdx, rax
	call	qword ptr [r12 + 8*rdi]
	mov	rdi, rax
	cmp	rax, r15
	je	.LBB532_62
.LBB532_63:                             #   Parent Loop BB532_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB532_65 Depth 3
                                        #       Child Loop BB532_66 Depth 3
	cmp	rdi, rbx
	je	.LBB532_74
# %bb.64:                               #   in Loop: Header=BB532_63 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB532_72
	.p2align	4, 0x90
.LBB532_65:                             #   Parent Loop BB532_26 Depth=1
                                        #     Parent Loop BB532_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB532_66
# %bb.70:                               #   in Loop: Header=BB532_65 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB532_65
# %bb.71:                               #   in Loop: Header=BB532_63 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB532_72
	.p2align	4, 0x90
.LBB532_69:                             #   in Loop: Header=BB532_66 Depth=3
	add	rdi, 1
.LBB532_66:                             #   Parent Loop BB532_26 Depth=1
                                        #     Parent Loop BB532_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB532_74
# %bb.67:                               #   in Loop: Header=BB532_66 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB532_72
# %bb.68:                               #   in Loop: Header=BB532_66 Depth=3
	bt	rsi, rax
	jb	.LBB532_69
	.p2align	4, 0x90
.LBB532_72:                             #   in Loop: Header=BB532_63 Depth=2
	cmp	rdi, rbx
	jae	.LBB532_73
# %bb.75:                               #   in Loop: Header=BB532_63 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 44
	je	.LBB532_80
# %bb.76:                               #   in Loop: Header=BB532_63 Depth=2
	cmp	al, 125
	je	.LBB532_99
# %bb.77:                               #   in Loop: Header=BB532_63 Depth=2
	cmp	al, 47
	jne	.LBB532_20
# %bb.78:                               #   in Loop: Header=BB532_63 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB532_63
	jmp	.LBB532_79
	.p2align	4, 0x90
.LBB532_80:                             #   in Loop: Header=BB532_26 Depth=1
	add	rdi, 1
	jmp	.LBB532_81
.LBB532_27:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB532_28
.LBB532_40:
	mov	rbx, rax
.LBB532_41:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 36
	jmp	.LBB532_42
.LBB532_59:
	mov	rbx, rax
.LBB532_60:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 38
	jmp	.LBB532_42
.LBB532_62:
	mov	rcx, r15
	mov	dl, 39
.LBB532_28:
	mov	r8, r14
.LBB532_29:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB532_73:
	mov	rbx, rdi
.LBB532_74:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 40
	jmp	.LBB532_42
.LBB532_1:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB532_22
.LBB532_91:
	mov	rbx, rdi
.LBB532_92:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 41
.LBB532_42:
	mov	r9, r14
.LBB532_43:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB532_24:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB532_22
.LBB532_13:
	mov	rbx, rdi
.LBB532_14:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB532_43
.LBB532_98:
	xor	r14d, r14d
.LBB532_99:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB532_48:
	mov	rcx, r15
	mov	rdx, rax
	jmp	.LBB532_21
.LBB532_20:
	mov	rcx, r15
	mov	rdx, rdi
.LBB532_21:
	mov	r8d, 1
.LBB532_22:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB532_47:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB532_28
.LBB532_97:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB532_28
.LBB532_79:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB532_28
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 160]
	add	rdi, 1
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rcx, rdi
	.p2align	4, 0x90
.LBB533_1:                              # =>This Inner Loop Header: Depth=1
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, 15
	jle	.LBB533_4
# %bb.2:                                #   in Loop: Header=BB533_1 Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	add	rcx, 16
	test	dx, dx
	je	.LBB533_1
# %bb.3:
	movzx	edx, dx
	bsf	edx, edx
	lea	rbx, [rcx + rdx]
	add	rbx, -16
	jmp	.LBB533_9
	.p2align	4, 0x90
.LBB533_6:                              #   in Loop: Header=BB533_4 Depth=1
	mov	rbx, rcx
	movzx	edx, byte ptr [rcx]
	cmp	dl, 34
	je	.LBB533_9
# %bb.7:                                #   in Loop: Header=BB533_4 Depth=1
	cmp	dl, 92
	je	.LBB533_9
# %bb.8:                                #   in Loop: Header=BB533_4 Depth=1
	lea	rcx, [rbx + 1]
	cmp	dl, 32
	jb	.LBB533_9
.LBB533_4:                              # =>This Inner Loop Header: Depth=1
	cmp	rax, rcx
	jne	.LBB533_6
# %bb.5:
	mov	rbx, rax
.LBB533_9:
	mov	rsi, rbx
	sub	rsi, rdi
	cmp	rsi, 2147483647
	jae	.LBB533_10
# %bb.12:
	cmp	rbx, rax
	jae	.LBB533_13
# %bb.18:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	jne	.LBB533_19
# %bb.26:
	mov	qword ptr [rsp + 40], rdi
	mov	qword ptr [rsp + 48], rsi
	lea	rdx, [rsp + 40]
	mov	rcx, r14
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rbx, 1
	mov	rax, rbx
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB533_10:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 27
.LBB533_11:
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB533_13:
	test	rsi, rsi
	je	.LBB533_17
# %bb.14:
	mov	r8, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r14 + 40]
	lea	rax, [rsi + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB533_16
# %bb.15:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB533_16:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r14 + 40], rsi
.LBB533_17:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 19
	mov	r9, rsi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB533_19:
	cmp	al, 92
	jne	.LBB533_25
# %bb.20:
	test	rsi, rsi
	je	.LBB533_24
# %bb.21:
	mov	r8, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r14 + 40]
	lea	rax, [rsi + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB533_23
# %bb.22:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB533_23:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r14 + 40], rsi
.LBB533_24:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8, rsi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	jmp	"??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB533_25:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB533_11
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB534_51
# %bb.1:
	mov	rbx, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	cmp	rdi, rbx
	je	.LBB534_39
# %bb.2:
	cmp	byte ptr [rdi], 32
	ja	.LBB534_7
# %bb.3:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB534_4:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB534_34
# %bb.5:                                #   in Loop: Header=BB534_4 Depth=1
	movdqu	xmm4, xmmword ptr [rdi]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdi, 16
	cmp	ax, -1
	je	.LBB534_4
# %bb.6:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
.LBB534_7:
	cmp	rdi, rbx
	jae	.LBB534_53
# %bb.8:
	cmp	byte ptr [rdi], 93
	je	.LBB534_54
# %bb.9:
	xor	esi, esi
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
	jmp	.LBB534_11
	.p2align	4, 0x90
.LBB534_10:                             #   in Loop: Header=BB534_11 Depth=1
	cmp	rdi, rbx
	jae	.LBB534_41
.LBB534_11:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB534_15 Depth 2
                                        #     Child Loop BB534_19 Depth 2
                                        #     Child Loop BB534_26 Depth 2
                                        #     Child Loop BB534_30 Depth 2
	cmp	rsi, 2147483646
	je	.LBB534_43
# %bb.12:                               #   in Loop: Header=BB534_11 Depth=1
	add	rsi, 1
	movzx	eax, byte ptr [rdi]
	mov	rcx, r14
	mov	rdx, rdi
	call	qword ptr [r15 + 8*rax]
	cmp	rax, r14
	je	.LBB534_44
# %bb.13:                               #   in Loop: Header=BB534_11 Depth=1
	mov	rdi, rax
	cmp	rax, rbx
	je	.LBB534_46
# %bb.14:                               #   in Loop: Header=BB534_11 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB534_22
	.p2align	4, 0x90
.LBB534_15:                             #   Parent Loop BB534_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB534_19
# %bb.16:                               #   in Loop: Header=BB534_15 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB534_15
# %bb.17:                               #   in Loop: Header=BB534_11 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB534_22
	.p2align	4, 0x90
.LBB534_18:                             #   in Loop: Header=BB534_19 Depth=2
	add	rdi, 1
.LBB534_19:                             #   Parent Loop BB534_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB534_46
# %bb.20:                               #   in Loop: Header=BB534_19 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB534_22
# %bb.21:                               #   in Loop: Header=BB534_19 Depth=2
	bt	r12, rax
	jb	.LBB534_18
	.p2align	4, 0x90
.LBB534_22:                             #   in Loop: Header=BB534_11 Depth=1
	cmp	rdi, rbx
	jae	.LBB534_45
# %bb.23:                               #   in Loop: Header=BB534_11 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 44
	jne	.LBB534_49
# %bb.24:                               #   in Loop: Header=BB534_11 Depth=1
	add	rdi, 1
	cmp	rdi, rbx
	je	.LBB534_40
# %bb.25:                               #   in Loop: Header=BB534_11 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB534_10
	.p2align	4, 0x90
.LBB534_26:                             #   Parent Loop BB534_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB534_29
# %bb.27:                               #   in Loop: Header=BB534_26 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB534_26
# %bb.28:                               #   in Loop: Header=BB534_11 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB534_10
	.p2align	4, 0x90
.LBB534_29:                             #   in Loop: Header=BB534_11 Depth=1
	cmp	rbx, rdi
	je	.LBB534_40
	.p2align	4, 0x90
.LBB534_30:                             #   Parent Loop BB534_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB534_10
# %bb.31:                               #   in Loop: Header=BB534_30 Depth=2
	bt	r12, rax
	jae	.LBB534_10
# %bb.32:                               #   in Loop: Header=BB534_30 Depth=2
	add	rdi, 1
	cmp	rbx, rdi
	jne	.LBB534_30
.LBB534_40:
	mov	rdi, rbx
.LBB534_41:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB534_47
.LBB534_34:
	cmp	rbx, rdi
	je	.LBB534_39
# %bb.35:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB534_36:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdi]
	cmp	rcx, 32
	ja	.LBB534_7
# %bb.37:                               #   in Loop: Header=BB534_36 Depth=1
	bt	rax, rcx
	jae	.LBB534_7
# %bb.38:                               #   in Loop: Header=BB534_36 Depth=1
	add	rdi, 1
	cmp	rbx, rdi
	jne	.LBB534_36
.LBB534_39:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 44
	xor	r9d, r9d
	jmp	.LBB534_48
.LBB534_43:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 25
	jmp	.LBB534_52
.LBB534_44:
	mov	rcx, r14
	mov	dl, 46
	mov	r8, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB534_45:
	mov	rbx, rdi
.LBB534_46:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 47
.LBB534_47:
	mov	r9, rsi
.LBB534_48:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB534_49:
	cmp	al, 93
	je	.LBB534_55
# %bb.50:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB534_52
.LBB534_51:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
.LBB534_52:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB534_53:
	mov	rbx, rdi
	jmp	.LBB534_39
.LBB534_54:
	xor	esi, esi
.LBB534_55:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB535_1
# %bb.2:
	mov	rsi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB535_15
# %bb.3:
	cmp	byte ptr [rdi], 32
	ja	.LBB535_13
# %bb.4:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB535_5:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB535_6
# %bb.11:                               #   in Loop: Header=BB535_5 Depth=1
	movdqu	xmm4, xmmword ptr [rdi]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdi, 16
	cmp	ax, -1
	je	.LBB535_5
# %bb.12:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
.LBB535_13:
	cmp	rdi, rsi
	jae	.LBB535_14
# %bb.16:
	mov	al, byte ptr [rdi]
	cmp	al, 34
	jne	.LBB535_17
# %bb.24:
	xor	ebx, ebx
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
.LBB535_25:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB535_32 Depth 2
                                        #     Child Loop BB535_33 Depth 2
                                        #     Child Loop BB535_48 Depth 2
                                        #     Child Loop BB535_49 Depth 2
                                        #     Child Loop BB535_62 Depth 2
                                        #     Child Loop BB535_63 Depth 2
                                        #     Child Loop BB535_76 Depth 2
                                        #     Child Loop BB535_77 Depth 2
	cmp	rbx, 2147483646
	je	.LBB535_26
# %bb.27:                               #   in Loop: Header=BB535_25 Depth=1
	add	rbx, 1
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r14
	je	.LBB535_28
# %bb.30:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	rax, rsi
	je	.LBB535_41
# %bb.31:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB535_39
	.p2align	4, 0x90
.LBB535_32:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB535_33
# %bb.37:                               #   in Loop: Header=BB535_32 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB535_32
# %bb.38:                               #   in Loop: Header=BB535_25 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB535_39
	.p2align	4, 0x90
.LBB535_36:                             #   in Loop: Header=BB535_33 Depth=2
	add	rax, 1
.LBB535_33:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB535_41
# %bb.34:                               #   in Loop: Header=BB535_33 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB535_39
# %bb.35:                               #   in Loop: Header=BB535_33 Depth=2
	bt	r12, rcx
	jb	.LBB535_36
	.p2align	4, 0x90
.LBB535_39:                             #   in Loop: Header=BB535_25 Depth=1
	cmp	rax, rsi
	jae	.LBB535_40
# %bb.44:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	byte ptr [rax], 58
	jne	.LBB535_45
# %bb.46:                               #   in Loop: Header=BB535_25 Depth=1
	add	rax, 1
	cmp	rax, rsi
	je	.LBB535_57
# %bb.47:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB535_55
	.p2align	4, 0x90
.LBB535_48:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB535_49
# %bb.53:                               #   in Loop: Header=BB535_48 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB535_48
# %bb.54:                               #   in Loop: Header=BB535_25 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB535_55
	.p2align	4, 0x90
.LBB535_52:                             #   in Loop: Header=BB535_49 Depth=2
	add	rax, 1
.LBB535_49:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB535_57
# %bb.50:                               #   in Loop: Header=BB535_49 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB535_55
# %bb.51:                               #   in Loop: Header=BB535_49 Depth=2
	bt	r12, rcx
	jb	.LBB535_52
	.p2align	4, 0x90
.LBB535_55:                             #   in Loop: Header=BB535_25 Depth=1
	cmp	rax, rsi
	jae	.LBB535_56
# %bb.58:                               #   in Loop: Header=BB535_25 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r14
	mov	rdx, rax
	call	qword ptr [r15 + 8*rdi]
	cmp	rax, r14
	je	.LBB535_59
# %bb.60:                               #   in Loop: Header=BB535_25 Depth=1
	mov	rdi, rax
	cmp	rax, rsi
	je	.LBB535_71
# %bb.61:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB535_69
	.p2align	4, 0x90
.LBB535_62:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB535_63
# %bb.67:                               #   in Loop: Header=BB535_62 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB535_62
# %bb.68:                               #   in Loop: Header=BB535_25 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB535_69
	.p2align	4, 0x90
.LBB535_66:                             #   in Loop: Header=BB535_63 Depth=2
	add	rdi, 1
.LBB535_63:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB535_71
# %bb.64:                               #   in Loop: Header=BB535_63 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB535_69
# %bb.65:                               #   in Loop: Header=BB535_63 Depth=2
	bt	r12, rax
	jb	.LBB535_66
	.p2align	4, 0x90
.LBB535_69:                             #   in Loop: Header=BB535_25 Depth=1
	cmp	rdi, rsi
	jae	.LBB535_70
# %bb.72:                               #   in Loop: Header=BB535_25 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 44
	jne	.LBB535_73
# %bb.74:                               #   in Loop: Header=BB535_25 Depth=1
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB535_85
# %bb.75:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB535_83
	.p2align	4, 0x90
.LBB535_76:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB535_77
# %bb.81:                               #   in Loop: Header=BB535_76 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB535_76
# %bb.82:                               #   in Loop: Header=BB535_25 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB535_83
	.p2align	4, 0x90
.LBB535_80:                             #   in Loop: Header=BB535_77 Depth=2
	add	rdi, 1
.LBB535_77:                             #   Parent Loop BB535_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB535_85
# %bb.78:                               #   in Loop: Header=BB535_77 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB535_83
# %bb.79:                               #   in Loop: Header=BB535_77 Depth=2
	bt	r12, rax
	jb	.LBB535_80
	.p2align	4, 0x90
.LBB535_83:                             #   in Loop: Header=BB535_25 Depth=1
	cmp	rdi, rsi
	jae	.LBB535_84
# %bb.20:                               #   in Loop: Header=BB535_25 Depth=1
	cmp	byte ptr [rdi], 34
	je	.LBB535_25
	jmp	.LBB535_21
.LBB535_6:
	cmp	rsi, rdi
	je	.LBB535_15
# %bb.7:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB535_8:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdi]
	cmp	rcx, 32
	ja	.LBB535_13
# %bb.9:                                #   in Loop: Header=BB535_8 Depth=1
	bt	rax, rcx
	jae	.LBB535_13
# %bb.10:                               #   in Loop: Header=BB535_8 Depth=1
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB535_8
.LBB535_15:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB535_43
.LBB535_26:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB535_23
.LBB535_28:
	mov	rcx, r14
	mov	dl, 35
	jmp	.LBB535_29
.LBB535_1:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB535_23
.LBB535_17:
	cmp	al, 125
	jne	.LBB535_21
# %bb.18:
	xor	ebx, ebx
	jmp	.LBB535_19
.LBB535_40:
	mov	rsi, rax
.LBB535_41:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 36
	jmp	.LBB535_42
.LBB535_45:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB535_22
.LBB535_56:
	mov	rsi, rax
.LBB535_57:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 38
	jmp	.LBB535_42
.LBB535_59:
	mov	rcx, r14
	mov	dl, 39
.LBB535_29:
	mov	r8, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB535_70:
	mov	rsi, rdi
.LBB535_71:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 40
	jmp	.LBB535_42
.LBB535_73:
	cmp	al, 125
	jne	.LBB535_21
.LBB535_19:
	mov	rcx, r14
	mov	rdx, rbx
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB535_21:
	mov	rcx, r14
	mov	rdx, rdi
.LBB535_22:
	mov	r8d, 1
.LBB535_23:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB535_14:
	mov	rsi, rdi
	jmp	.LBB535_15
.LBB535_84:
	mov	rsi, rdi
.LBB535_85:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 41
.LBB535_42:
	mov	r9, rbx
.LBB535_43:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2104
	.seh_stackalloc 2104
	.seh_endprologue
	mov	r15, r8
	mov	rdi, rdx
	mov	r13, rcx
	mov	r14, qword ptr [rcx + 160]
	mov	rax, r14
	sub	rax, rdx
	lea	r9, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r9, r14
	mov	qword ptr [rsp + 2096], 0
	lea	r12, [rip + .LJTI536_0]
	lea	r10, [rsp + 48]
	mov	r8d, 255
.LBB536_1:                              # =>This Inner Loop Header: Depth=1
	lea	rbx, [rdi + 1]
	cmp	rbx, r9
	jae	.LBB536_36
.LBB536_2:                              #   in Loop: Header=BB536_1 Depth=1
	movsx	eax, byte ptr [rbx]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB536_136
# %bb.3:                                #   in Loop: Header=BB536_1 Depth=1
	movsxd	rax, dword ptr [r12 + 4*rax]
	add	rax, r12
	jmp	rax
.LBB536_4:                              #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 34
	jmp	.LBB536_25
.LBB536_5:                              #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 9
	jmp	.LBB536_25
.LBB536_6:                              #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 92
	jmp	.LBB536_25
.LBB536_7:                              #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 13
	jmp	.LBB536_25
.LBB536_8:                              #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 47
	jmp	.LBB536_25
.LBB536_9:                              #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 8
	jmp	.LBB536_25
.LBB536_10:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 12
	jmp	.LBB536_25
.LBB536_11:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rax, r9
	sub	rax, rbx
	cmp	rax, 11
	jb	.LBB536_50
# %bb.12:                               #   in Loop: Header=BB536_1 Depth=1
	mov	ecx, dword ptr [rdi + 2]
	mov	eax, ecx
	shr	eax, 24
	lea	edx, [rax - 48]
	cmp	dl, 10
	jb	.LBB536_14
# %bb.13:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	edx, [rax - 65]
	add	al, -55
	cmp	dl, 6
	movzx	edx, al
	cmovae	edx, r8d
.LBB536_14:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, ecx
	shr	eax, 16
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB536_16
# %bb.15:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	ebp, al
	cmovae	ebp, r8d
.LBB536_16:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, ecx
	shr	eax, 8
	lea	esi, [rax - 48]
	cmp	sil, 10
	jb	.LBB536_18
# %bb.17:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	esi, [rax - 65]
	add	al, -55
	cmp	sil, 6
	movzx	esi, al
	cmovae	esi, r8d
.LBB536_18:                             #   in Loop: Header=BB536_1 Depth=1
	lea	eax, [rcx - 48]
	cmp	al, 10
	jb	.LBB536_20
# %bb.19:                               #   in Loop: Header=BB536_1 Depth=1
	and	cl, -33
	lea	eax, [rcx - 65]
	add	cl, -55
	cmp	al, 6
	movzx	eax, cl
	cmovae	eax, r8d
.LBB536_20:                             #   in Loop: Header=BB536_1 Depth=1
	mov	ecx, ebp
	or	cl, dl
	or	cl, sil
	or	cl, al
	cmp	cl, -1
	je	.LBB536_141
# %bb.21:                               #   in Loop: Header=BB536_1 Depth=1
	movsx	ecx, bpl
	movsx	ebp, sil
	movsx	eax, al
	movsx	edx, dl
	shl	eax, 12
	shl	ebp, 8
	shl	ecx, 4
	add	ecx, edx
	add	ecx, ebp
	add	ecx, eax
	mov	eax, ecx
	and	eax, -2048
	cmp	eax, 55296
	je	.LBB536_74
# %bb.22:                               #   in Loop: Header=BB536_1 Depth=1
	add	rdi, 6
	mov	rdx, qword ptr [rsp + 2096]
	cmp	ecx, 127
	ja	.LBB536_31
# %bb.23:                               #   in Loop: Header=BB536_1 Depth=1
	mov	byte ptr [rsp + rdx + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB536_26
.LBB536_24:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 10
	.p2align	4, 0x90
.LBB536_25:                             #   in Loop: Header=BB536_1 Depth=1
	add	rdi, 2
.LBB536_26:                             #   in Loop: Header=BB536_1 Depth=1
	cmp	rdi, r9
	jae	.LBB536_43
.LBB536_27:                             #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdi]
	cmp	al, 34
	je	.LBB536_133
# %bb.28:                               #   in Loop: Header=BB536_1 Depth=1
	cmp	al, 92
	je	.LBB536_1
# %bb.29:                               #   in Loop: Header=BB536_1 Depth=1
	cmp	al, 31
	jbe	.LBB536_152
# %bb.30:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rcx, qword ptr [rsp + 2096]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rsp + 2096], rdx
	mov	byte ptr [rsp + rcx + 48], al
	add	rdi, 1
	jmp	.LBB536_101
.LBB536_31:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB536_33
# %bb.32:                               #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + rdx + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB536_26
.LBB536_33:                             #   in Loop: Header=BB536_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB536_35
# %bb.34:                               #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB536_26
.LBB536_35:                             #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 51], cl
	add	qword ptr [rsp + 2096], 4
	jmp	.LBB536_26
.LBB536_36:                             #   in Loop: Header=BB536_1 Depth=1
	mov	r8, qword ptr [rsp + 2096]
	test	r8, r8
	je	.LBB536_102
# %bb.37:                               #   in Loop: Header=BB536_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r15
	cmp	r8, rax
	ja	.LBB536_144
# %bb.38:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [r8 + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB536_40
# %bb.39:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rcx, r13
	mov	rdx, r8
	mov	rsi, r10
	mov	rbp, r8
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, rbp
	mov	r10, rsi
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB536_40:                             #   in Loop: Header=BB536_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rsi, r10
	mov	rdx, r10
	mov	rbp, r8
	call	memcpy
	add	qword ptr [r13 + 40], rbp
	add	r15, rbp
	mov	qword ptr [rsp + 2096], 0
.LBB536_41:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rax, r14
	sub	rax, rbx
	lea	r9, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r9, r14
	cmp	rbx, r9
	mov	r8d, 255
	jae	.LBB536_145
# %bb.42:                               #   in Loop: Header=BB536_1 Depth=1
	mov	r10, rsi
	jmp	.LBB536_2
.LBB536_43:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rbx, qword ptr [rsp + 2096]
	test	rbx, rbx
	je	.LBB536_103
# %bb.44:                               #   in Loop: Header=BB536_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r15
	cmp	rbx, rax
	ja	.LBB536_139
# %bb.45:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB536_47
# %bb.46:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rcx, r13
	mov	rdx, rbx
	mov	rsi, r10
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r10, rsi
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB536_47:                             #   in Loop: Header=BB536_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rsi, r10
	mov	rdx, r10
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r13 + 40], rbx
	add	r15, rbx
	mov	qword ptr [rsp + 2096], 0
.LBB536_48:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rax, r14
	sub	rax, rdi
	lea	r9, [rdi + 2048]
	cmp	rax, 2048
	cmovbe	r9, r14
	cmp	r9, rdi
	mov	r8d, 255
	jbe	.LBB536_146
# %bb.49:                               #   in Loop: Header=BB536_1 Depth=1
	mov	r10, rsi
	jmp	.LBB536_27
.LBB536_50:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	test	rax, rax
	je	.LBB536_55
# %bb.51:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rsi, rax
	mov	eax, 2147483646
	sub	rax, r15
	cmp	rsi, rax
	ja	.LBB536_144
# %bb.52:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rsi + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB536_54
# %bb.53:                               #   in Loop: Header=BB536_1 Depth=1
	mov	rcx, r13
	mov	rdx, rsi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB536_54:                             #   in Loop: Header=BB536_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 48]
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r13 + 40], rsi
	add	r15, rsi
	mov	qword ptr [rsp + 2096], 0
	mov	rax, r14
	sub	rax, rbx
	lea	r9, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r9, r14
.LBB536_55:                             #   in Loop: Header=BB536_1 Depth=1
	lea	rdx, [rdi + 2]
	cmp	rdx, r9
	jae	.LBB536_148
# %bb.56:                               #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB536_59
# %bb.57:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB536_143
# %bb.58:                               #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_59:                             #   in Loop: Header=BB536_1 Depth=1
	movsx	ecx, cl
	lea	rdx, [rdi + 3]
	shl	ecx, 12
	mov	dword ptr [r13 + 144], ecx
	cmp	rdx, r9
	jae	.LBB536_155
# %bb.60:                               #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB536_63
# %bb.61:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB536_143
# %bb.62:                               #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_63:                             #   in Loop: Header=BB536_1 Depth=1
	movsx	ebp, bpl
	lea	rdx, [rdi + 4]
	shl	ebp, 8
	add	ebp, ecx
	mov	dword ptr [r13 + 144], ebp
	cmp	rdx, r9
	jae	.LBB536_156
# %bb.64:                               #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB536_67
# %bb.65:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB536_143
# %bb.66:                               #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_67:                             #   in Loop: Header=BB536_1 Depth=1
	movsx	ecx, cl
	lea	rdx, [rdi + 5]
	shl	ecx, 4
	add	ecx, ebp
	mov	dword ptr [r13 + 144], ecx
	cmp	rdx, r9
	jae	.LBB536_157
# %bb.68:                               #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB536_71
# %bb.69:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB536_143
# %bb.70:                               #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_71:                             #   in Loop: Header=BB536_1 Depth=1
	movsx	eax, bpl
	lea	rdx, [rdi + 6]
	add	ecx, eax
	mov	dword ptr [r13 + 144], ecx
	mov	eax, ecx
	and	eax, -2048
	cmp	eax, 55296
	je	.LBB536_104
# %bb.72:                               #   in Loop: Header=BB536_1 Depth=1
	cmp	ecx, 127
	ja	.LBB536_93
# %bb.73:                               #   in Loop: Header=BB536_1 Depth=1
	mov	byte ptr [rsp + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB536_99
.LBB536_74:                             #   in Loop: Header=BB536_1 Depth=1
	mov	r11d, 255
	cmp	ecx, 56320
	jae	.LBB536_149
# %bb.75:                               #   in Loop: Header=BB536_1 Depth=1
	cmp	byte ptr [rdi + 6], 92
	jne	.LBB536_150
# %bb.76:                               #   in Loop: Header=BB536_1 Depth=1
	cmp	byte ptr [rdi + 7], 117
	jne	.LBB536_151
# %bb.77:                               #   in Loop: Header=BB536_1 Depth=1
	mov	edx, dword ptr [rdi + 8]
	mov	eax, edx
	shr	eax, 24
	lea	r8d, [rax - 48]
	cmp	r8b, 10
	jb	.LBB536_79
# %bb.78:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	r8d, al
	cmovae	r8d, r11d
.LBB536_79:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, edx
	shr	eax, 16
	lea	ebx, [rax - 48]
	cmp	bl, 10
	jb	.LBB536_81
# %bb.80:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	ebx, al
	cmovae	ebx, r11d
.LBB536_81:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, edx
	shr	eax, 8
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB536_83
# %bb.82:                               #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	ebp, al
	cmovae	ebp, r11d
.LBB536_83:                             #   in Loop: Header=BB536_1 Depth=1
	lea	esi, [rdx - 48]
	cmp	sil, 10
	jb	.LBB536_85
# %bb.84:                               #   in Loop: Header=BB536_1 Depth=1
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	esi, dl
	cmovae	esi, r11d
.LBB536_85:                             #   in Loop: Header=BB536_1 Depth=1
	lea	rdx, [rdi + 8]
	mov	eax, ebx
	or	al, r8b
	or	al, bpl
	or	al, sil
	cmp	al, -1
	je	.LBB536_153
# %bb.86:                               #   in Loop: Header=BB536_1 Depth=1
	movsx	ebx, bl
	movsx	eax, bpl
	movsx	ebp, sil
	movsx	esi, r8b
	shl	ebp, 12
	shl	eax, 8
	shl	ebx, 4
	add	ebx, esi
	add	ebx, eax
	add	ebx, ebp
	mov	eax, ebx
	and	eax, -1024
	cmp	eax, 56320
	jne	.LBB536_154
# %bb.87:                               #   in Loop: Header=BB536_1 Depth=1
	add	rdi, 12
	shl	ecx, 10
	add	ecx, ebx
	add	ecx, -56613888
	mov	rdx, qword ptr [rsp + 2096]
	cmp	ecx, 127
	ja	.LBB536_89
# %bb.88:                               #   in Loop: Header=BB536_1 Depth=1
	mov	byte ptr [rsp + rdx + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB536_101
.LBB536_89:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB536_91
# %bb.90:                               #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + rdx + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB536_101
.LBB536_91:                             #   in Loop: Header=BB536_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB536_95
# %bb.92:                               #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB536_101
.LBB536_93:                             #   in Loop: Header=BB536_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB536_96
# %bb.94:                               #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB536_99
.LBB536_95:                             #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 51], cl
	add	qword ptr [rsp + 2096], 4
	jmp	.LBB536_101
.LBB536_96:                             #   in Loop: Header=BB536_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB536_98
# %bb.97:                               #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB536_99
.LBB536_98:                             #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 51], cl
	add	qword ptr [rsp + 2096], 4
.LBB536_99:                             #   in Loop: Header=BB536_1 Depth=1
	mov	rdi, rdx
.LBB536_100:                            #   in Loop: Header=BB536_1 Depth=1
	lea	r10, [rsp + 48]
.LBB536_101:                            #   in Loop: Header=BB536_1 Depth=1
	mov	r8d, 255
	jmp	.LBB536_26
.LBB536_102:                            #   in Loop: Header=BB536_1 Depth=1
	mov	rsi, r10
	jmp	.LBB536_41
.LBB536_103:                            #   in Loop: Header=BB536_1 Depth=1
	mov	rsi, r10
	jmp	.LBB536_48
.LBB536_104:                            #   in Loop: Header=BB536_1 Depth=1
	cmp	ecx, 56320
	jae	.LBB536_154
# %bb.105:                              #   in Loop: Header=BB536_1 Depth=1
	cmp	rdx, r9
	jae	.LBB536_158
# %bb.106:                              #   in Loop: Header=BB536_1 Depth=1
	cmp	byte ptr [rdx], 92
	jne	.LBB536_160
# %bb.107:                              #   in Loop: Header=BB536_1 Depth=1
	lea	rdx, [rdi + 7]
	cmp	rdx, r9
	jae	.LBB536_159
# %bb.108:                              #   in Loop: Header=BB536_1 Depth=1
	cmp	byte ptr [rdx], 117
	jne	.LBB536_160
# %bb.109:                              #   in Loop: Header=BB536_1 Depth=1
	lea	rdx, [rdi + 8]
	cmp	rdx, r9
	jae	.LBB536_161
# %bb.110:                              #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB536_113
# %bb.111:                              #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB536_143
# %bb.112:                              #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_113:                            #   in Loop: Header=BB536_1 Depth=1
	movsx	ebp, bpl
	lea	rdx, [rdi + 9]
	shl	ebp, 12
	mov	dword ptr [r13 + 148], ebp
	cmp	rdx, r9
	jae	.LBB536_162
# %bb.114:                              #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebx, [rax - 48]
	cmp	bl, 10
	jb	.LBB536_117
# %bb.115:                              #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebx, [rax - 65]
	cmp	bl, 5
	ja	.LBB536_143
# %bb.116:                              #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ebx, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_117:                            #   in Loop: Header=BB536_1 Depth=1
	movsx	ebx, bl
	lea	rdx, [rdi + 10]
	shl	ebx, 8
	add	ebx, ebp
	mov	dword ptr [r13 + 148], ebx
	cmp	rdx, r9
	jae	.LBB536_163
# %bb.118:                              #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB536_121
# %bb.119:                              #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB536_143
# %bb.120:                              #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_121:                            #   in Loop: Header=BB536_1 Depth=1
	movsx	ebp, bpl
	lea	rdx, [rdi + 11]
	shl	ebp, 4
	add	ebp, ebx
	mov	dword ptr [r13 + 148], ebp
	cmp	rdx, r9
	jae	.LBB536_164
# %bb.122:                              #   in Loop: Header=BB536_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebx, [rax - 48]
	cmp	bl, 10
	jb	.LBB536_125
# %bb.123:                              #   in Loop: Header=BB536_1 Depth=1
	and	al, -33
	lea	ebx, [rax - 65]
	cmp	bl, 5
	ja	.LBB536_143
# %bb.124:                              #   in Loop: Header=BB536_1 Depth=1
	add	al, -55
	mov	ebx, eax
	cmp	al, -1
	je	.LBB536_143
.LBB536_125:                            #   in Loop: Header=BB536_1 Depth=1
	movsx	eax, bl
	add	rdi, 12
	add	ebp, eax
	mov	dword ptr [r13 + 148], ebp
	mov	eax, ebp
	and	eax, -1024
	cmp	eax, 56320
	jne	.LBB536_165
# %bb.126:                              #   in Loop: Header=BB536_1 Depth=1
	shl	ecx, 10
	add	ecx, ebp
	add	ecx, -56613888
	cmp	ecx, 127
	ja	.LBB536_128
# %bb.127:                              #   in Loop: Header=BB536_1 Depth=1
	mov	byte ptr [rsp + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB536_100
.LBB536_128:                            #   in Loop: Header=BB536_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB536_130
# %bb.129:                              #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB536_100
.LBB536_130:                            #   in Loop: Header=BB536_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB536_132
# %bb.131:                              #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB536_100
.LBB536_132:                            #   in Loop: Header=BB536_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 51], cl
	add	qword ptr [rsp + 2096], 4
	jmp	.LBB536_100
.LBB536_133:
	mov	rax, qword ptr [rsp + 2096]
	mov	ecx, 2147483646
	sub	rcx, r15
	cmp	rax, rcx
	ja	.LBB536_139
# %bb.134:
	mov	qword ptr [rsp + 32], r10
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	mov	rcx, r13
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
.LBB536_135:
	mov	rax, rdi
	add	rsp, 2104
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB536_136:
	mov	rcx, r13
	mov	rdx, rbx
.LBB536_137:
	mov	r8d, 1
.LBB536_138:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rdi, rax
	jmp	.LBB536_135
.LBB536_139:
	mov	rcx, r13
	mov	rdx, rdi
.LBB536_140:
	mov	r8d, 27
	jmp	.LBB536_138
.LBB536_141:
	add	rdi, 2
	cmp	al, -1
	cmove	rdi, rbx
	lea	rax, [rdi + 1]
	cmp	sil, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	bpl, -1
.LBB536_142:
	cmove	rdx, rax
.LBB536_143:
	mov	rcx, r13
	mov	r8d, 16
	jmp	.LBB536_138
.LBB536_144:
	mov	rcx, r13
	mov	rdx, rbx
	jmp	.LBB536_140
.LBB536_145:
	mov	rcx, r13
	mov	rdx, rbx
	mov	r8b, 21
	jmp	.LBB536_147
.LBB536_146:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8b, 20
.LBB536_147:
	mov	r9, r15
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rdi, rax
	jmp	.LBB536_135
.LBB536_148:
	mov	rcx, r13
	mov	r8b, 22
	jmp	.LBB536_147
.LBB536_149:
	mov	rcx, r13
	mov	rdx, rbx
	mov	r8d, 11
	jmp	.LBB536_138
.LBB536_150:
	add	rdi, 6
	jmp	.LBB536_152
.LBB536_151:
	add	rdi, 7
.LBB536_152:
	mov	rcx, r13
	mov	rdx, rdi
	jmp	.LBB536_137
.LBB536_153:
	add	rdi, 9
	cmp	sil, -1
	cmove	rdi, rdx
	lea	rax, [rdi + 1]
	cmp	bpl, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	bl, -1
	jmp	.LBB536_142
.LBB536_154:
	mov	rcx, r13
	mov	r8d, 11
	jmp	.LBB536_138
.LBB536_155:
	mov	rcx, r13
	mov	r8b, 23
	jmp	.LBB536_147
.LBB536_156:
	mov	rcx, r13
	mov	r8b, 24
	jmp	.LBB536_147
.LBB536_157:
	mov	rcx, r13
	mov	r8b, 25
	jmp	.LBB536_147
.LBB536_158:
	mov	rcx, r13
	mov	r8b, 27
	jmp	.LBB536_147
.LBB536_159:
	mov	rcx, r13
	mov	r8b, 28
	jmp	.LBB536_147
.LBB536_160:
	mov	rcx, r13
	jmp	.LBB536_137
.LBB536_161:
	mov	rcx, r13
	mov	r8b, 29
	jmp	.LBB536_147
.LBB536_162:
	mov	rcx, r13
	mov	r8b, 30
	jmp	.LBB536_147
.LBB536_163:
	mov	rcx, r13
	mov	r8b, 31
	jmp	.LBB536_147
.LBB536_164:
	mov	rcx, r13
	mov	r8b, 32
	jmp	.LBB536_147
.LBB536_165:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8d, 16
	jmp	.LBB536_138
	.p2align	2, 0x90
.LJTI536_0:
	.long	.LBB536_4-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_8-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_6-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_9-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_10-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_24-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_7-.LJTI536_0
	.long	.LBB536_136-.LJTI536_0
	.long	.LBB536_5-.LJTI536_0
	.long	.LBB536_11-.LJTI536_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB537_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB537_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB537_17
	.p2align	4, 0x90
.LBB537_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB537_6
# %bb.12:                               #   in Loop: Header=BB537_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB537_13
	.p2align	4, 0x90
.LBB537_6:                              #   in Loop: Header=BB537_5 Depth=1
	mov	rax, rsi
.LBB537_13:                             #   in Loop: Header=BB537_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB537_14
# %bb.15:                               #   in Loop: Header=BB537_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB537_16
# %bb.18:                               #   in Loop: Header=BB537_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB537_5
	jmp	.LBB537_19
.LBB537_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB537_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB537_10
.LBB537_17:
	mov	rcx, rsi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB537_9:
	mov	rdx, rsi
.LBB537_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB537_11
.LBB537_19:
	add	rdx, 1
	mov	rax, rdx
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB537_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB537_2
.LBB537_16:
	mov	rcx, rsi
	mov	r8b, 7
.LBB537_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB537_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB537_2
.LBB537_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB537_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 160]
	add	rdi, 1
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rcx, rdi
	.p2align	4, 0x90
.LBB538_1:                              # =>This Inner Loop Header: Depth=1
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, 15
	jle	.LBB538_4
# %bb.2:                                #   in Loop: Header=BB538_1 Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	add	rcx, 16
	test	dx, dx
	je	.LBB538_1
# %bb.3:
	movzx	edx, dx
	bsf	edx, edx
	lea	rbx, [rcx + rdx]
	add	rbx, -16
	jmp	.LBB538_9
	.p2align	4, 0x90
.LBB538_6:                              #   in Loop: Header=BB538_4 Depth=1
	mov	rbx, rcx
	movzx	edx, byte ptr [rcx]
	cmp	dl, 34
	je	.LBB538_9
# %bb.7:                                #   in Loop: Header=BB538_4 Depth=1
	cmp	dl, 92
	je	.LBB538_9
# %bb.8:                                #   in Loop: Header=BB538_4 Depth=1
	lea	rcx, [rbx + 1]
	cmp	dl, 32
	jb	.LBB538_9
.LBB538_4:                              # =>This Inner Loop Header: Depth=1
	cmp	rax, rcx
	jne	.LBB538_6
# %bb.5:
	mov	rbx, rax
.LBB538_9:
	mov	rsi, rbx
	sub	rsi, rdi
	cmp	rsi, 2147483647
	jae	.LBB538_10
# %bb.12:
	cmp	rbx, rax
	jae	.LBB538_13
# %bb.18:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	jne	.LBB538_19
# %bb.26:
	mov	qword ptr [rsp + 40], rdi
	mov	qword ptr [rsp + 48], rsi
	lea	rdx, [rsp + 40]
	mov	rcx, r14
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rbx, 1
	mov	rax, rbx
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB538_10:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 26
.LBB538_11:
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB538_13:
	test	rsi, rsi
	je	.LBB538_17
# %bb.14:
	mov	r8, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r14 + 40]
	lea	rax, [rsi + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB538_16
# %bb.15:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB538_16:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r14 + 40], rsi
.LBB538_17:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 19
	mov	r9, rsi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB538_19:
	cmp	al, 92
	jne	.LBB538_25
# %bb.20:
	test	rsi, rsi
	je	.LBB538_24
# %bb.21:
	mov	r8, qword ptr [r14 + 24]
	mov	rdx, qword ptr [r14 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r14 + 40]
	lea	rax, [rsi + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB538_23
# %bb.22:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r14 + 24]
	mov	rcx, qword ptr [r14 + 40]
.LBB538_23:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r14 + 40], rsi
.LBB538_24:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8, rsi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	jmp	"??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB538_25:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB538_11
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2104
	.seh_stackalloc 2104
	.seh_endprologue
	mov	r15, r8
	mov	rdi, rdx
	mov	r13, rcx
	mov	r14, qword ptr [rcx + 160]
	mov	rax, r14
	sub	rax, rdx
	lea	r9, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r9, r14
	mov	qword ptr [rsp + 2096], 0
	lea	r12, [rip + .LJTI539_0]
	lea	r10, [rsp + 48]
	mov	r8d, 255
.LBB539_1:                              # =>This Inner Loop Header: Depth=1
	lea	rbx, [rdi + 1]
	cmp	rbx, r9
	jae	.LBB539_36
.LBB539_2:                              #   in Loop: Header=BB539_1 Depth=1
	movsx	eax, byte ptr [rbx]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB539_136
# %bb.3:                                #   in Loop: Header=BB539_1 Depth=1
	movsxd	rax, dword ptr [r12 + 4*rax]
	add	rax, r12
	jmp	rax
.LBB539_4:                              #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 34
	jmp	.LBB539_25
.LBB539_5:                              #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 9
	jmp	.LBB539_25
.LBB539_6:                              #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 92
	jmp	.LBB539_25
.LBB539_7:                              #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 13
	jmp	.LBB539_25
.LBB539_8:                              #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 47
	jmp	.LBB539_25
.LBB539_9:                              #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 8
	jmp	.LBB539_25
.LBB539_10:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 12
	jmp	.LBB539_25
.LBB539_11:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rax, r9
	sub	rax, rbx
	cmp	rax, 11
	jb	.LBB539_50
# %bb.12:                               #   in Loop: Header=BB539_1 Depth=1
	mov	ecx, dword ptr [rdi + 2]
	mov	eax, ecx
	shr	eax, 24
	lea	edx, [rax - 48]
	cmp	dl, 10
	jb	.LBB539_14
# %bb.13:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	edx, [rax - 65]
	add	al, -55
	cmp	dl, 6
	movzx	edx, al
	cmovae	edx, r8d
.LBB539_14:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, ecx
	shr	eax, 16
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB539_16
# %bb.15:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	ebp, al
	cmovae	ebp, r8d
.LBB539_16:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, ecx
	shr	eax, 8
	lea	esi, [rax - 48]
	cmp	sil, 10
	jb	.LBB539_18
# %bb.17:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	esi, [rax - 65]
	add	al, -55
	cmp	sil, 6
	movzx	esi, al
	cmovae	esi, r8d
.LBB539_18:                             #   in Loop: Header=BB539_1 Depth=1
	lea	eax, [rcx - 48]
	cmp	al, 10
	jb	.LBB539_20
# %bb.19:                               #   in Loop: Header=BB539_1 Depth=1
	and	cl, -33
	lea	eax, [rcx - 65]
	add	cl, -55
	cmp	al, 6
	movzx	eax, cl
	cmovae	eax, r8d
.LBB539_20:                             #   in Loop: Header=BB539_1 Depth=1
	mov	ecx, ebp
	or	cl, dl
	or	cl, sil
	or	cl, al
	cmp	cl, -1
	je	.LBB539_141
# %bb.21:                               #   in Loop: Header=BB539_1 Depth=1
	movsx	ecx, bpl
	movsx	ebp, sil
	movsx	eax, al
	movsx	edx, dl
	shl	eax, 12
	shl	ebp, 8
	shl	ecx, 4
	add	ecx, edx
	add	ecx, ebp
	add	ecx, eax
	mov	eax, ecx
	and	eax, -2048
	cmp	eax, 55296
	je	.LBB539_74
# %bb.22:                               #   in Loop: Header=BB539_1 Depth=1
	add	rdi, 6
	mov	rdx, qword ptr [rsp + 2096]
	cmp	ecx, 127
	ja	.LBB539_31
# %bb.23:                               #   in Loop: Header=BB539_1 Depth=1
	mov	byte ptr [rsp + rdx + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB539_26
.LBB539_24:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2096], rcx
	mov	byte ptr [rsp + rax + 48], 10
	.p2align	4, 0x90
.LBB539_25:                             #   in Loop: Header=BB539_1 Depth=1
	add	rdi, 2
.LBB539_26:                             #   in Loop: Header=BB539_1 Depth=1
	cmp	rdi, r9
	jae	.LBB539_43
.LBB539_27:                             #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdi]
	cmp	al, 34
	je	.LBB539_133
# %bb.28:                               #   in Loop: Header=BB539_1 Depth=1
	cmp	al, 92
	je	.LBB539_1
# %bb.29:                               #   in Loop: Header=BB539_1 Depth=1
	cmp	al, 31
	jbe	.LBB539_152
# %bb.30:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rcx, qword ptr [rsp + 2096]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rsp + 2096], rdx
	mov	byte ptr [rsp + rcx + 48], al
	add	rdi, 1
	jmp	.LBB539_101
.LBB539_31:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB539_33
# %bb.32:                               #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + rdx + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB539_26
.LBB539_33:                             #   in Loop: Header=BB539_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB539_35
# %bb.34:                               #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB539_26
.LBB539_35:                             #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 51], cl
	add	qword ptr [rsp + 2096], 4
	jmp	.LBB539_26
.LBB539_36:                             #   in Loop: Header=BB539_1 Depth=1
	mov	r8, qword ptr [rsp + 2096]
	test	r8, r8
	je	.LBB539_102
# %bb.37:                               #   in Loop: Header=BB539_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r15
	cmp	r8, rax
	ja	.LBB539_144
# %bb.38:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [r8 + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB539_40
# %bb.39:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rcx, r13
	mov	rdx, r8
	mov	rsi, r10
	mov	rbp, r8
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, rbp
	mov	r10, rsi
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB539_40:                             #   in Loop: Header=BB539_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rsi, r10
	mov	rdx, r10
	mov	rbp, r8
	call	memcpy
	add	qword ptr [r13 + 40], rbp
	add	r15, rbp
	mov	qword ptr [rsp + 2096], 0
.LBB539_41:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rax, r14
	sub	rax, rbx
	lea	r9, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r9, r14
	cmp	rbx, r9
	mov	r8d, 255
	jae	.LBB539_145
# %bb.42:                               #   in Loop: Header=BB539_1 Depth=1
	mov	r10, rsi
	jmp	.LBB539_2
.LBB539_43:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rbx, qword ptr [rsp + 2096]
	test	rbx, rbx
	je	.LBB539_103
# %bb.44:                               #   in Loop: Header=BB539_1 Depth=1
	mov	eax, 2147483646
	sub	rax, r15
	cmp	rbx, rax
	ja	.LBB539_139
# %bb.45:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB539_47
# %bb.46:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rcx, r13
	mov	rdx, rbx
	mov	rsi, r10
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r10, rsi
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB539_47:                             #   in Loop: Header=BB539_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	mov	rsi, r10
	mov	rdx, r10
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r13 + 40], rbx
	add	r15, rbx
	mov	qword ptr [rsp + 2096], 0
.LBB539_48:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rax, r14
	sub	rax, rdi
	lea	r9, [rdi + 2048]
	cmp	rax, 2048
	cmovbe	r9, r14
	cmp	r9, rdi
	mov	r8d, 255
	jbe	.LBB539_146
# %bb.49:                               #   in Loop: Header=BB539_1 Depth=1
	mov	r10, rsi
	jmp	.LBB539_27
.LBB539_50:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [rsp + 2096]
	test	rax, rax
	je	.LBB539_55
# %bb.51:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rsi, rax
	mov	eax, 2147483646
	sub	rax, r15
	cmp	rsi, rax
	ja	.LBB539_144
# %bb.52:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rax, qword ptr [r13 + 24]
	mov	rdx, qword ptr [r13 + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [r13 + 40]
	lea	rbp, [rsi + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB539_54
# %bb.53:                               #   in Loop: Header=BB539_1 Depth=1
	mov	rcx, r13
	mov	rdx, rsi
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [r13 + 24]
	mov	rcx, qword ptr [r13 + 40]
.LBB539_54:                             #   in Loop: Header=BB539_1 Depth=1
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 48]
	mov	r8, rsi
	call	memcpy
	add	qword ptr [r13 + 40], rsi
	add	r15, rsi
	mov	qword ptr [rsp + 2096], 0
	mov	rax, r14
	sub	rax, rbx
	lea	r9, [rdi + 2049]
	cmp	rax, 2048
	cmovbe	r9, r14
.LBB539_55:                             #   in Loop: Header=BB539_1 Depth=1
	lea	rdx, [rdi + 2]
	cmp	rdx, r9
	jae	.LBB539_148
# %bb.56:                               #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB539_59
# %bb.57:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB539_143
# %bb.58:                               #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_59:                             #   in Loop: Header=BB539_1 Depth=1
	movsx	ecx, cl
	lea	rdx, [rdi + 3]
	shl	ecx, 12
	mov	dword ptr [r13 + 144], ecx
	cmp	rdx, r9
	jae	.LBB539_155
# %bb.60:                               #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB539_63
# %bb.61:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB539_143
# %bb.62:                               #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_63:                             #   in Loop: Header=BB539_1 Depth=1
	movsx	ebp, bpl
	lea	rdx, [rdi + 4]
	shl	ebp, 8
	add	ebp, ecx
	mov	dword ptr [r13 + 144], ebp
	cmp	rdx, r9
	jae	.LBB539_156
# %bb.64:                               #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB539_67
# %bb.65:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB539_143
# %bb.66:                               #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_67:                             #   in Loop: Header=BB539_1 Depth=1
	movsx	ecx, cl
	lea	rdx, [rdi + 5]
	shl	ecx, 4
	add	ecx, ebp
	mov	dword ptr [r13 + 144], ecx
	cmp	rdx, r9
	jae	.LBB539_157
# %bb.68:                               #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB539_71
# %bb.69:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB539_143
# %bb.70:                               #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_71:                             #   in Loop: Header=BB539_1 Depth=1
	movsx	eax, bpl
	lea	rdx, [rdi + 6]
	add	ecx, eax
	mov	dword ptr [r13 + 144], ecx
	mov	eax, ecx
	and	eax, -2048
	cmp	eax, 55296
	je	.LBB539_104
# %bb.72:                               #   in Loop: Header=BB539_1 Depth=1
	cmp	ecx, 127
	ja	.LBB539_93
# %bb.73:                               #   in Loop: Header=BB539_1 Depth=1
	mov	byte ptr [rsp + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB539_99
.LBB539_74:                             #   in Loop: Header=BB539_1 Depth=1
	mov	r11d, 255
	cmp	ecx, 56320
	jae	.LBB539_149
# %bb.75:                               #   in Loop: Header=BB539_1 Depth=1
	cmp	byte ptr [rdi + 6], 92
	jne	.LBB539_150
# %bb.76:                               #   in Loop: Header=BB539_1 Depth=1
	cmp	byte ptr [rdi + 7], 117
	jne	.LBB539_151
# %bb.77:                               #   in Loop: Header=BB539_1 Depth=1
	mov	edx, dword ptr [rdi + 8]
	mov	eax, edx
	shr	eax, 24
	lea	r8d, [rax - 48]
	cmp	r8b, 10
	jb	.LBB539_79
# %bb.78:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	r8d, al
	cmovae	r8d, r11d
.LBB539_79:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, edx
	shr	eax, 16
	lea	ebx, [rax - 48]
	cmp	bl, 10
	jb	.LBB539_81
# %bb.80:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	ebx, al
	cmovae	ebx, r11d
.LBB539_81:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, edx
	shr	eax, 8
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB539_83
# %bb.82:                               #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	add	al, -55
	cmp	bpl, 6
	movzx	ebp, al
	cmovae	ebp, r11d
.LBB539_83:                             #   in Loop: Header=BB539_1 Depth=1
	lea	esi, [rdx - 48]
	cmp	sil, 10
	jb	.LBB539_85
# %bb.84:                               #   in Loop: Header=BB539_1 Depth=1
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	esi, dl
	cmovae	esi, r11d
.LBB539_85:                             #   in Loop: Header=BB539_1 Depth=1
	lea	rdx, [rdi + 8]
	mov	eax, ebx
	or	al, r8b
	or	al, bpl
	or	al, sil
	cmp	al, -1
	je	.LBB539_153
# %bb.86:                               #   in Loop: Header=BB539_1 Depth=1
	movsx	ebx, bl
	movsx	eax, bpl
	movsx	ebp, sil
	movsx	esi, r8b
	shl	ebp, 12
	shl	eax, 8
	shl	ebx, 4
	add	ebx, esi
	add	ebx, eax
	add	ebx, ebp
	mov	eax, ebx
	and	eax, -1024
	cmp	eax, 56320
	jne	.LBB539_154
# %bb.87:                               #   in Loop: Header=BB539_1 Depth=1
	add	rdi, 12
	shl	ecx, 10
	add	ecx, ebx
	add	ecx, -56613888
	mov	rdx, qword ptr [rsp + 2096]
	cmp	ecx, 127
	ja	.LBB539_89
# %bb.88:                               #   in Loop: Header=BB539_1 Depth=1
	mov	byte ptr [rsp + rdx + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB539_101
.LBB539_89:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB539_91
# %bb.90:                               #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + rdx + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB539_101
.LBB539_91:                             #   in Loop: Header=BB539_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB539_95
# %bb.92:                               #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB539_101
.LBB539_93:                             #   in Loop: Header=BB539_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB539_96
# %bb.94:                               #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB539_99
.LBB539_95:                             #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + rdx + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rdx + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + rdx + 51], cl
	add	qword ptr [rsp + 2096], 4
	jmp	.LBB539_101
.LBB539_96:                             #   in Loop: Header=BB539_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB539_98
# %bb.97:                               #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB539_99
.LBB539_98:                             #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 51], cl
	add	qword ptr [rsp + 2096], 4
.LBB539_99:                             #   in Loop: Header=BB539_1 Depth=1
	mov	rdi, rdx
.LBB539_100:                            #   in Loop: Header=BB539_1 Depth=1
	lea	r10, [rsp + 48]
.LBB539_101:                            #   in Loop: Header=BB539_1 Depth=1
	mov	r8d, 255
	jmp	.LBB539_26
.LBB539_102:                            #   in Loop: Header=BB539_1 Depth=1
	mov	rsi, r10
	jmp	.LBB539_41
.LBB539_103:                            #   in Loop: Header=BB539_1 Depth=1
	mov	rsi, r10
	jmp	.LBB539_48
.LBB539_104:                            #   in Loop: Header=BB539_1 Depth=1
	cmp	ecx, 56320
	jae	.LBB539_154
# %bb.105:                              #   in Loop: Header=BB539_1 Depth=1
	cmp	rdx, r9
	jae	.LBB539_158
# %bb.106:                              #   in Loop: Header=BB539_1 Depth=1
	cmp	byte ptr [rdx], 92
	jne	.LBB539_160
# %bb.107:                              #   in Loop: Header=BB539_1 Depth=1
	lea	rdx, [rdi + 7]
	cmp	rdx, r9
	jae	.LBB539_159
# %bb.108:                              #   in Loop: Header=BB539_1 Depth=1
	cmp	byte ptr [rdx], 117
	jne	.LBB539_160
# %bb.109:                              #   in Loop: Header=BB539_1 Depth=1
	lea	rdx, [rdi + 8]
	cmp	rdx, r9
	jae	.LBB539_161
# %bb.110:                              #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB539_113
# %bb.111:                              #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB539_143
# %bb.112:                              #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_113:                            #   in Loop: Header=BB539_1 Depth=1
	movsx	ebp, bpl
	lea	rdx, [rdi + 9]
	shl	ebp, 12
	mov	dword ptr [r13 + 148], ebp
	cmp	rdx, r9
	jae	.LBB539_162
# %bb.114:                              #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebx, [rax - 48]
	cmp	bl, 10
	jb	.LBB539_117
# %bb.115:                              #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebx, [rax - 65]
	cmp	bl, 5
	ja	.LBB539_143
# %bb.116:                              #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ebx, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_117:                            #   in Loop: Header=BB539_1 Depth=1
	movsx	ebx, bl
	lea	rdx, [rdi + 10]
	shl	ebx, 8
	add	ebx, ebp
	mov	dword ptr [r13 + 148], ebx
	cmp	rdx, r9
	jae	.LBB539_163
# %bb.118:                              #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB539_121
# %bb.119:                              #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebp, [rax - 65]
	cmp	bpl, 5
	ja	.LBB539_143
# %bb.120:                              #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ebp, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_121:                            #   in Loop: Header=BB539_1 Depth=1
	movsx	ebp, bpl
	lea	rdx, [rdi + 11]
	shl	ebp, 4
	add	ebp, ebx
	mov	dword ptr [r13 + 148], ebp
	cmp	rdx, r9
	jae	.LBB539_164
# %bb.122:                              #   in Loop: Header=BB539_1 Depth=1
	movzx	eax, byte ptr [rdx]
	lea	ebx, [rax - 48]
	cmp	bl, 10
	jb	.LBB539_125
# %bb.123:                              #   in Loop: Header=BB539_1 Depth=1
	and	al, -33
	lea	ebx, [rax - 65]
	cmp	bl, 5
	ja	.LBB539_143
# %bb.124:                              #   in Loop: Header=BB539_1 Depth=1
	add	al, -55
	mov	ebx, eax
	cmp	al, -1
	je	.LBB539_143
.LBB539_125:                            #   in Loop: Header=BB539_1 Depth=1
	movsx	eax, bl
	add	rdi, 12
	add	ebp, eax
	mov	dword ptr [r13 + 148], ebp
	mov	eax, ebp
	and	eax, -1024
	cmp	eax, 56320
	jne	.LBB539_165
# %bb.126:                              #   in Loop: Header=BB539_1 Depth=1
	shl	ecx, 10
	add	ecx, ebp
	add	ecx, -56613888
	cmp	ecx, 127
	ja	.LBB539_128
# %bb.127:                              #   in Loop: Header=BB539_1 Depth=1
	mov	byte ptr [rsp + 48], cl
	add	qword ptr [rsp + 2096], 1
	jmp	.LBB539_100
.LBB539_128:                            #   in Loop: Header=BB539_1 Depth=1
	mov	eax, ecx
	cmp	ecx, 2047
	ja	.LBB539_130
# %bb.129:                              #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 6
	or	al, -64
	mov	byte ptr [rsp + 48], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 49], cl
	add	qword ptr [rsp + 2096], 2
	jmp	.LBB539_100
.LBB539_130:                            #   in Loop: Header=BB539_1 Depth=1
	cmp	ecx, 65535
	ja	.LBB539_132
# %bb.131:                              #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 12
	or	al, -32
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 50], cl
	add	qword ptr [rsp + 2096], 3
	jmp	.LBB539_100
.LBB539_132:                            #   in Loop: Header=BB539_1 Depth=1
	shr	eax, 18
	or	al, -16
	mov	byte ptr [rsp + 48], al
	mov	eax, ecx
	shr	eax, 12
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 49], al
	mov	eax, ecx
	shr	eax, 6
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 50], al
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 51], cl
	add	qword ptr [rsp + 2096], 4
	jmp	.LBB539_100
.LBB539_133:
	mov	rax, qword ptr [rsp + 2096]
	mov	ecx, 2147483646
	sub	rcx, r15
	cmp	rax, rcx
	ja	.LBB539_139
# %bb.134:
	mov	qword ptr [rsp + 32], r10
	mov	qword ptr [rsp + 40], rax
	lea	rdx, [rsp + 32]
	mov	rcx, r13
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
.LBB539_135:
	mov	rax, rdi
	add	rsp, 2104
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB539_136:
	mov	rcx, r13
	mov	rdx, rbx
.LBB539_137:
	mov	r8d, 1
.LBB539_138:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rdi, rax
	jmp	.LBB539_135
.LBB539_139:
	mov	rcx, r13
	mov	rdx, rdi
.LBB539_140:
	mov	r8d, 26
	jmp	.LBB539_138
.LBB539_141:
	add	rdi, 2
	cmp	al, -1
	cmove	rdi, rbx
	lea	rax, [rdi + 1]
	cmp	sil, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	bpl, -1
.LBB539_142:
	cmove	rdx, rax
.LBB539_143:
	mov	rcx, r13
	mov	r8d, 16
	jmp	.LBB539_138
.LBB539_144:
	mov	rcx, r13
	mov	rdx, rbx
	jmp	.LBB539_140
.LBB539_145:
	mov	rcx, r13
	mov	rdx, rbx
	mov	r8b, 21
	jmp	.LBB539_147
.LBB539_146:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8b, 20
.LBB539_147:
	mov	r9, r15
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rdi, rax
	jmp	.LBB539_135
.LBB539_148:
	mov	rcx, r13
	mov	r8b, 22
	jmp	.LBB539_147
.LBB539_149:
	mov	rcx, r13
	mov	rdx, rbx
	mov	r8d, 11
	jmp	.LBB539_138
.LBB539_150:
	add	rdi, 6
	jmp	.LBB539_152
.LBB539_151:
	add	rdi, 7
.LBB539_152:
	mov	rcx, r13
	mov	rdx, rdi
	jmp	.LBB539_137
.LBB539_153:
	add	rdi, 9
	cmp	sil, -1
	cmove	rdi, rdx
	lea	rax, [rdi + 1]
	cmp	bpl, -1
	cmove	rax, rdi
	lea	rdx, [rax + 1]
	cmp	bl, -1
	jmp	.LBB539_142
.LBB539_154:
	mov	rcx, r13
	mov	r8d, 11
	jmp	.LBB539_138
.LBB539_155:
	mov	rcx, r13
	mov	r8b, 23
	jmp	.LBB539_147
.LBB539_156:
	mov	rcx, r13
	mov	r8b, 24
	jmp	.LBB539_147
.LBB539_157:
	mov	rcx, r13
	mov	r8b, 25
	jmp	.LBB539_147
.LBB539_158:
	mov	rcx, r13
	mov	r8b, 27
	jmp	.LBB539_147
.LBB539_159:
	mov	rcx, r13
	mov	r8b, 28
	jmp	.LBB539_147
.LBB539_160:
	mov	rcx, r13
	jmp	.LBB539_137
.LBB539_161:
	mov	rcx, r13
	mov	r8b, 29
	jmp	.LBB539_147
.LBB539_162:
	mov	rcx, r13
	mov	r8b, 30
	jmp	.LBB539_147
.LBB539_163:
	mov	rcx, r13
	mov	r8b, 31
	jmp	.LBB539_147
.LBB539_164:
	mov	rcx, r13
	mov	r8b, 32
	jmp	.LBB539_147
.LBB539_165:
	mov	rcx, r13
	mov	rdx, rdi
	mov	r8d, 16
	jmp	.LBB539_138
	.p2align	2, 0x90
.LJTI539_0:
	.long	.LBB539_4-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_8-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_6-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_9-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_10-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_24-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_7-.LJTI539_0
	.long	.LBB539_136-.LJTI539_0
	.long	.LBB539_5-.LJTI539_0
	.long	.LBB539_11-.LJTI539_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB540_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB540_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB540_17
	.p2align	4, 0x90
.LBB540_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB540_6
# %bb.12:                               #   in Loop: Header=BB540_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB540_13
	.p2align	4, 0x90
.LBB540_6:                              #   in Loop: Header=BB540_5 Depth=1
	mov	rax, rsi
.LBB540_13:                             #   in Loop: Header=BB540_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB540_14
# %bb.15:                               #   in Loop: Header=BB540_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB540_16
# %bb.18:                               #   in Loop: Header=BB540_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB540_5
	jmp	.LBB540_19
.LBB540_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB540_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB540_10
.LBB540_17:
	mov	rcx, rsi
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB540_9:
	mov	rdx, rsi
.LBB540_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB540_11
.LBB540_19:
	add	rdx, 1
	cmp	rdx, rdi
	je	.LBB540_32
# %bb.20:
	cmp	byte ptr [rdx], 32
	ja	.LBB540_30
# %bb.21:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB540_22:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB540_23
# %bb.28:                               #   in Loop: Header=BB540_22 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdx, 16
	cmp	ax, -1
	je	.LBB540_22
# %bb.29:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB540_30:
	cmp	rdx, rdi
	jae	.LBB540_31
# %bb.33:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r8 + 8*rax] # TAILCALL
.LBB540_23:
	cmp	rdi, rdx
	je	.LBB540_32
# %bb.24:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB540_25:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB540_30
# %bb.26:                               #   in Loop: Header=BB540_25 Depth=1
	bt	rax, rcx
	jae	.LBB540_30
# %bb.27:                               #   in Loop: Header=BB540_25 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB540_25
.LBB540_32:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
.LBB540_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB540_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB540_2
.LBB540_16:
	mov	rcx, rsi
	mov	r8b, 7
	jmp	.LBB540_2
.LBB540_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB540_2
.LBB540_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB540_2
.LBB540_31:
	mov	rdi, rdx
	jmp	.LBB540_32
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB541_58
# %bb.1:
	mov	rbx, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r15, 4294977024
.LBB541_2:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB541_4 Depth 2
                                        #     Child Loop BB541_8 Depth 2
	cmp	rdi, rbx
	je	.LBB541_56
# %bb.3:                                #   in Loop: Header=BB541_2 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB541_11
	.p2align	4, 0x90
.LBB541_4:                              #   Parent Loop BB541_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB541_8
# %bb.5:                                #   in Loop: Header=BB541_4 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB541_4
# %bb.6:                                #   in Loop: Header=BB541_2 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB541_11
	.p2align	4, 0x90
.LBB541_7:                              #   in Loop: Header=BB541_8 Depth=2
	add	rdi, 1
.LBB541_8:                              #   Parent Loop BB541_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB541_56
# %bb.9:                                #   in Loop: Header=BB541_8 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB541_11
# %bb.10:                               #   in Loop: Header=BB541_8 Depth=2
	bt	r15, rax
	jb	.LBB541_7
	.p2align	4, 0x90
.LBB541_11:                             #   in Loop: Header=BB541_2 Depth=1
	cmp	rdi, rbx
	jae	.LBB541_55
# %bb.12:                               #   in Loop: Header=BB541_2 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 47
	jne	.LBB541_15
# %bb.13:                               #   in Loop: Header=BB541_2 Depth=1
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r14
	jne	.LBB541_2
# %bb.14:
	mov	rcx, r14
	mov	dl, 45
	xor	r8d, r8d
	jmp	.LBB541_51
.LBB541_15:
	xor	esi, esi
	cmp	al, 93
	je	.LBB541_47
# %bb.16:
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB541_18
	.p2align	4, 0x90
.LBB541_17:                             #   in Loop: Header=BB541_18 Depth=1
	cmp	rdi, rbx
	jae	.LBB541_45
.LBB541_18:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB541_20 Depth 2
                                        #       Child Loop BB541_22 Depth 3
                                        #       Child Loop BB541_26 Depth 3
                                        #     Child Loop BB541_36 Depth 2
                                        #     Child Loop BB541_40 Depth 2
	cmp	rsi, 2147483646
	je	.LBB541_48
# %bb.19:                               #   in Loop: Header=BB541_18 Depth=1
	add	rsi, 1
	movzx	eax, byte ptr [rdi]
	mov	rcx, r14
	mov	rdx, rdi
	call	qword ptr [r12 + 8*rax]
	mov	rdi, rax
	cmp	rax, r14
	je	.LBB541_49
.LBB541_20:                             #   Parent Loop BB541_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB541_22 Depth 3
                                        #       Child Loop BB541_26 Depth 3
	cmp	rdi, rbx
	je	.LBB541_53
# %bb.21:                               #   in Loop: Header=BB541_20 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB541_29
	.p2align	4, 0x90
.LBB541_22:                             #   Parent Loop BB541_18 Depth=1
                                        #     Parent Loop BB541_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB541_26
# %bb.23:                               #   in Loop: Header=BB541_22 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB541_22
# %bb.24:                               #   in Loop: Header=BB541_20 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB541_29
	.p2align	4, 0x90
.LBB541_25:                             #   in Loop: Header=BB541_26 Depth=3
	add	rdi, 1
.LBB541_26:                             #   Parent Loop BB541_18 Depth=1
                                        #     Parent Loop BB541_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB541_53
# %bb.27:                               #   in Loop: Header=BB541_26 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB541_29
# %bb.28:                               #   in Loop: Header=BB541_26 Depth=3
	bt	r15, rax
	jb	.LBB541_25
	.p2align	4, 0x90
.LBB541_29:                             #   in Loop: Header=BB541_20 Depth=2
	cmp	rdi, rbx
	jae	.LBB541_52
# %bb.30:                               #   in Loop: Header=BB541_20 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 44
	je	.LBB541_34
# %bb.31:                               #   in Loop: Header=BB541_20 Depth=2
	cmp	al, 93
	je	.LBB541_47
# %bb.32:                               #   in Loop: Header=BB541_20 Depth=2
	cmp	al, 47
	jne	.LBB541_60
# %bb.33:                               #   in Loop: Header=BB541_20 Depth=2
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r14
	jne	.LBB541_20
	jmp	.LBB541_61
	.p2align	4, 0x90
.LBB541_34:                             #   in Loop: Header=BB541_18 Depth=1
	add	rdi, 1
	cmp	rdi, rbx
	je	.LBB541_44
# %bb.35:                               #   in Loop: Header=BB541_18 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB541_17
	.p2align	4, 0x90
.LBB541_36:                             #   Parent Loop BB541_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB541_39
# %bb.37:                               #   in Loop: Header=BB541_36 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB541_36
# %bb.38:                               #   in Loop: Header=BB541_18 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB541_17
	.p2align	4, 0x90
.LBB541_39:                             #   in Loop: Header=BB541_18 Depth=1
	cmp	rbx, rdi
	je	.LBB541_44
	.p2align	4, 0x90
.LBB541_40:                             #   Parent Loop BB541_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB541_17
# %bb.41:                               #   in Loop: Header=BB541_40 Depth=2
	bt	r15, rax
	jae	.LBB541_17
# %bb.42:                               #   in Loop: Header=BB541_40 Depth=2
	add	rdi, 1
	cmp	rbx, rdi
	jne	.LBB541_40
.LBB541_44:
	mov	rdi, rbx
.LBB541_45:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB541_54
.LBB541_47:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB541_48:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 25
	jmp	.LBB541_59
.LBB541_49:
	mov	rcx, r14
	mov	dl, 46
.LBB541_50:
	mov	r8, rsi
.LBB541_51:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB541_52:
	mov	rbx, rdi
.LBB541_53:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 47
.LBB541_54:
	mov	r9, rsi
	jmp	.LBB541_57
.LBB541_55:
	mov	rbx, rdi
.LBB541_56:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8b, 44
	xor	r9d, r9d
.LBB541_57:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB541_58:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
.LBB541_59:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB541_60:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB541_59
.LBB541_61:
	mov	rcx, r14
	mov	dl, 49
	jmp	.LBB541_50
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r15, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB542_1
# %bb.2:
	mov	rbx, qword ptr [r15 + 160]
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rdi, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	rsi, 4294977024
.LBB542_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB542_5 Depth 2
                                        #     Child Loop BB542_6 Depth 2
	cmp	rdi, rbx
	je	.LBB542_14
# %bb.4:                                #   in Loop: Header=BB542_3 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB542_12
	.p2align	4, 0x90
.LBB542_5:                              #   Parent Loop BB542_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB542_6
# %bb.10:                               #   in Loop: Header=BB542_5 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB542_5
# %bb.11:                               #   in Loop: Header=BB542_3 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB542_12
	.p2align	4, 0x90
.LBB542_9:                              #   in Loop: Header=BB542_6 Depth=2
	add	rdi, 1
.LBB542_6:                              #   Parent Loop BB542_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB542_14
# %bb.7:                                #   in Loop: Header=BB542_6 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB542_12
# %bb.8:                                #   in Loop: Header=BB542_6 Depth=2
	bt	rsi, rax
	jb	.LBB542_9
	.p2align	4, 0x90
.LBB542_12:                             #   in Loop: Header=BB542_3 Depth=1
	cmp	rdi, rbx
	jae	.LBB542_13
# %bb.15:                               #   in Loop: Header=BB542_3 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB542_25
# %bb.16:                               #   in Loop: Header=BB542_3 Depth=1
	cmp	al, 125
	je	.LBB542_97
# %bb.17:                               #   in Loop: Header=BB542_3 Depth=1
	cmp	al, 47
	jne	.LBB542_20
# %bb.18:                               #   in Loop: Header=BB542_3 Depth=1
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB542_3
# %bb.19:
	mov	rcx, r15
	mov	dl, 34
	xor	r8d, r8d
	jmp	.LBB542_29
.LBB542_25:
	mov	r14d, 1
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB542_26
	.p2align	4, 0x90
.LBB542_81:                             #   Parent Loop BB542_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB542_83 Depth 3
                                        #       Child Loop BB542_84 Depth 3
	cmp	rdi, rbx
	je	.LBB542_92
# %bb.82:                               #   in Loop: Header=BB542_81 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB542_90
	.p2align	4, 0x90
.LBB542_83:                             #   Parent Loop BB542_26 Depth=1
                                        #     Parent Loop BB542_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB542_84
# %bb.88:                               #   in Loop: Header=BB542_83 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB542_83
# %bb.89:                               #   in Loop: Header=BB542_81 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB542_90
	.p2align	4, 0x90
.LBB542_87:                             #   in Loop: Header=BB542_84 Depth=3
	add	rdi, 1
.LBB542_84:                             #   Parent Loop BB542_26 Depth=1
                                        #     Parent Loop BB542_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB542_92
# %bb.85:                               #   in Loop: Header=BB542_84 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB542_90
# %bb.86:                               #   in Loop: Header=BB542_84 Depth=3
	bt	rsi, rax
	jb	.LBB542_87
	.p2align	4, 0x90
.LBB542_90:                             #   in Loop: Header=BB542_81 Depth=2
	cmp	rdi, rbx
	jae	.LBB542_91
# %bb.93:                               #   in Loop: Header=BB542_81 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB542_23
# %bb.94:                               #   in Loop: Header=BB542_81 Depth=2
	cmp	al, 47
	jne	.LBB542_20
# %bb.95:                               #   in Loop: Header=BB542_81 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB542_81
	jmp	.LBB542_96
	.p2align	4, 0x90
.LBB542_23:                             #   in Loop: Header=BB542_26 Depth=1
	add	r14, 1
	cmp	r14, 2147483647
	je	.LBB542_24
.LBB542_26:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB542_30 Depth 2
                                        #       Child Loop BB542_32 Depth 3
                                        #       Child Loop BB542_33 Depth 3
                                        #     Child Loop BB542_51 Depth 2
                                        #     Child Loop BB542_52 Depth 2
                                        #     Child Loop BB542_63 Depth 2
                                        #       Child Loop BB542_65 Depth 3
                                        #       Child Loop BB542_66 Depth 3
                                        #     Child Loop BB542_81 Depth 2
                                        #       Child Loop BB542_83 Depth 3
                                        #       Child Loop BB542_84 Depth 3
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB542_27
.LBB542_30:                             #   Parent Loop BB542_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB542_32 Depth 3
                                        #       Child Loop BB542_33 Depth 3
	cmp	rax, rbx
	je	.LBB542_41
# %bb.31:                               #   in Loop: Header=BB542_30 Depth=2
	cmp	byte ptr [rax], 32
	ja	.LBB542_39
	.p2align	4, 0x90
.LBB542_32:                             #   Parent Loop BB542_26 Depth=1
                                        #     Parent Loop BB542_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB542_33
# %bb.37:                               #   in Loop: Header=BB542_32 Depth=3
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB542_32
# %bb.38:                               #   in Loop: Header=BB542_30 Depth=2
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB542_39
	.p2align	4, 0x90
.LBB542_36:                             #   in Loop: Header=BB542_33 Depth=3
	add	rax, 1
.LBB542_33:                             #   Parent Loop BB542_26 Depth=1
                                        #     Parent Loop BB542_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rax
	je	.LBB542_41
# %bb.34:                               #   in Loop: Header=BB542_33 Depth=3
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB542_39
# %bb.35:                               #   in Loop: Header=BB542_33 Depth=3
	bt	rsi, rcx
	jb	.LBB542_36
	.p2align	4, 0x90
.LBB542_39:                             #   in Loop: Header=BB542_30 Depth=2
	cmp	rax, rbx
	jae	.LBB542_40
# %bb.44:                               #   in Loop: Header=BB542_30 Depth=2
	mov	cl, byte ptr [rax]
	cmp	cl, 58
	je	.LBB542_49
# %bb.45:                               #   in Loop: Header=BB542_30 Depth=2
	cmp	cl, 47
	jne	.LBB542_48
# %bb.46:                               #   in Loop: Header=BB542_30 Depth=2
	mov	rcx, r15
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	jne	.LBB542_30
	jmp	.LBB542_47
	.p2align	4, 0x90
.LBB542_49:                             #   in Loop: Header=BB542_26 Depth=1
	add	rax, 1
	cmp	rax, rbx
	je	.LBB542_60
# %bb.50:                               #   in Loop: Header=BB542_26 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB542_58
	.p2align	4, 0x90
.LBB542_51:                             #   Parent Loop BB542_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB542_52
# %bb.56:                               #   in Loop: Header=BB542_51 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB542_51
# %bb.57:                               #   in Loop: Header=BB542_26 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB542_58
	.p2align	4, 0x90
.LBB542_55:                             #   in Loop: Header=BB542_52 Depth=2
	add	rax, 1
.LBB542_52:                             #   Parent Loop BB542_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rax
	je	.LBB542_60
# %bb.53:                               #   in Loop: Header=BB542_52 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB542_58
# %bb.54:                               #   in Loop: Header=BB542_52 Depth=2
	bt	rsi, rcx
	jb	.LBB542_55
	.p2align	4, 0x90
.LBB542_58:                             #   in Loop: Header=BB542_26 Depth=1
	cmp	rax, rbx
	jae	.LBB542_59
# %bb.61:                               #   in Loop: Header=BB542_26 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r15
	mov	rdx, rax
	call	qword ptr [r12 + 8*rdi]
	mov	rdi, rax
	cmp	rax, r15
	je	.LBB542_62
.LBB542_63:                             #   Parent Loop BB542_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB542_65 Depth 3
                                        #       Child Loop BB542_66 Depth 3
	cmp	rdi, rbx
	je	.LBB542_74
# %bb.64:                               #   in Loop: Header=BB542_63 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB542_72
	.p2align	4, 0x90
.LBB542_65:                             #   Parent Loop BB542_26 Depth=1
                                        #     Parent Loop BB542_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB542_66
# %bb.70:                               #   in Loop: Header=BB542_65 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB542_65
# %bb.71:                               #   in Loop: Header=BB542_63 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB542_72
	.p2align	4, 0x90
.LBB542_69:                             #   in Loop: Header=BB542_66 Depth=3
	add	rdi, 1
.LBB542_66:                             #   Parent Loop BB542_26 Depth=1
                                        #     Parent Loop BB542_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB542_74
# %bb.67:                               #   in Loop: Header=BB542_66 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB542_72
# %bb.68:                               #   in Loop: Header=BB542_66 Depth=3
	bt	rsi, rax
	jb	.LBB542_69
	.p2align	4, 0x90
.LBB542_72:                             #   in Loop: Header=BB542_63 Depth=2
	cmp	rdi, rbx
	jae	.LBB542_73
# %bb.75:                               #   in Loop: Header=BB542_63 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 44
	je	.LBB542_80
# %bb.76:                               #   in Loop: Header=BB542_63 Depth=2
	cmp	al, 125
	je	.LBB542_98
# %bb.77:                               #   in Loop: Header=BB542_63 Depth=2
	cmp	al, 47
	jne	.LBB542_20
# %bb.78:                               #   in Loop: Header=BB542_63 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB542_63
	jmp	.LBB542_79
	.p2align	4, 0x90
.LBB542_80:                             #   in Loop: Header=BB542_26 Depth=1
	add	rdi, 1
	jmp	.LBB542_81
.LBB542_27:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB542_28
.LBB542_40:
	mov	rbx, rax
.LBB542_41:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 36
	jmp	.LBB542_42
.LBB542_59:
	mov	rbx, rax
.LBB542_60:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 38
	jmp	.LBB542_42
.LBB542_62:
	mov	rcx, r15
	mov	dl, 39
.LBB542_28:
	mov	r8, r14
.LBB542_29:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB542_73:
	mov	rbx, rdi
.LBB542_74:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 40
	jmp	.LBB542_42
.LBB542_1:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB542_22
.LBB542_91:
	mov	rbx, rdi
.LBB542_92:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 41
.LBB542_42:
	mov	r9, r14
.LBB542_43:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB542_24:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB542_22
.LBB542_20:
	mov	rcx, r15
	mov	rdx, rdi
	jmp	.LBB542_21
.LBB542_13:
	mov	rbx, rdi
.LBB542_14:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB542_43
.LBB542_97:
	xor	r14d, r14d
.LBB542_98:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB542_48:
	mov	rcx, r15
	mov	rdx, rax
.LBB542_21:
	mov	r8d, 1
.LBB542_22:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB542_47:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB542_28
.LBB542_96:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB542_28
.LBB542_79:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB542_28
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB543_1
# %bb.3:
	mov	rdi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rbx, 1
	cmp	rbx, rdi
	je	.LBB543_16
# %bb.4:
	cmp	byte ptr [rbx], 32
	ja	.LBB543_14
# %bb.5:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB543_6:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB543_7
# %bb.12:                               #   in Loop: Header=BB543_6 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB543_6
# %bb.13:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB543_14:
	cmp	rbx, rdi
	jae	.LBB543_15
# %bb.17:
	mov	al, byte ptr [rbx]
	xor	esi, esi
	cmp	al, 93
	je	.LBB543_52
# %bb.18:
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
.LBB543_19:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB543_24 Depth 2
                                        #     Child Loop BB543_25 Depth 2
                                        #     Child Loop BB543_41 Depth 2
                                        #     Child Loop BB543_42 Depth 2
	cmp	rsi, 2147483646
	je	.LBB543_20
# %bb.21:                               #   in Loop: Header=BB543_19 Depth=1
	add	rsi, 1
	movzx	eax, al
	mov	rcx, r14
	mov	rdx, rbx
	call	qword ptr [r15 + 8*rax]
	cmp	rax, r14
	je	.LBB543_53
# %bb.22:                               #   in Loop: Header=BB543_19 Depth=1
	mov	rbx, rax
	cmp	rax, rdi
	je	.LBB543_33
# %bb.23:                               #   in Loop: Header=BB543_19 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB543_31
	.p2align	4, 0x90
.LBB543_24:                             #   Parent Loop BB543_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB543_25
# %bb.29:                               #   in Loop: Header=BB543_24 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB543_24
# %bb.30:                               #   in Loop: Header=BB543_19 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB543_31
	.p2align	4, 0x90
.LBB543_28:                             #   in Loop: Header=BB543_25 Depth=2
	add	rbx, 1
.LBB543_25:                             #   Parent Loop BB543_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB543_33
# %bb.26:                               #   in Loop: Header=BB543_25 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB543_31
# %bb.27:                               #   in Loop: Header=BB543_25 Depth=2
	bt	r12, rax
	jb	.LBB543_28
	.p2align	4, 0x90
.LBB543_31:                             #   in Loop: Header=BB543_19 Depth=1
	cmp	rbx, rdi
	jae	.LBB543_32
# %bb.36:                               #   in Loop: Header=BB543_19 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB543_37
# %bb.39:                               #   in Loop: Header=BB543_19 Depth=1
	add	rbx, 1
	cmp	rbx, rdi
	je	.LBB543_50
# %bb.40:                               #   in Loop: Header=BB543_19 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB543_48
	.p2align	4, 0x90
.LBB543_41:                             #   Parent Loop BB543_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB543_42
# %bb.46:                               #   in Loop: Header=BB543_41 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB543_41
# %bb.47:                               #   in Loop: Header=BB543_19 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB543_48
	.p2align	4, 0x90
.LBB543_45:                             #   in Loop: Header=BB543_42 Depth=2
	add	rbx, 1
.LBB543_42:                             #   Parent Loop BB543_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB543_50
# %bb.43:                               #   in Loop: Header=BB543_42 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB543_48
# %bb.44:                               #   in Loop: Header=BB543_42 Depth=2
	bt	r12, rax
	jb	.LBB543_45
	.p2align	4, 0x90
.LBB543_48:                             #   in Loop: Header=BB543_19 Depth=1
	cmp	rbx, rdi
	jae	.LBB543_49
# %bb.51:                               #   in Loop: Header=BB543_19 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 93
	jne	.LBB543_19
.LBB543_52:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB543_7:
	cmp	rdi, rbx
	je	.LBB543_16
# %bb.8:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB543_9:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB543_14
# %bb.10:                               #   in Loop: Header=BB543_9 Depth=1
	bt	rax, rcx
	jae	.LBB543_14
# %bb.11:                               #   in Loop: Header=BB543_9 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB543_9
.LBB543_16:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 44
	xor	r9d, r9d
	jmp	.LBB543_35
.LBB543_20:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB543_2
.LBB543_53:
	mov	rcx, r14
	mov	dl, 46
	mov	r8, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB543_32:
	mov	rdi, rbx
.LBB543_33:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB543_34
.LBB543_37:
	cmp	al, 93
	je	.LBB543_52
# %bb.38:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB543_2
.LBB543_49:
	mov	rdi, rbx
.LBB543_50:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
.LBB543_34:
	mov	r9, rsi
.LBB543_35:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB543_1:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 6
.LBB543_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB543_15:
	mov	rdi, rbx
	jmp	.LBB543_16
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB544_1
# %bb.2:
	mov	rsi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB544_15
# %bb.3:
	cmp	byte ptr [rdi], 32
	ja	.LBB544_13
# %bb.4:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB544_5:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB544_6
# %bb.11:                               #   in Loop: Header=BB544_5 Depth=1
	movdqu	xmm4, xmmword ptr [rdi]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdi, 16
	cmp	ax, -1
	je	.LBB544_5
# %bb.12:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
.LBB544_13:
	cmp	rdi, rsi
	jae	.LBB544_14
# %bb.16:
	mov	al, byte ptr [rdi]
	cmp	al, 34
	jne	.LBB544_17
# %bb.23:
	xor	ebx, ebx
	lea	r15, [rip + "?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r12, 4294977024
.LBB544_24:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB544_31 Depth 2
                                        #     Child Loop BB544_32 Depth 2
                                        #     Child Loop BB544_47 Depth 2
                                        #     Child Loop BB544_48 Depth 2
                                        #     Child Loop BB544_61 Depth 2
                                        #     Child Loop BB544_62 Depth 2
                                        #     Child Loop BB544_75 Depth 2
                                        #     Child Loop BB544_76 Depth 2
	cmp	rbx, 2147483646
	je	.LBB544_25
# %bb.26:                               #   in Loop: Header=BB544_24 Depth=1
	add	rbx, 1
	mov	rcx, r14
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r14
	je	.LBB544_27
# %bb.29:                               #   in Loop: Header=BB544_24 Depth=1
	cmp	rax, rsi
	je	.LBB544_40
# %bb.30:                               #   in Loop: Header=BB544_24 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB544_38
	.p2align	4, 0x90
.LBB544_31:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB544_32
# %bb.36:                               #   in Loop: Header=BB544_31 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB544_31
# %bb.37:                               #   in Loop: Header=BB544_24 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB544_38
	.p2align	4, 0x90
.LBB544_35:                             #   in Loop: Header=BB544_32 Depth=2
	add	rax, 1
.LBB544_32:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB544_40
# %bb.33:                               #   in Loop: Header=BB544_32 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB544_38
# %bb.34:                               #   in Loop: Header=BB544_32 Depth=2
	bt	r12, rcx
	jb	.LBB544_35
	.p2align	4, 0x90
.LBB544_38:                             #   in Loop: Header=BB544_24 Depth=1
	cmp	rax, rsi
	jae	.LBB544_39
# %bb.43:                               #   in Loop: Header=BB544_24 Depth=1
	cmp	byte ptr [rax], 58
	jne	.LBB544_44
# %bb.45:                               #   in Loop: Header=BB544_24 Depth=1
	add	rax, 1
	cmp	rax, rsi
	je	.LBB544_56
# %bb.46:                               #   in Loop: Header=BB544_24 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB544_54
	.p2align	4, 0x90
.LBB544_47:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rsi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB544_48
# %bb.52:                               #   in Loop: Header=BB544_47 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB544_47
# %bb.53:                               #   in Loop: Header=BB544_24 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB544_54
	.p2align	4, 0x90
.LBB544_51:                             #   in Loop: Header=BB544_48 Depth=2
	add	rax, 1
.LBB544_48:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rax
	je	.LBB544_56
# %bb.49:                               #   in Loop: Header=BB544_48 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB544_54
# %bb.50:                               #   in Loop: Header=BB544_48 Depth=2
	bt	r12, rcx
	jb	.LBB544_51
	.p2align	4, 0x90
.LBB544_54:                             #   in Loop: Header=BB544_24 Depth=1
	cmp	rax, rsi
	jae	.LBB544_55
# %bb.57:                               #   in Loop: Header=BB544_24 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r14
	mov	rdx, rax
	call	qword ptr [r15 + 8*rdi]
	cmp	rax, r14
	je	.LBB544_58
# %bb.59:                               #   in Loop: Header=BB544_24 Depth=1
	mov	rdi, rax
	cmp	rax, rsi
	je	.LBB544_70
# %bb.60:                               #   in Loop: Header=BB544_24 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB544_68
	.p2align	4, 0x90
.LBB544_61:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB544_62
# %bb.66:                               #   in Loop: Header=BB544_61 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB544_61
# %bb.67:                               #   in Loop: Header=BB544_24 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB544_68
	.p2align	4, 0x90
.LBB544_65:                             #   in Loop: Header=BB544_62 Depth=2
	add	rdi, 1
.LBB544_62:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB544_70
# %bb.63:                               #   in Loop: Header=BB544_62 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB544_68
# %bb.64:                               #   in Loop: Header=BB544_62 Depth=2
	bt	r12, rax
	jb	.LBB544_65
	.p2align	4, 0x90
.LBB544_68:                             #   in Loop: Header=BB544_24 Depth=1
	cmp	rdi, rsi
	jae	.LBB544_69
# %bb.71:                               #   in Loop: Header=BB544_24 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 44
	jne	.LBB544_72
# %bb.73:                               #   in Loop: Header=BB544_24 Depth=1
	add	rdi, 1
	cmp	rdi, rsi
	je	.LBB544_84
# %bb.74:                               #   in Loop: Header=BB544_24 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB544_82
	.p2align	4, 0x90
.LBB544_75:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rsi
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB544_76
# %bb.80:                               #   in Loop: Header=BB544_75 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB544_75
# %bb.81:                               #   in Loop: Header=BB544_24 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB544_82
	.p2align	4, 0x90
.LBB544_79:                             #   in Loop: Header=BB544_76 Depth=2
	add	rdi, 1
.LBB544_76:                             #   Parent Loop BB544_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rsi, rdi
	je	.LBB544_84
# %bb.77:                               #   in Loop: Header=BB544_76 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB544_82
# %bb.78:                               #   in Loop: Header=BB544_76 Depth=2
	bt	r12, rax
	jb	.LBB544_79
	.p2align	4, 0x90
.LBB544_82:                             #   in Loop: Header=BB544_24 Depth=1
	cmp	rdi, rsi
	jae	.LBB544_83
# %bb.85:                               #   in Loop: Header=BB544_24 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB544_24
.LBB544_72:
	cmp	al, 125
	je	.LBB544_19
	jmp	.LBB544_20
.LBB544_6:
	cmp	rsi, rdi
	je	.LBB544_15
# %bb.7:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB544_8:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdi]
	cmp	rcx, 32
	ja	.LBB544_13
# %bb.9:                                #   in Loop: Header=BB544_8 Depth=1
	bt	rax, rcx
	jae	.LBB544_13
# %bb.10:                               #   in Loop: Header=BB544_8 Depth=1
	add	rdi, 1
	cmp	rsi, rdi
	jne	.LBB544_8
.LBB544_15:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB544_42
.LBB544_25:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB544_22
.LBB544_27:
	mov	rcx, r14
	mov	dl, 35
	jmp	.LBB544_28
.LBB544_1:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB544_22
.LBB544_17:
	cmp	al, 125
	jne	.LBB544_20
# %bb.18:
	xor	ebx, ebx
.LBB544_19:
	mov	rcx, r14
	mov	rdx, rbx
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB544_39:
	mov	rsi, rax
.LBB544_40:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 36
	jmp	.LBB544_41
.LBB544_44:
	mov	rcx, r14
	mov	rdx, rax
	jmp	.LBB544_21
.LBB544_20:
	mov	rcx, r14
	mov	rdx, rdi
.LBB544_21:
	mov	r8d, 1
.LBB544_22:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB544_55:
	mov	rsi, rax
.LBB544_56:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 38
	jmp	.LBB544_41
.LBB544_58:
	mov	rcx, r14
	mov	dl, 39
.LBB544_28:
	mov	r8, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB544_69:
	mov	rsi, rdi
.LBB544_70:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 40
	jmp	.LBB544_41
.LBB544_14:
	mov	rsi, rdi
	jmp	.LBB544_15
.LBB544_83:
	mov	rsi, rdi
.LBB544_84:
	mov	rcx, r14
	mov	rdx, rsi
	mov	r8b, 41
.LBB544_41:
	mov	r9, rbx
.LBB544_42:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB545_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB545_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB545_17
	.p2align	4, 0x90
.LBB545_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB545_6
# %bb.12:                               #   in Loop: Header=BB545_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB545_13
	.p2align	4, 0x90
.LBB545_6:                              #   in Loop: Header=BB545_5 Depth=1
	mov	rax, rsi
.LBB545_13:                             #   in Loop: Header=BB545_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB545_14
# %bb.15:                               #   in Loop: Header=BB545_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB545_16
# %bb.18:                               #   in Loop: Header=BB545_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB545_5
	jmp	.LBB545_19
.LBB545_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB545_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB545_10
.LBB545_17:
	mov	rcx, rsi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB545_9:
	mov	rdx, rsi
.LBB545_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB545_11
.LBB545_19:
	add	rdx, 1
	mov	rax, rdx
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB545_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB545_2
.LBB545_16:
	mov	rcx, rsi
	mov	r8b, 7
.LBB545_2:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB545_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB545_2
.LBB545_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB545_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdi, qword ptr [rcx + 160]
	add	rdx, 1
	cmp	rdx, rdi
	jae	.LBB546_1
# %bb.3:
	movsx	ecx, byte ptr [rdx]
	cmp	ecx, 47
	je	.LBB546_7
# %bb.4:
	cmp	ecx, 42
	jne	.LBB546_17
	.p2align	4, 0x90
.LBB546_5:                              # =>This Inner Loop Header: Depth=1
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB546_6
# %bb.12:                               #   in Loop: Header=BB546_5 Depth=1
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB546_13
	.p2align	4, 0x90
.LBB546_6:                              #   in Loop: Header=BB546_5 Depth=1
	mov	rax, rsi
.LBB546_13:                             #   in Loop: Header=BB546_5 Depth=1
	test	rax, rax
	cmove	rax, rsi
	cmp	rax, rsi
	je	.LBB546_14
# %bb.15:                               #   in Loop: Header=BB546_5 Depth=1
	lea	rdx, [rax + 1]
	cmp	rdx, rdi
	jae	.LBB546_16
# %bb.18:                               #   in Loop: Header=BB546_5 Depth=1
	cmp	byte ptr [rax + 1], 47
	jne	.LBB546_5
	jmp	.LBB546_19
.LBB546_7:
	add	rax, 2
	mov	r8, rdi
	sub	r8, rax
	je	.LBB546_9
# %bb.8:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	mov	rdx, rax
	jmp	.LBB546_10
.LBB546_17:
	mov	rcx, rsi
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB546_9:
	mov	rdx, rsi
.LBB546_10:
	test	rdx, rdx
	cmove	rdx, rsi
	cmp	rsi, rdx
	je	.LBB546_11
.LBB546_19:
	add	rdx, 1
	cmp	rdx, rdi
	je	.LBB546_32
# %bb.20:
	cmp	byte ptr [rdx], 32
	ja	.LBB546_30
# %bb.21:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB546_22:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rax, 15
	jle	.LBB546_23
# %bb.28:                               #   in Loop: Header=BB546_22 Depth=1
	movdqu	xmm4, xmmword ptr [rdx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rdx, 16
	cmp	ax, -1
	je	.LBB546_22
# %bb.29:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdx, rax
	add	rdx, -16
.LBB546_30:
	cmp	rdx, rdi
	jae	.LBB546_31
# %bb.33:
	movzx	eax, byte ptr [rdx]
	lea	r8, [rip + "?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r8 + 8*rax] # TAILCALL
.LBB546_23:
	cmp	rdi, rdx
	je	.LBB546_32
# %bb.24:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB546_25:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	cmp	rcx, 32
	ja	.LBB546_30
# %bb.26:                               #   in Loop: Header=BB546_25 Depth=1
	bt	rax, rcx
	jae	.LBB546_30
# %bb.27:                               #   in Loop: Header=BB546_25 Depth=1
	add	rdx, 1
	cmp	rdi, rdx
	jne	.LBB546_25
.LBB546_32:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
.LBB546_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB546_14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB546_2
.LBB546_16:
	mov	rcx, rsi
	mov	r8b, 7
	jmp	.LBB546_2
.LBB546_1:
	mov	rcx, rsi
	mov	r8b, 4
	jmp	.LBB546_2
.LBB546_11:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB546_2
.LBB546_31:
	mov	rdi, rdx
	jmp	.LBB546_32
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r14, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB547_1
# %bb.3:
	mov	rdi, qword ptr [r14 + 160]
	add	rax, -1
	mov	qword ptr [r14 + 184], rax
	add	rbx, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	r15, 4294977024
.LBB547_4:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB547_6 Depth 2
                                        #     Child Loop BB547_7 Depth 2
	cmp	rbx, rdi
	je	.LBB547_15
# %bb.5:                                #   in Loop: Header=BB547_4 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB547_13
	.p2align	4, 0x90
.LBB547_6:                              #   Parent Loop BB547_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB547_7
# %bb.11:                               #   in Loop: Header=BB547_6 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB547_6
# %bb.12:                               #   in Loop: Header=BB547_4 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB547_13
	.p2align	4, 0x90
.LBB547_10:                             #   in Loop: Header=BB547_7 Depth=2
	add	rbx, 1
.LBB547_7:                              #   Parent Loop BB547_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB547_15
# %bb.8:                                #   in Loop: Header=BB547_7 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB547_13
# %bb.9:                                #   in Loop: Header=BB547_7 Depth=2
	bt	r15, rax
	jb	.LBB547_10
	.p2align	4, 0x90
.LBB547_13:                             #   in Loop: Header=BB547_4 Depth=1
	cmp	rbx, rdi
	jae	.LBB547_14
# %bb.16:                               #   in Loop: Header=BB547_4 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 47
	jne	.LBB547_17
# %bb.21:                               #   in Loop: Header=BB547_4 Depth=1
	mov	rcx, r14
	mov	rdx, rbx
	call	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rbx, rax
	cmp	rax, r14
	jne	.LBB547_4
# %bb.22:
	mov	rcx, r14
	mov	dl, 45
	xor	r8d, r8d
	jmp	.LBB547_26
.LBB547_17:
	xor	esi, esi
	cmp	al, 93
	je	.LBB547_59
# %bb.18:
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
.LBB547_19:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB547_27 Depth 2
                                        #       Child Loop BB547_29 Depth 3
                                        #       Child Loop BB547_30 Depth 3
                                        #     Child Loop BB547_48 Depth 2
                                        #     Child Loop BB547_49 Depth 2
	cmp	rsi, 2147483646
	je	.LBB547_20
# %bb.23:                               #   in Loop: Header=BB547_19 Depth=1
	add	rsi, 1
	movzx	eax, al
	mov	rcx, r14
	mov	rdx, rbx
	call	qword ptr [r12 + 8*rax]
	mov	rbx, rax
	cmp	rax, r14
	je	.LBB547_24
.LBB547_27:                             #   Parent Loop BB547_19 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB547_29 Depth 3
                                        #       Child Loop BB547_30 Depth 3
	cmp	rbx, rdi
	je	.LBB547_38
# %bb.28:                               #   in Loop: Header=BB547_27 Depth=2
	cmp	byte ptr [rbx], 32
	ja	.LBB547_36
	.p2align	4, 0x90
.LBB547_29:                             #   Parent Loop BB547_19 Depth=1
                                        #     Parent Loop BB547_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB547_30
# %bb.34:                               #   in Loop: Header=BB547_29 Depth=3
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB547_29
# %bb.35:                               #   in Loop: Header=BB547_27 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB547_36
	.p2align	4, 0x90
.LBB547_33:                             #   in Loop: Header=BB547_30 Depth=3
	add	rbx, 1
.LBB547_30:                             #   Parent Loop BB547_19 Depth=1
                                        #     Parent Loop BB547_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rdi, rbx
	je	.LBB547_38
# %bb.31:                               #   in Loop: Header=BB547_30 Depth=3
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB547_36
# %bb.32:                               #   in Loop: Header=BB547_30 Depth=3
	bt	r15, rax
	jb	.LBB547_33
	.p2align	4, 0x90
.LBB547_36:                             #   in Loop: Header=BB547_27 Depth=2
	cmp	rbx, rdi
	jae	.LBB547_37
# %bb.41:                               #   in Loop: Header=BB547_27 Depth=2
	mov	al, byte ptr [rbx]
	cmp	al, 44
	je	.LBB547_46
# %bb.42:                               #   in Loop: Header=BB547_27 Depth=2
	cmp	al, 93
	je	.LBB547_59
# %bb.43:                               #   in Loop: Header=BB547_27 Depth=2
	cmp	al, 47
	jne	.LBB547_60
# %bb.44:                               #   in Loop: Header=BB547_27 Depth=2
	mov	rcx, r14
	mov	rdx, rbx
	call	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rbx, rax
	cmp	rax, r14
	jne	.LBB547_27
	jmp	.LBB547_45
	.p2align	4, 0x90
.LBB547_46:                             #   in Loop: Header=BB547_19 Depth=1
	add	rbx, 1
	cmp	rbx, rdi
	je	.LBB547_57
# %bb.47:                               #   in Loop: Header=BB547_19 Depth=1
	cmp	byte ptr [rbx], 32
	ja	.LBB547_55
	.p2align	4, 0x90
.LBB547_48:                             #   Parent Loop BB547_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB547_49
# %bb.53:                               #   in Loop: Header=BB547_48 Depth=2
	movdqu	xmm0, xmmword ptr [rbx]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rbx, 16
	cmp	ax, -1
	je	.LBB547_48
# %bb.54:                               #   in Loop: Header=BB547_19 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
	jmp	.LBB547_55
	.p2align	4, 0x90
.LBB547_52:                             #   in Loop: Header=BB547_49 Depth=2
	add	rbx, 1
.LBB547_49:                             #   Parent Loop BB547_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rdi, rbx
	je	.LBB547_57
# %bb.50:                               #   in Loop: Header=BB547_49 Depth=2
	movzx	eax, byte ptr [rbx]
	cmp	rax, 32
	ja	.LBB547_55
# %bb.51:                               #   in Loop: Header=BB547_49 Depth=2
	bt	r15, rax
	jb	.LBB547_52
	.p2align	4, 0x90
.LBB547_55:                             #   in Loop: Header=BB547_19 Depth=1
	cmp	rbx, rdi
	jae	.LBB547_56
# %bb.58:                               #   in Loop: Header=BB547_19 Depth=1
	mov	al, byte ptr [rbx]
	cmp	al, 93
	jne	.LBB547_19
.LBB547_59:
	mov	rcx, r14
	mov	rdx, rsi
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r14 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB547_20:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB547_2
.LBB547_24:
	mov	rcx, r14
	mov	dl, 46
.LBB547_25:
	mov	r8, rsi
.LBB547_26:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB547_37:
	mov	rdi, rbx
.LBB547_38:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB547_39
.LBB547_56:
	mov	rdi, rbx
.LBB547_57:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 48
.LBB547_39:
	mov	r9, rsi
	jmp	.LBB547_40
.LBB547_14:
	mov	rdi, rbx
.LBB547_15:
	mov	rcx, r14
	mov	rdx, rdi
	mov	r8b, 44
	xor	r9d, r9d
.LBB547_40:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB547_1:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 6
.LBB547_2:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB547_60:
	mov	rcx, r14
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB547_2
.LBB547_45:
	mov	rcx, r14
	mov	dl, 49
	jmp	.LBB547_25
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 104
	.seh_stackalloc 104
	movdqa	xmmword ptr [rsp + 80], xmm9 # 16-byte Spill
	.seh_savexmm xmm9, 80
	movdqa	xmmword ptr [rsp + 64], xmm8 # 16-byte Spill
	.seh_savexmm xmm8, 64
	movdqa	xmmword ptr [rsp + 48], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rdi, rdx
	mov	r15, rcx
	mov	rax, qword ptr [rcx + 184]
	test	rax, rax
	je	.LBB548_1
# %bb.2:
	mov	rbx, qword ptr [r15 + 160]
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rdi, 1
	movdqa	xmm8, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm8 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm9, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm9 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm6, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm7, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm7 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	movabs	rsi, 4294977024
.LBB548_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB548_5 Depth 2
                                        #     Child Loop BB548_6 Depth 2
	cmp	rdi, rbx
	je	.LBB548_14
# %bb.4:                                #   in Loop: Header=BB548_3 Depth=1
	cmp	byte ptr [rdi], 32
	ja	.LBB548_12
	.p2align	4, 0x90
.LBB548_5:                              #   Parent Loop BB548_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB548_6
# %bb.10:                               #   in Loop: Header=BB548_5 Depth=2
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB548_5
# %bb.11:                               #   in Loop: Header=BB548_3 Depth=1
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB548_12
	.p2align	4, 0x90
.LBB548_9:                              #   in Loop: Header=BB548_6 Depth=2
	add	rdi, 1
.LBB548_6:                              #   Parent Loop BB548_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rdi
	je	.LBB548_14
# %bb.7:                                #   in Loop: Header=BB548_6 Depth=2
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB548_12
# %bb.8:                                #   in Loop: Header=BB548_6 Depth=2
	bt	rsi, rax
	jb	.LBB548_9
	.p2align	4, 0x90
.LBB548_12:                             #   in Loop: Header=BB548_3 Depth=1
	cmp	rdi, rbx
	jae	.LBB548_13
# %bb.15:                               #   in Loop: Header=BB548_3 Depth=1
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB548_25
# %bb.16:                               #   in Loop: Header=BB548_3 Depth=1
	cmp	al, 125
	je	.LBB548_98
# %bb.17:                               #   in Loop: Header=BB548_3 Depth=1
	cmp	al, 47
	jne	.LBB548_20
# %bb.18:                               #   in Loop: Header=BB548_3 Depth=1
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB548_3
# %bb.19:
	mov	rcx, r15
	mov	dl, 34
	xor	r8d, r8d
	jmp	.LBB548_29
.LBB548_25:
	mov	r14d, 1
	lea	r12, [rip + "?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	jmp	.LBB548_26
	.p2align	4, 0x90
.LBB548_81:                             #   Parent Loop BB548_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB548_83 Depth 3
                                        #       Child Loop BB548_84 Depth 3
	cmp	rdi, rbx
	je	.LBB548_92
# %bb.82:                               #   in Loop: Header=BB548_81 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB548_90
	.p2align	4, 0x90
.LBB548_83:                             #   Parent Loop BB548_26 Depth=1
                                        #     Parent Loop BB548_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB548_84
# %bb.88:                               #   in Loop: Header=BB548_83 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB548_83
# %bb.89:                               #   in Loop: Header=BB548_81 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB548_90
	.p2align	4, 0x90
.LBB548_87:                             #   in Loop: Header=BB548_84 Depth=3
	add	rdi, 1
.LBB548_84:                             #   Parent Loop BB548_26 Depth=1
                                        #     Parent Loop BB548_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB548_92
# %bb.85:                               #   in Loop: Header=BB548_84 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB548_90
# %bb.86:                               #   in Loop: Header=BB548_84 Depth=3
	bt	rsi, rax
	jb	.LBB548_87
	.p2align	4, 0x90
.LBB548_90:                             #   in Loop: Header=BB548_81 Depth=2
	cmp	rdi, rbx
	jae	.LBB548_91
# %bb.93:                               #   in Loop: Header=BB548_81 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 34
	je	.LBB548_23
# %bb.94:                               #   in Loop: Header=BB548_81 Depth=2
	cmp	al, 125
	je	.LBB548_99
# %bb.95:                               #   in Loop: Header=BB548_81 Depth=2
	cmp	al, 47
	jne	.LBB548_20
# %bb.96:                               #   in Loop: Header=BB548_81 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB548_81
	jmp	.LBB548_97
	.p2align	4, 0x90
.LBB548_23:                             #   in Loop: Header=BB548_26 Depth=1
	add	r14, 1
	cmp	r14, 2147483647
	je	.LBB548_24
.LBB548_26:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB548_30 Depth 2
                                        #       Child Loop BB548_32 Depth 3
                                        #       Child Loop BB548_33 Depth 3
                                        #     Child Loop BB548_51 Depth 2
                                        #     Child Loop BB548_52 Depth 2
                                        #     Child Loop BB548_63 Depth 2
                                        #       Child Loop BB548_65 Depth 3
                                        #       Child Loop BB548_66 Depth 3
                                        #     Child Loop BB548_81 Depth 2
                                        #       Child Loop BB548_83 Depth 3
                                        #       Child Loop BB548_84 Depth 3
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB548_27
.LBB548_30:                             #   Parent Loop BB548_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB548_32 Depth 3
                                        #       Child Loop BB548_33 Depth 3
	cmp	rax, rbx
	je	.LBB548_41
# %bb.31:                               #   in Loop: Header=BB548_30 Depth=2
	cmp	byte ptr [rax], 32
	ja	.LBB548_39
	.p2align	4, 0x90
.LBB548_32:                             #   Parent Loop BB548_26 Depth=1
                                        #     Parent Loop BB548_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB548_33
# %bb.37:                               #   in Loop: Header=BB548_32 Depth=3
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB548_32
# %bb.38:                               #   in Loop: Header=BB548_30 Depth=2
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB548_39
	.p2align	4, 0x90
.LBB548_36:                             #   in Loop: Header=BB548_33 Depth=3
	add	rax, 1
.LBB548_33:                             #   Parent Loop BB548_26 Depth=1
                                        #     Parent Loop BB548_30 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rax
	je	.LBB548_41
# %bb.34:                               #   in Loop: Header=BB548_33 Depth=3
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB548_39
# %bb.35:                               #   in Loop: Header=BB548_33 Depth=3
	bt	rsi, rcx
	jb	.LBB548_36
	.p2align	4, 0x90
.LBB548_39:                             #   in Loop: Header=BB548_30 Depth=2
	cmp	rax, rbx
	jae	.LBB548_40
# %bb.44:                               #   in Loop: Header=BB548_30 Depth=2
	mov	cl, byte ptr [rax]
	cmp	cl, 58
	je	.LBB548_49
# %bb.45:                               #   in Loop: Header=BB548_30 Depth=2
	cmp	cl, 47
	jne	.LBB548_48
# %bb.46:                               #   in Loop: Header=BB548_30 Depth=2
	mov	rcx, r15
	mov	rdx, rax
	call	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	jne	.LBB548_30
	jmp	.LBB548_47
	.p2align	4, 0x90
.LBB548_49:                             #   in Loop: Header=BB548_26 Depth=1
	add	rax, 1
	cmp	rax, rbx
	je	.LBB548_60
# %bb.50:                               #   in Loop: Header=BB548_26 Depth=1
	cmp	byte ptr [rax], 32
	ja	.LBB548_58
	.p2align	4, 0x90
.LBB548_51:                             #   Parent Loop BB548_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	rcx, rbx
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB548_52
# %bb.56:                               #   in Loop: Header=BB548_51 Depth=2
	movdqu	xmm0, xmmword ptr [rax]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	ecx, xmm0
	add	rax, 16
	cmp	cx, -1
	je	.LBB548_51
# %bb.57:                               #   in Loop: Header=BB548_26 Depth=1
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
	jmp	.LBB548_58
	.p2align	4, 0x90
.LBB548_55:                             #   in Loop: Header=BB548_52 Depth=2
	add	rax, 1
.LBB548_52:                             #   Parent Loop BB548_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	rbx, rax
	je	.LBB548_60
# %bb.53:                               #   in Loop: Header=BB548_52 Depth=2
	movzx	ecx, byte ptr [rax]
	cmp	rcx, 32
	ja	.LBB548_58
# %bb.54:                               #   in Loop: Header=BB548_52 Depth=2
	bt	rsi, rcx
	jb	.LBB548_55
	.p2align	4, 0x90
.LBB548_58:                             #   in Loop: Header=BB548_26 Depth=1
	cmp	rax, rbx
	jae	.LBB548_59
# %bb.61:                               #   in Loop: Header=BB548_26 Depth=1
	movzx	edi, byte ptr [rax]
	mov	rcx, r15
	mov	rdx, rax
	call	qword ptr [r12 + 8*rdi]
	mov	rdi, rax
	cmp	rax, r15
	je	.LBB548_62
.LBB548_63:                             #   Parent Loop BB548_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB548_65 Depth 3
                                        #       Child Loop BB548_66 Depth 3
	cmp	rdi, rbx
	je	.LBB548_74
# %bb.64:                               #   in Loop: Header=BB548_63 Depth=2
	cmp	byte ptr [rdi], 32
	ja	.LBB548_72
	.p2align	4, 0x90
.LBB548_65:                             #   Parent Loop BB548_26 Depth=1
                                        #     Parent Loop BB548_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	rax, rbx
	sub	rax, rdi
	cmp	rax, 15
	jle	.LBB548_66
# %bb.70:                               #   in Loop: Header=BB548_65 Depth=3
	movdqu	xmm0, xmmword ptr [rdi]
	movdqa	xmm1, xmm0
	pcmpeqb	xmm1, xmm8
	movdqa	xmm2, xmm0
	pcmpeqb	xmm2, xmm9
	por	xmm2, xmm1
	por	xmm0, xmm6
	pcmpeqb	xmm0, xmm7
	por	xmm0, xmm2
	pmovmskb	eax, xmm0
	add	rdi, 16
	cmp	ax, -1
	je	.LBB548_65
# %bb.71:                               #   in Loop: Header=BB548_63 Depth=2
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rdi, rax
	add	rdi, -16
	jmp	.LBB548_72
	.p2align	4, 0x90
.LBB548_69:                             #   in Loop: Header=BB548_66 Depth=3
	add	rdi, 1
.LBB548_66:                             #   Parent Loop BB548_26 Depth=1
                                        #     Parent Loop BB548_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	rbx, rdi
	je	.LBB548_74
# %bb.67:                               #   in Loop: Header=BB548_66 Depth=3
	movzx	eax, byte ptr [rdi]
	cmp	rax, 32
	ja	.LBB548_72
# %bb.68:                               #   in Loop: Header=BB548_66 Depth=3
	bt	rsi, rax
	jb	.LBB548_69
	.p2align	4, 0x90
.LBB548_72:                             #   in Loop: Header=BB548_63 Depth=2
	cmp	rdi, rbx
	jae	.LBB548_73
# %bb.75:                               #   in Loop: Header=BB548_63 Depth=2
	mov	al, byte ptr [rdi]
	cmp	al, 44
	je	.LBB548_80
# %bb.76:                               #   in Loop: Header=BB548_63 Depth=2
	cmp	al, 125
	je	.LBB548_99
# %bb.77:                               #   in Loop: Header=BB548_63 Depth=2
	cmp	al, 47
	jne	.LBB548_20
# %bb.78:                               #   in Loop: Header=BB548_63 Depth=2
	mov	rcx, r15
	mov	rdx, rdi
	call	"??$parse_comment@$00$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	mov	rdi, rax
	cmp	rax, r15
	jne	.LBB548_63
	jmp	.LBB548_79
	.p2align	4, 0x90
.LBB548_80:                             #   in Loop: Header=BB548_26 Depth=1
	add	rdi, 1
	jmp	.LBB548_81
.LBB548_27:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB548_28
.LBB548_40:
	mov	rbx, rax
.LBB548_41:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 36
	jmp	.LBB548_42
.LBB548_59:
	mov	rbx, rax
.LBB548_60:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 38
	jmp	.LBB548_42
.LBB548_62:
	mov	rcx, r15
	mov	dl, 39
.LBB548_28:
	mov	r8, r14
.LBB548_29:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB548_73:
	mov	rbx, rdi
.LBB548_74:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 40
	jmp	.LBB548_42
.LBB548_1:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 6
	jmp	.LBB548_22
.LBB548_91:
	mov	rbx, rdi
.LBB548_92:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 41
.LBB548_42:
	mov	r9, r14
.LBB548_43:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB548_24:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8d, 24
	jmp	.LBB548_22
.LBB548_13:
	mov	rbx, rdi
.LBB548_14:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8b, 33
	xor	r9d, r9d
	jmp	.LBB548_43
.LBB548_98:
	xor	r14d, r14d
.LBB548_99:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rdi, 1
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB548_48:
	mov	rcx, r15
	mov	rdx, rax
	jmp	.LBB548_21
.LBB548_20:
	mov	rcx, r15
	mov	rdx, rdi
.LBB548_21:
	mov	r8d, 1
.LBB548_22:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 48] # 16-byte Reload
	movaps	xmm8, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm9, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 104
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB548_47:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB548_28
.LBB548_97:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB548_28
.LBB548_79:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB548_28
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB549_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB549_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI549_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB549_28:
	cmp	rdi, rax
	je	.LBB549_39
# %bb.29:
	cmp	byte ptr [rax], 32
	ja	.LBB549_39
# %bb.30:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB549_31:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB549_32
# %bb.37:                               #   in Loop: Header=BB549_31 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB549_31
# %bb.38:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB549_39:
	cmp	rax, rdi
	jae	.LBB549_40
# %bb.42:
	test	r9, r9
	je	.LBB549_45
# %bb.43:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB549_3:
	add	rax, 1
.LBB549_4:
	cmp	rdi, rax
	jbe	.LBB549_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB549_16
# %bb.8:
	cmp	ecx, 47
	jne	.LBB549_44
# %bb.9:
	add	rax, 1
.LBB549_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB549_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB549_13
.LBB549_44:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB549_12:
	mov	rax, rsi
.LBB549_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB549_26
# %bb.14:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB549_27
# %bb.15:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB549_45:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB549_32:
	cmp	rdi, rax
	je	.LBB549_41
# %bb.33:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB549_34:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB549_39
# %bb.35:                               #   in Loop: Header=BB549_34 Depth=1
	bt	r8, rdx
	jae	.LBB549_39
# %bb.36:                               #   in Loop: Header=BB549_34 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB549_34
.LBB549_41:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB549_6
.LBB549_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB549_6
.LBB549_40:
	mov	rdi, rax
	jmp	.LBB549_41
.LBB549_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB549_16:
	add	rax, 1
.LBB549_17:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB549_19
# %bb.18:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB549_20
.LBB549_19:
	mov	rax, rsi
.LBB549_20:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB549_21
# %bb.22:
	add	rax, 1
.LBB549_23:
	cmp	rdi, rax
	jbe	.LBB549_24
# %bb.25:
	cmp	byte ptr [rax], 47
	jne	.LBB549_16
.LBB549_26:
	add	rax, 1
	mov	rdi, rax
.LBB549_27:
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB549_21:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB549_6
.LBB549_24:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB549_6
	.p2align	2, 0x90
.LJTI549_0:
	.long	.LBB549_10-.LJTI549_0
	.long	.LBB549_17-.LJTI549_0
	.long	.LBB549_23-.LJTI549_0
	.long	.LBB549_28-.LJTI549_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB550_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB550_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI550_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB550_28:
	cmp	rdi, rax
	je	.LBB550_39
# %bb.29:
	cmp	byte ptr [rax], 32
	ja	.LBB550_39
# %bb.30:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB550_31:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB550_32
# %bb.37:                               #   in Loop: Header=BB550_31 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB550_31
# %bb.38:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB550_39:
	cmp	rax, rdi
	jae	.LBB550_40
# %bb.42:
	test	r9, r9
	je	.LBB550_45
# %bb.43:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB550_3:
	add	rax, 1
.LBB550_4:
	cmp	rdi, rax
	jbe	.LBB550_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB550_16
# %bb.8:
	cmp	ecx, 47
	jne	.LBB550_44
# %bb.9:
	add	rax, 1
.LBB550_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB550_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB550_13
.LBB550_44:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB550_12:
	mov	rax, rsi
.LBB550_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB550_26
# %bb.14:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB550_27
# %bb.15:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB550_45:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB550_32:
	cmp	rdi, rax
	je	.LBB550_41
# %bb.33:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB550_34:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB550_39
# %bb.35:                               #   in Loop: Header=BB550_34 Depth=1
	bt	r8, rdx
	jae	.LBB550_39
# %bb.36:                               #   in Loop: Header=BB550_34 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB550_34
.LBB550_41:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB550_6
.LBB550_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB550_6
.LBB550_40:
	mov	rdi, rax
	jmp	.LBB550_41
.LBB550_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB550_16:
	add	rax, 1
.LBB550_17:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB550_19
# %bb.18:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB550_20
.LBB550_19:
	mov	rax, rsi
.LBB550_20:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB550_21
# %bb.22:
	add	rax, 1
.LBB550_23:
	cmp	rdi, rax
	jbe	.LBB550_24
# %bb.25:
	cmp	byte ptr [rax], 47
	jne	.LBB550_16
.LBB550_26:
	add	rax, 1
	mov	rdi, rax
.LBB550_27:
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB550_21:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB550_6
.LBB550_24:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB550_6
	.p2align	2, 0x90
.LJTI550_0:
	.long	.LBB550_10-.LJTI550_0
	.long	.LBB550_17-.LJTI550_0
	.long	.LBB550_23-.LJTI550_0
	.long	.LBB550_28-.LJTI550_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB551_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB551_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI551_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB551_28:
	cmp	rdi, rax
	je	.LBB551_39
# %bb.29:
	cmp	byte ptr [rax], 32
	ja	.LBB551_39
# %bb.30:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB551_31:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB551_32
# %bb.37:                               #   in Loop: Header=BB551_31 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB551_31
# %bb.38:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB551_39:
	cmp	rax, rdi
	jae	.LBB551_40
# %bb.42:
	test	r9, r9
	je	.LBB551_45
# %bb.43:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB551_3:
	add	rax, 1
.LBB551_4:
	cmp	rdi, rax
	jbe	.LBB551_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB551_16
# %bb.8:
	cmp	ecx, 47
	jne	.LBB551_44
# %bb.9:
	add	rax, 1
.LBB551_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB551_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB551_13
.LBB551_44:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB551_12:
	mov	rax, rsi
.LBB551_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB551_26
# %bb.14:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB551_27
# %bb.15:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB551_45:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB551_32:
	cmp	rdi, rax
	je	.LBB551_41
# %bb.33:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB551_34:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB551_39
# %bb.35:                               #   in Loop: Header=BB551_34 Depth=1
	bt	r8, rdx
	jae	.LBB551_39
# %bb.36:                               #   in Loop: Header=BB551_34 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB551_34
.LBB551_41:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB551_6
.LBB551_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB551_6
.LBB551_40:
	mov	rdi, rax
	jmp	.LBB551_41
.LBB551_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB551_16:
	add	rax, 1
.LBB551_17:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB551_19
# %bb.18:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB551_20
.LBB551_19:
	mov	rax, rsi
.LBB551_20:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB551_21
# %bb.22:
	add	rax, 1
.LBB551_23:
	cmp	rdi, rax
	jbe	.LBB551_24
# %bb.25:
	cmp	byte ptr [rax], 47
	jne	.LBB551_16
.LBB551_26:
	add	rax, 1
	mov	rdi, rax
.LBB551_27:
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB551_21:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB551_6
.LBB551_24:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB551_6
	.p2align	2, 0x90
.LJTI551_0:
	.long	.LBB551_10-.LJTI551_0
	.long	.LBB551_17-.LJTI551_0
	.long	.LBB551_23-.LJTI551_0
	.long	.LBB551_28-.LJTI551_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB552_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB552_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI552_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB552_28:
	cmp	rdi, rax
	je	.LBB552_39
# %bb.29:
	cmp	byte ptr [rax], 32
	ja	.LBB552_39
# %bb.30:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB552_31:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB552_32
# %bb.37:                               #   in Loop: Header=BB552_31 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB552_31
# %bb.38:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB552_39:
	cmp	rax, rdi
	jae	.LBB552_40
# %bb.42:
	test	r9, r9
	je	.LBB552_45
# %bb.43:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB552_3:
	add	rax, 1
.LBB552_4:
	cmp	rdi, rax
	jbe	.LBB552_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB552_16
# %bb.8:
	cmp	ecx, 47
	jne	.LBB552_44
# %bb.9:
	add	rax, 1
.LBB552_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB552_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB552_13
.LBB552_44:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB552_12:
	mov	rax, rsi
.LBB552_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB552_26
# %bb.14:
	cmp	byte ptr [rsi + 152], 0
	je	.LBB552_27
# %bb.15:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB552_45:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB552_32:
	cmp	rdi, rax
	je	.LBB552_41
# %bb.33:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB552_34:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB552_39
# %bb.35:                               #   in Loop: Header=BB552_34 Depth=1
	bt	r8, rdx
	jae	.LBB552_39
# %bb.36:                               #   in Loop: Header=BB552_34 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB552_34
.LBB552_41:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB552_6
.LBB552_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB552_6
.LBB552_40:
	mov	rdi, rax
	jmp	.LBB552_41
.LBB552_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB552_16:
	add	rax, 1
.LBB552_17:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB552_19
# %bb.18:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB552_20
.LBB552_19:
	mov	rax, rsi
.LBB552_20:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB552_21
# %bb.22:
	add	rax, 1
.LBB552_23:
	cmp	rdi, rax
	jbe	.LBB552_24
# %bb.25:
	cmp	byte ptr [rax], 47
	jne	.LBB552_16
.LBB552_26:
	add	rax, 1
	mov	rdi, rax
.LBB552_27:
	mov	rax, rdi
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB552_21:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB552_6
.LBB552_24:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB552_6
	.p2align	2, 0x90
.LJTI552_0:
	.long	.LBB552_10-.LJTI552_0
	.long	.LBB552_17-.LJTI552_0
	.long	.LBB552_23-.LJTI552_0
	.long	.LBB552_28-.LJTI552_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB553_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI553_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB553_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB553_8:
	jmp	"??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_7:
	jmp	"??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_10:
	jmp	"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB553_5:
	jmp	"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI553_0:
	.long	.LBB553_10-.LJTI553_0
	.long	.LBB553_10-.LJTI553_0
	.long	.LBB553_10-.LJTI553_0
	.long	.LBB553_10-.LJTI553_0
	.long	.LBB553_10-.LJTI553_0
	.long	.LBB553_2-.LJTI553_0
	.long	.LBB553_2-.LJTI553_0
	.long	.LBB553_2-.LJTI553_0
	.long	.LBB553_3-.LJTI553_0
	.long	.LBB553_3-.LJTI553_0
	.long	.LBB553_3-.LJTI553_0
	.long	.LBB553_4-.LJTI553_0
	.long	.LBB553_4-.LJTI553_0
	.long	.LBB553_4-.LJTI553_0
	.long	.LBB553_4-.LJTI553_0
	.long	.LBB553_5-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_6-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_8-.LJTI553_0
	.long	.LBB553_7-.LJTI553_0
	.long	.LBB553_7-.LJTI553_0
	.long	.LBB553_7-.LJTI553_0
	.long	.LBB553_7-.LJTI553_0
	.long	.LBB553_7-.LJTI553_0
	.long	.LBB553_7-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
	.long	.LBB553_9-.LJTI553_0
                                        # -- End function
	.def	 "??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rax, qword ptr [rdi + 160]
	test	rcx, rcx
	je	.LBB554_1
# %bb.8:
	lea	rdx, [rcx - 1]
	mov	qword ptr [rdi + 120], rdx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	xor	edx, edx
	cmp	cl, 10
	sete	dl
	add	edx, 3
	cmp	cl, 11
	mov	ecx, 5
	cmovne	ecx, edx
	cmp	ecx, 3
	je	.LBB554_12
# %bb.9:
	cmp	ecx, 4
	je	.LBB554_17
# %bb.10:
	cmp	ecx, 5
	je	.LBB554_21
	jmp	.LBB554_29
.LBB554_1:
	mov	rcx, rax
	sub	rcx, rsi
	cmp	rcx, 4
	jb	.LBB554_11
# %bb.2:
	cmp	dword ptr [rsi], 1819047278
	jne	.LBB554_30
# %bb.3:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB554_5
# %bb.4:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB554_5:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB554_7
# %bb.6:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB554_7:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 7
	add	qword ptr [rdi + 24], 24
	add	rsi, 4
	jmp	.LBB554_29
.LBB554_11:
	add	rsi, 1
.LBB554_12:
	cmp	rsi, rax
	jae	.LBB554_13
# %bb.15:
	cmp	byte ptr [rsi], 117
	jne	.LBB554_30
# %bb.16:
	add	rsi, 1
.LBB554_17:
	cmp	rsi, rax
	jae	.LBB554_18
# %bb.19:
	cmp	byte ptr [rsi], 108
	jne	.LBB554_30
# %bb.20:
	add	rsi, 1
.LBB554_21:
	cmp	rsi, rax
	jae	.LBB554_22
# %bb.23:
	cmp	byte ptr [rsi], 108
	jne	.LBB554_30
# %bb.24:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB554_26
# %bb.25:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB554_26:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB554_28
# %bb.27:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB554_28:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 7
	add	qword ptr [rdi + 24], 24
	add	rsi, 1
.LBB554_29:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB554_30:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB554_22:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 11
	jmp	.LBB554_14
.LBB554_18:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 10
	jmp	.LBB554_14
.LBB554_13:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 9
.LBB554_14:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rax, qword ptr [rdi + 160]
	test	rcx, rcx
	je	.LBB555_1
# %bb.8:
	lea	rdx, [rcx - 1]
	mov	qword ptr [rdi + 120], rdx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	xor	edx, edx
	cmp	cl, 13
	sete	dl
	add	edx, 3
	cmp	cl, 14
	mov	ecx, 5
	cmovne	ecx, edx
	cmp	ecx, 3
	je	.LBB555_12
# %bb.9:
	cmp	ecx, 4
	je	.LBB555_17
# %bb.10:
	cmp	ecx, 5
	je	.LBB555_21
	jmp	.LBB555_29
.LBB555_1:
	mov	rcx, rax
	sub	rcx, rsi
	cmp	rcx, 4
	jb	.LBB555_11
# %bb.2:
	cmp	dword ptr [rsi], 1702195828
	jne	.LBB555_30
# %bb.3:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB555_5
# %bb.4:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB555_5:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB555_7
# %bb.6:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB555_7:
	mov	qword ptr [rax], rcx
	mov	word ptr [rax + 8], 262
	add	qword ptr [rdi + 24], 24
	add	rsi, 4
	jmp	.LBB555_29
.LBB555_11:
	add	rsi, 1
.LBB555_12:
	cmp	rsi, rax
	jae	.LBB555_13
# %bb.15:
	cmp	byte ptr [rsi], 114
	jne	.LBB555_30
# %bb.16:
	add	rsi, 1
.LBB555_17:
	cmp	rsi, rax
	jae	.LBB555_18
# %bb.19:
	cmp	byte ptr [rsi], 117
	jne	.LBB555_30
# %bb.20:
	add	rsi, 1
.LBB555_21:
	cmp	rsi, rax
	jae	.LBB555_22
# %bb.23:
	cmp	byte ptr [rsi], 101
	jne	.LBB555_30
# %bb.24:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB555_26
# %bb.25:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB555_26:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB555_28
# %bb.27:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB555_28:
	mov	qword ptr [rax], rcx
	mov	word ptr [rax + 8], 262
	add	qword ptr [rdi + 24], 24
	add	rsi, 1
.LBB555_29:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB555_30:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB555_22:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 14
	jmp	.LBB555_14
.LBB555_18:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 13
	jmp	.LBB555_14
.LBB555_13:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 12
.LBB555_14:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rax, qword ptr [rdi + 160]
	test	rcx, rcx
	je	.LBB556_1
# %bb.11:
	lea	rdx, [rcx - 1]
	mov	qword ptr [rdi + 120], rdx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	cmp	cl, 16
	je	.LBB556_20
# %bb.12:
	cmp	cl, 17
	je	.LBB556_24
# %bb.13:
	cmp	cl, 18
	je	.LBB556_28
# %bb.14:
	cmp	rsi, rax
	jae	.LBB556_15
.LBB556_17:
	cmp	byte ptr [rsi], 97
	jne	.LBB556_18
# %bb.19:
	add	rsi, 1
.LBB556_20:
	cmp	rsi, rax
	jae	.LBB556_21
# %bb.22:
	cmp	byte ptr [rsi], 108
	jne	.LBB556_18
# %bb.23:
	add	rsi, 1
.LBB556_24:
	cmp	rsi, rax
	jae	.LBB556_25
# %bb.26:
	cmp	byte ptr [rsi], 115
	jne	.LBB556_18
# %bb.27:
	add	rsi, 1
.LBB556_28:
	cmp	rsi, rax
	jae	.LBB556_29
# %bb.30:
	cmp	byte ptr [rsi], 101
	jne	.LBB556_18
# %bb.31:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB556_33
# %bb.32:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB556_33:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB556_35
# %bb.34:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB556_35:
	mov	qword ptr [rax], rcx
	mov	word ptr [rax + 8], 6
	add	qword ptr [rdi + 24], 24
	add	rsi, 1
	jmp	.LBB556_36
.LBB556_1:
	mov	rdx, rax
	sub	rdx, rsi
	lea	rcx, [rsi + 1]
	cmp	rdx, 5
	jb	.LBB556_2
# %bb.3:
	cmp	dword ptr [rcx], 1702063201
	jne	.LBB556_4
# %bb.6:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB556_8
# %bb.7:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB556_8:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB556_10
# %bb.9:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB556_10:
	mov	qword ptr [rax], rcx
	mov	word ptr [rax + 8], 6
	add	qword ptr [rdi + 24], 24
	add	rsi, 5
.LBB556_36:
	mov	rax, rsi
	add	rsp, 40
	pop	rdi
	pop	rsi
	ret
.LBB556_18:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB556_5
.LBB556_29:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 18
	jmp	.LBB556_16
.LBB556_25:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 17
	jmp	.LBB556_16
.LBB556_2:
	mov	rsi, rcx
	cmp	rsi, rax
	jb	.LBB556_17
.LBB556_15:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 15
	jmp	.LBB556_16
.LBB556_4:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 22
.LBB556_5:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB556_21:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 16
.LBB556_16:
	add	rsp, 40
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rdi, rdx
	mov	r15, rcx
	mov	rax, qword ptr [rcx + 120]
	mov	r12, qword ptr [rcx + 160]
	test	rax, rax
	je	.LBB557_1
# %bb.2:
	mov	rcx, qword ptr [r15 + 128]
	lea	rdx, [rax - 9]
	mov	qword ptr [r15 + 120], rdx
	mov	r14, qword ptr [rcx + rax - 9]
	jmp	.LBB557_3
.LBB557_1:
	add	rdi, 1
	xor	r14d, r14d
.LBB557_3:
	mov	rcx, rdi
	mov	rdx, r12
	call	"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
	mov	rsi, rax
	mov	rbx, rax
	sub	rbx, rdi
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB557_4
# %bb.6:
	add	r14, rbx
	cmp	rsi, r12
	jae	.LBB557_7
# %bb.13:
	movzx	eax, byte ptr [rsi]
	cmp	rax, 34
	jne	.LBB557_14
# %bb.24:
	mov	qword ptr [rsp + 40], rdi
	mov	qword ptr [rsp + 48], rbx
	lea	rdx, [rsp + 40]
	mov	rcx, r15
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rsi, 1
	mov	rax, rsi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB557_4:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8d, 27
.LBB557_5:
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB557_7:
	test	rbx, rbx
	je	.LBB557_11
# %bb.8:
	mov	r8, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r15 + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB557_10
# %bb.9:
	mov	rcx, r15
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 40]
.LBB557_10:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r15 + 40], rbx
.LBB557_11:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8b, 19
	jmp	.LBB557_12
.LBB557_14:
	test	al, al
	js	.LBB557_15
# %bb.18:
	cmp	al, 92
	jne	.LBB557_16
# %bb.19:
	test	rbx, rbx
	je	.LBB557_23
# %bb.20:
	mov	r8, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r15 + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB557_22
# %bb.21:
	mov	rcx, r15
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 40]
.LBB557_22:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r15 + 40], rbx
.LBB557_23:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8, r14
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB557_15:
	mov	rdx, r12
	sub	rdx, rsi
	and	eax, 127
	lea	rcx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	movzx	eax, word ptr [rcx + 2*rax]
	lea	rcx, [r15 + 136]
	mov	word ptr [r15 + 140], ax
	movzx	ebx, al
	cmp	rdx, rbx
	cmovae	rdx, rax
	mov	byte ptr [r15 + 142], dl
	movzx	r8d, dl
	mov	rdx, rsi
	call	memcpy
	mov	al, byte ptr [r15 + 142]
	cmp	al, byte ptr [r15 + 140]
	jae	.LBB557_16
# %bb.17:
	mov	rcx, r15
	mov	rdx, r12
	mov	r8b, 26
.LBB557_12:
	mov	r9, r14
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB557_16:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB557_5
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2136
	.seh_stackalloc 2136
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	r10, qword ptr [rcx + 160]
	mov	rax, r10
	sub	rax, rdx
	lea	r12, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r12, r10
	mov	qword ptr [rsp + 2128], 0
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB558_3
# %bb.1:
	lea	rcx, [rax - 1]
	mov	qword ptr [rdi + 120], rcx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rax - 1]
	lea	rbp, [rax - 9]
	mov	qword ptr [rdi + 120], rbp
	mov	r9, qword ptr [rdx + rax - 9]
	add	cl, -21
	cmp	cl, 11
	ja	.LBB558_147
# %bb.2:
	movzx	eax, cl
	lea	rcx, [rip + .LJTI558_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB558_5:
	cmp	rsi, r12
	jae	.LBB558_6
.LBB558_15:
	movsx	eax, byte ptr [rsi]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB558_198
# %bb.16:
	lea	rcx, [rip + .LJTI558_2]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB558_17:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 34
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_3:
	mov	r9, r8
.LBB558_4:
	add	rsi, 1
	cmp	rsi, r12
	jb	.LBB558_15
.LBB558_6:
	mov	rbx, qword ptr [rsp + 2128]
	test	rbx, rbx
	je	.LBB558_7
# %bb.8:
	mov	eax, 2147483646
	sub	rax, r9
	cmp	rbx, rax
	ja	.LBB558_9
# %bb.10:
	mov	r14, r10
	mov	rax, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [rdi + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB558_12
# %bb.11:
	mov	rcx, rdi
	mov	rdx, rbx
	mov	rbp, r9
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, rbp
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB558_12:
	add	r9, rbx
	mov	rbp, r9
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 80]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2128], 0
.LBB558_13:
	mov	rax, r14
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r14
	cmp	r12, rsi
	jbe	.LBB558_201
# %bb.14:
	mov	r10, r14
	mov	r9, rbp
	jmp	.LBB558_15
.LBB558_182:
	movzx	eax, word ptr [rdi + 140]
	mov	cl, byte ptr [rdi + 142]
	mov	edx, eax
	sub	dl, cl
	movzx	r15d, dl
	je	.LBB558_185
# %bb.183:
	mov	r14, r9
	movzx	eax, cl
	mov	rbx, r12
	sub	rbx, rsi
	cmp	rbx, r15
	jb	.LBB558_187
# %bb.184:
	mov	rbp, r10
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	movzx	eax, word ptr [rdi + 140]
	mov	byte ptr [rdi + 142], al
	mov	r9, r14
	mov	r10, rbp
.LBB558_185:
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	ja	.LBB558_198
# %bb.186:
	lea	rdx, [rdi + 136]
	movzx	ecx, cl
	lea	rbp, [rip + .LJTI558_1]
	movsxd	rcx, dword ptr [rbp + 4*rcx]
	add	rcx, rbp
	jmp	rcx
.LBB558_197:
	movzx	ecx, word ptr [rdx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB558_200
	jmp	.LBB558_198
.LBB558_19:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 47
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_18:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 92
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_20:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 8
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_21:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 12
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_22:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 10
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_23:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 13
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_24:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 9
	add	rsi, 1
	jmp	.LBB558_147
.LBB558_25:
	mov	rax, r12
	sub	rax, rsi
	cmp	rax, 11
	jb	.LBB558_74
# %bb.26:
	mov	ecx, dword ptr [rsi + 1]
	mov	edx, ecx
	shr	edx, 24
	lea	r8d, [rdx - 48]
	cmp	r8b, 10
	jb	.LBB558_28
# %bb.27:
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	eax, dl
	mov	r8d, 255
	cmovb	r8d, eax
.LBB558_28:
	mov	edx, ecx
	shr	edx, 16
	lea	ebp, [rdx - 48]
	cmp	bpl, 10
	jb	.LBB558_30
# %bb.29:
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	eax, dl
	mov	ebp, 255
	cmovb	ebp, eax
.LBB558_30:
	mov	eax, ecx
	shr	eax, 8
	lea	edx, [rax - 48]
	cmp	dl, 10
	jb	.LBB558_32
# %bb.31:
	and	al, -33
	lea	edx, [rax - 65]
	add	al, -55
	cmp	dl, 6
	movzx	eax, al
	mov	edx, 255
	cmovb	edx, eax
.LBB558_32:
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB558_34
# %bb.33:
	and	cl, -33
	lea	eax, [rcx - 65]
	add	cl, -55
	cmp	al, 6
	movzx	eax, cl
	mov	ebx, 255
	cmovb	ebx, eax
.LBB558_34:
	mov	eax, ebp
	or	al, r8b
	or	al, dl
	or	al, bl
	cmp	al, -1
	je	.LBB558_35
# %bb.39:
	movsx	eax, bpl
	movsx	ecx, dl
	movsx	edx, bl
	movsx	ebp, r8b
	shl	edx, 12
	shl	ecx, 8
	shl	eax, 4
	add	eax, ebp
	add	eax, ecx
	add	eax, edx
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB558_47
# %bb.40:
	add	rsi, 5
	mov	rcx, qword ptr [rsp + 2128]
	cmp	eax, 127
	ja	.LBB558_42
# %bb.41:
	mov	byte ptr [rsp + rcx + 80], al
	add	qword ptr [rsp + 2128], 1
	jmp	.LBB558_147
.LBB558_42:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB558_44
# %bb.43:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 80], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 81], al
	add	qword ptr [rsp + 2128], 2
	jmp	.LBB558_147
.LBB558_44:
	cmp	eax, 65535
	ja	.LBB558_46
# %bb.45:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 82], al
	add	qword ptr [rsp + 2128], 3
	jmp	.LBB558_147
.LBB558_199:
	movzx	ecx, word ptr [rdx]
	movzx	ebp, byte ptr [rdx + 2]
	shl	ebp, 16
	or	ebp, ecx
	and	ebp, 12640256
	cmp	ebp, 8429568
	je	.LBB558_200
	jmp	.LBB558_198
.LBB558_190:
	movzx	ecx, word ptr [rdx]
	movzx	ebp, byte ptr [rdx + 2]
	shl	ebp, 16
	or	ebp, ecx
	and	ebp, 12632064
	jmp	.LBB558_191
.LBB558_192:
	movzx	ecx, word ptr [rdx]
	movzx	ebp, byte ptr [rdx + 2]
	shl	ebp, 16
	or	ebp, ecx
	and	ebp, 12640256
.LBB558_191:
	cmp	ebp, 8421376
	je	.LBB558_200
	jmp	.LBB558_198
.LBB558_193:
	mov	ecx, -1061093632
	and	ecx, dword ptr [rdx]
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB558_200
	jmp	.LBB558_198
.LBB558_194:
	mov	ecx, -1061109760
	jmp	.LBB558_195
.LBB558_196:
	mov	ecx, -1061097472
.LBB558_195:
	and	ecx, dword ptr [rdx]
	cmp	ecx, -2139062272
	jne	.LBB558_198
.LBB558_200:
	movzx	ebx, al
	lea	rcx, [rsp + 80]
	mov	r8, rbx
	mov	r14, r9
	mov	rbp, r10
	call	memcpy
	mov	r10, rbp
	mov	r9, r14
	add	qword ptr [rsp + 2128], rbx
	add	rsi, r15
	jmp	.LBB558_147
.LBB558_46:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 82], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 83], al
	jmp	.LBB558_146
.LBB558_187:
	test	rbx, rbx
	je	.LBB558_189
# %bb.188:
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, rbx
	call	memcpy
	add	byte ptr [rdi + 142], bl
.LBB558_189:
	mov	rcx, rdi
	mov	rdx, r12
	mov	r8b, 26
	mov	r9, r14
	jmp	.LBB558_163
.LBB558_74:
	mov	r15, r10
	mov	r14, r9
	mov	rbx, qword ptr [rsp + 2128]
	test	rbx, rbx
	je	.LBB558_79
# %bb.75:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB558_9
# %bb.76:
	mov	rax, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [rdi + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB558_78
# %bb.77:
	mov	rcx, rdi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB558_78:
	add	r14, rbx
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 80]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2128], 0
	mov	rcx, r15
	mov	rax, r15
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r15
.LBB558_79:
	add	rsi, 1
	mov	r9, r14
	mov	r10, r15
.LBB558_80:
	cmp	rsi, r12
	jae	.LBB558_81
# %bb.82:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_86
# %bb.83:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.84:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_86:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 144], eax
.LBB558_87:
	cmp	rsi, r12
	jae	.LBB558_88
# %bb.89:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_92
# %bb.90:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.91:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_92:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 144], eax
.LBB558_93:
	cmp	rsi, r12
	jae	.LBB558_94
# %bb.95:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_98
# %bb.96:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.97:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_98:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 144], eax
.LBB558_99:
	cmp	rsi, r12
	jae	.LBB558_100
# %bb.101:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_104
# %bb.102:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.103:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_104:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 144]
	add	rsi, 1
	mov	dword ptr [rdi + 144], eax
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB558_111
# %bb.105:
	cmp	eax, 127
	ja	.LBB558_107
.LBB558_106:
	mov	byte ptr [rsp + 80], al
	add	qword ptr [rsp + 2128], 1
	jmp	.LBB558_147
.LBB558_81:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 22
	jmp	.LBB558_163
.LBB558_88:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 23
	jmp	.LBB558_163
.LBB558_94:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 24
	jmp	.LBB558_163
.LBB558_100:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 25
	jmp	.LBB558_163
.LBB558_111:
	cmp	eax, 56320
	jae	.LBB558_48
.LBB558_112:
	cmp	rsi, r12
	jae	.LBB558_113
# %bb.114:
	cmp	byte ptr [rsi], 92
	jne	.LBB558_198
# %bb.115:
	add	rsi, 1
.LBB558_116:
	cmp	rsi, r12
	jae	.LBB558_117
# %bb.118:
	cmp	byte ptr [rsi], 117
	jne	.LBB558_198
# %bb.119:
	add	rsi, 1
.LBB558_120:
	cmp	rsi, r12
	jae	.LBB558_121
# %bb.122:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_125
# %bb.123:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.124:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_125:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 148], eax
.LBB558_126:
	cmp	rsi, r12
	jae	.LBB558_127
# %bb.128:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_131
# %bb.129:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.130:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_131:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 148], eax
.LBB558_132:
	cmp	rsi, r12
	jae	.LBB558_133
# %bb.134:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_137
# %bb.135:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.136:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_137:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 148], eax
.LBB558_138:
	cmp	rsi, r12
	jae	.LBB558_139
# %bb.140:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB558_143
# %bb.141:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB558_85
# %bb.142:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB558_85
.LBB558_143:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 148]
	add	rsi, 1
	mov	dword ptr [rdi + 148], eax
	mov	ecx, eax
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB558_85
# %bb.144:
	mov	ecx, dword ptr [rdi + 144]
	shl	ecx, 10
	add	eax, ecx
	add	eax, -56613888
	cmp	eax, 127
	jbe	.LBB558_106
.LBB558_107:
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB558_109
# %bb.108:
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 80], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 81], al
	add	qword ptr [rsp + 2128], 2
	jmp	.LBB558_147
.LBB558_85:
	mov	rcx, rdi
	mov	rdx, rsi
.LBB558_37:
	mov	r8d, 16
.LBB558_38:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rsi, rax
	jmp	.LBB558_160
.LBB558_109:
	cmp	eax, 65535
	ja	.LBB558_145
# %bb.110:
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 80], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 81], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 82], al
	add	qword ptr [rsp + 2128], 3
	jmp	.LBB558_147
.LBB558_145:
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 80], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 81], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 82], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 83], al
.LBB558_146:
	add	qword ptr [rsp + 2128], 4
.LBB558_147:
	lea	rbx, [rdi + 136]
	lea	rdx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	r15, [rsp + 80]
	mov	r13d, -1061109760
	mov	r14d, -1061097472
	mov	ebp, 1
.LBB558_148:                            # =>This Inner Loop Header: Depth=1
	cmp	rsi, r12
	jae	.LBB558_149
.LBB558_157:                            #   in Loop: Header=BB558_148 Depth=1
	movzx	eax, byte ptr [rsi]
	cmp	rax, 34
	je	.LBB558_158
# %bb.164:                              #   in Loop: Header=BB558_148 Depth=1
	test	al, al
	js	.LBB558_165
# %bb.179:                              #   in Loop: Header=BB558_148 Depth=1
	cmp	al, 92
	je	.LBB558_4
# %bb.180:                              #   in Loop: Header=BB558_148 Depth=1
	cmp	al, 31
	jbe	.LBB558_198
# %bb.181:                              #   in Loop: Header=BB558_148 Depth=1
	mov	rcx, rdx
	mov	r8, qword ptr [rsp + 2128]
	lea	rdx, [r8 + 1]
	mov	qword ptr [rsp + 2128], rdx
	mov	byte ptr [rsp + r8 + 80], al
	add	rsi, rbp
	mov	rdx, rcx
	jmp	.LBB558_148
.LBB558_149:                            #   in Loop: Header=BB558_148 Depth=1
	mov	r12, qword ptr [rsp + 2128]
	test	r12, r12
	mov	qword ptr [rsp + 48], r10 # 8-byte Spill
	je	.LBB558_150
# %bb.151:                              #   in Loop: Header=BB558_148 Depth=1
	mov	eax, 2147483646
	sub	rax, r9
	cmp	r12, rax
	ja	.LBB558_9
# %bb.152:                              #   in Loop: Header=BB558_148 Depth=1
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [r12 + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB558_154
# %bb.153:                              #   in Loop: Header=BB558_148 Depth=1
	mov	rcx, rdi
	mov	rdx, r12
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB558_154:                            #   in Loop: Header=BB558_148 Depth=1
	add	r9, r12
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	add	rcx, r8
	add	rcx, 24
	mov	rdx, r15
	mov	r8, r12
	call	memcpy
	add	qword ptr [rdi + 40], r12
	mov	qword ptr [rsp + 2128], 0
.LBB558_155:                            #   in Loop: Header=BB558_148 Depth=1
	mov	r10, qword ptr [rsp + 48] # 8-byte Reload
	mov	rax, r10
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r10
	cmp	r12, rsi
	lea	rdx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	jbe	.LBB558_161
# %bb.156:                              #   in Loop: Header=BB558_148 Depth=1
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB558_157
.LBB558_165:                            #   in Loop: Header=BB558_148 Depth=1
	mov	qword ptr [rsp + 48], r10 # 8-byte Spill
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	mov	rcx, r12
	sub	rcx, rsi
	and	eax, 127
	movzx	eax, word ptr [rdx + 2*rax]
	mov	word ptr [rdi + 140], ax
	movzx	edx, al
	cmp	rcx, rdx
	cmovae	rcx, rax
	mov	byte ptr [rdi + 142], cl
	movzx	r8d, cl
	mov	rcx, rbx
	mov	rdx, rsi
	call	memcpy
	movzx	eax, word ptr [rdi + 140]
	cmp	byte ptr [rdi + 142], al
	jb	.LBB558_166
# %bb.167:                              #   in Loop: Header=BB558_148 Depth=1
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	ja	.LBB558_198
# %bb.168:                              #   in Loop: Header=BB558_148 Depth=1
	movzx	ecx, cl
	lea	rdx, [rip + .LJTI558_3]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB558_176:                            #   in Loop: Header=BB558_148 Depth=1
	movzx	ecx, word ptr [rbx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB558_178
	jmp	.LBB558_198
.LBB558_177:                            #   in Loop: Header=BB558_148 Depth=1
	movzx	ecx, word ptr [rbx]
	movzx	edx, byte ptr [rbx + 2]
	shl	edx, 16
	or	edx, ecx
	and	edx, 12640256
	cmp	edx, 8429568
	je	.LBB558_178
	jmp	.LBB558_198
.LBB558_169:                            #   in Loop: Header=BB558_148 Depth=1
	movzx	ecx, word ptr [rbx]
	movzx	edx, byte ptr [rbx + 2]
	shl	edx, 16
	or	edx, ecx
	and	edx, 12632064
	jmp	.LBB558_170
.LBB558_171:                            #   in Loop: Header=BB558_148 Depth=1
	movzx	ecx, word ptr [rbx]
	movzx	edx, byte ptr [rbx + 2]
	shl	edx, 16
	or	edx, ecx
	and	edx, 12640256
.LBB558_170:                            #   in Loop: Header=BB558_148 Depth=1
	cmp	edx, 8421376
	je	.LBB558_178
	jmp	.LBB558_198
.LBB558_172:                            #   in Loop: Header=BB558_148 Depth=1
	mov	ecx, dword ptr [rbx]
	mov	edx, -1061093632
	and	ecx, edx
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB558_178
	jmp	.LBB558_198
.LBB558_173:                            #   in Loop: Header=BB558_148 Depth=1
	mov	ecx, dword ptr [rbx]
	and	ecx, r13d
	jmp	.LBB558_174
.LBB558_175:                            #   in Loop: Header=BB558_148 Depth=1
	mov	ecx, dword ptr [rbx]
	and	ecx, r14d
.LBB558_174:                            #   in Loop: Header=BB558_148 Depth=1
	cmp	ecx, -2139062272
	jne	.LBB558_198
.LBB558_178:                            #   in Loop: Header=BB558_148 Depth=1
	movzx	eax, ax
	movzx	r8d, al
	mov	qword ptr [rsp + 56], r8 # 8-byte Spill
	mov	rcx, qword ptr [rsp + 2128]
	add	rcx, r15
	mov	rdx, rbx
	call	memcpy
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	add	qword ptr [rsp + 2128], rax
	add	rsi, rax
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	r10, qword ptr [rsp + 48] # 8-byte Reload
	lea	rdx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	jmp	.LBB558_148
.LBB558_150:                            #   in Loop: Header=BB558_148 Depth=1
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	jmp	.LBB558_155
.LBB558_158:
	mov	rax, qword ptr [rsp + 2128]
	mov	ecx, 2147483646
	sub	rcx, r9
	cmp	rax, rcx
	ja	.LBB558_9
# %bb.159:
	mov	qword ptr [rsp + 64], r15
	mov	qword ptr [rsp + 72], rax
	lea	rdx, [rsp + 64]
	mov	rcx, rdi
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rsi, 1
.LBB558_160:
	mov	rax, rsi
	add	rsp, 2136
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB558_9:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 27
	jmp	.LBB558_38
.LBB558_121:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 29
	jmp	.LBB558_163
.LBB558_127:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 30
	jmp	.LBB558_163
.LBB558_139:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 32
	jmp	.LBB558_163
.LBB558_113:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 27
	jmp	.LBB558_163
.LBB558_117:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 28
	jmp	.LBB558_163
.LBB558_133:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 31
.LBB558_163:
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rsi, rax
	jmp	.LBB558_160
.LBB558_35:
	lea	rax, [rsi + 1]
	cmp	bl, -1
	cmove	rax, rsi
	lea	rcx, [rax + 1]
	cmp	dl, -1
	cmove	rcx, rax
	lea	rdx, [rcx + 1]
	cmp	bpl, -1
	cmove	rdx, rcx
.LBB558_36:
	mov	rcx, rdi
	jmp	.LBB558_37
.LBB558_47:
	cmp	eax, 56320
	jae	.LBB558_48
# %bb.49:
	cmp	byte ptr [rsi + 5], 92
	jne	.LBB558_50
# %bb.51:
	cmp	byte ptr [rsi + 6], 117
	jne	.LBB558_52
# %bb.53:
	mov	r11, r10
	mov	r10, r9
	mov	edx, dword ptr [rsi + 7]
	mov	ecx, edx
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB558_55
# %bb.54:
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	ecx, cl
	mov	r8d, 255
	cmovb	r8d, ecx
.LBB558_55:
	mov	ecx, edx
	shr	ecx, 16
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB558_57
# %bb.56:
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	ecx, cl
	mov	ebp, 255
	cmovb	ebp, ecx
.LBB558_57:
	mov	ecx, edx
	shr	ecx, 8
	lea	r9d, [rcx - 48]
	cmp	r9b, 10
	jb	.LBB558_59
# %bb.58:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r9d, 255
	cmovb	r9d, ecx
.LBB558_59:
	lea	ecx, [rdx - 48]
	cmp	cl, 10
	jb	.LBB558_61
# %bb.60:
	and	dl, -33
	lea	ecx, [rdx - 65]
	add	dl, -55
	cmp	cl, 6
	movzx	edx, dl
	mov	ecx, 255
	cmovb	ecx, edx
.LBB558_61:
	lea	rdx, [rsi + 7]
	mov	ebx, ebp
	or	bl, r8b
	or	bl, r9b
	or	bl, cl
	cmp	bl, -1
	je	.LBB558_62
# %bb.63:
	movsx	ebp, bpl
	movsx	ebx, r9b
	movsx	ecx, cl
	movsx	r8d, r8b
	shl	ecx, 12
	shl	ebx, 8
	shl	ebp, 4
	add	ebp, r8d
	add	ebp, ebx
	add	ebp, ecx
	mov	ecx, ebp
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB558_64
# %bb.66:
	add	rsi, 11
	shl	eax, 10
	add	eax, ebp
	add	eax, -56613888
	mov	rcx, qword ptr [rsp + 2128]
	cmp	eax, 127
	ja	.LBB558_69
# %bb.67:
	mov	byte ptr [rsp + rcx + 80], al
	add	qword ptr [rsp + 2128], 1
	jmp	.LBB558_68
.LBB558_69:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB558_71
# %bb.70:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 80], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 81], al
	add	qword ptr [rsp + 2128], 2
	jmp	.LBB558_68
.LBB558_71:
	cmp	eax, 65535
	ja	.LBB558_73
# %bb.72:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 82], al
	add	qword ptr [rsp + 2128], 3
	jmp	.LBB558_68
.LBB558_73:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 82], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 83], al
	add	qword ptr [rsp + 2128], 4
.LBB558_68:
	mov	r9, r10
	mov	r10, r11
	jmp	.LBB558_147
.LBB558_201:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 21
	mov	r9, rbp
	jmp	.LBB558_163
.LBB558_7:
	mov	r14, r10
	mov	rbp, r9
	jmp	.LBB558_13
.LBB558_161:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 20
	jmp	.LBB558_162
.LBB558_48:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 11
	jmp	.LBB558_38
.LBB558_166:
	mov	rcx, rdi
	mov	rdx, r12
	mov	r8b, 26
.LBB558_162:
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB558_163
.LBB558_50:
	add	rsi, 5
	jmp	.LBB558_198
.LBB558_52:
	add	rsi, 6
.LBB558_198:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB558_38
.LBB558_62:
	add	rsi, 8
	cmp	cl, -1
	cmove	rsi, rdx
	lea	rax, [rsi + 1]
	cmp	r9b, -1
	cmove	rax, rsi
	lea	rdx, [rax + 1]
	cmp	bpl, -1
	cmove	rdx, rax
	jmp	.LBB558_36
.LBB558_64:
	mov	rcx, rdi
	mov	r8d, 11
	jmp	.LBB558_38
	.p2align	2, 0x90
.LJTI558_0:
	.long	.LBB558_5-.LJTI558_0
	.long	.LBB558_80-.LJTI558_0
	.long	.LBB558_87-.LJTI558_0
	.long	.LBB558_93-.LJTI558_0
	.long	.LBB558_99-.LJTI558_0
	.long	.LBB558_182-.LJTI558_0
	.long	.LBB558_112-.LJTI558_0
	.long	.LBB558_116-.LJTI558_0
	.long	.LBB558_120-.LJTI558_0
	.long	.LBB558_126-.LJTI558_0
	.long	.LBB558_132-.LJTI558_0
	.long	.LBB558_138-.LJTI558_0
.LJTI558_1:
	.long	.LBB558_197-.LJTI558_1
	.long	.LBB558_199-.LJTI558_1
	.long	.LBB558_190-.LJTI558_1
	.long	.LBB558_192-.LJTI558_1
	.long	.LBB558_193-.LJTI558_1
	.long	.LBB558_194-.LJTI558_1
	.long	.LBB558_196-.LJTI558_1
.LJTI558_2:
	.long	.LBB558_17-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_19-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_18-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_20-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_21-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_22-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_23-.LJTI558_2
	.long	.LBB558_198-.LJTI558_2
	.long	.LBB558_24-.LJTI558_2
	.long	.LBB558_25-.LJTI558_2
.LJTI558_3:
	.long	.LBB558_176-.LJTI558_3
	.long	.LBB558_177-.LJTI558_3
	.long	.LBB558_169-.LJTI558_3
	.long	.LBB558_171-.LJTI558_3
	.long	.LBB558_172-.LJTI558_3
	.long	.LBB558_173-.LJTI558_3
	.long	.LBB558_175-.LJTI558_3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB559_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB559_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI559_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB559_22:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB559_24
# %bb.23:
	mov	rbx, rax
.LBB559_7:
	cmp	rbx, rdi
	jne	.LBB559_8
	jmp	.LBB559_20
.LBB559_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB559_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB559_20
.LBB559_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB559_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB559_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB559_11
# %bb.16:                               #   in Loop: Header=BB559_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB559_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB559_18:
	cmp	rbx, rdi
	jae	.LBB559_19
# %bb.69:
	cmp	byte ptr [rbx], 93
	jne	.LBB559_26
	jmp	.LBB559_70
.LBB559_66:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB559_68
# %bb.67:
	mov	rbx, rax
	jmp	.LBB559_34
.LBB559_11:
	cmp	rdi, rbx
	je	.LBB559_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB559_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB559_18
# %bb.14:                               #   in Loop: Header=BB559_13 Depth=1
	bt	rax, rcx
	jae	.LBB559_18
# %bb.15:                               #   in Loop: Header=BB559_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB559_13
.LBB559_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB559_21
.LBB559_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB559_5
.LBB559_19:
	mov	rdi, rbx
	jmp	.LBB559_20
.LBB559_24:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB559_25
.LBB559_68:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB559_25
.LBB559_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB559_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB559_25:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB559_26:
	add	r14, 1
	cmp	r14, 2147483647
	jae	.LBB559_27
# %bb.28:
	mov	rax, qword ptr [r15 + 120]
.LBB559_29:
	test	rax, rax
	je	.LBB559_30
# %bb.31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB559_32
.LBB559_30:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB559_32:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB559_33
.LBB559_34:
	cmp	rbx, rdi
	je	.LBB559_47
# %bb.35:
	cmp	byte ptr [rbx], 32
	ja	.LBB559_45
# %bb.36:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB559_37:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB559_38
# %bb.43:                               #   in Loop: Header=BB559_37 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB559_37
# %bb.44:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB559_45:
	cmp	rbx, rdi
	jae	.LBB559_46
# %bb.48:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB559_49
# %bb.51:
	add	rbx, 1
.LBB559_52:
	cmp	rbx, rdi
	je	.LBB559_65
# %bb.53:
	cmp	byte ptr [rbx], 32
	ja	.LBB559_63
# %bb.54:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB559_55:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB559_56
# %bb.61:                               #   in Loop: Header=BB559_55 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB559_55
# %bb.62:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB559_63:
	cmp	rbx, rdi
	jb	.LBB559_26
# %bb.64:
	mov	rdi, rbx
	jmp	.LBB559_65
.LBB559_38:
	cmp	rdi, rbx
	je	.LBB559_47
# %bb.39:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB559_40:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB559_45
# %bb.41:                               #   in Loop: Header=BB559_40 Depth=1
	bt	rax, rcx
	jae	.LBB559_45
# %bb.42:                               #   in Loop: Header=BB559_40 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB559_40
.LBB559_47:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB559_21
.LBB559_56:
	cmp	rdi, rbx
	je	.LBB559_65
# %bb.57:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB559_58:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB559_63
# %bb.59:                               #   in Loop: Header=BB559_58 Depth=1
	bt	rax, rcx
	jae	.LBB559_63
# %bb.60:                               #   in Loop: Header=BB559_58 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB559_58
.LBB559_65:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB559_21
.LBB559_27:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB559_5
.LBB559_33:
	mov	rcx, r15
	mov	dl, 46
	jmp	.LBB559_25
.LBB559_46:
	mov	rdi, rbx
	jmp	.LBB559_47
.LBB559_49:
	cmp	al, 93
	jne	.LBB559_50
.LBB559_70:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB559_50:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB559_5
	.p2align	2, 0x90
.LJTI559_0:
	.long	.LBB559_22-.LJTI559_0
	.long	.LBB559_29-.LJTI559_0
	.long	.LBB559_34-.LJTI559_0
	.long	.LBB559_52-.LJTI559_0
	.long	.LBB559_66-.LJTI559_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB560_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB560_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI560_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB560_25:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB560_27
# %bb.26:
	mov	rbx, rax
.LBB560_7:
	cmp	rbx, rdi
	jne	.LBB560_8
	jmp	.LBB560_20
.LBB560_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB560_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB560_20
.LBB560_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB560_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB560_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB560_11
# %bb.16:                               #   in Loop: Header=BB560_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB560_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB560_18:
	cmp	rbx, rdi
	jae	.LBB560_19
# %bb.22:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB560_30
	jmp	.LBB560_23
.LBB560_11:
	cmp	rdi, rbx
	je	.LBB560_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB560_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB560_18
# %bb.14:                               #   in Loop: Header=BB560_13 Depth=1
	bt	rax, rcx
	jae	.LBB560_18
# %bb.15:                               #   in Loop: Header=BB560_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB560_13
.LBB560_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB560_21
.LBB560_53:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB560_55
# %bb.54:
	mov	rbx, rax
	jmp	.LBB560_39
.LBB560_108:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB560_110
# %bb.109:
	mov	rbx, rax
	jmp	.LBB560_94
.LBB560_111:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB560_113
# %bb.112:
	mov	rbx, rax
	jmp	.LBB560_78
.LBB560_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB560_5
.LBB560_19:
	mov	rdi, rbx
	jmp	.LBB560_20
.LBB560_27:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB560_28
.LBB560_55:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB560_28
.LBB560_110:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB560_28
.LBB560_113:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB560_28
.LBB560_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB560_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB560_23:
	cmp	al, 125
	jne	.LBB560_24
# %bb.115:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB560_24:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB560_5
.LBB560_28:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB560_29:
	cmp	byte ptr [rbx], 34
	jne	.LBB560_24
.LBB560_30:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB560_114
# %bb.31:
	mov	rax, qword ptr [r15 + 120]
.LBB560_32:
	test	rax, rax
	je	.LBB560_36
# %bb.33:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB560_34
# %bb.35:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB560_37
.LBB560_36:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB560_37
.LBB560_34:
	call	"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB560_37:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB560_38
.LBB560_39:
	cmp	rbx, rdi
	je	.LBB560_52
# %bb.40:
	cmp	byte ptr [rbx], 32
	ja	.LBB560_50
# %bb.41:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB560_42:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB560_43
# %bb.48:                               #   in Loop: Header=BB560_42 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB560_42
# %bb.49:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB560_50:
	cmp	rbx, rdi
	jae	.LBB560_51
# %bb.56:
	cmp	byte ptr [rbx], 58
	jne	.LBB560_24
# %bb.57:
	add	rbx, 1
.LBB560_58:
	cmp	rbx, rdi
	je	.LBB560_71
# %bb.59:
	cmp	byte ptr [rbx], 32
	ja	.LBB560_69
# %bb.60:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB560_61:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB560_62
# %bb.67:                               #   in Loop: Header=BB560_61 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB560_61
# %bb.68:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB560_69:
	cmp	rbx, rdi
	jae	.LBB560_70
# %bb.72:
	mov	rax, qword ptr [r15 + 120]
.LBB560_73:
	test	rax, rax
	je	.LBB560_74
# %bb.75:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB560_76
.LBB560_74:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB560_76:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB560_77
.LBB560_78:
	cmp	rbx, rdi
	je	.LBB560_91
# %bb.79:
	cmp	byte ptr [rbx], 32
	ja	.LBB560_89
# %bb.80:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB560_81:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB560_82
# %bb.87:                               #   in Loop: Header=BB560_81 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB560_81
# %bb.88:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB560_89:
	cmp	rbx, rdi
	jae	.LBB560_90
# %bb.92:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB560_23
# %bb.93:
	add	rbx, 1
.LBB560_94:
	cmp	rbx, rdi
	je	.LBB560_107
# %bb.95:
	cmp	byte ptr [rbx], 32
	ja	.LBB560_105
# %bb.96:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB560_97:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB560_98
# %bb.103:                              #   in Loop: Header=BB560_97 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB560_97
# %bb.104:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB560_105:
	cmp	rbx, rdi
	jb	.LBB560_29
# %bb.106:
	mov	rdi, rbx
	jmp	.LBB560_107
.LBB560_43:
	cmp	rdi, rbx
	je	.LBB560_52
# %bb.44:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB560_45:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB560_50
# %bb.46:                               #   in Loop: Header=BB560_45 Depth=1
	bt	rax, rcx
	jae	.LBB560_50
# %bb.47:                               #   in Loop: Header=BB560_45 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB560_45
.LBB560_52:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB560_21
.LBB560_62:
	cmp	rdi, rbx
	je	.LBB560_71
# %bb.63:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB560_64:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB560_69
# %bb.65:                               #   in Loop: Header=BB560_64 Depth=1
	bt	rax, rcx
	jae	.LBB560_69
# %bb.66:                               #   in Loop: Header=BB560_64 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB560_64
.LBB560_71:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB560_21
.LBB560_82:
	cmp	rdi, rbx
	je	.LBB560_91
# %bb.83:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB560_84:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB560_89
# %bb.85:                               #   in Loop: Header=BB560_84 Depth=1
	bt	rax, rcx
	jae	.LBB560_89
# %bb.86:                               #   in Loop: Header=BB560_84 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB560_84
.LBB560_91:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB560_21
.LBB560_98:
	cmp	rdi, rbx
	je	.LBB560_107
# %bb.99:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB560_100:                            # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB560_105
# %bb.101:                              #   in Loop: Header=BB560_100 Depth=1
	bt	rax, rcx
	jae	.LBB560_105
# %bb.102:                              #   in Loop: Header=BB560_100 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB560_100
.LBB560_107:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB560_21
.LBB560_114:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB560_5
.LBB560_38:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB560_28
.LBB560_77:
	mov	rcx, r15
	mov	dl, 39
	jmp	.LBB560_28
.LBB560_51:
	mov	rdi, rbx
	jmp	.LBB560_52
.LBB560_70:
	mov	rdi, rbx
	jmp	.LBB560_71
.LBB560_90:
	mov	rdi, rbx
	jmp	.LBB560_91
	.p2align	2, 0x90
.LJTI560_0:
	.long	.LBB560_25-.LJTI560_0
	.long	.LBB560_32-.LJTI560_0
	.long	.LBB560_39-.LJTI560_0
	.long	.LBB560_53-.LJTI560_0
	.long	.LBB560_58-.LJTI560_0
	.long	.LBB560_73-.LJTI560_0
	.long	.LBB560_78-.LJTI560_0
	.long	.LBB560_94-.LJTI560_0
	.long	.LBB560_108-.LJTI560_0
	.long	.LBB560_111-.LJTI560_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 96
	.seh_stackalloc 96
	movapd	xmmword ptr [rsp + 80], xmm7 # 16-byte Spill
	.seh_savexmm xmm7, 80
	movapd	xmmword ptr [rsp + 64], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 64
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rdx, qword ptr [rcx + 160]
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB561_16
# %bb.1:
	mov	rcx, qword ptr [rdi + 80]
	mov	qword ptr [rsp + 48], rcx
	movdqu	xmm0, xmmword ptr [rdi + 64]
	movdqa	xmmword ptr [rsp + 32], xmm0
	lea	rcx, [rax - 1]
	mov	qword ptr [rdi + 120], rcx
	mov	rcx, qword ptr [rdi + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -51
	cmp	al, 9
	ja	.LBB561_20
# %bb.2:
	movzx	eax, al
	lea	rcx, [rip + .LJTI561_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB561_3:
	cmp	rdx, rsi
	jbe	.LBB561_155
# %bb.4:
	mov	al, byte ptr [rsi]
	cmp	al, 46
	jne	.LBB561_157
# %bb.5:
	add	rsi, 1
.LBB561_6:
	cmp	rdx, rsi
	jbe	.LBB561_152
# %bb.7:
	mov	al, byte ptr [rsi]
	add	al, -48
	cmp	al, 10
	jae	.LBB561_153
.LBB561_8:
	cmp	rdx, rsi
	jbe	.LBB561_151
# %bb.9:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB561_15
# %bb.10:
	add	rsi, 1
	.p2align	4, 0x90
.LBB561_11:                             # =>This Inner Loop Header: Depth=1
	mov	rbp, qword ptr [rsp + 32]
	mov	rcx, rbp
	shr	rcx, 53
	jne	.LBB561_49
# %bb.12:                               #   in Loop: Header=BB561_11 Depth=1
	add	dword ptr [rsp + 40], -1
	lea	rcx, [4*rbp]
	add	rcx, rbp
	movzx	eax, al
	lea	rax, [rax + 2*rcx]
	add	rax, -48
	mov	qword ptr [rsp + 32], rax
	cmp	rdx, rsi
	je	.LBB561_59
# %bb.13:                               #   in Loop: Header=BB561_11 Depth=1
	movzx	eax, byte ptr [rsi]
	lea	ecx, [rax - 48]
	add	rsi, 1
	cmp	cl, 9
	jbe	.LBB561_11
# %bb.14:
	add	rsi, -1
	jmp	.LBB561_15
.LBB561_16:
	mov	rax, rdx
	sub	rax, rsi
	mov	word ptr [rsp + 48], 0
	mov	qword ptr [rsp + 40], 0
	cmp	rax, 33
	jb	.LBB561_20
# %bb.17:
	mov	qword ptr [rsp + 32], 0
	mov	al, byte ptr [rsi + 1]
	cmp	al, 46
	jne	.LBB561_57
# %bb.18:
	movdqu	xmm0, xmmword ptr [rsi + 2]
	movdqa	xmm1, xmmword ptr [rip + __xmm@46464646464646464646464646464646] # xmm1 = [70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70]
	paddb	xmm1, xmm0
	movdqa	xmm2, xmmword ptr [rip + __xmm@76767676767676767676767676767676] # xmm2 = [118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118]
	pcmpgtb	xmm2, xmm1
	pmovmskb	eax, xmm2
	test	ax, ax
	je	.LBB561_67
# %bb.19:
	bsf	ecx, eax
	jmp	.LBB561_68
.LBB561_20:
	cmp	rdx, rsi
	jbe	.LBB561_147
# %bb.21:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 49]
	cmp	cl, 8
	ja	.LBB561_149
# %bb.22:
	movzx	eax, al
	add	rsi, 1
	add	rax, -48
	mov	qword ptr [rsp + 32], rax
.LBB561_23:
	cmp	byte ptr [rsp + 49], 0
	je	.LBB561_32
# %bb.24:
	cmp	rdx, rsi
	jbe	.LBB561_154
# %bb.25:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB561_3
# %bb.26:
	add	rsi, 1
	movabs	rcx, 922337203685477580
	.p2align	4, 0x90
.LBB561_27:                             # =>This Inner Loop Header: Depth=1
	mov	rbp, qword ptr [rsp + 32]
	cmp	rbp, rcx
	ja	.LBB561_41
# %bb.28:                               #   in Loop: Header=BB561_27 Depth=1
	cmp	al, 57
	jl	.LBB561_30
# %bb.29:                               #   in Loop: Header=BB561_27 Depth=1
	cmp	rbp, rcx
	je	.LBB561_41
.LBB561_30:                             #   in Loop: Header=BB561_27 Depth=1
	lea	rbp, [rbp + 4*rbp]
	movzx	eax, al
	lea	rax, [rax + 2*rbp]
	add	rax, -48
	mov	qword ptr [rsp + 32], rax
	cmp	rdx, rsi
	je	.LBB561_122
# %bb.31:                               #   in Loop: Header=BB561_27 Depth=1
	movzx	eax, byte ptr [rsi]
	lea	ebp, [rax - 48]
	add	rsi, 1
	cmp	bpl, 9
	jbe	.LBB561_27
	jmp	.LBB561_40
.LBB561_32:
	cmp	rdx, rsi
	jbe	.LBB561_154
# %bb.33:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB561_3
# %bb.34:
	add	rsi, 1
	movabs	rcx, 1844674407370955161
	.p2align	4, 0x90
.LBB561_35:                             # =>This Inner Loop Header: Depth=1
	mov	rbp, qword ptr [rsp + 32]
	cmp	rbp, rcx
	ja	.LBB561_41
# %bb.36:                               #   in Loop: Header=BB561_35 Depth=1
	cmp	al, 54
	jl	.LBB561_38
# %bb.37:                               #   in Loop: Header=BB561_35 Depth=1
	cmp	rbp, rcx
	je	.LBB561_41
.LBB561_38:                             #   in Loop: Header=BB561_35 Depth=1
	lea	rbp, [rbp + 4*rbp]
	movzx	eax, al
	lea	rax, [rax + 2*rbp]
	add	rax, -48
	mov	qword ptr [rsp + 32], rax
	cmp	rdx, rsi
	je	.LBB561_122
# %bb.39:                               #   in Loop: Header=BB561_35 Depth=1
	movzx	eax, byte ptr [rsi]
	lea	ebp, [rax - 48]
	add	rsi, 1
	cmp	bpl, 9
	jbe	.LBB561_35
.LBB561_40:
	add	rsi, -1
	jmp	.LBB561_3
.LBB561_41:
	add	dword ptr [rsp + 40], 1
.LBB561_42:
	cmp	rdx, rsi
	jbe	.LBB561_138
# %bb.43:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	jbe	.LBB561_140
.LBB561_44:
	cmp	al, 46
	jne	.LBB561_15
# %bb.45:
	add	rsi, 1
.LBB561_46:
	cmp	rsi, rdx
	jae	.LBB561_71
.LBB561_47:
	mov	al, byte ptr [rsi]
	add	al, -48
	cmp	al, 9
	ja	.LBB561_153
# %bb.48:
	add	rsi, 1
.LBB561_49:
	cmp	rdx, rsi
	jbe	.LBB561_134
# %bb.50:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB561_15
# %bb.51:
	lea	rcx, [rdx - 1]
	.p2align	4, 0x90
.LBB561_52:                             # =>This Inner Loop Header: Depth=1
	cmp	rcx, rsi
	je	.LBB561_55
# %bb.53:                               #   in Loop: Header=BB561_52 Depth=1
	movzx	eax, byte ptr [rsi + 1]
	add	rsi, 1
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jb	.LBB561_52
.LBB561_15:
	or	al, 32
	cmp	al, 101
	jne	.LBB561_107
.LBB561_87:
	add	rsi, 1
.LBB561_88:
	cmp	rsi, rdx
	jae	.LBB561_146
.LBB561_89:
	mov	al, byte ptr [rsi]
	cmp	al, 45
	je	.LBB561_92
# %bb.90:
	cmp	al, 43
	jne	.LBB561_93
# %bb.91:
	add	rsi, 1
	jmp	.LBB561_93
.LBB561_55:
	mov	rsi, rdx
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
.LBB561_56:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	r8b, 54
	jmp	.LBB561_137
.LBB561_92:
	add	rsi, 1
	mov	byte ptr [rsp + 48], 1
.LBB561_93:
	cmp	rsi, rdx
	jae	.LBB561_144
# %bb.94:
	movzx	eax, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 9
	ja	.LBB561_153
# %bb.95:
	add	rsi, 1
	add	eax, -48
	mov	dword ptr [rsp + 44], eax
.LBB561_96:
	cmp	rdx, rsi
	jbe	.LBB561_135
# %bb.97:
	mov	cl, byte ptr [rsi]
	lea	eax, [rcx - 48]
	cmp	al, 9
	ja	.LBB561_107
# %bb.98:
	lea	rax, [rdx - 1]
	.p2align	4, 0x90
.LBB561_99:                             # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [rsp + 44]
	cmp	ebp, 214748364
	jg	.LBB561_104
# %bb.100:                              #   in Loop: Header=BB561_99 Depth=1
	cmp	cl, 56
	jl	.LBB561_102
# %bb.101:                              #   in Loop: Header=BB561_99 Depth=1
	cmp	ebp, 214748364
	je	.LBB561_104
.LBB561_102:                            #   in Loop: Header=BB561_99 Depth=1
	movsx	ecx, cl
	lea	ebp, [rbp + 4*rbp]
	lea	ecx, [rcx + 2*rbp]
	add	ecx, -48
	mov	dword ptr [rsp + 44], ecx
	cmp	rax, rsi
	je	.LBB561_106
# %bb.103:                              #   in Loop: Header=BB561_99 Depth=1
	movzx	ecx, byte ptr [rsi + 1]
	add	rsi, 1
	lea	ebp, [rcx - 48]
	cmp	bpl, 9
	jbe	.LBB561_99
	jmp	.LBB561_107
.LBB561_104:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 5
.LBB561_105:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rsi, rax
	jmp	.LBB561_120
.LBB561_106:
	mov	rsi, rdx
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
.LBB561_136:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	r8b, 60
	jmp	.LBB561_137
.LBB561_57:
	or	al, 32
	cmp	al, 101
	jne	.LBB561_61
# %bb.58:
	add	rsi, 2
	cmp	rsi, rdx
	jb	.LBB561_89
.LBB561_146:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 58
	jmp	.LBB561_148
.LBB561_59:
	mov	rsi, rdx
	cmp	byte ptr [rdi + 152], 0
	jne	.LBB561_60
.LBB561_107:
	mov	ecx, dword ptr [rsp + 44]
	mov	eax, ecx
	neg	eax
	cmp	byte ptr [rsp + 48], 0
	cmove	eax, ecx
	movsd	xmm0, qword ptr [rsp + 32] # xmm0 = mem[0],zero
	unpcklps	xmm0, xmmword ptr [rip + __xmm@00000000000000004530000043300000] # xmm0 = xmm0[0],mem[0],xmm0[1],mem[1]
	subpd	xmm0, xmmword ptr [rip + __xmm@45300000000000004330000000000000]
	movapd	xmm7, xmm0
	unpckhpd	xmm7, xmm0      # xmm7 = xmm7[1],xmm0[1]
	addsd	xmm7, xmm0
	add	eax, dword ptr [rsp + 40]
	cmp	byte ptr [rsp + 49], 0
	je	.LBB561_110
# %bb.108:
	xorpd	xmm7, xmmword ptr [rip + __xmm@80000000000000008000000000000000]
	lea	ecx, [rax + 308]
	cmp	ecx, 617
	jae	.LBB561_111
# %bb.109:
	mov	eax, ecx
	lea	rcx, [rip + "?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"]
	mulsd	xmm7, qword ptr [rcx + 8*rax]
	movapd	xmm6, xmm7
	jmp	.LBB561_114
.LBB561_110:
	lea	ecx, [rax + 308]
	cmp	ecx, 617
	jb	.LBB561_112
.LBB561_111:
	xorps	xmm1, xmm1
	cvtsi2sd	xmm1, eax
	movsd	xmm0, qword ptr [rip + __real@4024000000000000] # xmm0 = mem[0],zero
	call	pow
	movapd	xmm6, xmm0
	jmp	.LBB561_113
.LBB561_112:
	mov	eax, ecx
	lea	rcx, [rip + "?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"]
	movsd	xmm6, qword ptr [rcx + 8*rax] # xmm6 = mem[0],zero
.LBB561_113:
	mulsd	xmm6, xmm7
.LBB561_114:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB561_116
# %bb.115:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB561_116:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB561_118
# %bb.117:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB561_118:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 5
	movsd	qword ptr [rax + 16], xmm6
.LBB561_119:
	add	qword ptr [rdi + 24], 24
.LBB561_120:
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rsp + 64] # 16-byte Reload
	movaps	xmm7, xmmword ptr [rsp + 80] # 16-byte Reload
	add	rsp, 96
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r14
	ret
.LBB561_61:
	add	rsi, 1
	xor	ebx, ebx
.LBB561_62:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB561_64
# %bb.63:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB561_64:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB561_66
# %bb.65:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB561_66:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 3
	mov	qword ptr [rax + 16], rbx
	jmp	.LBB561_119
.LBB561_67:
	mov	ecx, 16
.LBB561_68:
	lea	r10, [rsi + 2]
	test	ecx, ecx
	je	.LBB561_72
# %bb.69:
	cmp	ecx, 18
	jbe	.LBB561_74
# %bb.70:
	mov	rsi, r10
	cmp	rsi, rdx
	jb	.LBB561_47
.LBB561_71:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 53
	jmp	.LBB561_148
.LBB561_72:
	mov	rcx, rdi
	mov	rdx, r10
.LBB561_73:
	mov	r8d, 1
	jmp	.LBB561_105
.LBB561_74:
	mov	r8d, ecx
	cmp	ecx, 4
	jb	.LBB561_78
# %bb.75:
	movd	ebp, xmm0
	lea	r14, [r8 - 4]
	mov	r11, r14
	and	r11, -4
	lea	r9, [r11 + 4]
	add	rsi, 6
	xor	ebx, ebx
	mov	rax, r14
	.p2align	4, 0x90
.LBB561_76:                             # =>This Inner Loop Header: Depth=1
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, bpl
	lea	rbx, [2*rbx]
	add	rbx, rbp
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rsi - 3]
	lea	rbx, [rbp + 2*rbx]
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rsi - 2]
	lea	rbx, [rbp + 2*rbx]
	lea	rbx, [rbx + 4*rbx]
	movsx	rbp, byte ptr [rsi - 1]
	lea	rbx, [2*rbx - 53328]
	add	rbx, rbp
	cmp	rax, 4
	jb	.LBB561_79
# %bb.77:                               #   in Loop: Header=BB561_76 Depth=1
	movzx	ebp, byte ptr [rsi]
	add	rsi, 4
	add	rax, -4
	jmp	.LBB561_76
.LBB561_78:
	xor	ebx, ebx
	mov	r14, r8
	mov	r9, r10
	jmp	.LBB561_80
.LBB561_79:
	add	r9, r10
	sub	r14, r11
.LBB561_80:
	cmp	r14, 3
	je	.LBB561_84
# %bb.81:
	cmp	r14, 2
	je	.LBB561_85
# %bb.82:
	cmp	r14, 1
	jne	.LBB561_86
# %bb.83:
	lea	rax, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r9]
	lea	rbx, [2*rax - 48]
	add	rbx, rbp
	jmp	.LBB561_86
.LBB561_84:
	lea	rax, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r9]
	lea	rax, [2*rax]
	add	rax, rbp
	lea	rax, [rax + 4*rax]
	movsx	rbp, byte ptr [r9 + 1]
	lea	rax, [rbp + 2*rax]
	lea	rax, [rax + 4*rax]
	movsx	rbp, byte ptr [r9 + 2]
	lea	rbx, [2*rax - 5328]
	add	rbx, rbp
	jmp	.LBB561_86
.LBB561_85:
	lea	rax, [rbx + 4*rbx]
	movsx	rbp, byte ptr [r9]
	lea	rax, [2*rax]
	add	rax, rbp
	lea	rax, [rax + 4*rax]
	movsx	rbp, byte ptr [r9 + 1]
	lea	rbx, [2*rax - 528]
	add	rbx, rbp
.LBB561_86:
	mov	qword ptr [rsp + 32], rbx
	neg	ecx
	mov	dword ptr [rsp + 40], ecx
	lea	rsi, [r10 + r8]
	mov	al, byte ptr [r10 + r8]
	mov	ecx, eax
	or	cl, 32
	cmp	cl, 101
	je	.LBB561_87
# %bb.121:
	add	al, -48
	cmp	al, 10
	jb	.LBB561_8
	jmp	.LBB561_107
.LBB561_122:
	mov	rsi, rdx
	cmp	byte ptr [rdi + 152], 0
	jne	.LBB561_158
.LBB561_124:
	cmp	byte ptr [rsp + 49], 0
	mov	rbx, qword ptr [rsp + 32]
	je	.LBB561_128
# %bb.125:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB561_127
# %bb.126:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB561_127:
	neg	rbx
	jmp	.LBB561_64
.LBB561_128:
	test	rbx, rbx
	jns	.LBB561_62
# %bb.129:
	mov	rax, qword ptr [rdi + 24]
	cmp	rax, qword ptr [rdi + 32]
	jb	.LBB561_131
# %bb.130:
	mov	rcx, rdi
	call	"?grow_one@stack@value_stack@json@boost@@QEAAXXZ"
	mov	rax, qword ptr [rdi + 24]
.LBB561_131:
	mov	rcx, qword ptr [rdi + 56]
	test	cl, 1
	je	.LBB561_133
# %bb.132:
	mov	rdx, rcx
	and	rdx, -4
	lock		add	qword ptr [rdx + 8], 1
.LBB561_133:
	mov	qword ptr [rax], rcx
	mov	byte ptr [rax + 8], 4
	mov	qword ptr [rax + 16], rbx
	jmp	.LBB561_119
.LBB561_134:
	mov	rdx, rsi
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
	jmp	.LBB561_56
.LBB561_135:
	mov	rdx, rsi
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
	jmp	.LBB561_136
.LBB561_138:
	mov	rdx, rsi
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
.LBB561_139:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	r8b, 52
	jmp	.LBB561_137
.LBB561_140:
	lea	rcx, [rdx - 1]
.LBB561_141:                            # =>This Inner Loop Header: Depth=1
	add	dword ptr [rsp + 40], 1
	cmp	rcx, rsi
	je	.LBB561_159
# %bb.142:                              #   in Loop: Header=BB561_141 Depth=1
	movzx	eax, byte ptr [rsi + 1]
	add	rsi, 1
	lea	ebp, [rax - 48]
	cmp	bpl, 10
	jae	.LBB561_44
	jmp	.LBB561_141
.LBB561_144:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_153
# %bb.145:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 59
	jmp	.LBB561_137
.LBB561_154:
	mov	rdx, rsi
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_124
.LBB561_158:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	r8b, 51
	jmp	.LBB561_137
.LBB561_147:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 50
.LBB561_148:
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	mov	rsi, rax
	jmp	.LBB561_120
.LBB561_149:
	cmp	al, 48
	jne	.LBB561_153
# %bb.150:
	add	rsi, 1
	mov	qword ptr [rsp + 32], 0
	jmp	.LBB561_3
.LBB561_151:
	mov	rdx, rsi
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
.LBB561_60:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	r8b, 57
.LBB561_137:
	call	"?suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@AEBUnumber@123@@Z"
	mov	rsi, rax
	jmp	.LBB561_120
.LBB561_152:
	cmp	byte ptr [rdi + 152], 0
	jne	.LBB561_160
.LBB561_153:
	mov	rcx, rdi
	mov	rdx, rsi
	jmp	.LBB561_73
.LBB561_155:
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_124
# %bb.156:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 55
	jmp	.LBB561_137
.LBB561_157:
	or	al, 32
	cmp	al, 101
	je	.LBB561_87
	jmp	.LBB561_124
.LBB561_159:
	mov	rsi, rdx
	cmp	byte ptr [rdi + 152], 0
	je	.LBB561_107
	jmp	.LBB561_139
.LBB561_160:
	lea	r9, [rsp + 32]
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 56
	jmp	.LBB561_137
	.p2align	2, 0x90
.LJTI561_0:
	.long	.LBB561_23-.LJTI561_0
	.long	.LBB561_42-.LJTI561_0
	.long	.LBB561_46-.LJTI561_0
	.long	.LBB561_49-.LJTI561_0
	.long	.LBB561_3-.LJTI561_0
	.long	.LBB561_6-.LJTI561_0
	.long	.LBB561_8-.LJTI561_0
	.long	.LBB561_88-.LJTI561_0
	.long	.LBB561_93-.LJTI561_0
	.long	.LBB561_96-.LJTI561_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB562_3
# %bb.1:
	lea	rbx, [rcx - 1]
	mov	qword ptr [rsi + 120], rbx
	mov	rdx, qword ptr [rsi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	add	cl, -5
	cmp	cl, 3
	ja	.LBB562_4
# %bb.2:
	movzx	ecx, cl
	lea	rdx, [rip + .LJTI562_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB562_26:
	cmp	rax, rdi
	jne	.LBB562_27
	jmp	.LBB562_39
.LBB562_3:
	add	rax, 1
	xor	ebx, ebx
.LBB562_4:
	cmp	rdi, rax
	jbe	.LBB562_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB562_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB562_42
# %bb.9:
	add	rax, 1
.LBB562_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB562_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB562_13
.LBB562_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB562_12:
	mov	rax, rsi
.LBB562_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB562_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB562_6
.LBB562_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
.LBB562_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB562_15:
	add	rax, 1
.LBB562_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB562_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB562_19
.LBB562_18:
	mov	rax, rsi
.LBB562_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB562_20
# %bb.21:
	add	rax, 1
.LBB562_22:
	cmp	rdi, rax
	jbe	.LBB562_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB562_15
.LBB562_25:
	add	rax, 1
	cmp	rax, rdi
	je	.LBB562_39
.LBB562_27:
	cmp	byte ptr [rax], 32
	ja	.LBB562_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB562_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB562_30
# %bb.35:                               #   in Loop: Header=BB562_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	ecx, xmm4
	add	rax, 16
	cmp	cx, -1
	je	.LBB562_29
# %bb.36:
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB562_37:
	cmp	rax, rdi
	jae	.LBB562_38
# %bb.40:
	test	rbx, rbx
	je	.LBB562_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB562_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB562_30:
	cmp	rdi, rax
	je	.LBB562_39
# %bb.31:
	movabs	rcx, 4294977024
	.p2align	4, 0x90
.LBB562_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB562_37
# %bb.33:                               #   in Loop: Header=BB562_32 Depth=1
	bt	rcx, rdx
	jae	.LBB562_37
# %bb.34:                               #   in Loop: Header=BB562_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB562_32
.LBB562_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB562_6
.LBB562_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB562_6
.LBB562_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB562_6
.LBB562_38:
	mov	rdi, rax
	jmp	.LBB562_39
	.p2align	2, 0x90
.LJTI562_0:
	.long	.LBB562_10-.LJTI562_0
	.long	.LBB562_16-.LJTI562_0
	.long	.LBB562_22-.LJTI562_0
	.long	.LBB562_26-.LJTI562_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB563_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB563_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI563_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB563_26:
	cmp	rdi, rax
	je	.LBB563_37
# %bb.27:
	cmp	byte ptr [rax], 32
	ja	.LBB563_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB563_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB563_30
# %bb.35:                               #   in Loop: Header=BB563_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB563_29
# %bb.36:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB563_37:
	cmp	rax, rdi
	jae	.LBB563_38
# %bb.40:
	test	r9, r9
	je	.LBB563_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB563_3:
	add	rax, 1
.LBB563_4:
	cmp	rdi, rax
	jbe	.LBB563_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB563_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB563_42
# %bb.9:
	add	rax, 1
.LBB563_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB563_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB563_13
.LBB563_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB563_12:
	mov	rax, rsi
.LBB563_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB563_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB563_6
.LBB563_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB563_30:
	cmp	rdi, rax
	je	.LBB563_39
# %bb.31:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB563_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB563_37
# %bb.33:                               #   in Loop: Header=BB563_32 Depth=1
	bt	r8, rdx
	jae	.LBB563_37
# %bb.34:                               #   in Loop: Header=BB563_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB563_32
.LBB563_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB563_6
.LBB563_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB563_6
.LBB563_38:
	mov	rdi, rax
	jmp	.LBB563_39
.LBB563_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB563_15:
	add	rax, 1
.LBB563_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB563_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB563_19
.LBB563_18:
	mov	rax, rsi
.LBB563_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB563_20
# %bb.21:
	add	rax, 1
.LBB563_22:
	cmp	rdi, rax
	jbe	.LBB563_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB563_15
.LBB563_25:
	add	rax, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB563_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB563_6
.LBB563_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB563_6
	.p2align	2, 0x90
.LJTI563_0:
	.long	.LBB563_10-.LJTI563_0
	.long	.LBB563_16-.LJTI563_0
	.long	.LBB563_22-.LJTI563_0
	.long	.LBB563_26-.LJTI563_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	.seh_endprologue
	mov	rdi, rdx
	mov	r15, rcx
	mov	rax, qword ptr [rcx + 120]
	mov	r12, qword ptr [rcx + 160]
	test	rax, rax
	je	.LBB564_1
# %bb.2:
	mov	rcx, qword ptr [r15 + 128]
	lea	rdx, [rax - 9]
	mov	qword ptr [r15 + 120], rdx
	mov	r14, qword ptr [rcx + rax - 9]
	jmp	.LBB564_3
.LBB564_1:
	add	rdi, 1
	xor	r14d, r14d
.LBB564_3:
	mov	rcx, rdi
	mov	rdx, r12
	call	"??$count_valid@$0A@@detail@json@boost@@YAPEBDPEBD0@Z"
	mov	rsi, rax
	mov	rbx, rax
	sub	rbx, rdi
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB564_4
# %bb.6:
	add	r14, rbx
	cmp	rsi, r12
	jae	.LBB564_7
# %bb.13:
	movzx	eax, byte ptr [rsi]
	cmp	rax, 34
	jne	.LBB564_14
# %bb.24:
	mov	qword ptr [rsp + 40], rdi
	mov	qword ptr [rsp + 48], rbx
	lea	rdx, [rsp + 40]
	mov	rcx, r15
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rsi, 1
	mov	rax, rsi
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	ret
.LBB564_4:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8d, 26
.LBB564_5:
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB564_7:
	test	rbx, rbx
	je	.LBB564_11
# %bb.8:
	mov	r8, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r15 + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB564_10
# %bb.9:
	mov	rcx, r15
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 40]
.LBB564_10:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r15 + 40], rbx
.LBB564_11:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8b, 19
	jmp	.LBB564_12
.LBB564_14:
	test	al, al
	js	.LBB564_15
# %bb.18:
	cmp	al, 92
	jne	.LBB564_16
# %bb.19:
	test	rbx, rbx
	je	.LBB564_23
# %bb.20:
	mov	r8, qword ptr [r15 + 24]
	mov	rdx, qword ptr [r15 + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [r15 + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB564_22
# %bb.21:
	mov	rcx, r15
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [r15 + 24]
	mov	rcx, qword ptr [r15 + 40]
.LBB564_22:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rdi
	mov	r8, rbx
	call	memcpy
	add	qword ptr [r15 + 40], rbx
.LBB564_23:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8, r14
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB564_15:
	mov	rdx, r12
	sub	rdx, rsi
	and	eax, 127
	lea	rcx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	movzx	eax, word ptr [rcx + 2*rax]
	lea	rcx, [r15 + 136]
	mov	word ptr [r15 + 140], ax
	movzx	ebx, al
	cmp	rdx, rbx
	cmovae	rdx, rax
	mov	byte ptr [r15 + 142], dl
	movzx	r8d, dl
	mov	rdx, rsi
	call	memcpy
	mov	al, byte ptr [r15 + 142]
	cmp	al, byte ptr [r15 + 140]
	jae	.LBB564_16
# %bb.17:
	mov	rcx, r15
	mov	rdx, r12
	mov	r8b, 26
.LBB564_12:
	mov	r9, r14
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB564_16:
	mov	rcx, r15
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB564_5
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbp
	.seh_pushreg rbp
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2136
	.seh_stackalloc 2136
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	r10, qword ptr [rcx + 160]
	mov	rax, r10
	sub	rax, rdx
	lea	r12, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r12, r10
	mov	qword ptr [rsp + 2128], 0
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB565_3
# %bb.1:
	lea	rcx, [rax - 1]
	mov	qword ptr [rdi + 120], rcx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rax - 1]
	lea	rbp, [rax - 9]
	mov	qword ptr [rdi + 120], rbp
	mov	r9, qword ptr [rdx + rax - 9]
	add	cl, -21
	cmp	cl, 11
	ja	.LBB565_147
# %bb.2:
	movzx	eax, cl
	lea	rcx, [rip + .LJTI565_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB565_5:
	cmp	rsi, r12
	jae	.LBB565_6
.LBB565_15:
	movsx	eax, byte ptr [rsi]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB565_198
# %bb.16:
	lea	rcx, [rip + .LJTI565_2]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB565_17:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 34
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_3:
	mov	r9, r8
.LBB565_4:
	add	rsi, 1
	cmp	rsi, r12
	jb	.LBB565_15
.LBB565_6:
	mov	rbx, qword ptr [rsp + 2128]
	test	rbx, rbx
	je	.LBB565_7
# %bb.8:
	mov	eax, 2147483646
	sub	rax, r9
	cmp	rbx, rax
	ja	.LBB565_9
# %bb.10:
	mov	r14, r10
	mov	rax, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [rdi + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB565_12
# %bb.11:
	mov	rcx, rdi
	mov	rdx, rbx
	mov	rbp, r9
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, rbp
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB565_12:
	add	r9, rbx
	mov	rbp, r9
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 80]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2128], 0
.LBB565_13:
	mov	rax, r14
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r14
	cmp	r12, rsi
	jbe	.LBB565_201
# %bb.14:
	mov	r10, r14
	mov	r9, rbp
	jmp	.LBB565_15
.LBB565_182:
	movzx	eax, word ptr [rdi + 140]
	mov	cl, byte ptr [rdi + 142]
	mov	edx, eax
	sub	dl, cl
	movzx	r15d, dl
	je	.LBB565_185
# %bb.183:
	mov	r14, r9
	movzx	eax, cl
	mov	rbx, r12
	sub	rbx, rsi
	cmp	rbx, r15
	jb	.LBB565_187
# %bb.184:
	mov	rbp, r10
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	movzx	eax, word ptr [rdi + 140]
	mov	byte ptr [rdi + 142], al
	mov	r9, r14
	mov	r10, rbp
.LBB565_185:
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	ja	.LBB565_198
# %bb.186:
	lea	rdx, [rdi + 136]
	movzx	ecx, cl
	lea	rbp, [rip + .LJTI565_1]
	movsxd	rcx, dword ptr [rbp + 4*rcx]
	add	rcx, rbp
	jmp	rcx
.LBB565_197:
	movzx	ecx, word ptr [rdx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB565_200
	jmp	.LBB565_198
.LBB565_19:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 47
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_18:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 92
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_20:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 8
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_21:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 12
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_22:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 10
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_23:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 13
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_24:
	mov	rax, qword ptr [rsp + 2128]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2128], rcx
	mov	byte ptr [rsp + rax + 80], 9
	add	rsi, 1
	jmp	.LBB565_147
.LBB565_25:
	mov	rax, r12
	sub	rax, rsi
	cmp	rax, 11
	jb	.LBB565_74
# %bb.26:
	mov	ecx, dword ptr [rsi + 1]
	mov	edx, ecx
	shr	edx, 24
	lea	r8d, [rdx - 48]
	cmp	r8b, 10
	jb	.LBB565_28
# %bb.27:
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	eax, dl
	mov	r8d, 255
	cmovb	r8d, eax
.LBB565_28:
	mov	edx, ecx
	shr	edx, 16
	lea	ebp, [rdx - 48]
	cmp	bpl, 10
	jb	.LBB565_30
# %bb.29:
	and	dl, -33
	lea	eax, [rdx - 65]
	add	dl, -55
	cmp	al, 6
	movzx	eax, dl
	mov	ebp, 255
	cmovb	ebp, eax
.LBB565_30:
	mov	eax, ecx
	shr	eax, 8
	lea	edx, [rax - 48]
	cmp	dl, 10
	jb	.LBB565_32
# %bb.31:
	and	al, -33
	lea	edx, [rax - 65]
	add	al, -55
	cmp	dl, 6
	movzx	eax, al
	mov	edx, 255
	cmovb	edx, eax
.LBB565_32:
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB565_34
# %bb.33:
	and	cl, -33
	lea	eax, [rcx - 65]
	add	cl, -55
	cmp	al, 6
	movzx	eax, cl
	mov	ebx, 255
	cmovb	ebx, eax
.LBB565_34:
	mov	eax, ebp
	or	al, r8b
	or	al, dl
	or	al, bl
	cmp	al, -1
	je	.LBB565_35
# %bb.39:
	movsx	eax, bpl
	movsx	ecx, dl
	movsx	edx, bl
	movsx	ebp, r8b
	shl	edx, 12
	shl	ecx, 8
	shl	eax, 4
	add	eax, ebp
	add	eax, ecx
	add	eax, edx
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB565_47
# %bb.40:
	add	rsi, 5
	mov	rcx, qword ptr [rsp + 2128]
	cmp	eax, 127
	ja	.LBB565_42
# %bb.41:
	mov	byte ptr [rsp + rcx + 80], al
	add	qword ptr [rsp + 2128], 1
	jmp	.LBB565_147
.LBB565_42:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB565_44
# %bb.43:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 80], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 81], al
	add	qword ptr [rsp + 2128], 2
	jmp	.LBB565_147
.LBB565_44:
	cmp	eax, 65535
	ja	.LBB565_46
# %bb.45:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 82], al
	add	qword ptr [rsp + 2128], 3
	jmp	.LBB565_147
.LBB565_199:
	movzx	ecx, word ptr [rdx]
	movzx	ebp, byte ptr [rdx + 2]
	shl	ebp, 16
	or	ebp, ecx
	and	ebp, 12640256
	cmp	ebp, 8429568
	je	.LBB565_200
	jmp	.LBB565_198
.LBB565_190:
	movzx	ecx, word ptr [rdx]
	movzx	ebp, byte ptr [rdx + 2]
	shl	ebp, 16
	or	ebp, ecx
	and	ebp, 12632064
	jmp	.LBB565_191
.LBB565_192:
	movzx	ecx, word ptr [rdx]
	movzx	ebp, byte ptr [rdx + 2]
	shl	ebp, 16
	or	ebp, ecx
	and	ebp, 12640256
.LBB565_191:
	cmp	ebp, 8421376
	je	.LBB565_200
	jmp	.LBB565_198
.LBB565_193:
	mov	ecx, -1061093632
	and	ecx, dword ptr [rdx]
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB565_200
	jmp	.LBB565_198
.LBB565_194:
	mov	ecx, -1061109760
	jmp	.LBB565_195
.LBB565_196:
	mov	ecx, -1061097472
.LBB565_195:
	and	ecx, dword ptr [rdx]
	cmp	ecx, -2139062272
	jne	.LBB565_198
.LBB565_200:
	movzx	ebx, al
	lea	rcx, [rsp + 80]
	mov	r8, rbx
	mov	r14, r9
	mov	rbp, r10
	call	memcpy
	mov	r10, rbp
	mov	r9, r14
	add	qword ptr [rsp + 2128], rbx
	add	rsi, r15
	jmp	.LBB565_147
.LBB565_46:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 82], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 83], al
	jmp	.LBB565_146
.LBB565_187:
	test	rbx, rbx
	je	.LBB565_189
# %bb.188:
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, rbx
	call	memcpy
	add	byte ptr [rdi + 142], bl
.LBB565_189:
	mov	rcx, rdi
	mov	rdx, r12
	mov	r8b, 26
	mov	r9, r14
	jmp	.LBB565_163
.LBB565_74:
	mov	r15, r10
	mov	r14, r9
	mov	rbx, qword ptr [rsp + 2128]
	test	rbx, rbx
	je	.LBB565_79
# %bb.75:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB565_9
# %bb.76:
	mov	rax, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, rax
	mov	rcx, qword ptr [rdi + 40]
	lea	rbp, [rbx + rcx]
	add	rbp, 24
	cmp	rbp, rdx
	jbe	.LBB565_78
# %bb.77:
	mov	rcx, rdi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	rax, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB565_78:
	add	r14, rbx
	add	rcx, rax
	add	rcx, 24
	lea	rdx, [rsp + 80]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2128], 0
	mov	rcx, r15
	mov	rax, r15
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r15
.LBB565_79:
	add	rsi, 1
	mov	r9, r14
	mov	r10, r15
.LBB565_80:
	cmp	rsi, r12
	jae	.LBB565_81
# %bb.82:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_86
# %bb.83:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.84:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_86:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 144], eax
.LBB565_87:
	cmp	rsi, r12
	jae	.LBB565_88
# %bb.89:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_92
# %bb.90:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.91:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_92:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 144], eax
.LBB565_93:
	cmp	rsi, r12
	jae	.LBB565_94
# %bb.95:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_98
# %bb.96:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.97:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_98:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 144], eax
.LBB565_99:
	cmp	rsi, r12
	jae	.LBB565_100
# %bb.101:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_104
# %bb.102:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.103:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_104:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 144]
	add	rsi, 1
	mov	dword ptr [rdi + 144], eax
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB565_111
# %bb.105:
	cmp	eax, 127
	ja	.LBB565_107
.LBB565_106:
	mov	byte ptr [rsp + 80], al
	add	qword ptr [rsp + 2128], 1
	jmp	.LBB565_147
.LBB565_81:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 22
	jmp	.LBB565_163
.LBB565_88:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 23
	jmp	.LBB565_163
.LBB565_94:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 24
	jmp	.LBB565_163
.LBB565_100:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 25
	jmp	.LBB565_163
.LBB565_111:
	cmp	eax, 56320
	jae	.LBB565_48
.LBB565_112:
	cmp	rsi, r12
	jae	.LBB565_113
# %bb.114:
	cmp	byte ptr [rsi], 92
	jne	.LBB565_198
# %bb.115:
	add	rsi, 1
.LBB565_116:
	cmp	rsi, r12
	jae	.LBB565_117
# %bb.118:
	cmp	byte ptr [rsi], 117
	jne	.LBB565_198
# %bb.119:
	add	rsi, 1
.LBB565_120:
	cmp	rsi, r12
	jae	.LBB565_121
# %bb.122:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_125
# %bb.123:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.124:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_125:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 148], eax
.LBB565_126:
	cmp	rsi, r12
	jae	.LBB565_127
# %bb.128:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_131
# %bb.129:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.130:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_131:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 148], eax
.LBB565_132:
	cmp	rsi, r12
	jae	.LBB565_133
# %bb.134:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_137
# %bb.135:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.136:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_137:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 148], eax
.LBB565_138:
	cmp	rsi, r12
	jae	.LBB565_139
# %bb.140:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB565_143
# %bb.141:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB565_85
# %bb.142:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB565_85
.LBB565_143:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 148]
	add	rsi, 1
	mov	dword ptr [rdi + 148], eax
	mov	ecx, eax
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB565_85
# %bb.144:
	mov	ecx, dword ptr [rdi + 144]
	shl	ecx, 10
	add	eax, ecx
	add	eax, -56613888
	cmp	eax, 127
	jbe	.LBB565_106
.LBB565_107:
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB565_109
# %bb.108:
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 80], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 81], al
	add	qword ptr [rsp + 2128], 2
	jmp	.LBB565_147
.LBB565_85:
	mov	rcx, rdi
	mov	rdx, rsi
.LBB565_37:
	mov	r8d, 16
.LBB565_38:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rsi, rax
	jmp	.LBB565_160
.LBB565_109:
	cmp	eax, 65535
	ja	.LBB565_145
# %bb.110:
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 80], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 81], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 82], al
	add	qword ptr [rsp + 2128], 3
	jmp	.LBB565_147
.LBB565_145:
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 80], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 81], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 82], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 83], al
.LBB565_146:
	add	qword ptr [rsp + 2128], 4
.LBB565_147:
	lea	rbx, [rdi + 136]
	lea	rdx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	lea	r15, [rsp + 80]
	mov	r13d, -1061109760
	mov	r14d, -1061097472
	mov	ebp, 1
.LBB565_148:                            # =>This Inner Loop Header: Depth=1
	cmp	rsi, r12
	jae	.LBB565_149
.LBB565_157:                            #   in Loop: Header=BB565_148 Depth=1
	movzx	eax, byte ptr [rsi]
	cmp	rax, 34
	je	.LBB565_158
# %bb.164:                              #   in Loop: Header=BB565_148 Depth=1
	test	al, al
	js	.LBB565_165
# %bb.179:                              #   in Loop: Header=BB565_148 Depth=1
	cmp	al, 92
	je	.LBB565_4
# %bb.180:                              #   in Loop: Header=BB565_148 Depth=1
	cmp	al, 31
	jbe	.LBB565_198
# %bb.181:                              #   in Loop: Header=BB565_148 Depth=1
	mov	rcx, rdx
	mov	r8, qword ptr [rsp + 2128]
	lea	rdx, [r8 + 1]
	mov	qword ptr [rsp + 2128], rdx
	mov	byte ptr [rsp + r8 + 80], al
	add	rsi, rbp
	mov	rdx, rcx
	jmp	.LBB565_148
.LBB565_149:                            #   in Loop: Header=BB565_148 Depth=1
	mov	r12, qword ptr [rsp + 2128]
	test	r12, r12
	mov	qword ptr [rsp + 48], r10 # 8-byte Spill
	je	.LBB565_150
# %bb.151:                              #   in Loop: Header=BB565_148 Depth=1
	mov	eax, 2147483646
	sub	rax, r9
	cmp	r12, rax
	ja	.LBB565_9
# %bb.152:                              #   in Loop: Header=BB565_148 Depth=1
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [r12 + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB565_154
# %bb.153:                              #   in Loop: Header=BB565_148 Depth=1
	mov	rcx, rdi
	mov	rdx, r12
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB565_154:                            #   in Loop: Header=BB565_148 Depth=1
	add	r9, r12
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	add	rcx, r8
	add	rcx, 24
	mov	rdx, r15
	mov	r8, r12
	call	memcpy
	add	qword ptr [rdi + 40], r12
	mov	qword ptr [rsp + 2128], 0
.LBB565_155:                            #   in Loop: Header=BB565_148 Depth=1
	mov	r10, qword ptr [rsp + 48] # 8-byte Reload
	mov	rax, r10
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r10
	cmp	r12, rsi
	lea	rdx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	jbe	.LBB565_161
# %bb.156:                              #   in Loop: Header=BB565_148 Depth=1
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB565_157
.LBB565_165:                            #   in Loop: Header=BB565_148 Depth=1
	mov	qword ptr [rsp + 48], r10 # 8-byte Spill
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	mov	rcx, r12
	sub	rcx, rsi
	and	eax, 127
	movzx	eax, word ptr [rdx + 2*rax]
	mov	word ptr [rdi + 140], ax
	movzx	edx, al
	cmp	rcx, rdx
	cmovae	rcx, rax
	mov	byte ptr [rdi + 142], cl
	movzx	r8d, cl
	mov	rcx, rbx
	mov	rdx, rsi
	call	memcpy
	movzx	eax, word ptr [rdi + 140]
	cmp	byte ptr [rdi + 142], al
	jb	.LBB565_166
# %bb.167:                              #   in Loop: Header=BB565_148 Depth=1
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	ja	.LBB565_198
# %bb.168:                              #   in Loop: Header=BB565_148 Depth=1
	movzx	ecx, cl
	lea	rdx, [rip + .LJTI565_3]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB565_176:                            #   in Loop: Header=BB565_148 Depth=1
	movzx	ecx, word ptr [rbx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB565_178
	jmp	.LBB565_198
.LBB565_177:                            #   in Loop: Header=BB565_148 Depth=1
	movzx	ecx, word ptr [rbx]
	movzx	edx, byte ptr [rbx + 2]
	shl	edx, 16
	or	edx, ecx
	and	edx, 12640256
	cmp	edx, 8429568
	je	.LBB565_178
	jmp	.LBB565_198
.LBB565_169:                            #   in Loop: Header=BB565_148 Depth=1
	movzx	ecx, word ptr [rbx]
	movzx	edx, byte ptr [rbx + 2]
	shl	edx, 16
	or	edx, ecx
	and	edx, 12632064
	jmp	.LBB565_170
.LBB565_171:                            #   in Loop: Header=BB565_148 Depth=1
	movzx	ecx, word ptr [rbx]
	movzx	edx, byte ptr [rbx + 2]
	shl	edx, 16
	or	edx, ecx
	and	edx, 12640256
.LBB565_170:                            #   in Loop: Header=BB565_148 Depth=1
	cmp	edx, 8421376
	je	.LBB565_178
	jmp	.LBB565_198
.LBB565_172:                            #   in Loop: Header=BB565_148 Depth=1
	mov	ecx, dword ptr [rbx]
	mov	edx, -1061093632
	and	ecx, edx
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB565_178
	jmp	.LBB565_198
.LBB565_173:                            #   in Loop: Header=BB565_148 Depth=1
	mov	ecx, dword ptr [rbx]
	and	ecx, r13d
	jmp	.LBB565_174
.LBB565_175:                            #   in Loop: Header=BB565_148 Depth=1
	mov	ecx, dword ptr [rbx]
	and	ecx, r14d
.LBB565_174:                            #   in Loop: Header=BB565_148 Depth=1
	cmp	ecx, -2139062272
	jne	.LBB565_198
.LBB565_178:                            #   in Loop: Header=BB565_148 Depth=1
	movzx	eax, ax
	movzx	r8d, al
	mov	qword ptr [rsp + 56], r8 # 8-byte Spill
	mov	rcx, qword ptr [rsp + 2128]
	add	rcx, r15
	mov	rdx, rbx
	call	memcpy
	mov	rax, qword ptr [rsp + 56] # 8-byte Reload
	add	qword ptr [rsp + 2128], rax
	add	rsi, rax
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	r10, qword ptr [rsp + 48] # 8-byte Reload
	lea	rdx, [rip + "?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"]
	jmp	.LBB565_148
.LBB565_150:                            #   in Loop: Header=BB565_148 Depth=1
	mov	qword ptr [rsp + 40], r9 # 8-byte Spill
	jmp	.LBB565_155
.LBB565_158:
	mov	rax, qword ptr [rsp + 2128]
	mov	ecx, 2147483646
	sub	rcx, r9
	cmp	rax, rcx
	ja	.LBB565_9
# %bb.159:
	mov	qword ptr [rsp + 64], r15
	mov	qword ptr [rsp + 72], rax
	lea	rdx, [rsp + 64]
	mov	rcx, rdi
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rsi, 1
.LBB565_160:
	mov	rax, rsi
	add	rsp, 2136
	pop	rbx
	pop	rbp
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB565_9:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 26
	jmp	.LBB565_38
.LBB565_121:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 29
	jmp	.LBB565_163
.LBB565_127:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 30
	jmp	.LBB565_163
.LBB565_139:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 32
	jmp	.LBB565_163
.LBB565_113:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 27
	jmp	.LBB565_163
.LBB565_117:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 28
	jmp	.LBB565_163
.LBB565_133:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 31
.LBB565_163:
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rsi, rax
	jmp	.LBB565_160
.LBB565_35:
	lea	rax, [rsi + 1]
	cmp	bl, -1
	cmove	rax, rsi
	lea	rcx, [rax + 1]
	cmp	dl, -1
	cmove	rcx, rax
	lea	rdx, [rcx + 1]
	cmp	bpl, -1
	cmove	rdx, rcx
.LBB565_36:
	mov	rcx, rdi
	jmp	.LBB565_37
.LBB565_47:
	cmp	eax, 56320
	jae	.LBB565_48
# %bb.49:
	cmp	byte ptr [rsi + 5], 92
	jne	.LBB565_50
# %bb.51:
	cmp	byte ptr [rsi + 6], 117
	jne	.LBB565_52
# %bb.53:
	mov	r11, r10
	mov	r10, r9
	mov	edx, dword ptr [rsi + 7]
	mov	ecx, edx
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB565_55
# %bb.54:
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	ecx, cl
	mov	r8d, 255
	cmovb	r8d, ecx
.LBB565_55:
	mov	ecx, edx
	shr	ecx, 16
	lea	ebp, [rcx - 48]
	cmp	bpl, 10
	jb	.LBB565_57
# %bb.56:
	and	cl, -33
	lea	ebp, [rcx - 65]
	add	cl, -55
	cmp	bpl, 6
	movzx	ecx, cl
	mov	ebp, 255
	cmovb	ebp, ecx
.LBB565_57:
	mov	ecx, edx
	shr	ecx, 8
	lea	r9d, [rcx - 48]
	cmp	r9b, 10
	jb	.LBB565_59
# %bb.58:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r9d, 255
	cmovb	r9d, ecx
.LBB565_59:
	lea	ecx, [rdx - 48]
	cmp	cl, 10
	jb	.LBB565_61
# %bb.60:
	and	dl, -33
	lea	ecx, [rdx - 65]
	add	dl, -55
	cmp	cl, 6
	movzx	edx, dl
	mov	ecx, 255
	cmovb	ecx, edx
.LBB565_61:
	lea	rdx, [rsi + 7]
	mov	ebx, ebp
	or	bl, r8b
	or	bl, r9b
	or	bl, cl
	cmp	bl, -1
	je	.LBB565_62
# %bb.63:
	movsx	ebp, bpl
	movsx	ebx, r9b
	movsx	ecx, cl
	movsx	r8d, r8b
	shl	ecx, 12
	shl	ebx, 8
	shl	ebp, 4
	add	ebp, r8d
	add	ebp, ebx
	add	ebp, ecx
	mov	ecx, ebp
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB565_64
# %bb.66:
	add	rsi, 11
	shl	eax, 10
	add	eax, ebp
	add	eax, -56613888
	mov	rcx, qword ptr [rsp + 2128]
	cmp	eax, 127
	ja	.LBB565_69
# %bb.67:
	mov	byte ptr [rsp + rcx + 80], al
	add	qword ptr [rsp + 2128], 1
	jmp	.LBB565_68
.LBB565_69:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB565_71
# %bb.70:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 80], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 81], al
	add	qword ptr [rsp + 2128], 2
	jmp	.LBB565_68
.LBB565_71:
	cmp	eax, 65535
	ja	.LBB565_73
# %bb.72:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 82], al
	add	qword ptr [rsp + 2128], 3
	jmp	.LBB565_68
.LBB565_73:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 80], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 81], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 82], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 83], al
	add	qword ptr [rsp + 2128], 4
.LBB565_68:
	mov	r9, r10
	mov	r10, r11
	jmp	.LBB565_147
.LBB565_201:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 21
	mov	r9, rbp
	jmp	.LBB565_163
.LBB565_7:
	mov	r14, r10
	mov	rbp, r9
	jmp	.LBB565_13
.LBB565_161:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 20
	jmp	.LBB565_162
.LBB565_48:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 11
	jmp	.LBB565_38
.LBB565_166:
	mov	rcx, rdi
	mov	rdx, r12
	mov	r8b, 26
.LBB565_162:
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	jmp	.LBB565_163
.LBB565_50:
	add	rsi, 5
	jmp	.LBB565_198
.LBB565_52:
	add	rsi, 6
.LBB565_198:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB565_38
.LBB565_62:
	add	rsi, 8
	cmp	cl, -1
	cmove	rsi, rdx
	lea	rax, [rsi + 1]
	cmp	r9b, -1
	cmove	rax, rsi
	lea	rdx, [rax + 1]
	cmp	bpl, -1
	cmove	rdx, rax
	jmp	.LBB565_36
.LBB565_64:
	mov	rcx, rdi
	mov	r8d, 11
	jmp	.LBB565_38
	.p2align	2, 0x90
.LJTI565_0:
	.long	.LBB565_5-.LJTI565_0
	.long	.LBB565_80-.LJTI565_0
	.long	.LBB565_87-.LJTI565_0
	.long	.LBB565_93-.LJTI565_0
	.long	.LBB565_99-.LJTI565_0
	.long	.LBB565_182-.LJTI565_0
	.long	.LBB565_112-.LJTI565_0
	.long	.LBB565_116-.LJTI565_0
	.long	.LBB565_120-.LJTI565_0
	.long	.LBB565_126-.LJTI565_0
	.long	.LBB565_132-.LJTI565_0
	.long	.LBB565_138-.LJTI565_0
.LJTI565_1:
	.long	.LBB565_197-.LJTI565_1
	.long	.LBB565_199-.LJTI565_1
	.long	.LBB565_190-.LJTI565_1
	.long	.LBB565_192-.LJTI565_1
	.long	.LBB565_193-.LJTI565_1
	.long	.LBB565_194-.LJTI565_1
	.long	.LBB565_196-.LJTI565_1
.LJTI565_2:
	.long	.LBB565_17-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_19-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_18-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_20-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_21-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_22-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_23-.LJTI565_2
	.long	.LBB565_198-.LJTI565_2
	.long	.LBB565_24-.LJTI565_2
	.long	.LBB565_25-.LJTI565_2
.LJTI565_3:
	.long	.LBB565_176-.LJTI565_3
	.long	.LBB565_177-.LJTI565_3
	.long	.LBB565_169-.LJTI565_3
	.long	.LBB565_171-.LJTI565_3
	.long	.LBB565_172-.LJTI565_3
	.long	.LBB565_173-.LJTI565_3
	.long	.LBB565_175-.LJTI565_3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB566_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI566_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB566_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB566_8:
	jmp	"??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_7:
	jmp	"??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_10:
	jmp	"??$parse_comment@$0A@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB566_5:
	jmp	"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI566_0:
	.long	.LBB566_10-.LJTI566_0
	.long	.LBB566_10-.LJTI566_0
	.long	.LBB566_10-.LJTI566_0
	.long	.LBB566_10-.LJTI566_0
	.long	.LBB566_10-.LJTI566_0
	.long	.LBB566_2-.LJTI566_0
	.long	.LBB566_2-.LJTI566_0
	.long	.LBB566_2-.LJTI566_0
	.long	.LBB566_3-.LJTI566_0
	.long	.LBB566_3-.LJTI566_0
	.long	.LBB566_3-.LJTI566_0
	.long	.LBB566_4-.LJTI566_0
	.long	.LBB566_4-.LJTI566_0
	.long	.LBB566_4-.LJTI566_0
	.long	.LBB566_4-.LJTI566_0
	.long	.LBB566_5-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_6-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_8-.LJTI566_0
	.long	.LBB566_7-.LJTI566_0
	.long	.LBB566_7-.LJTI566_0
	.long	.LBB566_7-.LJTI566_0
	.long	.LBB566_7-.LJTI566_0
	.long	.LBB566_7-.LJTI566_0
	.long	.LBB566_7-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
	.long	.LBB566_9-.LJTI566_0
                                        # -- End function
	.def	 "??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB567_8
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB567_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI567_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB567_4:
	mov	eax, 6
	cmp	eax, 3
	jne	.LBB567_6
	jmp	.LBB567_12
.LBB567_8:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB567_9
# %bb.11:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	jmp	.LBB567_12
.LBB567_2:
	mov	eax, 3
	cmp	eax, 3
	je	.LBB567_12
.LBB567_6:
	cmp	eax, 6
	je	.LBB567_41
# %bb.7:
	cmp	eax, 7
	je	.LBB567_61
.LBB567_78:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB567_9:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB567_10:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB567_12:
	cmp	rbx, rdi
	je	.LBB567_25
# %bb.13:
	cmp	byte ptr [rbx], 32
	ja	.LBB567_23
# %bb.14:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB567_15:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB567_16
# %bb.21:                               #   in Loop: Header=BB567_15 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB567_15
# %bb.22:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB567_23:
	cmp	rbx, rdi
	jae	.LBB567_24
# %bb.27:
	mov	al, byte ptr [rbx]
	cmp	al, 47
	je	.LBB567_31
# %bb.28:
	cmp	al, 93
	jne	.LBB567_29
	jmp	.LBB567_77
.LBB567_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB567_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB567_12
.LBB567_16:
	cmp	rdi, rbx
	je	.LBB567_25
# %bb.17:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB567_18:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB567_23
# %bb.19:                               #   in Loop: Header=BB567_18 Depth=1
	bt	rax, rcx
	jae	.LBB567_23
# %bb.20:                               #   in Loop: Header=BB567_18 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB567_18
.LBB567_25:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB567_26
.LBB567_33:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB567_34
.LBB567_24:
	mov	rdi, rbx
	jmp	.LBB567_25
.LBB567_26:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB567_29:
	add	r14, 1
	cmp	r14, 2147483647
	jae	.LBB567_30
# %bb.35:
	mov	rax, qword ptr [r15 + 120]
.LBB567_36:
	test	rax, rax
	je	.LBB567_37
# %bb.38:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB567_39
.LBB567_37:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB567_39:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB567_40
.LBB567_41:
	cmp	rbx, rdi
	jne	.LBB567_42
	jmp	.LBB567_54
.LBB567_30:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB567_10
.LBB567_40:
	mov	rcx, r15
	mov	dl, 46
.LBB567_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB567_42:
	cmp	byte ptr [rbx], 32
	ja	.LBB567_52
# %bb.43:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB567_44:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB567_45
# %bb.50:                               #   in Loop: Header=BB567_44 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB567_44
# %bb.51:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB567_52:
	cmp	rbx, rdi
	jae	.LBB567_53
# %bb.55:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB567_56
# %bb.60:
	add	rbx, 1
.LBB567_61:
	cmp	rbx, rdi
	je	.LBB567_74
# %bb.62:
	cmp	byte ptr [rbx], 32
	ja	.LBB567_72
# %bb.63:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB567_64:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB567_65
# %bb.70:                               #   in Loop: Header=BB567_64 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB567_64
# %bb.71:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB567_72:
	cmp	rbx, rdi
	jb	.LBB567_29
# %bb.73:
	mov	rdi, rbx
	jmp	.LBB567_74
.LBB567_45:
	cmp	rdi, rbx
	je	.LBB567_54
# %bb.46:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB567_47:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB567_52
# %bb.48:                               #   in Loop: Header=BB567_47 Depth=1
	bt	rax, rcx
	jae	.LBB567_52
# %bb.49:                               #   in Loop: Header=BB567_47 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB567_47
	jmp	.LBB567_54
.LBB567_65:
	cmp	rdi, rbx
	je	.LBB567_74
# %bb.66:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB567_67:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB567_72
# %bb.68:                               #   in Loop: Header=BB567_67 Depth=1
	bt	rax, rcx
	jae	.LBB567_72
# %bb.69:                               #   in Loop: Header=BB567_67 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB567_67
.LBB567_74:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB567_26
.LBB567_53:
	mov	rdi, rbx
	jmp	.LBB567_54
.LBB567_56:
	cmp	al, 93
	jne	.LBB567_57
.LBB567_77:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	jmp	.LBB567_78
.LBB567_57:
	cmp	al, 47
	jne	.LBB567_76
.LBB567_58:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB567_75
# %bb.59:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB567_42
.LBB567_54:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB567_26
.LBB567_75:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB567_34
.LBB567_76:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB567_10
	.p2align	2, 0x90
.LJTI567_0:
	.long	.LBB567_31-.LJTI567_0
	.long	.LBB567_36-.LJTI567_0
	.long	.LBB567_4-.LJTI567_0
	.long	.LBB567_61-.LJTI567_0
	.long	.LBB567_58-.LJTI567_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB568_9
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB568_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI568_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB568_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB568_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB568_13
.LBB568_9:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB568_10
# %bb.12:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
.LBB568_13:
	cmp	rbx, rdi
	je	.LBB568_26
# %bb.14:
	cmp	byte ptr [rbx], 32
	ja	.LBB568_24
# %bb.15:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB568_16:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB568_17
# %bb.22:                               #   in Loop: Header=BB568_16 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB568_16
# %bb.23:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB568_24:
	cmp	rbx, rdi
	jae	.LBB568_25
# %bb.28:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB568_35
# %bb.29:
	cmp	al, 125
	je	.LBB568_125
# %bb.30:
	cmp	al, 47
	je	.LBB568_31
	jmp	.LBB568_124
.LBB568_17:
	cmp	rdi, rbx
	je	.LBB568_26
# %bb.18:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB568_19:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB568_24
# %bb.20:                               #   in Loop: Header=BB568_19 Depth=1
	bt	rax, rcx
	jae	.LBB568_24
# %bb.21:                               #   in Loop: Header=BB568_19 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB568_19
.LBB568_26:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB568_27
.LBB568_2:
	mov	eax, 3
	jmp	.LBB568_7
.LBB568_4:
	mov	eax, 6
	jmp	.LBB568_7
.LBB568_5:
	mov	eax, 10
	jmp	.LBB568_7
.LBB568_6:
	mov	eax, 11
.LBB568_7:
	add	eax, -3
	cmp	eax, 8
	ja	.LBB568_126
# %bb.8:
	lea	rcx, [rip + .LJTI568_1]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB568_60:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB568_62
# %bb.61:
	mov	rbx, rax
	jmp	.LBB568_44
.LBB568_62:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB568_34
.LBB568_33:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB568_34
.LBB568_25:
	mov	rdi, rbx
	jmp	.LBB568_26
.LBB568_10:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB568_11:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB568_27:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB568_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB568_35:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB568_127
# %bb.36:
	mov	rax, qword ptr [r15 + 120]
.LBB568_37:
	test	rax, rax
	je	.LBB568_41
# %bb.38:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB568_39
# %bb.40:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB568_42
.LBB568_41:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB568_42
.LBB568_39:
	call	"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB568_42:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB568_43
.LBB568_44:
	cmp	rbx, rdi
	je	.LBB568_57
# %bb.45:
	cmp	byte ptr [rbx], 32
	ja	.LBB568_55
# %bb.46:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB568_47:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB568_48
# %bb.53:                               #   in Loop: Header=BB568_47 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB568_47
# %bb.54:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB568_55:
	cmp	rbx, rdi
	jae	.LBB568_56
# %bb.58:
	mov	al, byte ptr [rbx]
	cmp	al, 58
	jne	.LBB568_59
# %bb.63:
	add	rbx, 1
.LBB568_64:
	cmp	rbx, rdi
	je	.LBB568_77
# %bb.65:
	cmp	byte ptr [rbx], 32
	ja	.LBB568_75
# %bb.66:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB568_67:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB568_68
# %bb.73:                               #   in Loop: Header=BB568_67 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB568_67
# %bb.74:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB568_75:
	cmp	rbx, rdi
	jae	.LBB568_76
# %bb.78:
	mov	rax, qword ptr [r15 + 120]
.LBB568_79:
	test	rax, rax
	je	.LBB568_80
# %bb.81:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB568_82
.LBB568_80:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB568_82:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB568_83
.LBB568_84:
	cmp	rbx, rdi
	jne	.LBB568_85
	jmp	.LBB568_97
.LBB568_48:
	cmp	rdi, rbx
	je	.LBB568_57
# %bb.49:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB568_50:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB568_55
# %bb.51:                               #   in Loop: Header=BB568_50 Depth=1
	bt	rax, rcx
	jae	.LBB568_55
# %bb.52:                               #   in Loop: Header=BB568_50 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB568_50
.LBB568_57:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB568_27
.LBB568_68:
	cmp	rdi, rbx
	je	.LBB568_77
# %bb.69:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB568_70:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB568_75
# %bb.71:                               #   in Loop: Header=BB568_70 Depth=1
	bt	rax, rcx
	jae	.LBB568_75
# %bb.72:                               #   in Loop: Header=BB568_70 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB568_70
.LBB568_77:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB568_27
.LBB568_127:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB568_11
.LBB568_43:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB568_34
.LBB568_83:
	mov	rcx, r15
	mov	dl, 39
	jmp	.LBB568_34
.LBB568_56:
	mov	rdi, rbx
	jmp	.LBB568_57
.LBB568_76:
	mov	rdi, rbx
	jmp	.LBB568_77
.LBB568_59:
	cmp	al, 47
	je	.LBB568_60
	jmp	.LBB568_124
.LBB568_85:
	cmp	byte ptr [rbx], 32
	ja	.LBB568_95
# %bb.86:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB568_87:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB568_88
# %bb.93:                               #   in Loop: Header=BB568_87 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB568_87
# %bb.94:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB568_95:
	cmp	rbx, rdi
	jae	.LBB568_96
# %bb.98:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB568_99
# %bb.103:
	add	rbx, 1
	jmp	.LBB568_104
.LBB568_88:
	cmp	rdi, rbx
	je	.LBB568_97
# %bb.89:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB568_90:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB568_95
# %bb.91:                               #   in Loop: Header=BB568_90 Depth=1
	bt	rax, rcx
	jae	.LBB568_95
# %bb.92:                               #   in Loop: Header=BB568_90 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB568_90
	jmp	.LBB568_97
.LBB568_96:
	mov	rdi, rbx
	jmp	.LBB568_97
.LBB568_99:
	cmp	al, 125
	jne	.LBB568_100
.LBB568_125:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
.LBB568_126:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB568_100:
	cmp	al, 47
	jne	.LBB568_124
.LBB568_101:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB568_123
# %bb.102:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB568_85
.LBB568_97:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB568_27
.LBB568_123:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB568_34
.LBB568_104:
	cmp	rbx, rdi
	je	.LBB568_117
# %bb.105:
	cmp	byte ptr [rbx], 32
	ja	.LBB568_115
# %bb.106:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB568_107:                            # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB568_108
# %bb.113:                              #   in Loop: Header=BB568_107 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB568_107
# %bb.114:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB568_115:
	cmp	rbx, rdi
	jae	.LBB568_116
# %bb.118:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB568_35
# %bb.119:
	cmp	al, 47
	jne	.LBB568_124
.LBB568_120:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB568_122
# %bb.121:
	mov	rbx, rax
	jmp	.LBB568_104
.LBB568_108:
	cmp	rdi, rbx
	je	.LBB568_117
# %bb.109:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB568_110:                            # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB568_115
# %bb.111:                              #   in Loop: Header=BB568_110 Depth=1
	bt	rax, rcx
	jae	.LBB568_115
# %bb.112:                              #   in Loop: Header=BB568_110 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB568_110
.LBB568_117:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB568_27
.LBB568_122:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB568_34
.LBB568_124:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB568_11
.LBB568_116:
	mov	rdi, rbx
	jmp	.LBB568_117
	.p2align	2, 0x90
.LJTI568_0:
	.long	.LBB568_31-.LJTI568_0
	.long	.LBB568_37-.LJTI568_0
	.long	.LBB568_4-.LJTI568_0
	.long	.LBB568_60-.LJTI568_0
	.long	.LBB568_64-.LJTI568_0
	.long	.LBB568_79-.LJTI568_0
	.long	.LBB568_5-.LJTI568_0
	.long	.LBB568_6-.LJTI568_0
	.long	.LBB568_120-.LJTI568_0
	.long	.LBB568_101-.LJTI568_0
.LJTI568_1:
	.long	.LBB568_13-.LJTI568_1
	.long	.LBB568_126-.LJTI568_1
	.long	.LBB568_126-.LJTI568_1
	.long	.LBB568_44-.LJTI568_1
	.long	.LBB568_60-.LJTI568_1
	.long	.LBB568_126-.LJTI568_1
	.long	.LBB568_126-.LJTI568_1
	.long	.LBB568_84-.LJTI568_1
	.long	.LBB568_104-.LJTI568_1
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB569_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI569_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB569_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB569_8:
	jmp	"??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_7:
	jmp	"??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_10:
	jmp	"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB569_5:
	jmp	"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI569_0:
	.long	.LBB569_10-.LJTI569_0
	.long	.LBB569_10-.LJTI569_0
	.long	.LBB569_10-.LJTI569_0
	.long	.LBB569_10-.LJTI569_0
	.long	.LBB569_10-.LJTI569_0
	.long	.LBB569_2-.LJTI569_0
	.long	.LBB569_2-.LJTI569_0
	.long	.LBB569_2-.LJTI569_0
	.long	.LBB569_3-.LJTI569_0
	.long	.LBB569_3-.LJTI569_0
	.long	.LBB569_3-.LJTI569_0
	.long	.LBB569_4-.LJTI569_0
	.long	.LBB569_4-.LJTI569_0
	.long	.LBB569_4-.LJTI569_0
	.long	.LBB569_4-.LJTI569_0
	.long	.LBB569_5-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_6-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_8-.LJTI569_0
	.long	.LBB569_7-.LJTI569_0
	.long	.LBB569_7-.LJTI569_0
	.long	.LBB569_7-.LJTI569_0
	.long	.LBB569_7-.LJTI569_0
	.long	.LBB569_7-.LJTI569_0
	.long	.LBB569_7-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
	.long	.LBB569_9-.LJTI569_0
                                        # -- End function
	.def	 "??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB570_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB570_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI570_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB570_22:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB570_24
# %bb.23:
	mov	rbx, rax
.LBB570_7:
	cmp	rbx, rdi
	jne	.LBB570_8
	jmp	.LBB570_20
.LBB570_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB570_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB570_20
.LBB570_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB570_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB570_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB570_11
# %bb.16:                               #   in Loop: Header=BB570_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB570_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB570_18:
	cmp	rbx, rdi
	jb	.LBB570_64
# %bb.19:
	mov	rdi, rbx
	jmp	.LBB570_20
.LBB570_67:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB570_69
# %bb.68:
	mov	rbx, rax
	jmp	.LBB570_32
.LBB570_11:
	cmp	rdi, rbx
	je	.LBB570_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB570_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB570_18
# %bb.14:                               #   in Loop: Header=BB570_13 Depth=1
	bt	rax, rcx
	jae	.LBB570_18
# %bb.15:                               #   in Loop: Header=BB570_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB570_13
.LBB570_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB570_21
.LBB570_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB570_5
.LBB570_24:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB570_25
.LBB570_69:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB570_25
.LBB570_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB570_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB570_25:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB570_26:
	mov	rax, qword ptr [r15 + 120]
.LBB570_27:
	test	rax, rax
	je	.LBB570_28
# %bb.29:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB570_30
.LBB570_28:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB570_30:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB570_31
.LBB570_32:
	cmp	rbx, rdi
	je	.LBB570_45
# %bb.33:
	cmp	byte ptr [rbx], 32
	ja	.LBB570_43
# %bb.34:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB570_35:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB570_36
# %bb.41:                               #   in Loop: Header=BB570_35 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB570_35
# %bb.42:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB570_43:
	cmp	rbx, rdi
	jae	.LBB570_44
# %bb.46:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB570_47
# %bb.49:
	add	rbx, 1
.LBB570_50:
	cmp	rbx, rdi
	je	.LBB570_63
# %bb.51:
	cmp	byte ptr [rbx], 32
	ja	.LBB570_61
# %bb.52:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB570_53:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB570_54
# %bb.59:                               #   in Loop: Header=BB570_53 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB570_53
# %bb.60:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB570_61:
	cmp	rbx, rdi
	jae	.LBB570_62
.LBB570_64:
	cmp	byte ptr [rbx], 93
	je	.LBB570_70
# %bb.65:
	add	r14, 1
	cmp	r14, 2147483647
	jb	.LBB570_26
# %bb.66:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB570_5
.LBB570_36:
	cmp	rdi, rbx
	je	.LBB570_45
# %bb.37:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB570_38:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB570_43
# %bb.39:                               #   in Loop: Header=BB570_38 Depth=1
	bt	rax, rcx
	jae	.LBB570_43
# %bb.40:                               #   in Loop: Header=BB570_38 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB570_38
.LBB570_45:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB570_21
.LBB570_54:
	cmp	rdi, rbx
	je	.LBB570_63
# %bb.55:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB570_56:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB570_61
# %bb.57:                               #   in Loop: Header=BB570_56 Depth=1
	bt	rax, rcx
	jae	.LBB570_61
# %bb.58:                               #   in Loop: Header=BB570_56 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB570_56
.LBB570_63:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB570_21
.LBB570_31:
	mov	rcx, r15
	mov	dl, 46
	jmp	.LBB570_25
.LBB570_44:
	mov	rdi, rbx
	jmp	.LBB570_45
.LBB570_62:
	mov	rdi, rbx
	jmp	.LBB570_63
.LBB570_47:
	cmp	al, 93
	jne	.LBB570_48
.LBB570_70:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB570_48:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB570_5
	.p2align	2, 0x90
.LJTI570_0:
	.long	.LBB570_22-.LJTI570_0
	.long	.LBB570_27-.LJTI570_0
	.long	.LBB570_32-.LJTI570_0
	.long	.LBB570_50-.LJTI570_0
	.long	.LBB570_67-.LJTI570_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB571_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB571_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI571_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB571_25:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB571_27
# %bb.26:
	mov	rbx, rax
.LBB571_7:
	cmp	rbx, rdi
	jne	.LBB571_8
	jmp	.LBB571_20
.LBB571_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB571_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB571_20
.LBB571_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB571_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB571_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB571_11
# %bb.16:                               #   in Loop: Header=BB571_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB571_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB571_18:
	cmp	rbx, rdi
	jb	.LBB571_22
# %bb.19:
	mov	rdi, rbx
	jmp	.LBB571_20
.LBB571_11:
	cmp	rdi, rbx
	je	.LBB571_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB571_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB571_18
# %bb.14:                               #   in Loop: Header=BB571_13 Depth=1
	bt	rax, rcx
	jae	.LBB571_18
# %bb.15:                               #   in Loop: Header=BB571_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB571_13
.LBB571_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB571_21
.LBB571_52:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB571_54
# %bb.53:
	mov	rbx, rax
	jmp	.LBB571_38
.LBB571_107:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB571_109
# %bb.108:
	mov	rbx, rax
	jmp	.LBB571_93
.LBB571_110:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB571_112
# %bb.111:
	mov	rbx, rax
	jmp	.LBB571_77
.LBB571_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB571_5
.LBB571_27:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB571_28
.LBB571_54:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB571_28
.LBB571_109:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB571_28
.LBB571_112:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB571_28
.LBB571_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB571_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB571_22:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	jne	.LBB571_23
# %bb.29:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB571_113
# %bb.30:
	mov	rax, qword ptr [r15 + 120]
.LBB571_31:
	test	rax, rax
	je	.LBB571_35
# %bb.32:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB571_33
# %bb.34:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB571_36
.LBB571_35:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB571_36
.LBB571_33:
	call	"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB571_36:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB571_37
.LBB571_38:
	cmp	rbx, rdi
	je	.LBB571_51
# %bb.39:
	cmp	byte ptr [rbx], 32
	ja	.LBB571_49
# %bb.40:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB571_41:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB571_42
# %bb.47:                               #   in Loop: Header=BB571_41 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB571_41
# %bb.48:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB571_49:
	cmp	rbx, rdi
	jae	.LBB571_50
# %bb.55:
	cmp	byte ptr [rbx], 58
	jne	.LBB571_24
# %bb.56:
	add	rbx, 1
.LBB571_57:
	cmp	rbx, rdi
	je	.LBB571_70
# %bb.58:
	cmp	byte ptr [rbx], 32
	ja	.LBB571_68
# %bb.59:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB571_60:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB571_61
# %bb.66:                               #   in Loop: Header=BB571_60 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB571_60
# %bb.67:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB571_68:
	cmp	rbx, rdi
	jae	.LBB571_69
# %bb.71:
	mov	rax, qword ptr [r15 + 120]
.LBB571_72:
	test	rax, rax
	je	.LBB571_73
# %bb.74:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB571_75
.LBB571_73:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB571_75:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB571_76
.LBB571_77:
	cmp	rbx, rdi
	je	.LBB571_90
# %bb.78:
	cmp	byte ptr [rbx], 32
	ja	.LBB571_88
# %bb.79:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB571_80:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB571_81
# %bb.86:                               #   in Loop: Header=BB571_80 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB571_80
# %bb.87:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB571_88:
	cmp	rbx, rdi
	jae	.LBB571_89
# %bb.91:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB571_23
# %bb.92:
	add	rbx, 1
.LBB571_93:
	cmp	rbx, rdi
	je	.LBB571_106
# %bb.94:
	cmp	byte ptr [rbx], 32
	ja	.LBB571_104
# %bb.95:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB571_96:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB571_97
# %bb.102:                              #   in Loop: Header=BB571_96 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB571_96
# %bb.103:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB571_104:
	cmp	rbx, rdi
	jb	.LBB571_22
# %bb.105:
	mov	rdi, rbx
	jmp	.LBB571_106
.LBB571_42:
	cmp	rdi, rbx
	je	.LBB571_51
# %bb.43:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB571_44:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB571_49
# %bb.45:                               #   in Loop: Header=BB571_44 Depth=1
	bt	rax, rcx
	jae	.LBB571_49
# %bb.46:                               #   in Loop: Header=BB571_44 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB571_44
.LBB571_51:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB571_21
.LBB571_61:
	cmp	rdi, rbx
	je	.LBB571_70
# %bb.62:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB571_63:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB571_68
# %bb.64:                               #   in Loop: Header=BB571_63 Depth=1
	bt	rax, rcx
	jae	.LBB571_68
# %bb.65:                               #   in Loop: Header=BB571_63 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB571_63
.LBB571_70:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB571_21
.LBB571_81:
	cmp	rdi, rbx
	je	.LBB571_90
# %bb.82:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB571_83:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB571_88
# %bb.84:                               #   in Loop: Header=BB571_83 Depth=1
	bt	rax, rcx
	jae	.LBB571_88
# %bb.85:                               #   in Loop: Header=BB571_83 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB571_83
.LBB571_90:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB571_21
.LBB571_97:
	cmp	rdi, rbx
	je	.LBB571_106
# %bb.98:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB571_99:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB571_104
# %bb.100:                              #   in Loop: Header=BB571_99 Depth=1
	bt	rax, rcx
	jae	.LBB571_104
# %bb.101:                              #   in Loop: Header=BB571_99 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB571_99
.LBB571_106:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB571_21
.LBB571_23:
	cmp	al, 125
	jne	.LBB571_24
# %bb.114:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB571_24:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB571_5
.LBB571_113:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB571_5
.LBB571_37:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB571_28
.LBB571_76:
	mov	rcx, r15
	mov	dl, 39
.LBB571_28:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB571_50:
	mov	rdi, rbx
	jmp	.LBB571_51
.LBB571_69:
	mov	rdi, rbx
	jmp	.LBB571_70
.LBB571_89:
	mov	rdi, rbx
	jmp	.LBB571_90
	.p2align	2, 0x90
.LJTI571_0:
	.long	.LBB571_25-.LJTI571_0
	.long	.LBB571_31-.LJTI571_0
	.long	.LBB571_38-.LJTI571_0
	.long	.LBB571_52-.LJTI571_0
	.long	.LBB571_57-.LJTI571_0
	.long	.LBB571_72-.LJTI571_0
	.long	.LBB571_77-.LJTI571_0
	.long	.LBB571_93-.LJTI571_0
	.long	.LBB571_107-.LJTI571_0
	.long	.LBB571_110-.LJTI571_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB572_3
# %bb.1:
	lea	rbx, [rcx - 1]
	mov	qword ptr [rsi + 120], rbx
	mov	rdx, qword ptr [rsi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	add	cl, -5
	cmp	cl, 3
	ja	.LBB572_4
# %bb.2:
	movzx	ecx, cl
	lea	rdx, [rip + .LJTI572_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB572_26:
	cmp	rax, rdi
	jne	.LBB572_27
	jmp	.LBB572_39
.LBB572_3:
	add	rax, 1
	xor	ebx, ebx
.LBB572_4:
	cmp	rdi, rax
	jbe	.LBB572_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB572_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB572_42
# %bb.9:
	add	rax, 1
.LBB572_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB572_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB572_13
.LBB572_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB572_12:
	mov	rax, rsi
.LBB572_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB572_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB572_6
.LBB572_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
.LBB572_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB572_15:
	add	rax, 1
.LBB572_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB572_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB572_19
.LBB572_18:
	mov	rax, rsi
.LBB572_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB572_20
# %bb.21:
	add	rax, 1
.LBB572_22:
	cmp	rdi, rax
	jbe	.LBB572_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB572_15
.LBB572_25:
	add	rax, 1
	cmp	rax, rdi
	je	.LBB572_39
.LBB572_27:
	cmp	byte ptr [rax], 32
	ja	.LBB572_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB572_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB572_30
# %bb.35:                               #   in Loop: Header=BB572_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	ecx, xmm4
	add	rax, 16
	cmp	cx, -1
	je	.LBB572_29
# %bb.36:
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB572_37:
	cmp	rax, rdi
	jae	.LBB572_38
# %bb.40:
	test	rbx, rbx
	je	.LBB572_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB572_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB572_30:
	cmp	rdi, rax
	je	.LBB572_39
# %bb.31:
	movabs	rcx, 4294977024
	.p2align	4, 0x90
.LBB572_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB572_37
# %bb.33:                               #   in Loop: Header=BB572_32 Depth=1
	bt	rcx, rdx
	jae	.LBB572_37
# %bb.34:                               #   in Loop: Header=BB572_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB572_32
.LBB572_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB572_6
.LBB572_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB572_6
.LBB572_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB572_6
.LBB572_38:
	mov	rdi, rax
	jmp	.LBB572_39
	.p2align	2, 0x90
.LJTI572_0:
	.long	.LBB572_10-.LJTI572_0
	.long	.LBB572_16-.LJTI572_0
	.long	.LBB572_22-.LJTI572_0
	.long	.LBB572_26-.LJTI572_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB573_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB573_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI573_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB573_26:
	cmp	rdi, rax
	je	.LBB573_37
# %bb.27:
	cmp	byte ptr [rax], 32
	ja	.LBB573_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB573_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB573_30
# %bb.35:                               #   in Loop: Header=BB573_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB573_29
# %bb.36:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB573_37:
	cmp	rax, rdi
	jae	.LBB573_38
# %bb.40:
	test	r9, r9
	je	.LBB573_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB573_3:
	add	rax, 1
.LBB573_4:
	cmp	rdi, rax
	jbe	.LBB573_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB573_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB573_42
# %bb.9:
	add	rax, 1
.LBB573_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB573_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB573_13
.LBB573_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB573_12:
	mov	rax, rsi
.LBB573_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB573_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB573_6
.LBB573_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB573_30:
	cmp	rdi, rax
	je	.LBB573_39
# %bb.31:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB573_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB573_37
# %bb.33:                               #   in Loop: Header=BB573_32 Depth=1
	bt	r8, rdx
	jae	.LBB573_37
# %bb.34:                               #   in Loop: Header=BB573_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB573_32
.LBB573_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB573_6
.LBB573_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB573_6
.LBB573_38:
	mov	rdi, rax
	jmp	.LBB573_39
.LBB573_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB573_15:
	add	rax, 1
.LBB573_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB573_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB573_19
.LBB573_18:
	mov	rax, rsi
.LBB573_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB573_20
# %bb.21:
	add	rax, 1
.LBB573_22:
	cmp	rdi, rax
	jbe	.LBB573_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB573_15
.LBB573_25:
	add	rax, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB573_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB573_6
.LBB573_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB573_6
	.p2align	2, 0x90
.LJTI573_0:
	.long	.LBB573_10-.LJTI573_0
	.long	.LBB573_16-.LJTI573_0
	.long	.LBB573_22-.LJTI573_0
	.long	.LBB573_26-.LJTI573_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB574_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI574_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB574_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB574_8:
	jmp	"??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_7:
	jmp	"??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_10:
	jmp	"??$parse_comment@$0A@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB574_5:
	jmp	"??$parse_unescaped@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI574_0:
	.long	.LBB574_10-.LJTI574_0
	.long	.LBB574_10-.LJTI574_0
	.long	.LBB574_10-.LJTI574_0
	.long	.LBB574_10-.LJTI574_0
	.long	.LBB574_10-.LJTI574_0
	.long	.LBB574_2-.LJTI574_0
	.long	.LBB574_2-.LJTI574_0
	.long	.LBB574_2-.LJTI574_0
	.long	.LBB574_3-.LJTI574_0
	.long	.LBB574_3-.LJTI574_0
	.long	.LBB574_3-.LJTI574_0
	.long	.LBB574_4-.LJTI574_0
	.long	.LBB574_4-.LJTI574_0
	.long	.LBB574_4-.LJTI574_0
	.long	.LBB574_4-.LJTI574_0
	.long	.LBB574_5-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_6-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_8-.LJTI574_0
	.long	.LBB574_7-.LJTI574_0
	.long	.LBB574_7-.LJTI574_0
	.long	.LBB574_7-.LJTI574_0
	.long	.LBB574_7-.LJTI574_0
	.long	.LBB574_7-.LJTI574_0
	.long	.LBB574_7-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
	.long	.LBB574_9-.LJTI574_0
                                        # -- End function
	.def	 "??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB575_8
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB575_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI575_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB575_4:
	mov	eax, 6
	cmp	eax, 3
	jne	.LBB575_6
	jmp	.LBB575_12
.LBB575_8:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB575_9
# %bb.11:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	jmp	.LBB575_12
.LBB575_2:
	mov	eax, 3
	cmp	eax, 3
	je	.LBB575_12
.LBB575_6:
	cmp	eax, 6
	je	.LBB575_41
# %bb.7:
	cmp	eax, 7
	je	.LBB575_61
	jmp	.LBB575_79
.LBB575_9:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB575_10:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB575_12:
	cmp	rbx, rdi
	je	.LBB575_25
# %bb.13:
	cmp	byte ptr [rbx], 32
	ja	.LBB575_23
# %bb.14:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB575_15:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB575_16
# %bb.21:                               #   in Loop: Header=BB575_15 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB575_15
# %bb.22:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB575_23:
	cmp	rbx, rdi
	jae	.LBB575_24
# %bb.27:
	mov	al, byte ptr [rbx]
	cmp	al, 47
	je	.LBB575_31
# %bb.28:
	cmp	al, 93
	jne	.LBB575_29
	jmp	.LBB575_78
.LBB575_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB575_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB575_12
.LBB575_16:
	cmp	rdi, rbx
	je	.LBB575_25
# %bb.17:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB575_18:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB575_23
# %bb.19:                               #   in Loop: Header=BB575_18 Depth=1
	bt	rax, rcx
	jae	.LBB575_23
# %bb.20:                               #   in Loop: Header=BB575_18 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB575_18
.LBB575_25:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB575_26
.LBB575_33:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB575_34
.LBB575_24:
	mov	rdi, rbx
	jmp	.LBB575_25
.LBB575_26:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB575_29:
	add	r14, 1
	cmp	r14, 2147483647
	jae	.LBB575_30
# %bb.35:
	mov	rax, qword ptr [r15 + 120]
.LBB575_36:
	test	rax, rax
	je	.LBB575_37
# %bb.38:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB575_39
.LBB575_37:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB575_39:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB575_40
.LBB575_41:
	cmp	rbx, rdi
	jne	.LBB575_42
	jmp	.LBB575_54
.LBB575_30:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB575_10
.LBB575_40:
	mov	rcx, r15
	mov	dl, 46
.LBB575_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB575_42:
	cmp	byte ptr [rbx], 32
	ja	.LBB575_52
# %bb.43:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB575_44:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB575_45
# %bb.50:                               #   in Loop: Header=BB575_44 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB575_44
# %bb.51:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB575_52:
	cmp	rbx, rdi
	jae	.LBB575_53
# %bb.55:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB575_56
# %bb.60:
	add	rbx, 1
.LBB575_61:
	cmp	rbx, rdi
	je	.LBB575_74
# %bb.62:
	cmp	byte ptr [rbx], 32
	ja	.LBB575_72
# %bb.63:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB575_64:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB575_65
# %bb.70:                               #   in Loop: Header=BB575_64 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB575_64
# %bb.71:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB575_72:
	cmp	rbx, rdi
	jae	.LBB575_73
# %bb.77:
	cmp	byte ptr [rbx], 93
	jne	.LBB575_29
.LBB575_78:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
.LBB575_79:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB575_45:
	cmp	rdi, rbx
	je	.LBB575_54
# %bb.46:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB575_47:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB575_52
# %bb.48:                               #   in Loop: Header=BB575_47 Depth=1
	bt	rax, rcx
	jae	.LBB575_52
# %bb.49:                               #   in Loop: Header=BB575_47 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB575_47
	jmp	.LBB575_54
.LBB575_65:
	cmp	rdi, rbx
	je	.LBB575_74
# %bb.66:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB575_67:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB575_72
# %bb.68:                               #   in Loop: Header=BB575_67 Depth=1
	bt	rax, rcx
	jae	.LBB575_72
# %bb.69:                               #   in Loop: Header=BB575_67 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB575_67
.LBB575_74:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB575_26
.LBB575_53:
	mov	rdi, rbx
	jmp	.LBB575_54
.LBB575_73:
	mov	rdi, rbx
	jmp	.LBB575_74
.LBB575_56:
	cmp	al, 93
	je	.LBB575_78
# %bb.57:
	cmp	al, 47
	jne	.LBB575_76
.LBB575_58:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB575_75
# %bb.59:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB575_42
.LBB575_54:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB575_26
.LBB575_75:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB575_34
.LBB575_76:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB575_10
	.p2align	2, 0x90
.LJTI575_0:
	.long	.LBB575_31-.LJTI575_0
	.long	.LBB575_36-.LJTI575_0
	.long	.LBB575_4-.LJTI575_0
	.long	.LBB575_61-.LJTI575_0
	.long	.LBB575_58-.LJTI575_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB576_9
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB576_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI576_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB576_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB576_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB576_13
.LBB576_9:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB576_10
# %bb.12:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
.LBB576_13:
	cmp	rbx, rdi
	je	.LBB576_26
# %bb.14:
	cmp	byte ptr [rbx], 32
	ja	.LBB576_24
# %bb.15:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB576_16:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB576_17
# %bb.22:                               #   in Loop: Header=BB576_16 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB576_16
# %bb.23:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB576_24:
	cmp	rbx, rdi
	jae	.LBB576_25
# %bb.28:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB576_35
# %bb.29:
	cmp	al, 125
	je	.LBB576_126
# %bb.30:
	cmp	al, 47
	je	.LBB576_31
	jmp	.LBB576_125
.LBB576_17:
	cmp	rdi, rbx
	je	.LBB576_26
# %bb.18:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB576_19:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB576_24
# %bb.20:                               #   in Loop: Header=BB576_19 Depth=1
	bt	rax, rcx
	jae	.LBB576_24
# %bb.21:                               #   in Loop: Header=BB576_19 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB576_19
.LBB576_26:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB576_27
.LBB576_2:
	mov	eax, 3
	jmp	.LBB576_7
.LBB576_4:
	mov	eax, 6
	jmp	.LBB576_7
.LBB576_5:
	mov	eax, 10
	jmp	.LBB576_7
.LBB576_6:
	mov	eax, 11
.LBB576_7:
	add	eax, -3
	cmp	eax, 8
	ja	.LBB576_127
# %bb.8:
	lea	rcx, [rip + .LJTI576_1]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB576_60:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB576_62
# %bb.61:
	mov	rbx, rax
	jmp	.LBB576_44
.LBB576_62:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB576_34
.LBB576_33:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB576_34
.LBB576_25:
	mov	rdi, rbx
	jmp	.LBB576_26
.LBB576_10:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB576_11:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB576_27:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB576_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB576_35:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB576_128
# %bb.36:
	mov	rax, qword ptr [r15 + 120]
.LBB576_37:
	test	rax, rax
	je	.LBB576_41
# %bb.38:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB576_39
# %bb.40:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB576_42
.LBB576_41:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB576_42
.LBB576_39:
	call	"??$parse_unescaped@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB576_42:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB576_43
.LBB576_44:
	cmp	rbx, rdi
	je	.LBB576_57
# %bb.45:
	cmp	byte ptr [rbx], 32
	ja	.LBB576_55
# %bb.46:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB576_47:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB576_48
# %bb.53:                               #   in Loop: Header=BB576_47 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB576_47
# %bb.54:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB576_55:
	cmp	rbx, rdi
	jae	.LBB576_56
# %bb.58:
	mov	al, byte ptr [rbx]
	cmp	al, 58
	jne	.LBB576_59
# %bb.63:
	add	rbx, 1
.LBB576_64:
	cmp	rbx, rdi
	je	.LBB576_77
# %bb.65:
	cmp	byte ptr [rbx], 32
	ja	.LBB576_75
# %bb.66:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB576_67:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB576_68
# %bb.73:                               #   in Loop: Header=BB576_67 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB576_67
# %bb.74:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB576_75:
	cmp	rbx, rdi
	jae	.LBB576_76
# %bb.78:
	mov	rax, qword ptr [r15 + 120]
.LBB576_79:
	test	rax, rax
	je	.LBB576_80
# %bb.81:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB576_82
.LBB576_80:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB576_82:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB576_83
.LBB576_84:
	cmp	rbx, rdi
	jne	.LBB576_85
	jmp	.LBB576_97
.LBB576_48:
	cmp	rdi, rbx
	je	.LBB576_57
# %bb.49:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB576_50:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB576_55
# %bb.51:                               #   in Loop: Header=BB576_50 Depth=1
	bt	rax, rcx
	jae	.LBB576_55
# %bb.52:                               #   in Loop: Header=BB576_50 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB576_50
.LBB576_57:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB576_27
.LBB576_68:
	cmp	rdi, rbx
	je	.LBB576_77
# %bb.69:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB576_70:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB576_75
# %bb.71:                               #   in Loop: Header=BB576_70 Depth=1
	bt	rax, rcx
	jae	.LBB576_75
# %bb.72:                               #   in Loop: Header=BB576_70 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB576_70
.LBB576_77:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB576_27
.LBB576_128:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB576_11
.LBB576_43:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB576_34
.LBB576_83:
	mov	rcx, r15
	mov	dl, 39
	jmp	.LBB576_34
.LBB576_56:
	mov	rdi, rbx
	jmp	.LBB576_57
.LBB576_76:
	mov	rdi, rbx
	jmp	.LBB576_77
.LBB576_59:
	cmp	al, 47
	je	.LBB576_60
	jmp	.LBB576_125
.LBB576_85:
	cmp	byte ptr [rbx], 32
	ja	.LBB576_95
# %bb.86:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB576_87:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB576_88
# %bb.93:                               #   in Loop: Header=BB576_87 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB576_87
# %bb.94:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB576_95:
	cmp	rbx, rdi
	jae	.LBB576_96
# %bb.98:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB576_99
# %bb.103:
	add	rbx, 1
	jmp	.LBB576_104
.LBB576_88:
	cmp	rdi, rbx
	je	.LBB576_97
# %bb.89:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB576_90:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB576_95
# %bb.91:                               #   in Loop: Header=BB576_90 Depth=1
	bt	rax, rcx
	jae	.LBB576_95
# %bb.92:                               #   in Loop: Header=BB576_90 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB576_90
	jmp	.LBB576_97
.LBB576_96:
	mov	rdi, rbx
	jmp	.LBB576_97
.LBB576_99:
	cmp	al, 125
	je	.LBB576_126
# %bb.100:
	cmp	al, 47
	jne	.LBB576_125
.LBB576_101:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB576_124
# %bb.102:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB576_85
.LBB576_97:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB576_27
.LBB576_124:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB576_34
.LBB576_104:
	cmp	rbx, rdi
	je	.LBB576_117
# %bb.105:
	cmp	byte ptr [rbx], 32
	ja	.LBB576_115
# %bb.106:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB576_107:                            # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB576_108
# %bb.113:                              #   in Loop: Header=BB576_107 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB576_107
# %bb.114:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB576_115:
	cmp	rbx, rdi
	jae	.LBB576_116
# %bb.118:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB576_35
# %bb.119:
	cmp	al, 125
	jne	.LBB576_120
.LBB576_126:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
.LBB576_127:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB576_108:
	cmp	rdi, rbx
	je	.LBB576_117
# %bb.109:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB576_110:                            # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB576_115
# %bb.111:                              #   in Loop: Header=BB576_110 Depth=1
	bt	rax, rcx
	jae	.LBB576_115
# %bb.112:                              #   in Loop: Header=BB576_110 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB576_110
.LBB576_117:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB576_27
.LBB576_116:
	mov	rdi, rbx
	jmp	.LBB576_117
.LBB576_120:
	cmp	al, 47
	jne	.LBB576_125
.LBB576_121:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB576_123
# %bb.122:
	mov	rbx, rax
	jmp	.LBB576_104
.LBB576_123:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB576_34
.LBB576_125:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB576_11
	.p2align	2, 0x90
.LJTI576_0:
	.long	.LBB576_31-.LJTI576_0
	.long	.LBB576_37-.LJTI576_0
	.long	.LBB576_4-.LJTI576_0
	.long	.LBB576_60-.LJTI576_0
	.long	.LBB576_64-.LJTI576_0
	.long	.LBB576_79-.LJTI576_0
	.long	.LBB576_5-.LJTI576_0
	.long	.LBB576_6-.LJTI576_0
	.long	.LBB576_121-.LJTI576_0
	.long	.LBB576_101-.LJTI576_0
.LJTI576_1:
	.long	.LBB576_13-.LJTI576_1
	.long	.LBB576_127-.LJTI576_1
	.long	.LBB576_127-.LJTI576_1
	.long	.LBB576_44-.LJTI576_1
	.long	.LBB576_60-.LJTI576_1
	.long	.LBB576_127-.LJTI576_1
	.long	.LBB576_127-.LJTI576_1
	.long	.LBB576_84-.LJTI576_1
	.long	.LBB576_104-.LJTI576_1
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB577_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI577_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB577_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB577_8:
	jmp	"??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_7:
	jmp	"??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_10:
	jmp	"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB577_5:
	jmp	"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI577_0:
	.long	.LBB577_10-.LJTI577_0
	.long	.LBB577_10-.LJTI577_0
	.long	.LBB577_10-.LJTI577_0
	.long	.LBB577_10-.LJTI577_0
	.long	.LBB577_10-.LJTI577_0
	.long	.LBB577_2-.LJTI577_0
	.long	.LBB577_2-.LJTI577_0
	.long	.LBB577_2-.LJTI577_0
	.long	.LBB577_3-.LJTI577_0
	.long	.LBB577_3-.LJTI577_0
	.long	.LBB577_3-.LJTI577_0
	.long	.LBB577_4-.LJTI577_0
	.long	.LBB577_4-.LJTI577_0
	.long	.LBB577_4-.LJTI577_0
	.long	.LBB577_4-.LJTI577_0
	.long	.LBB577_5-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_6-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_8-.LJTI577_0
	.long	.LBB577_7-.LJTI577_0
	.long	.LBB577_7-.LJTI577_0
	.long	.LBB577_7-.LJTI577_0
	.long	.LBB577_7-.LJTI577_0
	.long	.LBB577_7-.LJTI577_0
	.long	.LBB577_7-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
	.long	.LBB577_9-.LJTI577_0
                                        # -- End function
	.def	 "??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	r15, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rax, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB578_1
# %bb.2:
	mov	rdx, qword ptr [rsi + 128]
	lea	rbx, [rcx - 9]
	mov	qword ptr [rsi + 120], rbx
	mov	r14, qword ptr [rdx + rcx - 9]
	jmp	.LBB578_3
.LBB578_1:
	add	r15, 1
	xor	r14d, r14d
.LBB578_3:
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rcx, r15
	.p2align	4, 0x90
.LBB578_4:                              # =>This Inner Loop Header: Depth=1
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, 15
	jle	.LBB578_7
# %bb.5:                                #   in Loop: Header=BB578_4 Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	add	rcx, 16
	test	dx, dx
	je	.LBB578_4
# %bb.6:
	movzx	edx, dx
	bsf	edx, edx
	lea	rdi, [rcx + rdx]
	add	rdi, -16
	jmp	.LBB578_12
	.p2align	4, 0x90
.LBB578_9:                              #   in Loop: Header=BB578_7 Depth=1
	mov	rdi, rcx
	movzx	edx, byte ptr [rcx]
	cmp	dl, 34
	je	.LBB578_12
# %bb.10:                               #   in Loop: Header=BB578_7 Depth=1
	cmp	dl, 92
	je	.LBB578_12
# %bb.11:                               #   in Loop: Header=BB578_7 Depth=1
	lea	rcx, [rdi + 1]
	cmp	dl, 32
	jb	.LBB578_12
.LBB578_7:                              # =>This Inner Loop Header: Depth=1
	cmp	rax, rcx
	jne	.LBB578_9
# %bb.8:
	mov	rdi, rax
.LBB578_12:
	mov	rbx, rdi
	sub	rbx, r15
	mov	ecx, 2147483646
	sub	rcx, r14
	cmp	rbx, rcx
	ja	.LBB578_13
# %bb.15:
	add	r14, rbx
	cmp	rdi, rax
	jae	.LBB578_16
# %bb.21:
	mov	al, byte ptr [rdi]
	cmp	al, 34
	jne	.LBB578_22
# %bb.29:
	mov	qword ptr [rsp + 32], r15
	mov	qword ptr [rsp + 40], rbx
	lea	rdx, [rsp + 32]
	mov	rcx, rsi
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
	mov	rax, rdi
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB578_13:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8d, 27
.LBB578_14:
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB578_16:
	test	rbx, rbx
	je	.LBB578_20
# %bb.17:
	mov	r8, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rsi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rsi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB578_19
# %bb.18:
	mov	rcx, rsi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 40]
.LBB578_19:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rsi + 40], rbx
.LBB578_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 19
	mov	r9, r14
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB578_22:
	cmp	al, 92
	jne	.LBB578_28
# %bb.23:
	test	rbx, rbx
	je	.LBB578_27
# %bb.24:
	mov	r8, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rsi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rsi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB578_26
# %bb.25:
	mov	rcx, rsi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 40]
.LBB578_26:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rsi + 40], rbx
.LBB578_27:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8, r14
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB578_28:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB578_14
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2112
	.seh_stackalloc 2112
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	r13, qword ptr [rcx + 160]
	mov	rax, r13
	sub	rax, rdx
	lea	r12, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
	mov	qword ptr [rsp + 2104], 0
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB579_3
# %bb.1:
	lea	rcx, [rax - 1]
	mov	qword ptr [rdi + 120], rcx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rax - 1]
	lea	rbx, [rax - 9]
	mov	qword ptr [rdi + 120], rbx
	mov	r14, qword ptr [rdx + rax - 9]
	add	cl, -21
	cmp	cl, 11
	ja	.LBB579_146
# %bb.2:
	movzx	eax, cl
	lea	rcx, [rip + .LJTI579_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB579_5:
	cmp	rsi, r12
	jae	.LBB579_6
.LBB579_15:
	movsx	eax, byte ptr [rsi]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB579_178
# %bb.16:
	lea	rcx, [rip + .LJTI579_2]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB579_17:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 34
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_3:
	mov	r14, r8
.LBB579_4:
	add	rsi, 1
	cmp	rsi, r12
	jb	.LBB579_15
.LBB579_6:
	mov	rbx, qword ptr [rsp + 2104]
	test	rbx, rbx
	je	.LBB579_12
# %bb.7:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB579_8
# %bb.9:
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB579_11
# %bb.10:
	mov	rcx, rdi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB579_11:
	add	r14, rbx
	add	rcx, r8
	add	rcx, 24
	lea	rdx, [rsp + 56]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2104], 0
.LBB579_12:
	mov	rax, r13
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
	cmp	r12, rsi
	ja	.LBB579_15
# %bb.13:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 21
	jmp	.LBB579_14
.LBB579_162:
	movzx	eax, word ptr [rdi + 140]
	mov	cl, byte ptr [rdi + 142]
	mov	edx, eax
	sub	dl, cl
	movzx	r15d, dl
	je	.LBB579_165
# %bb.163:
	movzx	eax, cl
	mov	rbx, r12
	sub	rbx, rsi
	cmp	rbx, r15
	jb	.LBB579_167
# %bb.164:
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	movzx	eax, word ptr [rdi + 140]
	mov	byte ptr [rdi + 142], al
.LBB579_165:
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	ja	.LBB579_178
# %bb.166:
	lea	rdx, [rdi + 136]
	movzx	ecx, cl
	lea	rbx, [rip + .LJTI579_1]
	movsxd	rcx, dword ptr [rbx + 4*rcx]
	add	rcx, rbx
	jmp	rcx
.LBB579_177:
	movzx	ecx, word ptr [rdx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB579_180
	jmp	.LBB579_178
.LBB579_19:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 47
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_18:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 92
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_20:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 8
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_21:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 12
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_22:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 10
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_23:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 13
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_24:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 9
	add	rsi, 1
	jmp	.LBB579_146
.LBB579_25:
	mov	rax, r12
	sub	rax, rsi
	cmp	rax, 11
	jb	.LBB579_73
# %bb.26:
	mov	eax, dword ptr [rsi + 1]
	mov	ecx, eax
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB579_28
# %bb.27:
	and	cl, -33
	lea	edx, [rcx - 65]
	add	cl, -55
	cmp	dl, 6
	movzx	ecx, cl
	mov	r8d, 255
	cmovb	r8d, ecx
.LBB579_28:
	mov	ecx, eax
	shr	ecx, 16
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB579_30
# %bb.29:
	and	cl, -33
	lea	edx, [rcx - 65]
	add	cl, -55
	cmp	dl, 6
	movzx	ecx, cl
	mov	ebx, 255
	cmovb	ebx, ecx
.LBB579_30:
	mov	ecx, eax
	shr	ecx, 8
	lea	edx, [rcx - 48]
	cmp	dl, 10
	jb	.LBB579_32
# %bb.31:
	and	cl, -33
	lea	edx, [rcx - 65]
	add	cl, -55
	cmp	dl, 6
	movzx	ecx, cl
	mov	edx, 255
	cmovb	edx, ecx
.LBB579_32:
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_34
# %bb.33:
	and	al, -33
	lea	ecx, [rax - 65]
	add	al, -55
	cmp	cl, 6
	movzx	eax, al
	mov	ecx, 255
	cmovb	ecx, eax
.LBB579_34:
	mov	eax, ebx
	or	al, r8b
	or	al, dl
	or	al, cl
	cmp	al, -1
	je	.LBB579_35
# %bb.39:
	movsx	eax, bl
	movsx	edx, dl
	movsx	ecx, cl
	movsx	ebx, r8b
	shl	ecx, 12
	shl	edx, 8
	shl	eax, 4
	add	eax, ebx
	add	eax, edx
	add	eax, ecx
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB579_47
# %bb.40:
	add	rsi, 5
	mov	rcx, qword ptr [rsp + 2104]
	cmp	eax, 127
	ja	.LBB579_42
# %bb.41:
	mov	byte ptr [rsp + rcx + 56], al
	add	qword ptr [rsp + 2104], 1
	jmp	.LBB579_146
.LBB579_42:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB579_44
# %bb.43:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 56], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 57], al
	add	qword ptr [rsp + 2104], 2
	jmp	.LBB579_146
.LBB579_44:
	cmp	eax, 65535
	ja	.LBB579_46
# %bb.45:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 58], al
	add	qword ptr [rsp + 2104], 3
	jmp	.LBB579_146
.LBB579_179:
	movzx	ecx, word ptr [rdx]
	movzx	ebx, byte ptr [rdx + 2]
	shl	ebx, 16
	or	ebx, ecx
	and	ebx, 12640256
	cmp	ebx, 8429568
	je	.LBB579_180
	jmp	.LBB579_178
.LBB579_170:
	movzx	ecx, word ptr [rdx]
	movzx	ebx, byte ptr [rdx + 2]
	shl	ebx, 16
	or	ebx, ecx
	and	ebx, 12632064
	jmp	.LBB579_171
.LBB579_172:
	movzx	ecx, word ptr [rdx]
	movzx	ebx, byte ptr [rdx + 2]
	shl	ebx, 16
	or	ebx, ecx
	and	ebx, 12640256
.LBB579_171:
	cmp	ebx, 8421376
	je	.LBB579_180
	jmp	.LBB579_178
.LBB579_173:
	mov	ecx, -1061093632
	and	ecx, dword ptr [rdx]
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB579_180
	jmp	.LBB579_178
.LBB579_174:
	mov	ecx, -1061109760
	jmp	.LBB579_175
.LBB579_176:
	mov	ecx, -1061097472
.LBB579_175:
	and	ecx, dword ptr [rdx]
	cmp	ecx, -2139062272
	jne	.LBB579_178
.LBB579_180:
	movzx	ebx, al
	lea	rcx, [rsp + 56]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rsp + 2104], rbx
	add	rsi, r15
	jmp	.LBB579_146
.LBB579_46:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 58], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 59], al
	jmp	.LBB579_145
.LBB579_167:
	test	rbx, rbx
	je	.LBB579_169
# %bb.168:
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, rbx
	call	memcpy
	add	byte ptr [rdi + 142], bl
.LBB579_169:
	mov	rcx, rdi
	mov	rdx, r12
	mov	r8b, 26
	jmp	.LBB579_14
.LBB579_73:
	mov	rbx, qword ptr [rsp + 2104]
	test	rbx, rbx
	je	.LBB579_78
# %bb.74:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB579_8
# %bb.75:
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB579_77
# %bb.76:
	mov	rcx, rdi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB579_77:
	add	r14, rbx
	add	rcx, r8
	add	rcx, 24
	lea	rdx, [rsp + 56]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2104], 0
	mov	rax, r13
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
.LBB579_78:
	add	rsi, 1
.LBB579_79:
	cmp	rsi, r12
	jae	.LBB579_80
# %bb.81:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_85
# %bb.82:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.83:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_85:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 144], eax
.LBB579_86:
	cmp	rsi, r12
	jae	.LBB579_87
# %bb.88:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_91
# %bb.89:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.90:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_91:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 144], eax
.LBB579_92:
	cmp	rsi, r12
	jae	.LBB579_93
# %bb.94:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_97
# %bb.95:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.96:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_97:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 144], eax
.LBB579_98:
	cmp	rsi, r12
	jae	.LBB579_99
# %bb.100:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_103
# %bb.101:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.102:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_103:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 144]
	add	rsi, 1
	mov	dword ptr [rdi + 144], eax
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB579_110
# %bb.104:
	cmp	eax, 127
	ja	.LBB579_106
.LBB579_105:
	mov	byte ptr [rsp + 56], al
	add	qword ptr [rsp + 2104], 1
	jmp	.LBB579_146
.LBB579_80:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 22
	jmp	.LBB579_14
.LBB579_87:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 23
	jmp	.LBB579_14
.LBB579_93:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 24
	jmp	.LBB579_14
.LBB579_99:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 25
	jmp	.LBB579_14
.LBB579_110:
	cmp	eax, 56320
	jae	.LBB579_48
.LBB579_111:
	cmp	rsi, r12
	jae	.LBB579_112
# %bb.113:
	cmp	byte ptr [rsi], 92
	jne	.LBB579_178
# %bb.114:
	add	rsi, 1
.LBB579_115:
	cmp	rsi, r12
	jae	.LBB579_116
# %bb.117:
	cmp	byte ptr [rsi], 117
	jne	.LBB579_178
# %bb.118:
	add	rsi, 1
.LBB579_119:
	cmp	rsi, r12
	jae	.LBB579_120
# %bb.121:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_124
# %bb.122:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.123:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_124:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 148], eax
.LBB579_125:
	cmp	rsi, r12
	jae	.LBB579_126
# %bb.127:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_130
# %bb.128:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.129:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_130:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 148], eax
.LBB579_131:
	cmp	rsi, r12
	jae	.LBB579_132
# %bb.133:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_136
# %bb.134:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.135:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_136:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 148], eax
.LBB579_137:
	cmp	rsi, r12
	jae	.LBB579_138
# %bb.139:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB579_142
# %bb.140:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB579_84
# %bb.141:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB579_84
.LBB579_142:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 148]
	add	rsi, 1
	mov	dword ptr [rdi + 148], eax
	mov	ecx, eax
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB579_84
# %bb.143:
	mov	ecx, dword ptr [rdi + 144]
	shl	ecx, 10
	add	eax, ecx
	add	eax, -56613888
	cmp	eax, 127
	jbe	.LBB579_105
.LBB579_106:
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB579_108
# %bb.107:
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 56], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 57], al
	add	qword ptr [rsp + 2104], 2
	jmp	.LBB579_146
.LBB579_84:
	mov	rcx, rdi
	mov	rdx, rsi
.LBB579_37:
	mov	r8d, 16
.LBB579_38:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rsi, rax
	jmp	.LBB579_161
.LBB579_108:
	cmp	eax, 65535
	ja	.LBB579_144
# %bb.109:
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 56], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 57], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 58], al
	add	qword ptr [rsp + 2104], 3
	jmp	.LBB579_146
.LBB579_144:
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 56], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 57], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 58], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 59], al
.LBB579_145:
	add	qword ptr [rsp + 2104], 4
.LBB579_146:
	lea	rbx, [rsp + 56]
	cmp	rsi, r12
	jae	.LBB579_148
.LBB579_155:                            # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [rsi]
	cmp	al, 34
	je	.LBB579_159
# %bb.156:                              #   in Loop: Header=BB579_155 Depth=1
	cmp	al, 92
	je	.LBB579_4
# %bb.157:                              #   in Loop: Header=BB579_155 Depth=1
	cmp	al, 31
	jbe	.LBB579_178
# %bb.158:                              #   in Loop: Header=BB579_155 Depth=1
	mov	rcx, qword ptr [rsp + 2104]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rsp + 2104], rdx
	mov	byte ptr [rsp + rcx + 56], al
	add	rsi, 1
	cmp	rsi, r12
	jb	.LBB579_155
.LBB579_148:
	mov	r15, qword ptr [rsp + 2104]
	test	r15, r15
	je	.LBB579_153
# %bb.149:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	r15, rax
	ja	.LBB579_8
# %bb.150:
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [r15 + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB579_152
# %bb.151:
	mov	rcx, rdi
	mov	rdx, r15
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB579_152:
	add	r14, r15
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rbx
	mov	r8, r15
	call	memcpy
	add	qword ptr [rdi + 40], r15
	mov	qword ptr [rsp + 2104], 0
.LBB579_153:
	mov	rax, r13
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
	cmp	r12, rsi
	ja	.LBB579_155
# %bb.154:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 20
	jmp	.LBB579_14
.LBB579_159:
	mov	rax, qword ptr [rsp + 2104]
	mov	ecx, 2147483646
	sub	rcx, r14
	cmp	rax, rcx
	ja	.LBB579_8
# %bb.160:
	mov	qword ptr [rsp + 40], rbx
	mov	qword ptr [rsp + 48], rax
	lea	rdx, [rsp + 40]
	mov	rcx, rdi
	call	"?push_string@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rsi, 1
.LBB579_161:
	mov	rax, rsi
	add	rsp, 2112
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB579_8:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 27
	jmp	.LBB579_38
.LBB579_112:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 27
	jmp	.LBB579_14
.LBB579_116:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 28
	jmp	.LBB579_14
.LBB579_120:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 29
	jmp	.LBB579_14
.LBB579_126:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 30
	jmp	.LBB579_14
.LBB579_132:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 31
	jmp	.LBB579_14
.LBB579_138:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 32
.LBB579_14:
	mov	r9, r14
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rsi, rax
	jmp	.LBB579_161
.LBB579_35:
	lea	rax, [rsi + 1]
	cmp	cl, -1
	cmove	rax, rsi
	lea	rcx, [rax + 1]
	cmp	dl, -1
	cmove	rcx, rax
	lea	rdx, [rcx + 1]
	cmp	bl, -1
	cmove	rdx, rcx
.LBB579_36:
	mov	rcx, rdi
	jmp	.LBB579_37
.LBB579_47:
	cmp	eax, 56320
	jae	.LBB579_48
# %bb.49:
	cmp	byte ptr [rsi + 5], 92
	jne	.LBB579_50
# %bb.51:
	cmp	byte ptr [rsi + 6], 117
	jne	.LBB579_52
# %bb.53:
	mov	edx, dword ptr [rsi + 7]
	mov	ecx, edx
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB579_55
# %bb.54:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r8d, 255
	cmovb	r8d, ecx
.LBB579_55:
	mov	ecx, edx
	shr	ecx, 16
	lea	r9d, [rcx - 48]
	cmp	r9b, 10
	jb	.LBB579_57
# %bb.56:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r9d, 255
	cmovb	r9d, ecx
.LBB579_57:
	mov	ecx, edx
	shr	ecx, 8
	lea	r10d, [rcx - 48]
	cmp	r10b, 10
	jb	.LBB579_59
# %bb.58:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r10d, 255
	cmovb	r10d, ecx
.LBB579_59:
	lea	r11d, [rdx - 48]
	cmp	r11b, 10
	jb	.LBB579_61
# %bb.60:
	and	dl, -33
	lea	ecx, [rdx - 65]
	add	dl, -55
	cmp	cl, 6
	movzx	ecx, dl
	mov	r11d, 255
	cmovb	r11d, ecx
.LBB579_61:
	lea	rdx, [rsi + 7]
	mov	ecx, r9d
	or	cl, r8b
	or	cl, r10b
	or	cl, r11b
	cmp	cl, -1
	je	.LBB579_62
# %bb.63:
	movsx	ecx, r9b
	movsx	ebx, r10b
	movsx	r9d, r11b
	movsx	r8d, r8b
	shl	r9d, 12
	shl	ebx, 8
	shl	ecx, 4
	add	ecx, r8d
	add	ecx, ebx
	add	ecx, r9d
	mov	ebx, ecx
	and	ebx, -1024
	cmp	ebx, 56320
	jne	.LBB579_64
# %bb.66:
	add	rsi, 11
	shl	eax, 10
	add	eax, ecx
	add	eax, -56613888
	mov	rcx, qword ptr [rsp + 2104]
	cmp	eax, 127
	ja	.LBB579_68
# %bb.67:
	mov	byte ptr [rsp + rcx + 56], al
	add	qword ptr [rsp + 2104], 1
	jmp	.LBB579_146
.LBB579_68:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB579_70
# %bb.69:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 56], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 57], al
	add	qword ptr [rsp + 2104], 2
	jmp	.LBB579_146
.LBB579_70:
	cmp	eax, 65535
	ja	.LBB579_72
# %bb.71:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 58], al
	add	qword ptr [rsp + 2104], 3
	jmp	.LBB579_146
.LBB579_72:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 58], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 59], al
	jmp	.LBB579_145
.LBB579_48:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 11
	jmp	.LBB579_38
.LBB579_50:
	add	rsi, 5
	jmp	.LBB579_178
.LBB579_52:
	add	rsi, 6
.LBB579_178:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB579_38
.LBB579_62:
	add	rsi, 8
	cmp	r11b, -1
	cmove	rsi, rdx
	lea	rax, [rsi + 1]
	cmp	r10b, -1
	cmove	rax, rsi
	lea	rdx, [rax + 1]
	cmp	r9b, -1
	cmove	rdx, rax
	jmp	.LBB579_36
.LBB579_64:
	mov	rcx, rdi
	mov	r8d, 11
	jmp	.LBB579_38
	.p2align	2, 0x90
.LJTI579_0:
	.long	.LBB579_5-.LJTI579_0
	.long	.LBB579_79-.LJTI579_0
	.long	.LBB579_86-.LJTI579_0
	.long	.LBB579_92-.LJTI579_0
	.long	.LBB579_98-.LJTI579_0
	.long	.LBB579_162-.LJTI579_0
	.long	.LBB579_111-.LJTI579_0
	.long	.LBB579_115-.LJTI579_0
	.long	.LBB579_119-.LJTI579_0
	.long	.LBB579_125-.LJTI579_0
	.long	.LBB579_131-.LJTI579_0
	.long	.LBB579_137-.LJTI579_0
.LJTI579_1:
	.long	.LBB579_177-.LJTI579_1
	.long	.LBB579_179-.LJTI579_1
	.long	.LBB579_170-.LJTI579_1
	.long	.LBB579_172-.LJTI579_1
	.long	.LBB579_173-.LJTI579_1
	.long	.LBB579_174-.LJTI579_1
	.long	.LBB579_176-.LJTI579_1
.LJTI579_2:
	.long	.LBB579_17-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_19-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_18-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_20-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_21-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_22-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_23-.LJTI579_2
	.long	.LBB579_178-.LJTI579_2
	.long	.LBB579_24-.LJTI579_2
	.long	.LBB579_25-.LJTI579_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB580_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB580_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI580_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB580_22:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB580_24
# %bb.23:
	mov	rbx, rax
.LBB580_7:
	cmp	rbx, rdi
	jne	.LBB580_8
	jmp	.LBB580_20
.LBB580_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB580_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB580_20
.LBB580_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB580_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB580_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB580_11
# %bb.16:                               #   in Loop: Header=BB580_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB580_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB580_18:
	cmp	rbx, rdi
	jae	.LBB580_19
# %bb.69:
	cmp	byte ptr [rbx], 93
	jne	.LBB580_26
	jmp	.LBB580_70
.LBB580_66:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB580_68
# %bb.67:
	mov	rbx, rax
	jmp	.LBB580_34
.LBB580_11:
	cmp	rdi, rbx
	je	.LBB580_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB580_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB580_18
# %bb.14:                               #   in Loop: Header=BB580_13 Depth=1
	bt	rax, rcx
	jae	.LBB580_18
# %bb.15:                               #   in Loop: Header=BB580_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB580_13
.LBB580_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB580_21
.LBB580_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB580_5
.LBB580_19:
	mov	rdi, rbx
	jmp	.LBB580_20
.LBB580_24:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB580_25
.LBB580_68:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB580_25
.LBB580_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB580_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB580_25:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB580_26:
	add	r14, 1
	cmp	r14, 2147483647
	jae	.LBB580_27
# %bb.28:
	mov	rax, qword ptr [r15 + 120]
.LBB580_29:
	test	rax, rax
	je	.LBB580_30
# %bb.31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB580_32
.LBB580_30:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB580_32:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB580_33
.LBB580_34:
	cmp	rbx, rdi
	je	.LBB580_47
# %bb.35:
	cmp	byte ptr [rbx], 32
	ja	.LBB580_45
# %bb.36:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB580_37:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB580_38
# %bb.43:                               #   in Loop: Header=BB580_37 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB580_37
# %bb.44:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB580_45:
	cmp	rbx, rdi
	jae	.LBB580_46
# %bb.48:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB580_49
# %bb.51:
	add	rbx, 1
.LBB580_52:
	cmp	rbx, rdi
	je	.LBB580_65
# %bb.53:
	cmp	byte ptr [rbx], 32
	ja	.LBB580_63
# %bb.54:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB580_55:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB580_56
# %bb.61:                               #   in Loop: Header=BB580_55 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB580_55
# %bb.62:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB580_63:
	cmp	rbx, rdi
	jb	.LBB580_26
# %bb.64:
	mov	rdi, rbx
	jmp	.LBB580_65
.LBB580_38:
	cmp	rdi, rbx
	je	.LBB580_47
# %bb.39:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB580_40:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB580_45
# %bb.41:                               #   in Loop: Header=BB580_40 Depth=1
	bt	rax, rcx
	jae	.LBB580_45
# %bb.42:                               #   in Loop: Header=BB580_40 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB580_40
.LBB580_47:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB580_21
.LBB580_56:
	cmp	rdi, rbx
	je	.LBB580_65
# %bb.57:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB580_58:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB580_63
# %bb.59:                               #   in Loop: Header=BB580_58 Depth=1
	bt	rax, rcx
	jae	.LBB580_63
# %bb.60:                               #   in Loop: Header=BB580_58 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB580_58
.LBB580_65:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB580_21
.LBB580_27:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB580_5
.LBB580_33:
	mov	rcx, r15
	mov	dl, 46
	jmp	.LBB580_25
.LBB580_46:
	mov	rdi, rbx
	jmp	.LBB580_47
.LBB580_49:
	cmp	al, 93
	jne	.LBB580_50
.LBB580_70:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB580_50:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB580_5
	.p2align	2, 0x90
.LJTI580_0:
	.long	.LBB580_22-.LJTI580_0
	.long	.LBB580_29-.LJTI580_0
	.long	.LBB580_34-.LJTI580_0
	.long	.LBB580_52-.LJTI580_0
	.long	.LBB580_66-.LJTI580_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB581_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB581_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI581_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB581_25:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB581_27
# %bb.26:
	mov	rbx, rax
.LBB581_7:
	cmp	rbx, rdi
	jne	.LBB581_8
	jmp	.LBB581_20
.LBB581_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB581_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB581_20
.LBB581_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB581_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB581_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB581_11
# %bb.16:                               #   in Loop: Header=BB581_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB581_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB581_18:
	cmp	rbx, rdi
	jae	.LBB581_19
# %bb.22:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB581_30
	jmp	.LBB581_23
.LBB581_11:
	cmp	rdi, rbx
	je	.LBB581_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB581_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB581_18
# %bb.14:                               #   in Loop: Header=BB581_13 Depth=1
	bt	rax, rcx
	jae	.LBB581_18
# %bb.15:                               #   in Loop: Header=BB581_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB581_13
.LBB581_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB581_21
.LBB581_53:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB581_55
# %bb.54:
	mov	rbx, rax
	jmp	.LBB581_39
.LBB581_108:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB581_110
# %bb.109:
	mov	rbx, rax
	jmp	.LBB581_94
.LBB581_111:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB581_113
# %bb.112:
	mov	rbx, rax
	jmp	.LBB581_78
.LBB581_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB581_5
.LBB581_19:
	mov	rdi, rbx
	jmp	.LBB581_20
.LBB581_27:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB581_28
.LBB581_55:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB581_28
.LBB581_110:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB581_28
.LBB581_113:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB581_28
.LBB581_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB581_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB581_23:
	cmp	al, 125
	jne	.LBB581_24
# %bb.115:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB581_24:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB581_5
.LBB581_28:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB581_29:
	cmp	byte ptr [rbx], 34
	jne	.LBB581_24
.LBB581_30:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB581_114
# %bb.31:
	mov	rax, qword ptr [r15 + 120]
.LBB581_32:
	test	rax, rax
	je	.LBB581_36
# %bb.33:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB581_34
# %bb.35:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB581_37
.LBB581_36:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB581_37
.LBB581_34:
	call	"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB581_37:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB581_38
.LBB581_39:
	cmp	rbx, rdi
	je	.LBB581_52
# %bb.40:
	cmp	byte ptr [rbx], 32
	ja	.LBB581_50
# %bb.41:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB581_42:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB581_43
# %bb.48:                               #   in Loop: Header=BB581_42 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB581_42
# %bb.49:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB581_50:
	cmp	rbx, rdi
	jae	.LBB581_51
# %bb.56:
	cmp	byte ptr [rbx], 58
	jne	.LBB581_24
# %bb.57:
	add	rbx, 1
.LBB581_58:
	cmp	rbx, rdi
	je	.LBB581_71
# %bb.59:
	cmp	byte ptr [rbx], 32
	ja	.LBB581_69
# %bb.60:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB581_61:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB581_62
# %bb.67:                               #   in Loop: Header=BB581_61 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB581_61
# %bb.68:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB581_69:
	cmp	rbx, rdi
	jae	.LBB581_70
# %bb.72:
	mov	rax, qword ptr [r15 + 120]
.LBB581_73:
	test	rax, rax
	je	.LBB581_74
# %bb.75:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB581_76
.LBB581_74:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB581_76:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB581_77
.LBB581_78:
	cmp	rbx, rdi
	je	.LBB581_91
# %bb.79:
	cmp	byte ptr [rbx], 32
	ja	.LBB581_89
# %bb.80:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB581_81:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB581_82
# %bb.87:                               #   in Loop: Header=BB581_81 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB581_81
# %bb.88:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB581_89:
	cmp	rbx, rdi
	jae	.LBB581_90
# %bb.92:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB581_23
# %bb.93:
	add	rbx, 1
.LBB581_94:
	cmp	rbx, rdi
	je	.LBB581_107
# %bb.95:
	cmp	byte ptr [rbx], 32
	ja	.LBB581_105
# %bb.96:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB581_97:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB581_98
# %bb.103:                              #   in Loop: Header=BB581_97 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB581_97
# %bb.104:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB581_105:
	cmp	rbx, rdi
	jb	.LBB581_29
# %bb.106:
	mov	rdi, rbx
	jmp	.LBB581_107
.LBB581_43:
	cmp	rdi, rbx
	je	.LBB581_52
# %bb.44:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB581_45:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB581_50
# %bb.46:                               #   in Loop: Header=BB581_45 Depth=1
	bt	rax, rcx
	jae	.LBB581_50
# %bb.47:                               #   in Loop: Header=BB581_45 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB581_45
.LBB581_52:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB581_21
.LBB581_62:
	cmp	rdi, rbx
	je	.LBB581_71
# %bb.63:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB581_64:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB581_69
# %bb.65:                               #   in Loop: Header=BB581_64 Depth=1
	bt	rax, rcx
	jae	.LBB581_69
# %bb.66:                               #   in Loop: Header=BB581_64 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB581_64
.LBB581_71:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB581_21
.LBB581_82:
	cmp	rdi, rbx
	je	.LBB581_91
# %bb.83:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB581_84:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB581_89
# %bb.85:                               #   in Loop: Header=BB581_84 Depth=1
	bt	rax, rcx
	jae	.LBB581_89
# %bb.86:                               #   in Loop: Header=BB581_84 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB581_84
.LBB581_91:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB581_21
.LBB581_98:
	cmp	rdi, rbx
	je	.LBB581_107
# %bb.99:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB581_100:                            # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB581_105
# %bb.101:                              #   in Loop: Header=BB581_100 Depth=1
	bt	rax, rcx
	jae	.LBB581_105
# %bb.102:                              #   in Loop: Header=BB581_100 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB581_100
.LBB581_107:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB581_21
.LBB581_114:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB581_5
.LBB581_38:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB581_28
.LBB581_77:
	mov	rcx, r15
	mov	dl, 39
	jmp	.LBB581_28
.LBB581_51:
	mov	rdi, rbx
	jmp	.LBB581_52
.LBB581_70:
	mov	rdi, rbx
	jmp	.LBB581_71
.LBB581_90:
	mov	rdi, rbx
	jmp	.LBB581_91
	.p2align	2, 0x90
.LJTI581_0:
	.long	.LBB581_25-.LJTI581_0
	.long	.LBB581_32-.LJTI581_0
	.long	.LBB581_39-.LJTI581_0
	.long	.LBB581_53-.LJTI581_0
	.long	.LBB581_58-.LJTI581_0
	.long	.LBB581_73-.LJTI581_0
	.long	.LBB581_78-.LJTI581_0
	.long	.LBB581_94-.LJTI581_0
	.long	.LBB581_108-.LJTI581_0
	.long	.LBB581_111-.LJTI581_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB582_3
# %bb.1:
	lea	rbx, [rcx - 1]
	mov	qword ptr [rsi + 120], rbx
	mov	rdx, qword ptr [rsi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	add	cl, -5
	cmp	cl, 3
	ja	.LBB582_4
# %bb.2:
	movzx	ecx, cl
	lea	rdx, [rip + .LJTI582_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB582_26:
	cmp	rax, rdi
	jne	.LBB582_27
	jmp	.LBB582_39
.LBB582_3:
	add	rax, 1
	xor	ebx, ebx
.LBB582_4:
	cmp	rdi, rax
	jbe	.LBB582_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB582_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB582_42
# %bb.9:
	add	rax, 1
.LBB582_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB582_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB582_13
.LBB582_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB582_12:
	mov	rax, rsi
.LBB582_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB582_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB582_6
.LBB582_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
.LBB582_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB582_15:
	add	rax, 1
.LBB582_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB582_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB582_19
.LBB582_18:
	mov	rax, rsi
.LBB582_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB582_20
# %bb.21:
	add	rax, 1
.LBB582_22:
	cmp	rdi, rax
	jbe	.LBB582_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB582_15
.LBB582_25:
	add	rax, 1
	cmp	rax, rdi
	je	.LBB582_39
.LBB582_27:
	cmp	byte ptr [rax], 32
	ja	.LBB582_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB582_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB582_30
# %bb.35:                               #   in Loop: Header=BB582_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	ecx, xmm4
	add	rax, 16
	cmp	cx, -1
	je	.LBB582_29
# %bb.36:
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB582_37:
	cmp	rax, rdi
	jae	.LBB582_38
# %bb.40:
	test	rbx, rbx
	je	.LBB582_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB582_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB582_30:
	cmp	rdi, rax
	je	.LBB582_39
# %bb.31:
	movabs	rcx, 4294977024
	.p2align	4, 0x90
.LBB582_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB582_37
# %bb.33:                               #   in Loop: Header=BB582_32 Depth=1
	bt	rcx, rdx
	jae	.LBB582_37
# %bb.34:                               #   in Loop: Header=BB582_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB582_32
.LBB582_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB582_6
.LBB582_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB582_6
.LBB582_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB582_6
.LBB582_38:
	mov	rdi, rax
	jmp	.LBB582_39
	.p2align	2, 0x90
.LJTI582_0:
	.long	.LBB582_10-.LJTI582_0
	.long	.LBB582_16-.LJTI582_0
	.long	.LBB582_22-.LJTI582_0
	.long	.LBB582_26-.LJTI582_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB583_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB583_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI583_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB583_26:
	cmp	rdi, rax
	je	.LBB583_37
# %bb.27:
	cmp	byte ptr [rax], 32
	ja	.LBB583_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB583_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB583_30
# %bb.35:                               #   in Loop: Header=BB583_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB583_29
# %bb.36:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB583_37:
	cmp	rax, rdi
	jae	.LBB583_38
# %bb.40:
	test	r9, r9
	je	.LBB583_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB583_3:
	add	rax, 1
.LBB583_4:
	cmp	rdi, rax
	jbe	.LBB583_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB583_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB583_42
# %bb.9:
	add	rax, 1
.LBB583_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB583_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB583_13
.LBB583_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB583_12:
	mov	rax, rsi
.LBB583_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB583_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB583_6
.LBB583_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB583_30:
	cmp	rdi, rax
	je	.LBB583_39
# %bb.31:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB583_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB583_37
# %bb.33:                               #   in Loop: Header=BB583_32 Depth=1
	bt	r8, rdx
	jae	.LBB583_37
# %bb.34:                               #   in Loop: Header=BB583_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB583_32
.LBB583_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB583_6
.LBB583_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB583_6
.LBB583_38:
	mov	rdi, rax
	jmp	.LBB583_39
.LBB583_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB583_15:
	add	rax, 1
.LBB583_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB583_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB583_19
.LBB583_18:
	mov	rax, rsi
.LBB583_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB583_20
# %bb.21:
	add	rax, 1
.LBB583_22:
	cmp	rdi, rax
	jbe	.LBB583_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB583_15
.LBB583_25:
	add	rax, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB583_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB583_6
.LBB583_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB583_6
	.p2align	2, 0x90
.LJTI583_0:
	.long	.LBB583_10-.LJTI583_0
	.long	.LBB583_16-.LJTI583_0
	.long	.LBB583_22-.LJTI583_0
	.long	.LBB583_26-.LJTI583_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	.seh_endprologue
	mov	r15, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rax, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB584_1
# %bb.2:
	mov	rdx, qword ptr [rsi + 128]
	lea	rbx, [rcx - 9]
	mov	qword ptr [rsi + 120], rbx
	mov	r14, qword ptr [rdx + rcx - 9]
	jmp	.LBB584_3
.LBB584_1:
	add	r15, 1
	xor	r14d, r14d
.LBB584_3:
	movdqa	xmm0, xmmword ptr [rip + __xmm@22222222222222222222222222222222] # xmm0 = [34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34]
	movdqa	xmm1, xmmword ptr [rip + __xmm@5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c] # xmm1 = [92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92]
	movdqa	xmm2, xmmword ptr [rip + __xmm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f] # xmm2 = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31]
	mov	rcx, r15
	.p2align	4, 0x90
.LBB584_4:                              # =>This Inner Loop Header: Depth=1
	mov	rdx, rax
	sub	rdx, rcx
	cmp	rdx, 15
	jle	.LBB584_7
# %bb.5:                                #   in Loop: Header=BB584_4 Depth=1
	movdqu	xmm3, xmmword ptr [rcx]
	movdqa	xmm4, xmm3
	movdqa	xmm5, xmm3
	pminub	xmm5, xmm2
	pcmpeqb	xmm5, xmm3
	pcmpeqb	xmm3, xmm0
	pcmpeqb	xmm4, xmm1
	por	xmm4, xmm3
	por	xmm5, xmm4
	pmovmskb	edx, xmm5
	add	rcx, 16
	test	dx, dx
	je	.LBB584_4
# %bb.6:
	movzx	edx, dx
	bsf	edx, edx
	lea	rdi, [rcx + rdx]
	add	rdi, -16
	jmp	.LBB584_12
	.p2align	4, 0x90
.LBB584_9:                              #   in Loop: Header=BB584_7 Depth=1
	mov	rdi, rcx
	movzx	edx, byte ptr [rcx]
	cmp	dl, 34
	je	.LBB584_12
# %bb.10:                               #   in Loop: Header=BB584_7 Depth=1
	cmp	dl, 92
	je	.LBB584_12
# %bb.11:                               #   in Loop: Header=BB584_7 Depth=1
	lea	rcx, [rdi + 1]
	cmp	dl, 32
	jb	.LBB584_12
.LBB584_7:                              # =>This Inner Loop Header: Depth=1
	cmp	rax, rcx
	jne	.LBB584_9
# %bb.8:
	mov	rdi, rax
.LBB584_12:
	mov	rbx, rdi
	sub	rbx, r15
	mov	ecx, 2147483646
	sub	rcx, r14
	cmp	rbx, rcx
	ja	.LBB584_13
# %bb.15:
	add	r14, rbx
	cmp	rdi, rax
	jae	.LBB584_16
# %bb.21:
	mov	al, byte ptr [rdi]
	cmp	al, 34
	jne	.LBB584_22
# %bb.29:
	mov	qword ptr [rsp + 32], r15
	mov	qword ptr [rsp + 40], rbx
	lea	rdx, [rsp + 32]
	mov	rcx, rsi
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rdi, 1
	mov	rax, rdi
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB584_13:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8d, 26
.LBB584_14:
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB584_16:
	test	rbx, rbx
	je	.LBB584_20
# %bb.17:
	mov	r8, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rsi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rsi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB584_19
# %bb.18:
	mov	rcx, rsi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 40]
.LBB584_19:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rsi + 40], rbx
.LBB584_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 19
	mov	r9, r14
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB584_22:
	cmp	al, 92
	jne	.LBB584_28
# %bb.23:
	test	rbx, rbx
	je	.LBB584_27
# %bb.24:
	mov	r8, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rsi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rsi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB584_26
# %bb.25:
	mov	rcx, rsi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rsi + 40]
.LBB584_26:
	add	rcx, r8
	add	rcx, 24
	mov	rdx, r15
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rsi + 40], rbx
.LBB584_27:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8, r14
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB584_28:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8d, 1
	jmp	.LBB584_14
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.globl	"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # -- Begin function ??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z
	.p2align	4, 0x90
"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z": # @"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
.seh_proc "??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r13
	.seh_pushreg r13
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 2112
	.seh_stackalloc 2112
	.seh_endprologue
	mov	rsi, rdx
	mov	rdi, rcx
	mov	r13, qword ptr [rcx + 160]
	mov	rax, r13
	sub	rax, rdx
	lea	r12, [rdx + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
	mov	qword ptr [rsp + 2104], 0
	mov	rax, qword ptr [rcx + 120]
	test	rax, rax
	je	.LBB585_3
# %bb.1:
	lea	rcx, [rax - 1]
	mov	qword ptr [rdi + 120], rcx
	mov	rdx, qword ptr [rdi + 128]
	mov	cl, byte ptr [rdx + rax - 1]
	lea	rbx, [rax - 9]
	mov	qword ptr [rdi + 120], rbx
	mov	r14, qword ptr [rdx + rax - 9]
	add	cl, -21
	cmp	cl, 11
	ja	.LBB585_146
# %bb.2:
	movzx	eax, cl
	lea	rcx, [rip + .LJTI585_0]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB585_5:
	cmp	rsi, r12
	jae	.LBB585_6
.LBB585_15:
	movsx	eax, byte ptr [rsi]
	add	eax, -34
	cmp	eax, 83
	ja	.LBB585_178
# %bb.16:
	lea	rcx, [rip + .LJTI585_2]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB585_17:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 34
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_3:
	mov	r14, r8
.LBB585_4:
	add	rsi, 1
	cmp	rsi, r12
	jb	.LBB585_15
.LBB585_6:
	mov	rbx, qword ptr [rsp + 2104]
	test	rbx, rbx
	je	.LBB585_12
# %bb.7:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB585_8
# %bb.9:
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB585_11
# %bb.10:
	mov	rcx, rdi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB585_11:
	add	r14, rbx
	add	rcx, r8
	add	rcx, 24
	lea	rdx, [rsp + 56]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2104], 0
.LBB585_12:
	mov	rax, r13
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
	cmp	r12, rsi
	ja	.LBB585_15
# %bb.13:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 21
	jmp	.LBB585_14
.LBB585_162:
	movzx	eax, word ptr [rdi + 140]
	mov	cl, byte ptr [rdi + 142]
	mov	edx, eax
	sub	dl, cl
	movzx	r15d, dl
	je	.LBB585_165
# %bb.163:
	movzx	eax, cl
	mov	rbx, r12
	sub	rbx, rsi
	cmp	rbx, r15
	jb	.LBB585_167
# %bb.164:
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, r15
	call	memcpy
	movzx	eax, word ptr [rdi + 140]
	mov	byte ptr [rdi + 142], al
.LBB585_165:
	mov	ecx, eax
	shr	ecx, 8
	add	cl, -1
	cmp	cl, 6
	ja	.LBB585_178
# %bb.166:
	lea	rdx, [rdi + 136]
	movzx	ecx, cl
	lea	rbx, [rip + .LJTI585_1]
	movsxd	rcx, dword ptr [rbx + 4*rcx]
	add	rcx, rbx
	jmp	rcx
.LBB585_177:
	movzx	ecx, word ptr [rdx]
	and	ecx, 49152
	cmp	ecx, 32768
	je	.LBB585_180
	jmp	.LBB585_178
.LBB585_19:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 47
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_18:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 92
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_20:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 8
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_21:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 12
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_22:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 10
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_23:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 13
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_24:
	mov	rax, qword ptr [rsp + 2104]
	lea	rcx, [rax + 1]
	mov	qword ptr [rsp + 2104], rcx
	mov	byte ptr [rsp + rax + 56], 9
	add	rsi, 1
	jmp	.LBB585_146
.LBB585_25:
	mov	rax, r12
	sub	rax, rsi
	cmp	rax, 11
	jb	.LBB585_73
# %bb.26:
	mov	eax, dword ptr [rsi + 1]
	mov	ecx, eax
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB585_28
# %bb.27:
	and	cl, -33
	lea	edx, [rcx - 65]
	add	cl, -55
	cmp	dl, 6
	movzx	ecx, cl
	mov	r8d, 255
	cmovb	r8d, ecx
.LBB585_28:
	mov	ecx, eax
	shr	ecx, 16
	lea	ebx, [rcx - 48]
	cmp	bl, 10
	jb	.LBB585_30
# %bb.29:
	and	cl, -33
	lea	edx, [rcx - 65]
	add	cl, -55
	cmp	dl, 6
	movzx	ecx, cl
	mov	ebx, 255
	cmovb	ebx, ecx
.LBB585_30:
	mov	ecx, eax
	shr	ecx, 8
	lea	edx, [rcx - 48]
	cmp	dl, 10
	jb	.LBB585_32
# %bb.31:
	and	cl, -33
	lea	edx, [rcx - 65]
	add	cl, -55
	cmp	dl, 6
	movzx	ecx, cl
	mov	edx, 255
	cmovb	edx, ecx
.LBB585_32:
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_34
# %bb.33:
	and	al, -33
	lea	ecx, [rax - 65]
	add	al, -55
	cmp	cl, 6
	movzx	eax, al
	mov	ecx, 255
	cmovb	ecx, eax
.LBB585_34:
	mov	eax, ebx
	or	al, r8b
	or	al, dl
	or	al, cl
	cmp	al, -1
	je	.LBB585_35
# %bb.39:
	movsx	eax, bl
	movsx	edx, dl
	movsx	ecx, cl
	movsx	ebx, r8b
	shl	ecx, 12
	shl	edx, 8
	shl	eax, 4
	add	eax, ebx
	add	eax, edx
	add	eax, ecx
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB585_47
# %bb.40:
	add	rsi, 5
	mov	rcx, qword ptr [rsp + 2104]
	cmp	eax, 127
	ja	.LBB585_42
# %bb.41:
	mov	byte ptr [rsp + rcx + 56], al
	add	qword ptr [rsp + 2104], 1
	jmp	.LBB585_146
.LBB585_42:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB585_44
# %bb.43:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 56], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 57], al
	add	qword ptr [rsp + 2104], 2
	jmp	.LBB585_146
.LBB585_44:
	cmp	eax, 65535
	ja	.LBB585_46
# %bb.45:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 58], al
	add	qword ptr [rsp + 2104], 3
	jmp	.LBB585_146
.LBB585_179:
	movzx	ecx, word ptr [rdx]
	movzx	ebx, byte ptr [rdx + 2]
	shl	ebx, 16
	or	ebx, ecx
	and	ebx, 12640256
	cmp	ebx, 8429568
	je	.LBB585_180
	jmp	.LBB585_178
.LBB585_170:
	movzx	ecx, word ptr [rdx]
	movzx	ebx, byte ptr [rdx + 2]
	shl	ebx, 16
	or	ebx, ecx
	and	ebx, 12632064
	jmp	.LBB585_171
.LBB585_172:
	movzx	ecx, word ptr [rdx]
	movzx	ebx, byte ptr [rdx + 2]
	shl	ebx, 16
	or	ebx, ecx
	and	ebx, 12640256
.LBB585_171:
	cmp	ebx, 8421376
	je	.LBB585_180
	jmp	.LBB585_178
.LBB585_173:
	mov	ecx, -1061093632
	and	ecx, dword ptr [rdx]
	add	ecx, 2139058176
	cmp	ecx, 12033
	jb	.LBB585_180
	jmp	.LBB585_178
.LBB585_174:
	mov	ecx, -1061109760
	jmp	.LBB585_175
.LBB585_176:
	mov	ecx, -1061097472
.LBB585_175:
	and	ecx, dword ptr [rdx]
	cmp	ecx, -2139062272
	jne	.LBB585_178
.LBB585_180:
	movzx	ebx, al
	lea	rcx, [rsp + 56]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rsp + 2104], rbx
	add	rsi, r15
	jmp	.LBB585_146
.LBB585_46:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 58], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 59], al
	jmp	.LBB585_145
.LBB585_167:
	test	rbx, rbx
	je	.LBB585_169
# %bb.168:
	lea	rcx, [rdi + rax]
	add	rcx, 136
	mov	rdx, rsi
	mov	r8, rbx
	call	memcpy
	add	byte ptr [rdi + 142], bl
.LBB585_169:
	mov	rcx, rdi
	mov	rdx, r12
	mov	r8b, 26
	jmp	.LBB585_14
.LBB585_73:
	mov	rbx, qword ptr [rsp + 2104]
	test	rbx, rbx
	je	.LBB585_78
# %bb.74:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	rbx, rax
	ja	.LBB585_8
# %bb.75:
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [rbx + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB585_77
# %bb.76:
	mov	rcx, rdi
	mov	rdx, rbx
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB585_77:
	add	r14, rbx
	add	rcx, r8
	add	rcx, 24
	lea	rdx, [rsp + 56]
	mov	r8, rbx
	call	memcpy
	add	qword ptr [rdi + 40], rbx
	mov	qword ptr [rsp + 2104], 0
	mov	rax, r13
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
.LBB585_78:
	add	rsi, 1
.LBB585_79:
	cmp	rsi, r12
	jae	.LBB585_80
# %bb.81:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_85
# %bb.82:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.83:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_85:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 144], eax
.LBB585_86:
	cmp	rsi, r12
	jae	.LBB585_87
# %bb.88:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_91
# %bb.89:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.90:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_91:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 144], eax
.LBB585_92:
	cmp	rsi, r12
	jae	.LBB585_93
# %bb.94:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_97
# %bb.95:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.96:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_97:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 144], eax
.LBB585_98:
	cmp	rsi, r12
	jae	.LBB585_99
# %bb.100:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_103
# %bb.101:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.102:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_103:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 144]
	add	rsi, 1
	mov	dword ptr [rdi + 144], eax
	mov	ecx, eax
	and	ecx, -2048
	cmp	ecx, 55296
	je	.LBB585_110
# %bb.104:
	cmp	eax, 127
	ja	.LBB585_106
.LBB585_105:
	mov	byte ptr [rsp + 56], al
	add	qword ptr [rsp + 2104], 1
	jmp	.LBB585_146
.LBB585_80:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 22
	jmp	.LBB585_14
.LBB585_87:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 23
	jmp	.LBB585_14
.LBB585_93:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 24
	jmp	.LBB585_14
.LBB585_99:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 25
	jmp	.LBB585_14
.LBB585_110:
	cmp	eax, 56320
	jae	.LBB585_48
.LBB585_111:
	cmp	rsi, r12
	jae	.LBB585_112
# %bb.113:
	cmp	byte ptr [rsi], 92
	jne	.LBB585_178
# %bb.114:
	add	rsi, 1
.LBB585_115:
	cmp	rsi, r12
	jae	.LBB585_116
# %bb.117:
	cmp	byte ptr [rsi], 117
	jne	.LBB585_178
# %bb.118:
	add	rsi, 1
.LBB585_119:
	cmp	rsi, r12
	jae	.LBB585_120
# %bb.121:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_124
# %bb.122:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.123:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_124:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 12
	mov	dword ptr [rdi + 148], eax
.LBB585_125:
	cmp	rsi, r12
	jae	.LBB585_126
# %bb.127:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_130
# %bb.128:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.129:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_130:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 8
	add	dword ptr [rdi + 148], eax
.LBB585_131:
	cmp	rsi, r12
	jae	.LBB585_132
# %bb.133:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_136
# %bb.134:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.135:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_136:
	movsx	eax, cl
	add	rsi, 1
	shl	eax, 4
	add	dword ptr [rdi + 148], eax
.LBB585_137:
	cmp	rsi, r12
	jae	.LBB585_138
# %bb.139:
	mov	al, byte ptr [rsi]
	lea	ecx, [rax - 48]
	cmp	cl, 10
	jb	.LBB585_142
# %bb.140:
	and	al, -33
	lea	ecx, [rax - 65]
	cmp	cl, 5
	ja	.LBB585_84
# %bb.141:
	add	al, -55
	mov	ecx, eax
	cmp	al, -1
	je	.LBB585_84
.LBB585_142:
	movsx	eax, cl
	add	eax, dword ptr [rdi + 148]
	add	rsi, 1
	mov	dword ptr [rdi + 148], eax
	mov	ecx, eax
	and	ecx, -1024
	cmp	ecx, 56320
	jne	.LBB585_84
# %bb.143:
	mov	ecx, dword ptr [rdi + 144]
	shl	ecx, 10
	add	eax, ecx
	add	eax, -56613888
	cmp	eax, 127
	jbe	.LBB585_105
.LBB585_106:
	mov	ecx, eax
	cmp	eax, 2047
	ja	.LBB585_108
# %bb.107:
	shr	ecx, 6
	or	cl, -64
	mov	byte ptr [rsp + 56], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 57], al
	add	qword ptr [rsp + 2104], 2
	jmp	.LBB585_146
.LBB585_84:
	mov	rcx, rdi
	mov	rdx, rsi
.LBB585_37:
	mov	r8d, 16
.LBB585_38:
	call	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z"
	mov	rsi, rax
	jmp	.LBB585_161
.LBB585_108:
	cmp	eax, 65535
	ja	.LBB585_144
# %bb.109:
	shr	ecx, 12
	or	cl, -32
	mov	byte ptr [rsp + 56], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 57], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 58], al
	add	qword ptr [rsp + 2104], 3
	jmp	.LBB585_146
.LBB585_144:
	shr	ecx, 18
	or	cl, -16
	mov	byte ptr [rsp + 56], cl
	mov	ecx, eax
	shr	ecx, 12
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 57], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63
	or	cl, -128
	mov	byte ptr [rsp + 58], cl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + 59], al
.LBB585_145:
	add	qword ptr [rsp + 2104], 4
.LBB585_146:
	lea	rbx, [rsp + 56]
	cmp	rsi, r12
	jae	.LBB585_148
.LBB585_155:                            # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [rsi]
	cmp	al, 34
	je	.LBB585_159
# %bb.156:                              #   in Loop: Header=BB585_155 Depth=1
	cmp	al, 92
	je	.LBB585_4
# %bb.157:                              #   in Loop: Header=BB585_155 Depth=1
	cmp	al, 31
	jbe	.LBB585_178
# %bb.158:                              #   in Loop: Header=BB585_155 Depth=1
	mov	rcx, qword ptr [rsp + 2104]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rsp + 2104], rdx
	mov	byte ptr [rsp + rcx + 56], al
	add	rsi, 1
	cmp	rsi, r12
	jb	.LBB585_155
.LBB585_148:
	mov	r15, qword ptr [rsp + 2104]
	test	r15, r15
	je	.LBB585_153
# %bb.149:
	mov	eax, 2147483646
	sub	rax, r14
	cmp	r15, rax
	ja	.LBB585_8
# %bb.150:
	mov	r8, qword ptr [rdi + 24]
	mov	rdx, qword ptr [rdi + 32]
	sub	rdx, r8
	mov	rcx, qword ptr [rdi + 40]
	lea	rax, [r15 + rcx]
	add	rax, 24
	cmp	rax, rdx
	jbe	.LBB585_152
# %bb.151:
	mov	rcx, rdi
	mov	rdx, r15
	call	"?grow@stack@value_stack@json@boost@@QEAAX_K@Z"
	mov	r8, qword ptr [rdi + 24]
	mov	rcx, qword ptr [rdi + 40]
.LBB585_152:
	add	r14, r15
	add	rcx, r8
	add	rcx, 24
	mov	rdx, rbx
	mov	r8, r15
	call	memcpy
	add	qword ptr [rdi + 40], r15
	mov	qword ptr [rsp + 2104], 0
.LBB585_153:
	mov	rax, r13
	sub	rax, rsi
	lea	r12, [rsi + 2048]
	cmp	rax, 2048
	cmovbe	r12, r13
	cmp	r12, rsi
	ja	.LBB585_155
# %bb.154:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 20
	jmp	.LBB585_14
.LBB585_159:
	mov	rax, qword ptr [rsp + 2104]
	mov	ecx, 2147483646
	sub	rcx, r14
	cmp	rax, rcx
	ja	.LBB585_8
# %bb.160:
	mov	qword ptr [rsp + 40], rbx
	mov	qword ptr [rsp + 48], rax
	lea	rdx, [rsp + 40]
	mov	rcx, rdi
	call	"?push_key@value_stack@json@boost@@QEAAXV?$basic_string_view@DU?$char_traits@D@std@@@3@@Z"
	add	rsi, 1
.LBB585_161:
	mov	rax, rsi
	add	rsp, 2112
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret
.LBB585_8:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 26
	jmp	.LBB585_38
.LBB585_112:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 27
	jmp	.LBB585_14
.LBB585_116:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 28
	jmp	.LBB585_14
.LBB585_120:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 29
	jmp	.LBB585_14
.LBB585_126:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 30
	jmp	.LBB585_14
.LBB585_132:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 31
	jmp	.LBB585_14
.LBB585_138:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8b, 32
.LBB585_14:
	mov	r9, r14
	call	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z"
	mov	rsi, rax
	jmp	.LBB585_161
.LBB585_35:
	lea	rax, [rsi + 1]
	cmp	cl, -1
	cmove	rax, rsi
	lea	rcx, [rax + 1]
	cmp	dl, -1
	cmove	rcx, rax
	lea	rdx, [rcx + 1]
	cmp	bl, -1
	cmove	rdx, rcx
.LBB585_36:
	mov	rcx, rdi
	jmp	.LBB585_37
.LBB585_47:
	cmp	eax, 56320
	jae	.LBB585_48
# %bb.49:
	cmp	byte ptr [rsi + 5], 92
	jne	.LBB585_50
# %bb.51:
	cmp	byte ptr [rsi + 6], 117
	jne	.LBB585_52
# %bb.53:
	mov	edx, dword ptr [rsi + 7]
	mov	ecx, edx
	shr	ecx, 24
	lea	r8d, [rcx - 48]
	cmp	r8b, 10
	jb	.LBB585_55
# %bb.54:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r8d, 255
	cmovb	r8d, ecx
.LBB585_55:
	mov	ecx, edx
	shr	ecx, 16
	lea	r9d, [rcx - 48]
	cmp	r9b, 10
	jb	.LBB585_57
# %bb.56:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r9d, 255
	cmovb	r9d, ecx
.LBB585_57:
	mov	ecx, edx
	shr	ecx, 8
	lea	r10d, [rcx - 48]
	cmp	r10b, 10
	jb	.LBB585_59
# %bb.58:
	and	cl, -33
	lea	ebx, [rcx - 65]
	add	cl, -55
	cmp	bl, 6
	movzx	ecx, cl
	mov	r10d, 255
	cmovb	r10d, ecx
.LBB585_59:
	lea	r11d, [rdx - 48]
	cmp	r11b, 10
	jb	.LBB585_61
# %bb.60:
	and	dl, -33
	lea	ecx, [rdx - 65]
	add	dl, -55
	cmp	cl, 6
	movzx	ecx, dl
	mov	r11d, 255
	cmovb	r11d, ecx
.LBB585_61:
	lea	rdx, [rsi + 7]
	mov	ecx, r9d
	or	cl, r8b
	or	cl, r10b
	or	cl, r11b
	cmp	cl, -1
	je	.LBB585_62
# %bb.63:
	movsx	ecx, r9b
	movsx	ebx, r10b
	movsx	r9d, r11b
	movsx	r8d, r8b
	shl	r9d, 12
	shl	ebx, 8
	shl	ecx, 4
	add	ecx, r8d
	add	ecx, ebx
	add	ecx, r9d
	mov	ebx, ecx
	and	ebx, -1024
	cmp	ebx, 56320
	jne	.LBB585_64
# %bb.66:
	add	rsi, 11
	shl	eax, 10
	add	eax, ecx
	add	eax, -56613888
	mov	rcx, qword ptr [rsp + 2104]
	cmp	eax, 127
	ja	.LBB585_68
# %bb.67:
	mov	byte ptr [rsp + rcx + 56], al
	add	qword ptr [rsp + 2104], 1
	jmp	.LBB585_146
.LBB585_68:
	mov	edx, eax
	cmp	eax, 2047
	ja	.LBB585_70
# %bb.69:
	shr	edx, 6
	or	dl, -64
	mov	byte ptr [rsp + rcx + 56], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 57], al
	add	qword ptr [rsp + 2104], 2
	jmp	.LBB585_146
.LBB585_70:
	cmp	eax, 65535
	ja	.LBB585_72
# %bb.71:
	shr	edx, 12
	or	dl, -32
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 58], al
	add	qword ptr [rsp + 2104], 3
	jmp	.LBB585_146
.LBB585_72:
	shr	edx, 18
	or	dl, -16
	mov	byte ptr [rsp + rcx + 56], dl
	mov	edx, eax
	shr	edx, 12
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 57], dl
	mov	edx, eax
	shr	edx, 6
	and	dl, 63
	or	dl, -128
	mov	byte ptr [rsp + rcx + 58], dl
	and	al, 63
	or	al, -128
	mov	byte ptr [rsp + rcx + 59], al
	jmp	.LBB585_145
.LBB585_48:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 11
	jmp	.LBB585_38
.LBB585_50:
	add	rsi, 5
	jmp	.LBB585_178
.LBB585_52:
	add	rsi, 6
.LBB585_178:
	mov	rcx, rdi
	mov	rdx, rsi
	mov	r8d, 1
	jmp	.LBB585_38
.LBB585_62:
	add	rsi, 8
	cmp	r11b, -1
	cmove	rsi, rdx
	lea	rax, [rsi + 1]
	cmp	r10b, -1
	cmove	rax, rsi
	lea	rdx, [rax + 1]
	cmp	r9b, -1
	cmove	rdx, rax
	jmp	.LBB585_36
.LBB585_64:
	mov	rcx, rdi
	mov	r8d, 11
	jmp	.LBB585_38
	.p2align	2, 0x90
.LJTI585_0:
	.long	.LBB585_5-.LJTI585_0
	.long	.LBB585_79-.LJTI585_0
	.long	.LBB585_86-.LJTI585_0
	.long	.LBB585_92-.LJTI585_0
	.long	.LBB585_98-.LJTI585_0
	.long	.LBB585_162-.LJTI585_0
	.long	.LBB585_111-.LJTI585_0
	.long	.LBB585_115-.LJTI585_0
	.long	.LBB585_119-.LJTI585_0
	.long	.LBB585_125-.LJTI585_0
	.long	.LBB585_131-.LJTI585_0
	.long	.LBB585_137-.LJTI585_0
.LJTI585_1:
	.long	.LBB585_177-.LJTI585_1
	.long	.LBB585_179-.LJTI585_1
	.long	.LBB585_170-.LJTI585_1
	.long	.LBB585_172-.LJTI585_1
	.long	.LBB585_173-.LJTI585_1
	.long	.LBB585_174-.LJTI585_1
	.long	.LBB585_176-.LJTI585_1
.LJTI585_2:
	.long	.LBB585_17-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_19-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_18-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_20-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_21-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_22-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_23-.LJTI585_2
	.long	.LBB585_178-.LJTI585_2
	.long	.LBB585_24-.LJTI585_2
	.long	.LBB585_25-.LJTI585_2
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB586_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI586_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB586_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB586_8:
	jmp	"??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_7:
	jmp	"??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_10:
	jmp	"??$parse_comment@$0A@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB586_5:
	jmp	"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI586_0:
	.long	.LBB586_10-.LJTI586_0
	.long	.LBB586_10-.LJTI586_0
	.long	.LBB586_10-.LJTI586_0
	.long	.LBB586_10-.LJTI586_0
	.long	.LBB586_10-.LJTI586_0
	.long	.LBB586_2-.LJTI586_0
	.long	.LBB586_2-.LJTI586_0
	.long	.LBB586_2-.LJTI586_0
	.long	.LBB586_3-.LJTI586_0
	.long	.LBB586_3-.LJTI586_0
	.long	.LBB586_3-.LJTI586_0
	.long	.LBB586_4-.LJTI586_0
	.long	.LBB586_4-.LJTI586_0
	.long	.LBB586_4-.LJTI586_0
	.long	.LBB586_4-.LJTI586_0
	.long	.LBB586_5-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_6-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_8-.LJTI586_0
	.long	.LBB586_7-.LJTI586_0
	.long	.LBB586_7-.LJTI586_0
	.long	.LBB586_7-.LJTI586_0
	.long	.LBB586_7-.LJTI586_0
	.long	.LBB586_7-.LJTI586_0
	.long	.LBB586_7-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
	.long	.LBB586_9-.LJTI586_0
                                        # -- End function
	.def	 "??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB587_8
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB587_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI587_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB587_4:
	mov	eax, 6
	cmp	eax, 3
	jne	.LBB587_6
	jmp	.LBB587_12
.LBB587_8:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB587_9
# %bb.11:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	jmp	.LBB587_12
.LBB587_2:
	mov	eax, 3
	cmp	eax, 3
	je	.LBB587_12
.LBB587_6:
	cmp	eax, 6
	je	.LBB587_41
# %bb.7:
	cmp	eax, 7
	je	.LBB587_61
.LBB587_78:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB587_9:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB587_10:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB587_12:
	cmp	rbx, rdi
	je	.LBB587_25
# %bb.13:
	cmp	byte ptr [rbx], 32
	ja	.LBB587_23
# %bb.14:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB587_15:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB587_16
# %bb.21:                               #   in Loop: Header=BB587_15 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB587_15
# %bb.22:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB587_23:
	cmp	rbx, rdi
	jae	.LBB587_24
# %bb.27:
	mov	al, byte ptr [rbx]
	cmp	al, 47
	je	.LBB587_31
# %bb.28:
	cmp	al, 93
	jne	.LBB587_29
	jmp	.LBB587_77
.LBB587_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB587_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB587_12
.LBB587_16:
	cmp	rdi, rbx
	je	.LBB587_25
# %bb.17:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB587_18:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB587_23
# %bb.19:                               #   in Loop: Header=BB587_18 Depth=1
	bt	rax, rcx
	jae	.LBB587_23
# %bb.20:                               #   in Loop: Header=BB587_18 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB587_18
.LBB587_25:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB587_26
.LBB587_33:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB587_34
.LBB587_24:
	mov	rdi, rbx
	jmp	.LBB587_25
.LBB587_26:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB587_29:
	add	r14, 1
	cmp	r14, 2147483647
	jae	.LBB587_30
# %bb.35:
	mov	rax, qword ptr [r15 + 120]
.LBB587_36:
	test	rax, rax
	je	.LBB587_37
# %bb.38:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB587_39
.LBB587_37:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB587_39:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB587_40
.LBB587_41:
	cmp	rbx, rdi
	jne	.LBB587_42
	jmp	.LBB587_54
.LBB587_30:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB587_10
.LBB587_40:
	mov	rcx, r15
	mov	dl, 46
.LBB587_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB587_42:
	cmp	byte ptr [rbx], 32
	ja	.LBB587_52
# %bb.43:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB587_44:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB587_45
# %bb.50:                               #   in Loop: Header=BB587_44 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB587_44
# %bb.51:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB587_52:
	cmp	rbx, rdi
	jae	.LBB587_53
# %bb.55:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB587_56
# %bb.60:
	add	rbx, 1
.LBB587_61:
	cmp	rbx, rdi
	je	.LBB587_74
# %bb.62:
	cmp	byte ptr [rbx], 32
	ja	.LBB587_72
# %bb.63:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB587_64:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB587_65
# %bb.70:                               #   in Loop: Header=BB587_64 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB587_64
# %bb.71:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB587_72:
	cmp	rbx, rdi
	jb	.LBB587_29
# %bb.73:
	mov	rdi, rbx
	jmp	.LBB587_74
.LBB587_45:
	cmp	rdi, rbx
	je	.LBB587_54
# %bb.46:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB587_47:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB587_52
# %bb.48:                               #   in Loop: Header=BB587_47 Depth=1
	bt	rax, rcx
	jae	.LBB587_52
# %bb.49:                               #   in Loop: Header=BB587_47 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB587_47
	jmp	.LBB587_54
.LBB587_65:
	cmp	rdi, rbx
	je	.LBB587_74
# %bb.66:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB587_67:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB587_72
# %bb.68:                               #   in Loop: Header=BB587_67 Depth=1
	bt	rax, rcx
	jae	.LBB587_72
# %bb.69:                               #   in Loop: Header=BB587_67 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB587_67
.LBB587_74:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB587_26
.LBB587_53:
	mov	rdi, rbx
	jmp	.LBB587_54
.LBB587_56:
	cmp	al, 93
	jne	.LBB587_57
.LBB587_77:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	jmp	.LBB587_78
.LBB587_57:
	cmp	al, 47
	jne	.LBB587_76
.LBB587_58:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB587_75
# %bb.59:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB587_42
.LBB587_54:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB587_26
.LBB587_75:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB587_34
.LBB587_76:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB587_10
	.p2align	2, 0x90
.LJTI587_0:
	.long	.LBB587_31-.LJTI587_0
	.long	.LBB587_36-.LJTI587_0
	.long	.LBB587_4-.LJTI587_0
	.long	.LBB587_61-.LJTI587_0
	.long	.LBB587_58-.LJTI587_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB588_9
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB588_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI588_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB588_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB588_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB588_13
.LBB588_9:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB588_10
# %bb.12:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
.LBB588_13:
	cmp	rbx, rdi
	je	.LBB588_26
# %bb.14:
	cmp	byte ptr [rbx], 32
	ja	.LBB588_24
# %bb.15:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB588_16:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB588_17
# %bb.22:                               #   in Loop: Header=BB588_16 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB588_16
# %bb.23:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB588_24:
	cmp	rbx, rdi
	jae	.LBB588_25
# %bb.28:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB588_35
# %bb.29:
	cmp	al, 125
	je	.LBB588_125
# %bb.30:
	cmp	al, 47
	je	.LBB588_31
	jmp	.LBB588_124
.LBB588_17:
	cmp	rdi, rbx
	je	.LBB588_26
# %bb.18:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB588_19:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB588_24
# %bb.20:                               #   in Loop: Header=BB588_19 Depth=1
	bt	rax, rcx
	jae	.LBB588_24
# %bb.21:                               #   in Loop: Header=BB588_19 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB588_19
.LBB588_26:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB588_27
.LBB588_2:
	mov	eax, 3
	jmp	.LBB588_7
.LBB588_4:
	mov	eax, 6
	jmp	.LBB588_7
.LBB588_5:
	mov	eax, 10
	jmp	.LBB588_7
.LBB588_6:
	mov	eax, 11
.LBB588_7:
	add	eax, -3
	cmp	eax, 8
	ja	.LBB588_126
# %bb.8:
	lea	rcx, [rip + .LJTI588_1]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB588_60:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB588_62
# %bb.61:
	mov	rbx, rax
	jmp	.LBB588_44
.LBB588_62:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB588_34
.LBB588_33:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB588_34
.LBB588_25:
	mov	rdi, rbx
	jmp	.LBB588_26
.LBB588_10:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB588_11:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB588_27:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB588_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB588_35:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB588_127
# %bb.36:
	mov	rax, qword ptr [r15 + 120]
.LBB588_37:
	test	rax, rax
	je	.LBB588_41
# %bb.38:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB588_39
# %bb.40:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB588_42
.LBB588_41:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB588_42
.LBB588_39:
	call	"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB588_42:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB588_43
.LBB588_44:
	cmp	rbx, rdi
	je	.LBB588_57
# %bb.45:
	cmp	byte ptr [rbx], 32
	ja	.LBB588_55
# %bb.46:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB588_47:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB588_48
# %bb.53:                               #   in Loop: Header=BB588_47 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB588_47
# %bb.54:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB588_55:
	cmp	rbx, rdi
	jae	.LBB588_56
# %bb.58:
	mov	al, byte ptr [rbx]
	cmp	al, 58
	jne	.LBB588_59
# %bb.63:
	add	rbx, 1
.LBB588_64:
	cmp	rbx, rdi
	je	.LBB588_77
# %bb.65:
	cmp	byte ptr [rbx], 32
	ja	.LBB588_75
# %bb.66:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB588_67:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB588_68
# %bb.73:                               #   in Loop: Header=BB588_67 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB588_67
# %bb.74:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB588_75:
	cmp	rbx, rdi
	jae	.LBB588_76
# %bb.78:
	mov	rax, qword ptr [r15 + 120]
.LBB588_79:
	test	rax, rax
	je	.LBB588_80
# %bb.81:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB588_82
.LBB588_80:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB588_82:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB588_83
.LBB588_84:
	cmp	rbx, rdi
	jne	.LBB588_85
	jmp	.LBB588_97
.LBB588_48:
	cmp	rdi, rbx
	je	.LBB588_57
# %bb.49:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB588_50:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB588_55
# %bb.51:                               #   in Loop: Header=BB588_50 Depth=1
	bt	rax, rcx
	jae	.LBB588_55
# %bb.52:                               #   in Loop: Header=BB588_50 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB588_50
.LBB588_57:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB588_27
.LBB588_68:
	cmp	rdi, rbx
	je	.LBB588_77
# %bb.69:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB588_70:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB588_75
# %bb.71:                               #   in Loop: Header=BB588_70 Depth=1
	bt	rax, rcx
	jae	.LBB588_75
# %bb.72:                               #   in Loop: Header=BB588_70 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB588_70
.LBB588_77:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB588_27
.LBB588_127:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB588_11
.LBB588_43:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB588_34
.LBB588_83:
	mov	rcx, r15
	mov	dl, 39
	jmp	.LBB588_34
.LBB588_56:
	mov	rdi, rbx
	jmp	.LBB588_57
.LBB588_76:
	mov	rdi, rbx
	jmp	.LBB588_77
.LBB588_59:
	cmp	al, 47
	je	.LBB588_60
	jmp	.LBB588_124
.LBB588_85:
	cmp	byte ptr [rbx], 32
	ja	.LBB588_95
# %bb.86:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB588_87:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB588_88
# %bb.93:                               #   in Loop: Header=BB588_87 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB588_87
# %bb.94:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB588_95:
	cmp	rbx, rdi
	jae	.LBB588_96
# %bb.98:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB588_99
# %bb.103:
	add	rbx, 1
	jmp	.LBB588_104
.LBB588_88:
	cmp	rdi, rbx
	je	.LBB588_97
# %bb.89:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB588_90:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB588_95
# %bb.91:                               #   in Loop: Header=BB588_90 Depth=1
	bt	rax, rcx
	jae	.LBB588_95
# %bb.92:                               #   in Loop: Header=BB588_90 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB588_90
	jmp	.LBB588_97
.LBB588_96:
	mov	rdi, rbx
	jmp	.LBB588_97
.LBB588_99:
	cmp	al, 125
	jne	.LBB588_100
.LBB588_125:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
.LBB588_126:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB588_100:
	cmp	al, 47
	jne	.LBB588_124
.LBB588_101:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB588_123
# %bb.102:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB588_85
.LBB588_97:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB588_27
.LBB588_123:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB588_34
.LBB588_104:
	cmp	rbx, rdi
	je	.LBB588_117
# %bb.105:
	cmp	byte ptr [rbx], 32
	ja	.LBB588_115
# %bb.106:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB588_107:                            # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB588_108
# %bb.113:                              #   in Loop: Header=BB588_107 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB588_107
# %bb.114:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB588_115:
	cmp	rbx, rdi
	jae	.LBB588_116
# %bb.118:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB588_35
# %bb.119:
	cmp	al, 47
	jne	.LBB588_124
.LBB588_120:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB588_122
# %bb.121:
	mov	rbx, rax
	jmp	.LBB588_104
.LBB588_108:
	cmp	rdi, rbx
	je	.LBB588_117
# %bb.109:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB588_110:                            # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB588_115
# %bb.111:                              #   in Loop: Header=BB588_110 Depth=1
	bt	rax, rcx
	jae	.LBB588_115
# %bb.112:                              #   in Loop: Header=BB588_110 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB588_110
.LBB588_117:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB588_27
.LBB588_122:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB588_34
.LBB588_124:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB588_11
.LBB588_116:
	mov	rdi, rbx
	jmp	.LBB588_117
	.p2align	2, 0x90
.LJTI588_0:
	.long	.LBB588_31-.LJTI588_0
	.long	.LBB588_37-.LJTI588_0
	.long	.LBB588_4-.LJTI588_0
	.long	.LBB588_60-.LJTI588_0
	.long	.LBB588_64-.LJTI588_0
	.long	.LBB588_79-.LJTI588_0
	.long	.LBB588_5-.LJTI588_0
	.long	.LBB588_6-.LJTI588_0
	.long	.LBB588_120-.LJTI588_0
	.long	.LBB588_101-.LJTI588_0
.LJTI588_1:
	.long	.LBB588_13-.LJTI588_1
	.long	.LBB588_126-.LJTI588_1
	.long	.LBB588_126-.LJTI588_1
	.long	.LBB588_44-.LJTI588_1
	.long	.LBB588_60-.LJTI588_1
	.long	.LBB588_126-.LJTI588_1
	.long	.LBB588_126-.LJTI588_1
	.long	.LBB588_84-.LJTI588_1
	.long	.LBB588_104-.LJTI588_1
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB589_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI589_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB589_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB589_8:
	jmp	"??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_7:
	jmp	"??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_10:
	jmp	"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB589_5:
	jmp	"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI589_0:
	.long	.LBB589_10-.LJTI589_0
	.long	.LBB589_10-.LJTI589_0
	.long	.LBB589_10-.LJTI589_0
	.long	.LBB589_10-.LJTI589_0
	.long	.LBB589_10-.LJTI589_0
	.long	.LBB589_2-.LJTI589_0
	.long	.LBB589_2-.LJTI589_0
	.long	.LBB589_2-.LJTI589_0
	.long	.LBB589_3-.LJTI589_0
	.long	.LBB589_3-.LJTI589_0
	.long	.LBB589_3-.LJTI589_0
	.long	.LBB589_4-.LJTI589_0
	.long	.LBB589_4-.LJTI589_0
	.long	.LBB589_4-.LJTI589_0
	.long	.LBB589_4-.LJTI589_0
	.long	.LBB589_5-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_6-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_8-.LJTI589_0
	.long	.LBB589_7-.LJTI589_0
	.long	.LBB589_7-.LJTI589_0
	.long	.LBB589_7-.LJTI589_0
	.long	.LBB589_7-.LJTI589_0
	.long	.LBB589_7-.LJTI589_0
	.long	.LBB589_7-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
	.long	.LBB589_9-.LJTI589_0
                                        # -- End function
	.def	 "??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB590_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB590_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI590_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB590_22:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB590_24
# %bb.23:
	mov	rbx, rax
.LBB590_7:
	cmp	rbx, rdi
	jne	.LBB590_8
	jmp	.LBB590_20
.LBB590_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB590_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB590_20
.LBB590_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB590_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB590_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB590_11
# %bb.16:                               #   in Loop: Header=BB590_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB590_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB590_18:
	cmp	rbx, rdi
	jb	.LBB590_64
# %bb.19:
	mov	rdi, rbx
	jmp	.LBB590_20
.LBB590_67:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB590_69
# %bb.68:
	mov	rbx, rax
	jmp	.LBB590_32
.LBB590_11:
	cmp	rdi, rbx
	je	.LBB590_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB590_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB590_18
# %bb.14:                               #   in Loop: Header=BB590_13 Depth=1
	bt	rax, rcx
	jae	.LBB590_18
# %bb.15:                               #   in Loop: Header=BB590_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB590_13
.LBB590_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB590_21
.LBB590_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB590_5
.LBB590_24:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB590_25
.LBB590_69:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB590_25
.LBB590_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB590_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB590_25:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB590_26:
	mov	rax, qword ptr [r15 + 120]
.LBB590_27:
	test	rax, rax
	je	.LBB590_28
# %bb.29:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB590_30
.LBB590_28:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB590_30:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB590_31
.LBB590_32:
	cmp	rbx, rdi
	je	.LBB590_45
# %bb.33:
	cmp	byte ptr [rbx], 32
	ja	.LBB590_43
# %bb.34:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB590_35:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB590_36
# %bb.41:                               #   in Loop: Header=BB590_35 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB590_35
# %bb.42:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB590_43:
	cmp	rbx, rdi
	jae	.LBB590_44
# %bb.46:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB590_47
# %bb.49:
	add	rbx, 1
.LBB590_50:
	cmp	rbx, rdi
	je	.LBB590_63
# %bb.51:
	cmp	byte ptr [rbx], 32
	ja	.LBB590_61
# %bb.52:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB590_53:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB590_54
# %bb.59:                               #   in Loop: Header=BB590_53 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB590_53
# %bb.60:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB590_61:
	cmp	rbx, rdi
	jae	.LBB590_62
.LBB590_64:
	cmp	byte ptr [rbx], 93
	je	.LBB590_70
# %bb.65:
	add	r14, 1
	cmp	r14, 2147483647
	jb	.LBB590_26
# %bb.66:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB590_5
.LBB590_36:
	cmp	rdi, rbx
	je	.LBB590_45
# %bb.37:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB590_38:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB590_43
# %bb.39:                               #   in Loop: Header=BB590_38 Depth=1
	bt	rax, rcx
	jae	.LBB590_43
# %bb.40:                               #   in Loop: Header=BB590_38 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB590_38
.LBB590_45:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB590_21
.LBB590_54:
	cmp	rdi, rbx
	je	.LBB590_63
# %bb.55:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB590_56:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB590_61
# %bb.57:                               #   in Loop: Header=BB590_56 Depth=1
	bt	rax, rcx
	jae	.LBB590_61
# %bb.58:                               #   in Loop: Header=BB590_56 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB590_56
.LBB590_63:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB590_21
.LBB590_31:
	mov	rcx, r15
	mov	dl, 46
	jmp	.LBB590_25
.LBB590_44:
	mov	rdi, rbx
	jmp	.LBB590_45
.LBB590_62:
	mov	rdi, rbx
	jmp	.LBB590_63
.LBB590_47:
	cmp	al, 93
	jne	.LBB590_48
.LBB590_70:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB590_48:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB590_5
	.p2align	2, 0x90
.LJTI590_0:
	.long	.LBB590_22-.LJTI590_0
	.long	.LBB590_27-.LJTI590_0
	.long	.LBB590_32-.LJTI590_0
	.long	.LBB590_50-.LJTI590_0
	.long	.LBB590_67-.LJTI590_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB591_3
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB591_7
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI591_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB591_25:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB591_27
# %bb.26:
	mov	rbx, rax
.LBB591_7:
	cmp	rbx, rdi
	jne	.LBB591_8
	jmp	.LBB591_20
.LBB591_3:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB591_4
# %bb.6:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	cmp	rbx, rdi
	je	.LBB591_20
.LBB591_8:
	cmp	byte ptr [rbx], 32
	ja	.LBB591_18
# %bb.9:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB591_10:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB591_11
# %bb.16:                               #   in Loop: Header=BB591_10 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB591_10
# %bb.17:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB591_18:
	cmp	rbx, rdi
	jb	.LBB591_22
# %bb.19:
	mov	rdi, rbx
	jmp	.LBB591_20
.LBB591_11:
	cmp	rdi, rbx
	je	.LBB591_20
# %bb.12:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB591_13:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB591_18
# %bb.14:                               #   in Loop: Header=BB591_13 Depth=1
	bt	rax, rcx
	jae	.LBB591_18
# %bb.15:                               #   in Loop: Header=BB591_13 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB591_13
.LBB591_20:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB591_21
.LBB591_52:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB591_54
# %bb.53:
	mov	rbx, rax
	jmp	.LBB591_38
.LBB591_107:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB591_109
# %bb.108:
	mov	rbx, rax
	jmp	.LBB591_93
.LBB591_110:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB591_112
# %bb.111:
	mov	rbx, rax
	jmp	.LBB591_77
.LBB591_4:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
	jmp	.LBB591_5
.LBB591_27:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB591_28
.LBB591_54:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB591_28
.LBB591_109:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB591_28
.LBB591_112:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB591_28
.LBB591_5:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB591_21:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB591_22:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	jne	.LBB591_23
# %bb.29:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB591_113
# %bb.30:
	mov	rax, qword ptr [r15 + 120]
.LBB591_31:
	test	rax, rax
	je	.LBB591_35
# %bb.32:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB591_33
# %bb.34:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB591_36
.LBB591_35:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB591_36
.LBB591_33:
	call	"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB591_36:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB591_37
.LBB591_38:
	cmp	rbx, rdi
	je	.LBB591_51
# %bb.39:
	cmp	byte ptr [rbx], 32
	ja	.LBB591_49
# %bb.40:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB591_41:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB591_42
# %bb.47:                               #   in Loop: Header=BB591_41 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB591_41
# %bb.48:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB591_49:
	cmp	rbx, rdi
	jae	.LBB591_50
# %bb.55:
	cmp	byte ptr [rbx], 58
	jne	.LBB591_24
# %bb.56:
	add	rbx, 1
.LBB591_57:
	cmp	rbx, rdi
	je	.LBB591_70
# %bb.58:
	cmp	byte ptr [rbx], 32
	ja	.LBB591_68
# %bb.59:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB591_60:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB591_61
# %bb.66:                               #   in Loop: Header=BB591_60 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB591_60
# %bb.67:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB591_68:
	cmp	rbx, rdi
	jae	.LBB591_69
# %bb.71:
	mov	rax, qword ptr [r15 + 120]
.LBB591_72:
	test	rax, rax
	je	.LBB591_73
# %bb.74:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB591_75
.LBB591_73:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB591_75:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB591_76
.LBB591_77:
	cmp	rbx, rdi
	je	.LBB591_90
# %bb.78:
	cmp	byte ptr [rbx], 32
	ja	.LBB591_88
# %bb.79:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB591_80:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB591_81
# %bb.86:                               #   in Loop: Header=BB591_80 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB591_80
# %bb.87:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB591_88:
	cmp	rbx, rdi
	jae	.LBB591_89
# %bb.91:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB591_23
# %bb.92:
	add	rbx, 1
.LBB591_93:
	cmp	rbx, rdi
	je	.LBB591_106
# %bb.94:
	cmp	byte ptr [rbx], 32
	ja	.LBB591_104
# %bb.95:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB591_96:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB591_97
# %bb.102:                              #   in Loop: Header=BB591_96 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB591_96
# %bb.103:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB591_104:
	cmp	rbx, rdi
	jb	.LBB591_22
# %bb.105:
	mov	rdi, rbx
	jmp	.LBB591_106
.LBB591_42:
	cmp	rdi, rbx
	je	.LBB591_51
# %bb.43:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB591_44:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB591_49
# %bb.45:                               #   in Loop: Header=BB591_44 Depth=1
	bt	rax, rcx
	jae	.LBB591_49
# %bb.46:                               #   in Loop: Header=BB591_44 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB591_44
.LBB591_51:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB591_21
.LBB591_61:
	cmp	rdi, rbx
	je	.LBB591_70
# %bb.62:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB591_63:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB591_68
# %bb.64:                               #   in Loop: Header=BB591_63 Depth=1
	bt	rax, rcx
	jae	.LBB591_68
# %bb.65:                               #   in Loop: Header=BB591_63 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB591_63
.LBB591_70:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB591_21
.LBB591_81:
	cmp	rdi, rbx
	je	.LBB591_90
# %bb.82:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB591_83:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB591_88
# %bb.84:                               #   in Loop: Header=BB591_83 Depth=1
	bt	rax, rcx
	jae	.LBB591_88
# %bb.85:                               #   in Loop: Header=BB591_83 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB591_83
.LBB591_90:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB591_21
.LBB591_97:
	cmp	rdi, rbx
	je	.LBB591_106
# %bb.98:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB591_99:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB591_104
# %bb.100:                              #   in Loop: Header=BB591_99 Depth=1
	bt	rax, rcx
	jae	.LBB591_104
# %bb.101:                              #   in Loop: Header=BB591_99 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB591_99
.LBB591_106:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB591_21
.LBB591_23:
	cmp	al, 125
	jne	.LBB591_24
# %bb.114:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB591_24:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB591_5
.LBB591_113:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB591_5
.LBB591_37:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB591_28
.LBB591_76:
	mov	rcx, r15
	mov	dl, 39
.LBB591_28:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB591_50:
	mov	rdi, rbx
	jmp	.LBB591_51
.LBB591_69:
	mov	rdi, rbx
	jmp	.LBB591_70
.LBB591_89:
	mov	rdi, rbx
	jmp	.LBB591_90
	.p2align	2, 0x90
.LJTI591_0:
	.long	.LBB591_25-.LJTI591_0
	.long	.LBB591_31-.LJTI591_0
	.long	.LBB591_38-.LJTI591_0
	.long	.LBB591_52-.LJTI591_0
	.long	.LBB591_57-.LJTI591_0
	.long	.LBB591_72-.LJTI591_0
	.long	.LBB591_77-.LJTI591_0
	.long	.LBB591_93-.LJTI591_0
	.long	.LBB591_107-.LJTI591_0
	.long	.LBB591_110-.LJTI591_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rsi + 160]
	test	rcx, rcx
	je	.LBB592_3
# %bb.1:
	lea	rbx, [rcx - 1]
	mov	qword ptr [rsi + 120], rbx
	mov	rdx, qword ptr [rsi + 128]
	mov	cl, byte ptr [rdx + rcx - 1]
	add	cl, -5
	cmp	cl, 3
	ja	.LBB592_4
# %bb.2:
	movzx	ecx, cl
	lea	rdx, [rip + .LJTI592_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB592_26:
	cmp	rax, rdi
	jne	.LBB592_27
	jmp	.LBB592_39
.LBB592_3:
	add	rax, 1
	xor	ebx, ebx
.LBB592_4:
	cmp	rdi, rax
	jbe	.LBB592_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB592_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB592_42
# %bb.9:
	add	rax, 1
.LBB592_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB592_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB592_13
.LBB592_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB592_12:
	mov	rax, rsi
.LBB592_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB592_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB592_6
.LBB592_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
.LBB592_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB592_15:
	add	rax, 1
.LBB592_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB592_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB592_19
.LBB592_18:
	mov	rax, rsi
.LBB592_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB592_20
# %bb.21:
	add	rax, 1
.LBB592_22:
	cmp	rdi, rax
	jbe	.LBB592_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB592_15
.LBB592_25:
	add	rax, 1
	cmp	rax, rdi
	je	.LBB592_39
.LBB592_27:
	cmp	byte ptr [rax], 32
	ja	.LBB592_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB592_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB592_30
# %bb.35:                               #   in Loop: Header=BB592_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	ecx, xmm4
	add	rax, 16
	cmp	cx, -1
	je	.LBB592_29
# %bb.36:
	not	ecx
	movzx	ecx, cx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB592_37:
	cmp	rax, rdi
	jae	.LBB592_38
# %bb.40:
	test	rbx, rbx
	je	.LBB592_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB592_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB592_30:
	cmp	rdi, rax
	je	.LBB592_39
# %bb.31:
	movabs	rcx, 4294977024
	.p2align	4, 0x90
.LBB592_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB592_37
# %bb.33:                               #   in Loop: Header=BB592_32 Depth=1
	bt	rcx, rdx
	jae	.LBB592_37
# %bb.34:                               #   in Loop: Header=BB592_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB592_32
.LBB592_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB592_6
.LBB592_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB592_6
.LBB592_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB592_6
.LBB592_38:
	mov	rdi, rax
	jmp	.LBB592_39
	.p2align	2, 0x90
.LJTI592_0:
	.long	.LBB592_10-.LJTI592_0
	.long	.LBB592_16-.LJTI592_0
	.long	.LBB592_22-.LJTI592_0
	.long	.LBB592_26-.LJTI592_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 56
	.seh_stackalloc 56
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rax, rdx
	mov	rsi, rcx
	mov	rdx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [rcx + 160]
	test	rdx, rdx
	je	.LBB593_3
# %bb.1:
	lea	r9, [rdx - 1]
	mov	qword ptr [rsi + 120], r9
	mov	rcx, qword ptr [rsi + 128]
	mov	dl, byte ptr [rcx + rdx - 1]
	add	dl, -5
	cmp	dl, 3
	ja	.LBB593_4
# %bb.2:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI593_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB593_26:
	cmp	rdi, rax
	je	.LBB593_37
# %bb.27:
	cmp	byte ptr [rax], 32
	ja	.LBB593_37
# %bb.28:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB593_29:                             # =>This Inner Loop Header: Depth=1
	mov	rcx, rdi
	sub	rcx, rax
	cmp	rcx, 15
	jle	.LBB593_30
# %bb.35:                               #   in Loop: Header=BB593_29 Depth=1
	movdqu	xmm4, xmmword ptr [rax]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	edx, xmm4
	add	rax, 16
	cmp	dx, -1
	je	.LBB593_29
# %bb.36:
	not	edx
	movzx	ecx, dx
	bsf	ecx, ecx
	add	rax, rcx
	add	rax, -16
.LBB593_37:
	cmp	rax, rdi
	jae	.LBB593_38
# %bb.40:
	test	r9, r9
	je	.LBB593_43
# %bb.41:
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB593_3:
	add	rax, 1
.LBB593_4:
	cmp	rdi, rax
	jbe	.LBB593_5
# %bb.7:
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 42
	je	.LBB593_15
# %bb.8:
	cmp	ecx, 47
	jne	.LBB593_42
# %bb.9:
	add	rax, 1
.LBB593_10:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB593_12
# %bb.11:
	mov	rcx, rax
	mov	edx, 10
	call	memchr
	jmp	.LBB593_13
.LBB593_42:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8d, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB593_12:
	mov	rax, rsi
.LBB593_13:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	jne	.LBB593_25
# %bb.14:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 5
	jmp	.LBB593_6
.LBB593_43:
	movzx	r8d, byte ptr [rax]
	lea	r9, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, rsi
	mov	rdx, rax
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	rex64 jmp	qword ptr [r9 + 8*r8] # TAILCALL
.LBB593_30:
	cmp	rdi, rax
	je	.LBB593_39
# %bb.31:
	movabs	r8, 4294977024
	.p2align	4, 0x90
.LBB593_32:                             # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [rax]
	cmp	rdx, 32
	ja	.LBB593_37
# %bb.33:                               #   in Loop: Header=BB593_32 Depth=1
	bt	r8, rdx
	jae	.LBB593_37
# %bb.34:                               #   in Loop: Header=BB593_32 Depth=1
	add	rax, 1
	cmp	rdi, rax
	jne	.LBB593_32
.LBB593_39:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 8
	jmp	.LBB593_6
.LBB593_5:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 4
	jmp	.LBB593_6
.LBB593_38:
	mov	rdi, rax
	jmp	.LBB593_39
.LBB593_6:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@@Z" # TAILCALL
.LBB593_15:
	add	rax, 1
.LBB593_16:
	mov	r8, rdi
	sub	r8, rax
	je	.LBB593_18
# %bb.17:
	mov	rcx, rax
	mov	edx, 42
	call	memchr
	jmp	.LBB593_19
.LBB593_18:
	mov	rax, rsi
.LBB593_19:
	test	rax, rax
	cmove	rax, rsi
	cmp	rsi, rax
	je	.LBB593_20
# %bb.21:
	add	rax, 1
.LBB593_22:
	cmp	rdi, rax
	jbe	.LBB593_23
# %bb.24:
	cmp	byte ptr [rax], 47
	jne	.LBB593_15
.LBB593_25:
	add	rax, 1
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 56
	pop	rdi
	pop	rsi
	ret
.LBB593_20:
	mov	rcx, rsi
	mov	rdx, rdi
	mov	r8b, 6
	jmp	.LBB593_6
.LBB593_23:
	mov	rcx, rsi
	mov	rdx, rax
	mov	r8b, 7
	jmp	.LBB593_6
	.p2align	2, 0x90
.LJTI593_0:
	.long	.LBB593_10-.LJTI593_0
	.long	.LBB593_16-.LJTI593_0
	.long	.LBB593_22-.LJTI593_0
	.long	.LBB593_26-.LJTI593_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	mov	r8, qword ptr [rcx + 120]
	mov	rax, qword ptr [rcx + 128]
	mov	al, byte ptr [rax + r8 - 1]
	add	al, -4
	cmp	al, 56
	ja	.LBB594_2
# %bb.1:
	movzx	eax, al
	lea	r8, [rip + .LJTI594_0]
	movsxd	rax, dword ptr [r8 + 4*rax]
	add	rax, r8
	jmp	rax
.LBB594_6:
	xor	r8d, r8d
	jmp	"??$parse_escaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z" # TAILCALL
.LBB594_8:
	jmp	"??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_9:
	jmp	"??$parse_number@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_7:
	jmp	"??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_10:
	jmp	"??$parse_comment@$0A@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_4:
	jmp	"??$parse_false@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_3:
	jmp	"??$parse_true@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_2:
	jmp	"??$parse_null@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
.LBB594_5:
	jmp	"??$parse_unescaped@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # TAILCALL
	.p2align	2, 0x90
.LJTI594_0:
	.long	.LBB594_10-.LJTI594_0
	.long	.LBB594_10-.LJTI594_0
	.long	.LBB594_10-.LJTI594_0
	.long	.LBB594_10-.LJTI594_0
	.long	.LBB594_10-.LJTI594_0
	.long	.LBB594_2-.LJTI594_0
	.long	.LBB594_2-.LJTI594_0
	.long	.LBB594_2-.LJTI594_0
	.long	.LBB594_3-.LJTI594_0
	.long	.LBB594_3-.LJTI594_0
	.long	.LBB594_3-.LJTI594_0
	.long	.LBB594_4-.LJTI594_0
	.long	.LBB594_4-.LJTI594_0
	.long	.LBB594_4-.LJTI594_0
	.long	.LBB594_4-.LJTI594_0
	.long	.LBB594_5-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_6-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_8-.LJTI594_0
	.long	.LBB594_7-.LJTI594_0
	.long	.LBB594_7-.LJTI594_0
	.long	.LBB594_7-.LJTI594_0
	.long	.LBB594_7-.LJTI594_0
	.long	.LBB594_7-.LJTI594_0
	.long	.LBB594_7-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
	.long	.LBB594_9-.LJTI594_0
                                        # -- End function
	.def	 "??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB595_8
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -45
	cmp	dl, 4
	ja	.LBB595_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI595_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB595_4:
	mov	eax, 6
	cmp	eax, 3
	jne	.LBB595_6
	jmp	.LBB595_12
.LBB595_8:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB595_9
# %bb.11:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
	jmp	.LBB595_12
.LBB595_2:
	mov	eax, 3
	cmp	eax, 3
	je	.LBB595_12
.LBB595_6:
	cmp	eax, 6
	je	.LBB595_41
# %bb.7:
	cmp	eax, 7
	je	.LBB595_61
	jmp	.LBB595_79
.LBB595_9:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB595_10:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB595_12:
	cmp	rbx, rdi
	je	.LBB595_25
# %bb.13:
	cmp	byte ptr [rbx], 32
	ja	.LBB595_23
# %bb.14:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB595_15:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB595_16
# %bb.21:                               #   in Loop: Header=BB595_15 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB595_15
# %bb.22:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB595_23:
	cmp	rbx, rdi
	jae	.LBB595_24
# %bb.27:
	mov	al, byte ptr [rbx]
	cmp	al, 47
	je	.LBB595_31
# %bb.28:
	cmp	al, 93
	jne	.LBB595_29
	jmp	.LBB595_78
.LBB595_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB595_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB595_12
.LBB595_16:
	cmp	rdi, rbx
	je	.LBB595_25
# %bb.17:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB595_18:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB595_23
# %bb.19:                               #   in Loop: Header=BB595_18 Depth=1
	bt	rax, rcx
	jae	.LBB595_23
# %bb.20:                               #   in Loop: Header=BB595_18 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB595_18
.LBB595_25:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 44
	jmp	.LBB595_26
.LBB595_33:
	mov	rcx, r15
	mov	dl, 45
	jmp	.LBB595_34
.LBB595_24:
	mov	rdi, rbx
	jmp	.LBB595_25
.LBB595_26:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB595_29:
	add	r14, 1
	cmp	r14, 2147483647
	jae	.LBB595_30
# %bb.35:
	mov	rax, qword ptr [r15 + 120]
.LBB595_36:
	test	rax, rax
	je	.LBB595_37
# %bb.38:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB595_39
.LBB595_37:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB595_39:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB595_40
.LBB595_41:
	cmp	rbx, rdi
	jne	.LBB595_42
	jmp	.LBB595_54
.LBB595_30:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 25
	jmp	.LBB595_10
.LBB595_40:
	mov	rcx, r15
	mov	dl, 46
.LBB595_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB595_42:
	cmp	byte ptr [rbx], 32
	ja	.LBB595_52
# %bb.43:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB595_44:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB595_45
# %bb.50:                               #   in Loop: Header=BB595_44 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB595_44
# %bb.51:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB595_52:
	cmp	rbx, rdi
	jae	.LBB595_53
# %bb.55:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB595_56
# %bb.60:
	add	rbx, 1
.LBB595_61:
	cmp	rbx, rdi
	je	.LBB595_74
# %bb.62:
	cmp	byte ptr [rbx], 32
	ja	.LBB595_72
# %bb.63:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB595_64:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB595_65
# %bb.70:                               #   in Loop: Header=BB595_64 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB595_64
# %bb.71:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB595_72:
	cmp	rbx, rdi
	jae	.LBB595_73
# %bb.77:
	cmp	byte ptr [rbx], 93
	jne	.LBB595_29
.LBB595_78:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_array@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
.LBB595_79:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB595_45:
	cmp	rdi, rbx
	je	.LBB595_54
# %bb.46:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB595_47:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB595_52
# %bb.48:                               #   in Loop: Header=BB595_47 Depth=1
	bt	rax, rcx
	jae	.LBB595_52
# %bb.49:                               #   in Loop: Header=BB595_47 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB595_47
	jmp	.LBB595_54
.LBB595_65:
	cmp	rdi, rbx
	je	.LBB595_74
# %bb.66:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB595_67:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB595_72
# %bb.68:                               #   in Loop: Header=BB595_67 Depth=1
	bt	rax, rcx
	jae	.LBB595_72
# %bb.69:                               #   in Loop: Header=BB595_67 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB595_67
.LBB595_74:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 48
	jmp	.LBB595_26
.LBB595_53:
	mov	rdi, rbx
	jmp	.LBB595_54
.LBB595_73:
	mov	rdi, rbx
	jmp	.LBB595_74
.LBB595_56:
	cmp	al, 93
	je	.LBB595_78
# %bb.57:
	cmp	al, 47
	jne	.LBB595_76
.LBB595_58:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB595_75
# %bb.59:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB595_42
.LBB595_54:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 47
	jmp	.LBB595_26
.LBB595_75:
	mov	rcx, r15
	mov	dl, 49
	jmp	.LBB595_34
.LBB595_76:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB595_10
	.p2align	2, 0x90
.LJTI595_0:
	.long	.LBB595_31-.LJTI595_0
	.long	.LBB595_36-.LJTI595_0
	.long	.LBB595_4-.LJTI595_0
	.long	.LBB595_61-.LJTI595_0
	.long	.LBB595_58-.LJTI595_0
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_array@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.globl	"??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z" # -- Begin function ??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z
	.p2align	4, 0x90
"??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z": # @"??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.seh_proc "??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
# %bb.0:
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 48
	.seh_stackalloc 48
	movdqa	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	mov	rbx, rdx
	mov	r15, rcx
	mov	rcx, qword ptr [rcx + 120]
	mov	rdi, qword ptr [r15 + 160]
	test	rcx, rcx
	je	.LBB596_9
# %bb.1:
	lea	rax, [rcx - 1]
	mov	qword ptr [r15 + 120], rax
	mov	rsi, qword ptr [r15 + 128]
	mov	dl, byte ptr [rsi + rcx - 1]
	lea	rax, [rcx - 9]
	mov	qword ptr [r15 + 120], rax
	mov	r14, qword ptr [rsi + rcx - 9]
	add	dl, -34
	cmp	dl, 9
	ja	.LBB596_2
# %bb.3:
	movzx	ecx, dl
	lea	rdx, [rip + .LJTI596_0]
	movsxd	rcx, dword ptr [rdx + 4*rcx]
	add	rcx, rdx
	jmp	rcx
.LBB596_31:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB596_33
# %bb.32:
	mov	rbx, rax
	jmp	.LBB596_13
.LBB596_9:
	mov	rax, qword ptr [r15 + 184]
	test	rax, rax
	je	.LBB596_10
# %bb.12:
	add	rax, -1
	mov	qword ptr [r15 + 184], rax
	add	rbx, 1
	xor	r14d, r14d
.LBB596_13:
	cmp	rbx, rdi
	je	.LBB596_26
# %bb.14:
	cmp	byte ptr [rbx], 32
	ja	.LBB596_24
# %bb.15:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB596_16:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB596_17
# %bb.22:                               #   in Loop: Header=BB596_16 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB596_16
# %bb.23:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB596_24:
	cmp	rbx, rdi
	jae	.LBB596_25
# %bb.28:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB596_35
# %bb.29:
	cmp	al, 125
	je	.LBB596_126
# %bb.30:
	cmp	al, 47
	je	.LBB596_31
	jmp	.LBB596_125
.LBB596_17:
	cmp	rdi, rbx
	je	.LBB596_26
# %bb.18:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB596_19:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB596_24
# %bb.20:                               #   in Loop: Header=BB596_19 Depth=1
	bt	rax, rcx
	jae	.LBB596_24
# %bb.21:                               #   in Loop: Header=BB596_19 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB596_19
.LBB596_26:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 33
	jmp	.LBB596_27
.LBB596_2:
	mov	eax, 3
	jmp	.LBB596_7
.LBB596_4:
	mov	eax, 6
	jmp	.LBB596_7
.LBB596_5:
	mov	eax, 10
	jmp	.LBB596_7
.LBB596_6:
	mov	eax, 11
.LBB596_7:
	add	eax, -3
	cmp	eax, 8
	ja	.LBB596_127
# %bb.8:
	lea	rcx, [rip + .LJTI596_1]
	movsxd	rax, dword ptr [rcx + 4*rax]
	add	rax, rcx
	jmp	rax
.LBB596_60:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB596_62
# %bb.61:
	mov	rbx, rax
	jmp	.LBB596_44
.LBB596_62:
	mov	rcx, r15
	mov	dl, 37
	jmp	.LBB596_34
.LBB596_33:
	mov	rcx, r15
	mov	dl, 34
	jmp	.LBB596_34
.LBB596_25:
	mov	rdi, rbx
	jmp	.LBB596_26
.LBB596_10:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 6
.LBB596_11:
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4error@23@@Z" # TAILCALL
.LBB596_27:
	mov	r9, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?maybe_suspend@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBDW4state@123@_K@Z" # TAILCALL
.LBB596_34:
	mov	r8, r14
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	jmp	"?suspend_or_fail@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDW4state@123@_K@Z" # TAILCALL
.LBB596_35:
	add	r14, 1
	cmp	r14, 2147483646
	ja	.LBB596_128
# %bb.36:
	mov	rax, qword ptr [r15 + 120]
.LBB596_37:
	test	rax, rax
	je	.LBB596_41
# %bb.38:
	mov	rcx, qword ptr [r15 + 128]
	mov	al, byte ptr [rcx + rax - 1]
	add	al, -20
	mov	rcx, r15
	mov	rdx, rbx
	cmp	al, 13
	jae	.LBB596_39
# %bb.40:
	xor	r8d, r8d
	call	"??$parse_escaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD_K@Z"
	jmp	.LBB596_42
.LBB596_41:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_unescaped@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB596_42
.LBB596_39:
	call	"??$parse_unescaped@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
.LBB596_42:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB596_43
.LBB596_44:
	cmp	rbx, rdi
	je	.LBB596_57
# %bb.45:
	cmp	byte ptr [rbx], 32
	ja	.LBB596_55
# %bb.46:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB596_47:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB596_48
# %bb.53:                               #   in Loop: Header=BB596_47 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB596_47
# %bb.54:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB596_55:
	cmp	rbx, rdi
	jae	.LBB596_56
# %bb.58:
	mov	al, byte ptr [rbx]
	cmp	al, 58
	jne	.LBB596_59
# %bb.63:
	add	rbx, 1
.LBB596_64:
	cmp	rbx, rdi
	je	.LBB596_77
# %bb.65:
	cmp	byte ptr [rbx], 32
	ja	.LBB596_75
# %bb.66:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB596_67:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB596_68
# %bb.73:                               #   in Loop: Header=BB596_67 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB596_67
# %bb.74:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB596_75:
	cmp	rbx, rdi
	jae	.LBB596_76
# %bb.78:
	mov	rax, qword ptr [r15 + 120]
.LBB596_79:
	test	rax, rax
	je	.LBB596_80
# %bb.81:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$resume_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	jmp	.LBB596_82
.LBB596_80:
	movzx	eax, byte ptr [rbx]
	lea	rsi, [rip + "?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"]
	mov	rcx, r15
	mov	rdx, rbx
	call	qword ptr [rsi + 8*rax]
.LBB596_82:
	mov	rbx, rax
	cmp	rax, r15
	je	.LBB596_83
.LBB596_84:
	cmp	rbx, rdi
	jne	.LBB596_85
	jmp	.LBB596_97
.LBB596_48:
	cmp	rdi, rbx
	je	.LBB596_57
# %bb.49:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB596_50:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB596_55
# %bb.51:                               #   in Loop: Header=BB596_50 Depth=1
	bt	rax, rcx
	jae	.LBB596_55
# %bb.52:                               #   in Loop: Header=BB596_50 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB596_50
.LBB596_57:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 36
	jmp	.LBB596_27
.LBB596_68:
	cmp	rdi, rbx
	je	.LBB596_77
# %bb.69:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB596_70:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB596_75
# %bb.71:                               #   in Loop: Header=BB596_70 Depth=1
	bt	rax, rcx
	jae	.LBB596_75
# %bb.72:                               #   in Loop: Header=BB596_70 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB596_70
.LBB596_77:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 38
	jmp	.LBB596_27
.LBB596_128:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 24
	jmp	.LBB596_11
.LBB596_43:
	mov	rcx, r15
	mov	dl, 35
	jmp	.LBB596_34
.LBB596_83:
	mov	rcx, r15
	mov	dl, 39
	jmp	.LBB596_34
.LBB596_56:
	mov	rdi, rbx
	jmp	.LBB596_57
.LBB596_76:
	mov	rdi, rbx
	jmp	.LBB596_77
.LBB596_59:
	cmp	al, 47
	je	.LBB596_60
	jmp	.LBB596_125
.LBB596_85:
	cmp	byte ptr [rbx], 32
	ja	.LBB596_95
# %bb.86:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB596_87:                             # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB596_88
# %bb.93:                               #   in Loop: Header=BB596_87 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB596_87
# %bb.94:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB596_95:
	cmp	rbx, rdi
	jae	.LBB596_96
# %bb.98:
	mov	al, byte ptr [rbx]
	cmp	al, 44
	jne	.LBB596_99
# %bb.103:
	add	rbx, 1
	jmp	.LBB596_104
.LBB596_88:
	cmp	rdi, rbx
	je	.LBB596_97
# %bb.89:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB596_90:                             # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB596_95
# %bb.91:                               #   in Loop: Header=BB596_90 Depth=1
	bt	rax, rcx
	jae	.LBB596_95
# %bb.92:                               #   in Loop: Header=BB596_90 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB596_90
	jmp	.LBB596_97
.LBB596_96:
	mov	rdi, rbx
	jmp	.LBB596_97
.LBB596_99:
	cmp	al, 125
	je	.LBB596_126
# %bb.100:
	cmp	al, 47
	jne	.LBB596_125
.LBB596_101:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB596_124
# %bb.102:
	mov	rbx, rax
	cmp	rbx, rdi
	jne	.LBB596_85
.LBB596_97:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 40
	jmp	.LBB596_27
.LBB596_124:
	mov	rcx, r15
	mov	dl, 43
	jmp	.LBB596_34
.LBB596_104:
	cmp	rbx, rdi
	je	.LBB596_117
# %bb.105:
	cmp	byte ptr [rbx], 32
	ja	.LBB596_115
# %bb.106:
	movdqa	xmm0, xmmword ptr [rip + __xmm@0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a] # xmm0 = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
	movdqa	xmm1, xmmword ptr [rip + __xmm@20202020202020202020202020202020] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	movdqa	xmm2, xmmword ptr [rip + __xmm@04040404040404040404040404040404] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	movdqa	xmm3, xmmword ptr [rip + __xmm@0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d] # xmm3 = [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]
	.p2align	4, 0x90
.LBB596_107:                            # =>This Inner Loop Header: Depth=1
	mov	rax, rdi
	sub	rax, rbx
	cmp	rax, 15
	jle	.LBB596_108
# %bb.113:                              #   in Loop: Header=BB596_107 Depth=1
	movdqu	xmm4, xmmword ptr [rbx]
	movdqa	xmm5, xmm4
	pcmpeqb	xmm5, xmm0
	movdqa	xmm6, xmm4
	pcmpeqb	xmm6, xmm1
	por	xmm6, xmm5
	por	xmm4, xmm2
	pcmpeqb	xmm4, xmm3
	por	xmm4, xmm6
	pmovmskb	eax, xmm4
	add	rbx, 16
	cmp	ax, -1
	je	.LBB596_107
# %bb.114:
	not	eax
	movzx	eax, ax
	bsf	eax, eax
	add	rbx, rax
	add	rbx, -16
.LBB596_115:
	cmp	rbx, rdi
	jae	.LBB596_116
# %bb.118:
	mov	al, byte ptr [rbx]
	cmp	al, 34
	je	.LBB596_35
# %bb.119:
	cmp	al, 125
	jne	.LBB596_120
.LBB596_126:
	mov	rcx, r15
	mov	rdx, r14
	call	"?push_object@value_stack@json@boost@@QEAAX_K@Z"
	add	qword ptr [r15 + 184], 1
	add	rbx, 1
.LBB596_127:
	mov	rax, rbx
	movaps	xmm6, xmmword ptr [rsp + 32] # 16-byte Reload
	add	rsp, 48
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	r15
	ret
.LBB596_108:
	cmp	rdi, rbx
	je	.LBB596_117
# %bb.109:
	movabs	rax, 4294977024
	.p2align	4, 0x90
.LBB596_110:                            # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rbx]
	cmp	rcx, 32
	ja	.LBB596_115
# %bb.111:                              #   in Loop: Header=BB596_110 Depth=1
	bt	rax, rcx
	jae	.LBB596_115
# %bb.112:                              #   in Loop: Header=BB596_110 Depth=1
	add	rbx, 1
	cmp	rdi, rbx
	jne	.LBB596_110
.LBB596_117:
	mov	rcx, r15
	mov	rdx, rdi
	mov	r8b, 41
	jmp	.LBB596_27
.LBB596_116:
	mov	rdi, rbx
	jmp	.LBB596_117
.LBB596_120:
	cmp	al, 47
	jne	.LBB596_125
.LBB596_121:
	mov	rcx, r15
	mov	rdx, rbx
	call	"??$parse_comment@$0A@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	cmp	rax, r15
	je	.LBB596_123
# %bb.122:
	mov	rbx, rax
	jmp	.LBB596_104
.LBB596_123:
	mov	rcx, r15
	mov	dl, 42
	jmp	.LBB596_34
.LBB596_125:
	mov	rcx, r15
	mov	rdx, rbx
	mov	r8d, 1
	jmp	.LBB596_11
	.p2align	2, 0x90
.LJTI596_0:
	.long	.LBB596_31-.LJTI596_0
	.long	.LBB596_37-.LJTI596_0
	.long	.LBB596_4-.LJTI596_0
	.long	.LBB596_60-.LJTI596_0
	.long	.LBB596_64-.LJTI596_0
	.long	.LBB596_79-.LJTI596_0
	.long	.LBB596_5-.LJTI596_0
	.long	.LBB596_6-.LJTI596_0
	.long	.LBB596_121-.LJTI596_0
	.long	.LBB596_101-.LJTI596_0
.LJTI596_1:
	.long	.LBB596_13-.LJTI596_1
	.long	.LBB596_127-.LJTI596_1
	.long	.LBB596_127-.LJTI596_1
	.long	.LBB596_44-.LJTI596_1
	.long	.LBB596_60-.LJTI596_1
	.long	.LBB596_127-.LJTI596_1
	.long	.LBB596_127-.LJTI596_1
	.long	.LBB596_84-.LJTI596_1
	.long	.LBB596_104-.LJTI596_1
	.seh_handlerdata
	.section	.text,"xr",discard,"??$parse_object@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
	.globl	"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z" # -- Begin function ??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z": # @"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
.Lfunc_begin292:
.seh_proc "??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	movaps	xmmword ptr [rbp - 16], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 48
	.seh_endprologue
	mov	qword ptr [rbp - 24], -2
	mov	rdi, r8
	mov	rsi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rax, [rcx + 16]
	xorps	xmm6, xmm6
	movups	xmmword ptr [rcx + 16], xmm6
	lea	rcx, [rdx + 8]
.Ltmp1184:
	mov	rdx, rax
	call	__std_exception_copy
.Ltmp1185:
# %bb.1:
	movups	xmmword ptr [rsi + 40], xmm6
	mov	qword ptr [rsi + 56], 0
	mov	dword ptr [rsi + 64], -1
	lea	rax, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rsi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"]
	mov	qword ptr [rsi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rsi + 32], rax
	mov	rax, qword ptr [rdi]
	mov	qword ptr [rsi + 56], rax
	mov	eax, dword ptr [rdi + 16]
	mov	dword ptr [rsi + 64], eax
	mov	rax, qword ptr [rdi + 8]
	mov	qword ptr [rsi + 48], rax
	mov	rax, rsi
	movaps	xmm6, xmmword ptr [rbp - 16] # 16-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
	.seh_endproc
	.def	 "?dtor$2@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z@4HA":
.seh_proc "?dtor$2@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z@4HA"
.LBB597_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rdx + 64]
	movaps	xmmword ptr [rsp + 32], xmm6 # 16-byte Spill
	.seh_savexmm xmm6, 32
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end292:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z":
	.long	.Lfunc_begin292@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1184@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1185@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBVbad_alloc@std@@AEBUsource_location@1@@Z"
                                        # -- End function
	.def	 "??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	.globl	"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z" # -- Begin function ??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z": # @"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
.Lfunc_begin293:
.seh_proc "??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rdx
	mov	rdi, rcx
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rcx], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rcx + 8], rax
	lea	rdx, [rcx + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1186:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1187:
# %bb.1:
	lea	rax, [rip + "??_7bad_alloc@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB598_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1188:
	call	qword ptr [rax + 24]
.Ltmp1189:
.LBB598_3:
	mov	ecx, dword ptr [rsi + 64]
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	dword ptr [rax + 64], ecx
	movups	xmm0, xmmword ptr [rsi + 48]
	movups	xmmword ptr [rax + 48], xmm0
	lea	rcx, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rax], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"]
	mov	qword ptr [rax + 8], rcx
	lea	rcx, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rax + 32], rcx
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z")@IMGREL
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$4@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$4@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB598_4:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	lea	rcx, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rax + 8], rcx
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.def	 "?dtor$5@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA":
.seh_proc "?dtor$5@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA"
.LBB598_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end293:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	.p2align	2
"$cppxdata$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z":
	.long	-1                      # ToState
	.long	"?dtor$5@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$4@?0???0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z@4HA"@IMGREL # Action
"$ip2state$??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z":
	.long	.Lfunc_begin293@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1186@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1188@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1189@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
                                        # -- End function
	.def	 "??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
	.globl	"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ" # -- Begin function ??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ
	.p2align	4, 0x90
"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ": # @"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
.Lfunc_begin294:
.seh_proc "??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rsp + 32]
	.seh_setframe rbp, 32
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB599_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1190:
	call	qword ptr [rax + 32]
.Ltmp1191:
# %bb.2:
	test	al, al
	je	.LBB599_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB599_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	add	rsi, 16
.Ltmp1192:
	mov	rcx, rsi
	call	__std_exception_destroy
.Ltmp1193:
# %bb.5:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$6@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA"
.LBB599_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA":
.seh_proc "?dtor$7@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA"
.LBB599_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 32]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end294:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
	.p2align	2
"$cppxdata$??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ")@IMGREL # IPToStateXData
	.long	32                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0???1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ":
	.long	.Lfunc_begin294@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1190@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1192@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1193@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"
                                        # -- End function
	.def	 "?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.globl	"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ" # -- Begin function ?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ
	.p2align	4, 0x90
"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ": # @"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
.Lfunc_begin295:
.seh_proc "?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rsi, rcx
	mov	ecx, 72
	call	"??2@YAPEAX_K@Z"
	mov	rdi, rax
	lea	rax, [rip + "??_7clone_base@exception_detail@boost@@6B@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rdx, [rdi + 16]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 16], xmm0
	lea	rcx, [rsi + 16]
.Ltmp1194:
	mov	qword ptr [rbp - 24], rdx # 8-byte Spill
	call	__std_exception_copy
.Ltmp1195:
# %bb.1:
	lea	rax, [rip + "??_7bad_alloc@std@@6B@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rdi + 32], rax
	mov	rcx, qword ptr [rsi + 40]
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	mov	qword ptr [rdi + 40], rcx
	test	rcx, rcx
	je	.LBB600_3
# %bb.2:
	mov	rax, qword ptr [rcx]
.Ltmp1196:
	call	qword ptr [rax + 24]
.Ltmp1197:
.LBB600_3:
	mov	rdi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, rdi
	add	rcx, 32
	mov	eax, dword ptr [rsi + 64]
	mov	dword ptr [rdi + 64], eax
	movups	xmm0, xmmword ptr [rsi + 48]
	lea	rdx, [rsi + 32]
	movups	xmmword ptr [rdi + 48], xmm0
	lea	rax, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"]
	mov	qword ptr [rdi], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"]
	mov	qword ptr [rdi + 8], rax
	lea	rax, [rip + "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"]
	mov	qword ptr [rdi + 32], rax
.Ltmp1198:
	call	"?copy_boost_exception@exception_detail@boost@@YAXPEAVexception@2@PEBV32@@Z"
.Ltmp1199:
# %bb.4:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	add	rsp, 64
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$5@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$5@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB600_5:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax + 16]
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$6@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$6@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB600_6:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.def	 "?dtor$7@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA":
.seh_proc "?dtor$7@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"
.LBB600_7:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	mov	rcx, qword ptr [rbp - 24] # 8-byte Reload
	call	__std_exception_destroy
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
	nop
	add	rsp, 32
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end295:
	.seh_handlerdata
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.p2align	2
"$cppxdata$?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	429065506               # MagicNumber
	.long	3                       # MaxState
	.long	("$stateUnwindMap$?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	-1                      # ToState
	.long	"?dtor$6@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$7@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$5@?0??clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ@4HA"@IMGREL # Action
"$ip2state$?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ":
	.long	.Lfunc_begin295@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1194@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1196@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1198@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1199@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
                                        # -- End function
	.def	 "?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ"
	.globl	"?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ" # -- Begin function ?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ
	.p2align	4, 0x90
"?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ": # @"?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ"
.seh_proc "?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ"
# %bb.0:
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 112
	.seh_stackalloc 112
	.seh_endprologue
	mov	rdx, rcx
	lea	rsi, [rsp + 40]
	mov	rcx, rsi
	call	"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"
	lea	rdx, [rip + "_TI5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"]
	mov	rcx, rsi
	call	_CxxThrowException
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
	.globl	"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z" # -- Begin function ??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z": # @"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
.Lfunc_begin296:
.seh_proc "??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rsi, rcx
	lea	rax, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rcx + 32], rax
	mov	rcx, qword ptr [rcx + 40]
	test	rcx, rcx
	je	.LBB602_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1200:
	call	qword ptr [rax + 32]
.Ltmp1201:
# %bb.2:
	test	al, al
	je	.LBB602_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB602_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1202:
	call	__std_exception_destroy
.Ltmp1203:
# %bb.5:
	test	edi, edi
	je	.LBB602_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB602_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA"
.LBB602_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA"
.LBB602_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end296:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z":
	.long	.Lfunc_begin296@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1200@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1202@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1203@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z": # @"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
.Lfunc_begin297:
.seh_proc "??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax + 24], rcx
	mov	rcx, qword ptr [rax + 32]
	lea	rsi, [rax - 8]
	test	rcx, rcx
	je	.LBB603_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1204:
	call	qword ptr [rax + 32]
.Ltmp1205:
# %bb.2:
	test	al, al
	je	.LBB603_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB603_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1206:
	call	__std_exception_destroy
.Ltmp1207:
# %bb.5:
	test	edi, edi
	je	.LBB603_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB603_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB603_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA"
.LBB603_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end297:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z":
	.long	.Lfunc_begin297@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1204@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1206@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1207@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
                                        # -- End function
	.def	 "??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
	.globl	"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z" # -- Begin function ??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z
	.p2align	4, 0x90
"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z": # @"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
.Lfunc_begin298:
.seh_proc "??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	edi, edx
	mov	rax, rcx
	lea	rcx, [rip + "??_7exception@boost@@6B@"]
	mov	qword ptr [rax], rcx
	mov	rcx, qword ptr [rax + 8]
	lea	rsi, [rax - 32]
	test	rcx, rcx
	je	.LBB604_4
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1208:
	call	qword ptr [rax + 32]
.Ltmp1209:
# %bb.2:
	test	al, al
	je	.LBB604_4
# %bb.3:
	mov	qword ptr [rsi + 40], 0
.LBB604_4:
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsi + 8], rax
	lea	rcx, [rsi + 16]
.Ltmp1210:
	call	__std_exception_destroy
.Ltmp1211:
# %bb.5:
	test	edi, edi
	je	.LBB604_7
# %bb.6:
	mov	rcx, rsi
	call	"??3@YAXPEAX@Z"
.LBB604_7:
	mov	rax, rsi
	add	rsp, 48
	pop	rdi
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z")@IMGREL
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB604_8:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.def	 "?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA":
.seh_proc "?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA"
.LBB604_9:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end298:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
	.p2align	2
"$cppxdata$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	4                       # IPMapEntries
	.long	("$ip2state$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z":
	.long	-1                      # ToState
	.long	"?dtor$8@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$9@?0???_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z@4HA"@IMGREL # Action
"$ip2state$??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z":
	.long	.Lfunc_begin298@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1208@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1210@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1211@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"
                                        # -- End function
	.def	 "??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.globl	"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z" # -- Begin function ??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z
	.p2align	4, 0x90
"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z": # @"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
.Lfunc_begin299:
.seh_proc "??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe rbp, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	r15, r8
	mov	r14, rdx
	mov	rdx, rcx
.Ltmp1212:
	lea	rcx, [rbp - 40]
	mov	qword ptr [rbp - 16], rdx # 8-byte Spill
	call	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
.Ltmp1213:
# %bb.1:
	cmp	byte ptr [rbp - 32], 0
	je	.LBB605_2
# %bb.3:
	mov	rsi, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rsi]
	movsxd	rcx, dword ptr [rax + 4]
	mov	rdi, qword ptr [rsi + rcx + 40]
	mov	rbx, rdi
	sub	rbx, r15
	jbe	.LBB605_4
# %bb.5:
	mov	edx, 448
	and	edx, dword ptr [rsi + rcx + 24]
	cmp	edx, 64
	jne	.LBB605_24
# %bb.6:
	mov	rcx, qword ptr [rsi + rcx + 72]
	mov	rax, qword ptr [rcx]
.Ltmp1222:
	mov	rdx, r14
	mov	r8, r15
	call	qword ptr [rax + 72]
.Ltmp1223:
# %bb.7:
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, r12
	cmp	rax, r15
	jne	.LBB605_13
# %bb.8:
	sub	rdi, r15
	mov	rax, qword ptr [r12]
	movsxd	rcx, dword ptr [rax + 4]
	movzx	ecx, byte ptr [r12 + rcx + 88]
	movabs	rdx, 72340172838076673
	imul	rdx, rcx
	mov	qword ptr [rbp - 24], rdx
	movsxd	rax, dword ptr [rax + 4]
	mov	rcx, qword ptr [r12 + rax + 72]
	mov	rax, qword ptr [rcx]
	mov	rbx, qword ptr [rax + 72]
	cmp	rdi, 9
	jb	.LBB605_22
# %bb.9:
	lea	rax, [rdi - 9]
	and	rax, -8
	neg	rax
	lea	r14, [rdi + rax]
	add	r14, -8
	lea	rsi, [rbp - 24]
	.p2align	4, 0x90
.LBB605_10:                             # =>This Inner Loop Header: Depth=1
.Ltmp1224:
	mov	r8d, 8
	mov	rdx, rsi
	call	rbx
.Ltmp1225:
# %bb.11:                               #   in Loop: Header=BB605_10 Depth=1
	cmp	rax, 8
	jne	.LBB605_12
# %bb.20:                               #   in Loop: Header=BB605_10 Depth=1
	add	rdi, -8
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	movsxd	rax, dword ptr [rax + 4]
	mov	rcx, qword ptr [rcx + rax + 72]
	mov	rax, qword ptr [rcx]
	mov	rbx, qword ptr [rax + 72]
	cmp	rdi, 8
	ja	.LBB605_10
# %bb.21:
	mov	rdi, r14
.LBB605_22:
.Ltmp1226:
	lea	rdx, [rbp - 24]
	mov	r8, rdi
	call	rbx
.Ltmp1227:
# %bb.23:
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, r12
	cmp	rax, rdi
	je	.LBB605_34
	jmp	.LBB605_13
.LBB605_2:
	xor	esi, esi
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	jmp	.LBB605_13
.LBB605_4:
	mov	rcx, qword ptr [rsi + rcx + 72]
	mov	rax, qword ptr [rcx]
.Ltmp1214:
	mov	rdx, r14
	mov	r8, r15
	call	qword ptr [rax + 72]
.Ltmp1215:
.LBB605_33:
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, r12
	cmp	rax, r15
	jne	.LBB605_13
.LBB605_34:
	mov	rax, qword ptr [r12]
	movsxd	rax, dword ptr [rax + 4]
	mov	qword ptr [r12 + rax + 40], 0
	xor	esi, esi
	jmp	.LBB605_13
.LBB605_24:
	movzx	ecx, byte ptr [rsi + rcx + 88]
	movabs	rdx, 72340172838076673
	imul	rdx, rcx
	mov	qword ptr [rbp - 24], rdx
	movsxd	rax, dword ptr [rax + 4]
	mov	rcx, qword ptr [rsi + rax + 72]
	mov	rax, qword ptr [rcx]
	mov	rsi, qword ptr [rax + 72]
	cmp	rbx, 9
	jb	.LBB605_30
# %bb.25:
	lea	rax, [rbx - 9]
	and	rax, -8
	neg	rax
	lea	r12, [rbx + rax]
	add	r12, -8
	lea	rdi, [rbp - 24]
	.p2align	4, 0x90
.LBB605_26:                             # =>This Inner Loop Header: Depth=1
.Ltmp1216:
	mov	r8d, 8
	mov	rdx, rdi
	call	rsi
.Ltmp1217:
# %bb.27:                               #   in Loop: Header=BB605_26 Depth=1
	cmp	rax, 8
	jne	.LBB605_12
# %bb.28:                               #   in Loop: Header=BB605_26 Depth=1
	add	rbx, -8
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rcx]
	movsxd	rax, dword ptr [rax + 4]
	mov	rcx, qword ptr [rcx + rax + 72]
	mov	rax, qword ptr [rcx]
	mov	rsi, qword ptr [rax + 72]
	cmp	rbx, 8
	ja	.LBB605_26
# %bb.29:
	mov	rbx, r12
.LBB605_30:
.Ltmp1218:
	lea	rdx, [rbp - 24]
	mov	r8, rbx
	call	rsi
.Ltmp1219:
# %bb.31:
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, r12
	cmp	rax, rbx
	jne	.LBB605_13
# %bb.32:
	mov	rax, qword ptr [r12]
	movsxd	rax, dword ptr [rax + 4]
	mov	rcx, qword ptr [r12 + rax + 72]
	mov	rax, qword ptr [rcx]
.Ltmp1220:
	mov	rdx, r14
	mov	r8, r15
	call	qword ptr [rax + 72]
.Ltmp1221:
	jmp	.LBB605_33
.LBB605_12:
	mov	r12, qword ptr [rbp - 16] # 8-byte Reload
	mov	rsi, r12
.LBB605_13:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	.LBB605_15
# %bb.14:
	mov	rcx, qword ptr [rbp - 40]
.Ltmp1228:
	call	qword ptr [rip + "__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"]
.Ltmp1229:
.LBB605_15:
	mov	rax, qword ptr [rbp - 40]
	mov	rcx, qword ptr [rax]
	movsxd	rcx, dword ptr [rcx + 4]
	mov	rcx, qword ptr [rax + rcx + 72]
	test	rcx, rcx
	je	.LBB605_17
# %bb.16:
	mov	rax, qword ptr [rcx]
.Ltmp1230:
	call	qword ptr [rax + 16]
.Ltmp1231:
.LBB605_17:
	test	rsi, rsi
	je	.LBB605_19
# %bb.18:
	mov	rax, qword ptr [rsi]
	movsxd	rax, dword ptr [rax + 4]
	lea	rcx, [rsi + rax]
	mov	edx, dword ptr [rsi + rax + 16]
	or	edx, 4
	xor	r8d, r8d
	call	qword ptr [rip + "__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"]
.LBB605_19:
	mov	rax, r12
	add	rsp, 80
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z")@IMGREL
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.seh_endproc
	.def	 "?dtor$35@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$35@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA":
.seh_proc "?dtor$35@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"
.LBB605_35:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	.LBB605_37
# %bb.36:
	mov	rcx, qword ptr [rbp - 40]
	call	qword ptr [rip + "__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"]
.LBB605_37:
	mov	rax, qword ptr [rbp - 40]
	mov	rcx, qword ptr [rax]
	movsxd	rcx, dword ptr [rcx + 4]
	mov	rcx, qword ptr [rax + rcx + 72]
	test	rcx, rcx
	je	.LBB605_39
# %bb.38:
	mov	rax, qword ptr [rcx]
	call	qword ptr [rax + 16]
.LBB605_39:
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.seh_endproc
	.def	 "?dtor$40@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA":
.seh_proc "?dtor$40@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"
.LBB605_40:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.seh_endproc
	.def	 "?dtor$41@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$41@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA":
.seh_proc "?dtor$41@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"
.LBB605_41:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	lea	rcx, [rbp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
	call	__std_terminate
	int3
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.seh_endproc
	.def	 "?dtor$42@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$42@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA":
.seh_proc "?dtor$42@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"
.LBB605_42:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r15
	.seh_pushreg r15
	push	r14
	.seh_pushreg r14
	push	r12
	.seh_pushreg r12
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rdx, qword ptr [rbp - 16] # 8-byte Reload
	mov	rax, qword ptr [rdx]
	movsxd	rax, dword ptr [rax + 4]
	lea	rcx, [rdx + rax]
	mov	edx, dword ptr [rdx + rax + 16]
	or	edx, 4
	xor	r8d, r8d
	call	qword ptr [rip + "__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"]
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end299:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
	.p2align	2
"$cppxdata$??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z":
	.long	429065506               # MagicNumber
	.long	4                       # MaxState
	.long	("$stateUnwindMap$??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	6                       # IPMapEntries
	.long	("$ip2state$??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z":
	.long	-1                      # ToState
	.long	"?dtor$40@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$41@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$42@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"@IMGREL # Action
	.long	2                       # ToState
	.long	"?dtor$35@?0???$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z@4HA"@IMGREL # Action
"$ip2state$??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z":
	.long	.Lfunc_begin299@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1212@IMGREL+1      # IP
	.long	2                       # ToState
	.long	.Ltmp1222@IMGREL+1      # IP
	.long	3                       # ToState
	.long	.Ltmp1228@IMGREL+1      # IP
	.long	1                       # ToState
	.long	.Ltmp1230@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1231@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$ostream_put@DU?$char_traits@D@std@@@io@boost@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV23@PEBD_K@Z"
                                        # -- End function
	.def	 "??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
	.globl	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" # -- Begin function ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	.p2align	4, 0x90
"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z": # @"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
.Lfunc_begin300:
.seh_proc "??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rsi, rdx
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	mov	qword ptr [rcx], rdx
	mov	rax, qword ptr [rdx]
	movsxd	rcx, dword ptr [rax + 4]
	mov	rax, qword ptr [rdx + rcx + 72]
	test	rax, rax
	je	.LBB606_2
# %bb.1:
	mov	rdx, qword ptr [rax]
	mov	rcx, rax
	call	qword ptr [rdx + 8]
	mov	rax, qword ptr [rsi]
	movsxd	rcx, dword ptr [rax + 4]
.LBB606_2:
	add	rcx, rsi
.Ltmp1232:
	call	qword ptr [rip + "__imp_?good@ios_base@std@@QEBA_NXZ"]
.Ltmp1233:
# %bb.3:
	test	al, al
	je	.LBB606_4
# %bb.5:
	mov	rax, qword ptr [rsi]
	movsxd	rax, dword ptr [rax + 4]
	mov	rcx, qword ptr [rsi + rax + 80]
	test	rcx, rcx
	je	.LBB606_7
# %bb.6:
	cmp	rcx, rsi
	je	.LBB606_7
# %bb.8:
.Ltmp1234:
	call	qword ptr [rip + "__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"]
.Ltmp1235:
# %bb.9:
	mov	rax, qword ptr [rsi]
	movsxd	rcx, dword ptr [rax + 4]
	add	rcx, rsi
.Ltmp1236:
	call	qword ptr [rip + "__imp_?good@ios_base@std@@QEBA_NXZ"]
.Ltmp1237:
# %bb.10:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	byte ptr [rcx + 8], al
	jmp	.LBB606_11
.LBB606_4:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	byte ptr [rcx + 8], 0
	jmp	.LBB606_11
.LBB606_7:
	mov	rcx, qword ptr [rbp - 8] # 8-byte Reload
	mov	byte ptr [rcx + 8], 1
.LBB606_11:
	mov	rax, rcx
	add	rsp, 56
	pop	rsi
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z")@IMGREL
	.section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
	.seh_endproc
	.def	 "?dtor$12@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA":
.seh_proc "?dtor$12@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA"
.LBB606_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rax]
	movsxd	rcx, dword ptr [rcx + 4]
	mov	rcx, qword ptr [rax + rcx + 72]
	test	rcx, rcx
	je	.LBB606_14
# %bb.13:
	mov	rax, qword ptr [rcx]
	call	qword ptr [rax + 16]
.LBB606_14:
	nop
	add	rsp, 40
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end300:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
	.p2align	2
"$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA"@IMGREL # Action
"$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z":
	.long	.Lfunc_begin300@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1232@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1237@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
                                        # -- End function
	.def	 "??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
	.globl	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" # -- Begin function ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	.p2align	4, 0x90
"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ": # @"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
.Lfunc_begin301:
.seh_proc "??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 48
	.seh_stackalloc 48
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rax, qword ptr [rcx]
	mov	rcx, qword ptr [rax]
	movsxd	rcx, dword ptr [rcx + 4]
	mov	rcx, qword ptr [rax + rcx + 72]
	test	rcx, rcx
	je	.LBB607_2
# %bb.1:
	mov	rax, qword ptr [rcx]
.Ltmp1238:
	call	qword ptr [rax + 16]
.Ltmp1239:
.LBB607_2:
	nop
	add	rsp, 48
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA":
.seh_proc "?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA"
.LBB607_3:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 48]
	.seh_endprologue
	call	__std_terminate
	int3
.Lfunc_end301:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
	.p2align	2
"$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	40                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
	.long	.Lfunc_begin301@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1238@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1239@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
                                        # -- End function
	.def	 "??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	.globl	"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z" # -- Begin function ??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z
	.p2align	4, 0x90
"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z": # @"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
.Lfunc_begin302:
.seh_proc "??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 56
	.seh_stackalloc 56
	lea	rbp, [rsp + 48]
	.seh_setframe rbp, 48
	.seh_endprologue
	mov	qword ptr [rbp], -2
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, qword ptr [r9]
	mov	qword ptr [r9], 0
	mov	qword ptr [rcx], rbx
	mov	byte ptr [rcx + 8], 66
	mov	dword ptr [rcx + 12], edi
	test	rbx, rbx
	mov	qword ptr [rbp - 16], r9 # 8-byte Spill
	mov	qword ptr [rbp - 8], rcx # 8-byte Spill
	je	.LBB608_2
# %bb.1:
	and	rbx, -4
	jmp	.LBB608_5
.LBB608_2:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ebx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rdx, qword ptr [rdx + 8*rbx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rdx + _Init_thread_epoch@SECREL32]
	jg	.LBB608_3
.LBB608_5:
	lea	rdx, [rdi + 1]
	mov	rax, qword ptr [rbx]
.Ltmp1240:
	mov	r8d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 8]
.Ltmp1241:
# %bb.6:
	mov	rbx, qword ptr [rbp - 8] # 8-byte Reload
	mov	qword ptr [rbx + 16], rax
	mov	byte ptr [rax + rdi], 0
	mov	rax, qword ptr [rbx + 16]
	mov	qword ptr [rsi], rax
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB608_10
# %bb.7:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB608_10
# %bb.8:
	cmp	rax, 1
	jne	.LBB608_10
# %bb.9:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB608_10:
	mov	rax, rbx
	add	rsp, 56
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret
.LBB608_3:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB608_5
# %bb.4:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB608_5
	.seh_handlerdata
	.long	("$cppxdata$??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z")@IMGREL
	.section	.text,"xr",discard,"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z@4HA":
.seh_proc "?dtor$11@?0???0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z@4HA"
.LBB608_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 40
	.seh_stackalloc 40
	lea	rbp, [rdx + 48]
	.seh_endprologue
	mov	rax, qword ptr [rbp - 8] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB608_15
# %bb.12:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB608_15
# %bb.13:
	cmp	rax, 1
	jne	.LBB608_15
# %bb.14:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB608_15:
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	rcx, qword ptr [rax]
	test	cl, 1
	je	.LBB608_19
# %bb.16:
	and	rcx, -4
	mov	rax, -1
	lock		xadd	qword ptr [rcx + 8], rax
	test	rcx, rcx
	je	.LBB608_19
# %bb.17:
	cmp	rax, 1
	jne	.LBB608_19
# %bb.18:
	mov	rax, qword ptr [rcx]
	mov	edx, 1
	call	qword ptr [rax]
.LBB608_19:
	nop
	add	rsp, 40
	pop	rbx
	pop	rdi
	pop	rsi
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end302:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
	.p2align	2
"$cppxdata$??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z")@IMGREL # IPToStateXData
	.long	48                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z@4HA"@IMGREL # Action
"$ip2state$??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z":
	.long	.Lfunc_begin302@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1240@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1241@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??0string@json@boost@@AEAA@PEAPEAD_KVstorage_ptr@12@@Z"
                                        # -- End function
	.def	 "??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
	.globl	"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z" # -- Begin function ??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z
	.p2align	4, 0x90
"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z": # @"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
.Lfunc_begin303:
.seh_proc "??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 64
	.seh_stackalloc 64
	lea	rbp, [rsp + 64]
	.seh_setframe rbp, 64
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	rdi, rdx
	mov	rax, qword ptr [rcx + 32]
	mov	rdx, qword ptr [rcx + 24]
	mov	r14, qword ptr [rcx + 8]
	mov	rsi, qword ptr [rcx + 16]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 24], rax
	test	al, 1
	je	.LBB609_2
# %bb.1:
	and	rax, -4
	lock		add	qword ptr [rax + 8], 1
.LBB609_2:
	lea	r8, [rbp - 24]
	mov	rcx, rdi
	call	"??0value@json@boost@@QEAA@$$QEAV012@Vstorage_ptr@12@@Z"
	cmp	rsi, 2147483647
	mov	qword ptr [rbp - 16], rdi # 8-byte Spill
	jae	.LBB609_3
# %bb.5:
	mov	rbx, qword ptr [rdi]
	test	rbx, rbx
	je	.LBB609_7
# %bb.6:
	and	rbx, -4
	jmp	.LBB609_10
.LBB609_7:
	mov	eax, dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	mov	ecx, dword ptr [rip + _tls_index]
	mov	rdx, qword ptr gs:[88]
	mov	rcx, qword ptr [rdx + 8*rcx]
	lea	rbx, [rip + "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"]
	cmp	eax, dword ptr [rcx + _Init_thread_epoch@SECREL32]
	jg	.LBB609_8
.LBB609_10:
	lea	rdx, [rsi + 1]
	mov	rax, qword ptr [rbx]
.Ltmp1242:
	mov	r8d, 8
	mov	rcx, rbx
	call	qword ptr [rax + 8]
.Ltmp1243:
# %bb.11:
	mov	rbx, rax
	mov	rcx, rax
	mov	rdx, r14
	mov	r8, rsi
	call	memcpy
	mov	byte ptr [rbx + rsi], 0
	mov	rax, qword ptr [rbp - 16] # 8-byte Reload
	mov	qword ptr [rax + 24], rbx
	mov	dword ptr [rax + 32], esi
	add	rsp, 64
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret
.LBB609_8:
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_header
	cmp	dword ptr [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"], -1
	jne	.LBB609_10
# %bb.9:
	lea	rcx, [rip + "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"]
	call	atexit
	lea	rcx, [rip + "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"]
	call	_Init_thread_footer
	jmp	.LBB609_10
.LBB609_3:
.Ltmp1244:
	call	"?raise@key_too_large@json@boost@@SAXXZ"
	sub	rsp, 32
.Ltmp1245:
# %bb.4:
	.seh_handlerdata
	.long	("$cppxdata$??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z")@IMGREL
	.section	.text,"xr",discard,"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
	.seh_endproc
	.def	 "?dtor$12@?0???Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z@4HA":
.seh_proc "?dtor$12@?0???Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z@4HA"
.LBB609_12:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg rbp
	push	r14
	.seh_pushreg r14
	push	rsi
	.seh_pushreg rsi
	push	rdi
	.seh_pushreg rdi
	push	rbx
	.seh_pushreg rbx
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 64]
	.seh_endprologue
	mov	rcx, qword ptr [rbp - 16] # 8-byte Reload
	call	"??1value@json@boost@@QEAA@XZ"
	nop
	add	rsp, 32
	pop	rbx
	pop	rdi
	pop	rsi
	pop	r14
	pop	rbp
	ret                             # CLEANUPRET
.Lfunc_end303:
	.seh_handlerdata
	.section	.text,"xr",discard,"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
	.p2align	2
"$cppxdata$??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z")@IMGREL # IPToStateXData
	.long	56                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z":
	.long	-1                      # ToState
	.long	"?dtor$12@?0???Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z@4HA"@IMGREL # Action
"$ip2state$??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z":
	.long	.Lfunc_begin303@IMGREL  # IP
	.long	-1                      # ToState
	.long	.Ltmp1242@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1243@IMGREL+1      # IP
	.long	-1                      # ToState
	.long	.Ltmp1244@IMGREL+1      # IP
	.long	0                       # ToState
	.long	.Ltmp1245@IMGREL+1      # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"
                                        # -- End function
	.section	.rdata,"dr"
	.p2align	3               # @"?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"
"?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B":
	.quad	"??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"
	.quad	0                       # 0x0

	.section	.rdata,"dr",discard,"??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"
	.p2align	4               # @0
.L__unnamed_1:
	.quad	"??_R4codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"
	.quad	"?name@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBAPEBDXZ"
	.quad	"?default_error_condition@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AVerror_condition@64@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
	.quad	"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.quad	"?message@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@4@W4error@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.quad	"?failed@error_category@system@boost@@UEBA_NH@Z"

	.section	.rdata,"dr"
	.p2align	3               # @"?cat@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"
"?cat@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B":
	.quad	"??_7codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"
	.quad	0                       # 0x0

	.section	.rdata,"dr",discard,"??_7codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"
	.p2align	4               # @1
.L__unnamed_2:
	.quad	"??_R4codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"
	.quad	"?name@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBAPEBDXZ"
	.quad	"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
	.quad	"?message@error_category@system@boost@@UEBAPEBDHPEAD_K@Z"
	.quad	"?message@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@4@W4condition@34@@Z@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.quad	"?failed@error_category@system@boost@@UEBA_NH@Z"

	.section	.rdata,"dr",largest,"??_7type_error@json@boost@@6B@"
	.p2align	4               # @2
.L__unnamed_3:
	.quad	"??_R4type_error@json@boost@@6B@"
	.quad	"??_Gtype_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7number_required_error@json@boost@@6B@"
	.p2align	4               # @3
.L__unnamed_4:
	.quad	"??_R4number_required_error@json@boost@@6B@"
	.quad	"??_Gnumber_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0BC@PJIHPFPB@array?5index?5error?$AA@"
	.globl	"??_C@_0BC@PJIHPFPB@array?5index?5error?$AA@" # @"??_C@_0BC@PJIHPFPB@array?5index?5error?$AA@"
"??_C@_0BC@PJIHPFPB@array?5index?5error?$AA@":
	.asciz	"array index error"

	.section	.rdata,"dr",largest,"??_7array_index_error@json@boost@@6B@"
	.p2align	4               # @4
.L__unnamed_5:
	.quad	"??_R4array_index_error@json@boost@@6B@"
	.quad	"??_Garray_index_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DE@NGCCBFGO@static?5void?5boost?3?3json?3?3array_i@"
	.globl	"??_C@_0DE@NGCCBFGO@static?5void?5boost?3?3json?3?3array_i@" # @"??_C@_0DE@NGCCBFGO@static?5void?5boost?3?3json?3?3array_i@"
"??_C@_0DE@NGCCBFGO@static?5void?5boost?3?3json?3?3array_i@":
	.asciz	"static void boost::json::array_index_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"
	.globl	"??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@" # @"??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@"
"??_C@_0CB@DLOHHGHO@?4?4?2?4?4?2boost?1json?1impl?1except?4ipp@":
	.asciz	"..\\..\\boost/json/impl/except.ipp"

	.section	.rdata,"dr",discard,"??_C@_0P@DGLCELNH@array?5required?$AA@"
	.globl	"??_C@_0P@DGLCELNH@array?5required?$AA@" # @"??_C@_0P@DGLCELNH@array?5required?$AA@"
"??_C@_0P@DGLCELNH@array?5required?$AA@":
	.asciz	"array required"

	.section	.rdata,"dr",largest,"??_7array_required_error@json@boost@@6B@"
	.p2align	4               # @5
.L__unnamed_6:
	.quad	"??_R4array_required_error@json@boost@@6B@"
	.quad	"??_Garray_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DH@GOOMKIKE@static?5void?5boost?3?3json?3?3array_r@"
	.globl	"??_C@_0DH@GOOMKIKE@static?5void?5boost?3?3json?3?3array_r@" # @"??_C@_0DH@GOOMKIKE@static?5void?5boost?3?3json?3?3array_r@"
"??_C@_0DH@GOOMKIKE@static?5void?5boost?3?3json?3?3array_r@":
	.asciz	"static void boost::json::array_required_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BA@DIOCNIJA@array?5too?5large?$AA@"
	.globl	"??_C@_0BA@DIOCNIJA@array?5too?5large?$AA@" # @"??_C@_0BA@DIOCNIJA@array?5too?5large?$AA@"
"??_C@_0BA@DIOCNIJA@array?5too?5large?$AA@":
	.asciz	"array too large"

	.section	.rdata,"dr",largest,"??_7array_too_large@json@boost@@6B@"
	.p2align	4               # @6
.L__unnamed_7:
	.quad	"??_R4array_too_large@json@boost@@6B@"
	.quad	"??_Garray_too_large@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DC@LMNCGPKG@static?5void?5boost?3?3json?3?3array_t@"
	.globl	"??_C@_0DC@LMNCGPKG@static?5void?5boost?3?3json?3?3array_t@" # @"??_C@_0DC@LMNCGPKG@static?5void?5boost?3?3json?3?3array_t@"
"??_C@_0DC@LMNCGPKG@static?5void?5boost?3?3json?3?3array_t@":
	.asciz	"static void boost::json::array_too_large::raise()"

	.section	.rdata,"dr",discard,"??_C@_0O@GIBGOOKD@bool?5required?$AA@"
	.globl	"??_C@_0O@GIBGOOKD@bool?5required?$AA@" # @"??_C@_0O@GIBGOOKD@bool?5required?$AA@"
"??_C@_0O@GIBGOOKD@bool?5required?$AA@":
	.asciz	"bool required"

	.section	.rdata,"dr",largest,"??_7bool_required_error@json@boost@@6B@"
	.p2align	4               # @7
.L__unnamed_8:
	.quad	"??_R4bool_required_error@json@boost@@6B@"
	.quad	"??_Gbool_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DG@DANAJAIK@static?5void?5boost?3?3json?3?3bool_re@"
	.globl	"??_C@_0DG@DANAJAIK@static?5void?5boost?3?3json?3?3bool_re@" # @"??_C@_0DG@DANAJAIK@static?5void?5boost?3?3json?3?3bool_re@"
"??_C@_0DG@DANAJAIK@static?5void?5boost?3?3json?3?3bool_re@":
	.asciz	"static void boost::json::bool_required_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BB@JCLBFINB@char?5index?5error?$AA@"
	.globl	"??_C@_0BB@JCLBFINB@char?5index?5error?$AA@" # @"??_C@_0BB@JCLBFINB@char?5index?5error?$AA@"
"??_C@_0BB@JCLBFINB@char?5index?5error?$AA@":
	.asciz	"char index error"

	.section	.rdata,"dr",largest,"??_7char_pos_error@json@boost@@6B@"
	.p2align	4               # @8
.L__unnamed_9:
	.quad	"??_R4char_pos_error@json@boost@@6B@"
	.quad	"??_Gchar_pos_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DB@EMIPGMFH@static?5void?5boost?3?3json?3?3char_po@"
	.globl	"??_C@_0DB@EMIPGMFH@static?5void?5boost?3?3json?3?3char_po@" # @"??_C@_0DB@EMIPGMFH@static?5void?5boost?3?3json?3?3char_po@"
"??_C@_0DB@EMIPGMFH@static?5void?5boost?3?3json?3?3char_po@":
	.asciz	"static void boost::json::char_pos_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BA@OGFAIBOI@double?5required?$AA@"
	.globl	"??_C@_0BA@OGFAIBOI@double?5required?$AA@" # @"??_C@_0BA@OGFAIBOI@double?5required?$AA@"
"??_C@_0BA@OGFAIBOI@double?5required?$AA@":
	.asciz	"double required"

	.section	.rdata,"dr",largest,"??_7double_required_error@json@boost@@6B@"
	.p2align	4               # @9
.L__unnamed_10:
	.quad	"??_R4double_required_error@json@boost@@6B@"
	.quad	"??_Gdouble_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DI@PCIKOKKJ@static?5void?5boost?3?3json?3?3double_@"
	.globl	"??_C@_0DI@PCIKOKKJ@static?5void?5boost?3?3json?3?3double_@" # @"??_C@_0DI@PCIKOKKJ@static?5void?5boost?3?3json?3?3double_@"
"??_C@_0DI@PCIKOKKJ@static?5void?5boost?3?3json?3?3double_@":
	.asciz	"static void boost::json::double_required_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0P@EAKGBCKH@int64?5required?$AA@"
	.globl	"??_C@_0P@EAKGBCKH@int64?5required?$AA@" # @"??_C@_0P@EAKGBCKH@int64?5required?$AA@"
"??_C@_0P@EAKGBCKH@int64?5required?$AA@":
	.asciz	"int64 required"

	.section	.rdata,"dr",largest,"??_7int64_required_error@json@boost@@6B@"
	.p2align	4               # @10
.L__unnamed_11:
	.quad	"??_R4int64_required_error@json@boost@@6B@"
	.quad	"??_Gint64_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DH@FOCEKOIN@static?5void?5boost?3?3json?3?3int64_r@"
	.globl	"??_C@_0DH@FOCEKOIN@static?5void?5boost?3?3json?3?3int64_r@" # @"??_C@_0DH@FOCEKOIN@static?5void?5boost?3?3json?3?3int64_r@"
"??_C@_0DH@FOCEKOIN@static?5void?5boost?3?3json?3?3int64_r@":
	.asciz	"static void boost::json::int64_required_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0O@LAKHKHLP@key?5not?5found?$AA@"
	.globl	"??_C@_0O@LAKHKHLP@key?5not?5found?$AA@" # @"??_C@_0O@LAKHKHLP@key?5not?5found?$AA@"
"??_C@_0O@LAKHKHLP@key?5not?5found?$AA@":
	.asciz	"key not found"

	.section	.rdata,"dr",largest,"??_7key_not_found@json@boost@@6B@"
	.p2align	4               # @11
.L__unnamed_12:
	.quad	"??_R4key_not_found@json@boost@@6B@"
	.quad	"??_Gkey_not_found@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DA@HAJBCBLH@static?5void?5boost?3?3json?3?3key_not@"
	.globl	"??_C@_0DA@HAJBCBLH@static?5void?5boost?3?3json?3?3key_not@" # @"??_C@_0DA@HAJBCBLH@static?5void?5boost?3?3json?3?3key_not@"
"??_C@_0DA@HAJBCBLH@static?5void?5boost?3?3json?3?3key_not@":
	.asciz	"static void boost::json::key_not_found::raise()"

	.section	.rdata,"dr",discard,"??_C@_0O@DEEMDEJD@key?5too?5large?$AA@"
	.globl	"??_C@_0O@DEEMDEJD@key?5too?5large?$AA@" # @"??_C@_0O@DEEMDEJD@key?5too?5large?$AA@"
"??_C@_0O@DEEMDEJD@key?5too?5large?$AA@":
	.asciz	"key too large"

	.section	.rdata,"dr",largest,"??_7key_too_large@json@boost@@6B@"
	.p2align	4               # @12
.L__unnamed_13:
	.quad	"??_R4key_too_large@json@boost@@6B@"
	.quad	"??_Gkey_too_large@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DA@DBNNEHDB@static?5void?5boost?3?3json?3?3key_too@"
	.globl	"??_C@_0DA@DBNNEHDB@static?5void?5boost?3?3json?3?3key_too@" # @"??_C@_0DA@DBNNEHDB@static?5void?5boost?3?3json?3?3key_too@"
"??_C@_0DA@DBNNEHDB@static?5void?5boost?3?3json?3?3key_too@":
	.asciz	"static void boost::json::key_too_large::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BA@BADMNCOB@object?5required?$AA@"
	.globl	"??_C@_0BA@BADMNCOB@object?5required?$AA@" # @"??_C@_0BA@BADMNCOB@object?5required?$AA@"
"??_C@_0BA@BADMNCOB@object?5required?$AA@":
	.asciz	"object required"

	.section	.rdata,"dr",largest,"??_7object_required_error@json@boost@@6B@"
	.p2align	4               # @13
.L__unnamed_14:
	.quad	"??_R4object_required_error@json@boost@@6B@"
	.quad	"??_Gobject_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DI@OAGLDLNB@static?5void?5boost?3?3json?3?3object_@"
	.globl	"??_C@_0DI@OAGLDLNB@static?5void?5boost?3?3json?3?3object_@" # @"??_C@_0DI@OAGLDLNB@static?5void?5boost?3?3json?3?3object_@"
"??_C@_0DI@OAGLDLNB@static?5void?5boost?3?3json?3?3object_@":
	.asciz	"static void boost::json::object_required_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@"
	.globl	"??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@" # @"??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@"
"??_C@_0BB@PHHOMDJA@object?5too?5large?$AA@":
	.asciz	"object too large"

	.section	.rdata,"dr",largest,"??_7object_too_large@json@boost@@6B@"
	.p2align	4               # @14
.L__unnamed_15:
	.quad	"??_R4object_too_large@json@boost@@6B@"
	.quad	"??_Gobject_too_large@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DD@KKAEPNNC@static?5void?5boost?3?3json?3?3object_@"
	.globl	"??_C@_0DD@KKAEPNNC@static?5void?5boost?3?3json?3?3object_@" # @"??_C@_0DD@KKAEPNNC@static?5void?5boost?3?3json?3?3object_@"
"??_C@_0DD@KKAEPNNC@static?5void?5boost?3?3json?3?3object_@":
	.asciz	"static void boost::json::object_too_large::raise()"

	.section	.rdata,"dr",discard,"??_C@_0P@EODJGPIM@stack?5overflow?$AA@"
	.globl	"??_C@_0P@EODJGPIM@stack?5overflow?$AA@" # @"??_C@_0P@EODJGPIM@stack?5overflow?$AA@"
"??_C@_0P@EODJGPIM@stack?5overflow?$AA@":
	.asciz	"stack overflow"

	.section	.rdata,"dr",largest,"??_7stack_overflow@json@boost@@6B@"
	.p2align	4               # @15
.L__unnamed_16:
	.quad	"??_R4stack_overflow@json@boost@@6B@"
	.quad	"??_Gstack_overflow@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DB@FJEPCAAF@static?5void?5boost?3?3json?3?3stack_o@"
	.globl	"??_C@_0DB@FJEPCAAF@static?5void?5boost?3?3json?3?3stack_o@" # @"??_C@_0DB@FJEPCAAF@static?5void?5boost?3?3json?3?3stack_o@"
"??_C@_0DB@FJEPCAAF@static?5void?5boost?3?3json?3?3stack_o@":
	.asciz	"static void boost::json::stack_overflow::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BA@FBELEMIP@string?5required?$AA@"
	.globl	"??_C@_0BA@FBELEMIP@string?5required?$AA@" # @"??_C@_0BA@FBELEMIP@string?5required?$AA@"
"??_C@_0BA@FBELEMIP@string?5required?$AA@":
	.asciz	"string required"

	.section	.rdata,"dr",largest,"??_7string_required_error@json@boost@@6B@"
	.p2align	4               # @16
.L__unnamed_17:
	.quad	"??_R4string_required_error@json@boost@@6B@"
	.quad	"??_Gstring_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DI@NDNGBAK@static?5void?5boost?3?3json?3?3string_@"
	.globl	"??_C@_0DI@NDNGBAK@static?5void?5boost?3?3json?3?3string_@" # @"??_C@_0DI@NDNGBAK@static?5void?5boost?3?3json?3?3string_@"
"??_C@_0DI@NDNGBAK@static?5void?5boost?3?3json?3?3string_@":
	.asciz	"static void boost::json::string_required_error::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@"
	.globl	"??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@" # @"??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@"
"??_C@_0BB@FNDFPIFB@string?5too?5large?$AA@":
	.asciz	"string too large"

	.section	.rdata,"dr",largest,"??_7string_too_large@json@boost@@6B@"
	.p2align	4               # @17
.L__unnamed_18:
	.quad	"??_R4string_too_large@json@boost@@6B@"
	.quad	"??_Gstring_too_large@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DD@CDJELGPJ@static?5void?5boost?3?3json?3?3string_@"
	.globl	"??_C@_0DD@CDJELGPJ@static?5void?5boost?3?3json?3?3string_@" # @"??_C@_0DD@CDJELGPJ@static?5void?5boost?3?3json?3?3string_@"
"??_C@_0DD@CDJELGPJ@static?5void?5boost?3?3json?3?3string_@":
	.asciz	"static void boost::json::string_too_large::raise()"

	.section	.rdata,"dr",discard,"??_C@_0BA@NOPBDEBK@uint64?5required?$AA@"
	.globl	"??_C@_0BA@NOPBDEBK@uint64?5required?$AA@" # @"??_C@_0BA@NOPBDEBK@uint64?5required?$AA@"
"??_C@_0BA@NOPBDEBK@uint64?5required?$AA@":
	.asciz	"uint64 required"

	.section	.rdata,"dr",largest,"??_7uint64_required_error@json@boost@@6B@"
	.p2align	4               # @18
.L__unnamed_19:
	.quad	"??_R4uint64_required_error@json@boost@@6B@"
	.quad	"??_Guint64_required_error@json@boost@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_C@_0DI@GCHGEDIJ@static?5void?5boost?3?3json?3?3uint64_@"
	.globl	"??_C@_0DI@GCHGEDIJ@static?5void?5boost?3?3json?3?3uint64_@" # @"??_C@_0DI@GCHGEDIJ@static?5void?5boost?3?3json?3?3uint64_@"
"??_C@_0DI@GCHGEDIJ@static?5void?5boost?3?3json?3?3uint64_@":
	.asciz	"static void boost::json::uint64_required_error::raise()"

	.section	.rdata,"dr",largest,"??_7monotonic_resource@json@boost@@6B@"
	.p2align	4               # @19
.L__unnamed_20:
	.quad	"??_R4monotonic_resource@json@boost@@6B@"
	.quad	"??_Gmonotonic_resource@json@boost@@UEAAPEAXI@Z"
	.quad	"?do_allocate@monotonic_resource@json@boost@@MEAAPEAX_K0@Z"
	.quad	"?do_deallocate@monotonic_resource@json@boost@@MEAAXPEAX_K1@Z"
	.quad	"?do_is_equal@monotonic_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z"

	.section	.rdata,"dr",discard,"??_C@_0HO@ONDGIKNE@boost?3?3json?3?3value?5boost?3?3json?3?3@"
	.globl	"??_C@_0HO@ONDGIKNE@boost?3?3json?3?3value?5boost?3?3json?3?3@" # @"??_C@_0HO@ONDGIKNE@boost?3?3json?3?3value?5boost?3?3json?3?3@"
"??_C@_0HO@ONDGIKNE@boost?3?3json?3?3value?5boost?3?3json?3?3@":
	.asciz	"boost::json::value boost::json::parse(boost::json::string_view, boost::json::storage_ptr, const boost::json::parse_options &)"

	.section	.rdata,"dr",discard,"??_C@_0CA@JICEFNOC@?4?4?2?4?4?2boost?1json?1impl?1parse?4ipp?$AA@"
	.globl	"??_C@_0CA@JICEFNOC@?4?4?2?4?4?2boost?1json?1impl?1parse?4ipp?$AA@" # @"??_C@_0CA@JICEFNOC@?4?4?2?4?4?2boost?1json?1impl?1parse?4ipp?$AA@"
"??_C@_0CA@JICEFNOC@?4?4?2?4?4?2boost?1json?1impl?1parse?4ipp?$AA@":
	.asciz	"..\\..\\boost/json/impl/parse.ipp"

	.section	.rdata,"dr",largest,"??_7static_resource@json@boost@@6B@"
	.p2align	4               # @20
.L__unnamed_21:
	.quad	"??_R4static_resource@json@boost@@6B@"
	.quad	"??_Gstatic_resource@json@boost@@UEAAPEAXI@Z"
	.quad	"?do_allocate@static_resource@json@boost@@MEAAPEAX_K0@Z"
	.quad	"?do_deallocate@static_resource@json@boost@@MEAAXPEAX_K1@Z"
	.quad	"?do_is_equal@static_resource@json@boost@@MEBA_NAEBVmemory_resource@pmr@container@3@@Z"

	.section	.rdata,"dr",discard,"??_C@_0FC@FJBPHKGA@virtual?5void?5?$CKboost?3?3json?3?3stati@"
	.globl	"??_C@_0FC@FJBPHKGA@virtual?5void?5?$CKboost?3?3json?3?3stati@" # @"??_C@_0FC@FJBPHKGA@virtual?5void?5?$CKboost?3?3json?3?3stati@"
"??_C@_0FC@FJBPHKGA@virtual?5void?5?$CKboost?3?3json?3?3stati@":
	.asciz	"virtual void *boost::json::static_resource::do_allocate(std::size_t, std::size_t)"

	.section	.rdata,"dr",discard,"??_C@_0CK@PDPIFIGO@?4?4?2?4?4?2boost?1json?1impl?1static_res@"
	.globl	"??_C@_0CK@PDPIFIGO@?4?4?2?4?4?2boost?1json?1impl?1static_res@" # @"??_C@_0CK@PDPIFIGO@?4?4?2?4?4?2boost?1json?1impl?1static_res@"
"??_C@_0CK@PDPIFIGO@?4?4?2?4?4?2boost?1json?1impl?1static_res@":
	.asciz	"..\\..\\boost/json/impl/static_resource.ipp"

	.section	.rdata,"dr",discard,"??_C@_08JEIPHCP@no?5value?$AA@"
	.globl	"??_C@_08JEIPHCP@no?5value?$AA@" # @"??_C@_08JEIPHCP@no?5value?$AA@"
"??_C@_08JEIPHCP@no?5value?$AA@":
	.asciz	"no value"

	.section	.data,"dw",discard,"??_R0?AVlogic_error@std@@@8"
	.globl	"??_R0?AVlogic_error@std@@@8" # @"??_R0?AVlogic_error@std@@@8"
	.p2align	4
"??_R0?AVlogic_error@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVlogic_error@std@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z24"
	.globl	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z24"
	.p2align	4
"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z24":
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0logic_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8" # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVexception@std@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"
	.globl	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"
	.p2align	4
"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0exception@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA2?AVlogic_error@std@@"
	.globl	"_CTA2?AVlogic_error@std@@" # @"_CTA2?AVlogic_error@std@@"
	.p2align	3
"_CTA2?AVlogic_error@std@@":
	.long	2                       # 0x2
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z24"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"@IMGREL

	.section	.xdata,"dr",discard,"_TI2?AVlogic_error@std@@"
	.globl	"_TI2?AVlogic_error@std@@" # @"_TI2?AVlogic_error@std@@"
	.p2align	3
"_TI2?AVlogic_error@std@@":
	.long	0                       # 0x0
	.long	"??1exception@std@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA2?AVlogic_error@std@@"@IMGREL

	.section	.tls$,"dw"
	.p2align	4               # @"?result@?1??d2s@ryu@detail@json@boost@@YAPEADN@Z@4PADA"
"?result@?1??d2s@ryu@detail@json@boost@@YAPEADN@Z@4PADA":
	.zero	25

	.section	.rdata,"dr"
	.p2align	4               # @"??_R4codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"
"??_R4codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUcodes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@@8"@IMGREL
	.long	"??_R3codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"@IMGREL
	.long	"??_R4codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"@IMGREL

	.data
	.p2align	4               # @"??_R0?AUcodes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@@8"
"??_R0?AUcodes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUcodes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@"
	.zero	6

	.section	.rdata,"dr"
	.p2align	3               # @"??_R3codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"
"??_R3codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"@IMGREL

	.p2align	2               # @"??_R2codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"
"??_R2codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8":
	.long	"??_R1A@?0A@EA@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@error_category@system@boost@@8"@IMGREL
	.long	0                       # 0x0

	.p2align	4               # @"??_R1A@?0A@EA@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"
"??_R1A@?0A@EA@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8":
	.long	"??_R0?AUcodes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"@IMGREL

	.p2align	4               # @"??_R1A@?0A@EA@error_category@system@boost@@8"
"??_R1A@?0A@EA@error_category@system@boost@@8":
	.long	"??_R0?AVerror_category@system@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3error_category@system@boost@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVerror_category@system@boost@@@8"
	.globl	"??_R0?AVerror_category@system@boost@@@8" # @"??_R0?AVerror_category@system@boost@@@8"
	.p2align	4
"??_R0?AVerror_category@system@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVerror_category@system@boost@@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3error_category@system@boost@@8"
	.globl	"??_R3error_category@system@boost@@8" # @"??_R3error_category@system@boost@@8"
	.p2align	3
"??_R3error_category@system@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2error_category@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2error_category@system@boost@@8"
	.globl	"??_R2error_category@system@boost@@8" # @"??_R2error_category@system@boost@@8"
	.p2align	2
"??_R2error_category@system@boost@@8":
	.long	"??_R1A@?0A@EA@error_category@system@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr"
	.p2align	4               # @"??_R4codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"
"??_R4codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUcodes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@@8"@IMGREL
	.long	"??_R3codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"@IMGREL
	.long	"??_R4codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"@IMGREL

	.data
	.p2align	4               # @"??_R0?AUcodes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@@8"
"??_R0?AUcodes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUcodes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@"

	.section	.rdata,"dr"
	.p2align	3               # @"??_R3codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"
"??_R3codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"@IMGREL

	.p2align	2               # @"??_R2codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"
"??_R2codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8":
	.long	"??_R1A@?0A@EA@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@error_category@system@boost@@8"@IMGREL
	.long	0                       # 0x0

	.p2align	4               # @"??_R1A@?0A@EA@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"
"??_R1A@?0A@EA@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8":
	.long	"??_R0?AUcodes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4type_error@json@boost@@6B@"
	.globl	"??_R4type_error@json@boost@@6B@" # @"??_R4type_error@json@boost@@6B@"
	.p2align	4
"??_R4type_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUtype_error@json@boost@@@8"@IMGREL
	.long	"??_R3type_error@json@boost@@8"@IMGREL
	.long	"??_R4type_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUtype_error@json@boost@@@8"
	.globl	"??_R0?AUtype_error@json@boost@@@8" # @"??_R0?AUtype_error@json@boost@@@8"
	.p2align	4
"??_R0?AUtype_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUtype_error@json@boost@@"
	.zero	4

	.section	.rdata,"dr",discard,"??_R3type_error@json@boost@@8"
	.globl	"??_R3type_error@json@boost@@8" # @"??_R3type_error@json@boost@@8"
	.p2align	3
"??_R3type_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2type_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2type_error@json@boost@@8"
	.globl	"??_R2type_error@json@boost@@8" # @"??_R2type_error@json@boost@@8"
	.p2align	4
"??_R2type_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@type_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@type_error@json@boost@@8" # @"??_R1A@?0A@EA@type_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@type_error@json@boost@@8":
	.long	"??_R0?AUtype_error@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3type_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@invalid_argument@std@@8"
	.globl	"??_R1A@?0A@EA@invalid_argument@std@@8" # @"??_R1A@?0A@EA@invalid_argument@std@@8"
	.p2align	4
"??_R1A@?0A@EA@invalid_argument@std@@8":
	.long	"??_R0?AVinvalid_argument@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3invalid_argument@std@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVinvalid_argument@std@@@8"
	.globl	"??_R0?AVinvalid_argument@std@@@8" # @"??_R0?AVinvalid_argument@std@@@8"
	.p2align	4
"??_R0?AVinvalid_argument@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVinvalid_argument@std@@"
	.zero	5

	.section	.rdata,"dr",discard,"??_R3invalid_argument@std@@8"
	.globl	"??_R3invalid_argument@std@@8" # @"??_R3invalid_argument@std@@8"
	.p2align	3
"??_R3invalid_argument@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2invalid_argument@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2invalid_argument@std@@8"
	.globl	"??_R2invalid_argument@std@@8" # @"??_R2invalid_argument@std@@8"
	.p2align	2
"??_R2invalid_argument@std@@8":
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@logic_error@std@@8"
	.globl	"??_R1A@?0A@EA@logic_error@std@@8" # @"??_R1A@?0A@EA@logic_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@logic_error@std@@8":
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3logic_error@std@@8"
	.globl	"??_R3logic_error@std@@8" # @"??_R3logic_error@std@@8"
	.p2align	3
"??_R3logic_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2logic_error@std@@8"
	.globl	"??_R2logic_error@std@@8" # @"??_R2logic_error@std@@8"
	.p2align	2
"??_R2logic_error@std@@8":
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8" # @"??_R3exception@std@@8"
	.p2align	3
"??_R3exception@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8" # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R4number_required_error@json@boost@@6B@"
	.globl	"??_R4number_required_error@json@boost@@6B@" # @"??_R4number_required_error@json@boost@@6B@"
	.p2align	4
"??_R4number_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUnumber_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3number_required_error@json@boost@@8"@IMGREL
	.long	"??_R4number_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUnumber_required_error@json@boost@@@8"
	.globl	"??_R0?AUnumber_required_error@json@boost@@@8" # @"??_R0?AUnumber_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUnumber_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUnumber_required_error@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3number_required_error@json@boost@@8"
	.globl	"??_R3number_required_error@json@boost@@8" # @"??_R3number_required_error@json@boost@@8"
	.p2align	3
"??_R3number_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	"??_R2number_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2number_required_error@json@boost@@8"
	.globl	"??_R2number_required_error@json@boost@@8" # @"??_R2number_required_error@json@boost@@8"
	.p2align	4
"??_R2number_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@number_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@number_required_error@json@boost@@8" # @"??_R1A@?0A@EA@number_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@number_required_error@json@boost@@8":
	.long	"??_R0?AUnumber_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3number_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4array_index_error@json@boost@@6B@"
	.globl	"??_R4array_index_error@json@boost@@6B@" # @"??_R4array_index_error@json@boost@@6B@"
	.p2align	4
"??_R4array_index_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUarray_index_error@json@boost@@@8"@IMGREL
	.long	"??_R3array_index_error@json@boost@@8"@IMGREL
	.long	"??_R4array_index_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUarray_index_error@json@boost@@@8"
	.globl	"??_R0?AUarray_index_error@json@boost@@@8" # @"??_R0?AUarray_index_error@json@boost@@@8"
	.p2align	4
"??_R0?AUarray_index_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUarray_index_error@json@boost@@"
	.zero	5

	.section	.rdata,"dr",discard,"??_R3array_index_error@json@boost@@8"
	.globl	"??_R3array_index_error@json@boost@@8" # @"??_R3array_index_error@json@boost@@8"
	.p2align	3
"??_R3array_index_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2array_index_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2array_index_error@json@boost@@8"
	.globl	"??_R2array_index_error@json@boost@@8" # @"??_R2array_index_error@json@boost@@8"
	.p2align	4
"??_R2array_index_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@array_index_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@out_of_range@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@array_index_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@array_index_error@json@boost@@8" # @"??_R1A@?0A@EA@array_index_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@array_index_error@json@boost@@8":
	.long	"??_R0?AUarray_index_error@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3array_index_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@out_of_range@std@@8"
	.globl	"??_R1A@?0A@EA@out_of_range@std@@8" # @"??_R1A@?0A@EA@out_of_range@std@@8"
	.p2align	4
"??_R1A@?0A@EA@out_of_range@std@@8":
	.long	"??_R0?AVout_of_range@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3out_of_range@std@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVout_of_range@std@@@8"
	.globl	"??_R0?AVout_of_range@std@@@8" # @"??_R0?AVout_of_range@std@@@8"
	.p2align	4
"??_R0?AVout_of_range@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVout_of_range@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3out_of_range@std@@8"
	.globl	"??_R3out_of_range@std@@8" # @"??_R3out_of_range@std@@8"
	.p2align	3
"??_R3out_of_range@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2out_of_range@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2out_of_range@std@@8"
	.globl	"??_R2out_of_range@std@@8" # @"??_R2out_of_range@std@@8"
	.p2align	2
"??_R2out_of_range@std@@8":
	.long	"??_R1A@?0A@EA@out_of_range@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R4array_required_error@json@boost@@6B@"
	.globl	"??_R4array_required_error@json@boost@@6B@" # @"??_R4array_required_error@json@boost@@6B@"
	.p2align	4
"??_R4array_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUarray_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3array_required_error@json@boost@@8"@IMGREL
	.long	"??_R4array_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUarray_required_error@json@boost@@@8"
	.globl	"??_R0?AUarray_required_error@json@boost@@@8" # @"??_R0?AUarray_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUarray_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUarray_required_error@json@boost@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3array_required_error@json@boost@@8"
	.globl	"??_R3array_required_error@json@boost@@8" # @"??_R3array_required_error@json@boost@@8"
	.p2align	3
"??_R3array_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	"??_R2array_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2array_required_error@json@boost@@8"
	.globl	"??_R2array_required_error@json@boost@@8" # @"??_R2array_required_error@json@boost@@8"
	.p2align	4
"??_R2array_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@array_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@array_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@array_required_error@json@boost@@8" # @"??_R1A@?0A@EA@array_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@array_required_error@json@boost@@8":
	.long	"??_R0?AUarray_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3array_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4array_too_large@json@boost@@6B@"
	.globl	"??_R4array_too_large@json@boost@@6B@" # @"??_R4array_too_large@json@boost@@6B@"
	.p2align	4
"??_R4array_too_large@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUarray_too_large@json@boost@@@8"@IMGREL
	.long	"??_R3array_too_large@json@boost@@8"@IMGREL
	.long	"??_R4array_too_large@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUarray_too_large@json@boost@@@8"
	.globl	"??_R0?AUarray_too_large@json@boost@@@8" # @"??_R0?AUarray_too_large@json@boost@@@8"
	.p2align	4
"??_R0?AUarray_too_large@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUarray_too_large@json@boost@@"
	.zero	7

	.section	.rdata,"dr",discard,"??_R3array_too_large@json@boost@@8"
	.globl	"??_R3array_too_large@json@boost@@8" # @"??_R3array_too_large@json@boost@@8"
	.p2align	3
"??_R3array_too_large@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2array_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2array_too_large@json@boost@@8"
	.globl	"??_R2array_too_large@json@boost@@8" # @"??_R2array_too_large@json@boost@@8"
	.p2align	4
"??_R2array_too_large@json@boost@@8":
	.long	"??_R1A@?0A@EA@array_too_large@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@array_too_large@json@boost@@8"
	.globl	"??_R1A@?0A@EA@array_too_large@json@boost@@8" # @"??_R1A@?0A@EA@array_too_large@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@array_too_large@json@boost@@8":
	.long	"??_R0?AUarray_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3array_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@length_error@std@@8"
	.globl	"??_R1A@?0A@EA@length_error@std@@8" # @"??_R1A@?0A@EA@length_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@length_error@std@@8":
	.long	"??_R0?AVlength_error@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3length_error@std@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVlength_error@std@@@8"
	.globl	"??_R0?AVlength_error@std@@@8" # @"??_R0?AVlength_error@std@@@8"
	.p2align	4
"??_R0?AVlength_error@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVlength_error@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3length_error@std@@8"
	.globl	"??_R3length_error@std@@8" # @"??_R3length_error@std@@8"
	.p2align	3
"??_R3length_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2length_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2length_error@std@@8"
	.globl	"??_R2length_error@std@@8" # @"??_R2length_error@std@@8"
	.p2align	2
"??_R2length_error@std@@8":
	.long	"??_R1A@?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R4bool_required_error@json@boost@@6B@"
	.globl	"??_R4bool_required_error@json@boost@@6B@" # @"??_R4bool_required_error@json@boost@@6B@"
	.p2align	4
"??_R4bool_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUbool_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3bool_required_error@json@boost@@8"@IMGREL
	.long	"??_R4bool_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUbool_required_error@json@boost@@@8"
	.globl	"??_R0?AUbool_required_error@json@boost@@@8" # @"??_R0?AUbool_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUbool_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUbool_required_error@json@boost@@"
	.zero	3

	.section	.rdata,"dr",discard,"??_R3bool_required_error@json@boost@@8"
	.globl	"??_R3bool_required_error@json@boost@@8" # @"??_R3bool_required_error@json@boost@@8"
	.p2align	3
"??_R3bool_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	"??_R2bool_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2bool_required_error@json@boost@@8"
	.globl	"??_R2bool_required_error@json@boost@@8" # @"??_R2bool_required_error@json@boost@@8"
	.p2align	4
"??_R2bool_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@bool_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bool_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@bool_required_error@json@boost@@8" # @"??_R1A@?0A@EA@bool_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@bool_required_error@json@boost@@8":
	.long	"??_R0?AUbool_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3bool_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4char_pos_error@json@boost@@6B@"
	.globl	"??_R4char_pos_error@json@boost@@6B@" # @"??_R4char_pos_error@json@boost@@6B@"
	.p2align	4
"??_R4char_pos_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUchar_pos_error@json@boost@@@8"@IMGREL
	.long	"??_R3char_pos_error@json@boost@@8"@IMGREL
	.long	"??_R4char_pos_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUchar_pos_error@json@boost@@@8"
	.globl	"??_R0?AUchar_pos_error@json@boost@@@8" # @"??_R0?AUchar_pos_error@json@boost@@@8"
	.p2align	4
"??_R0?AUchar_pos_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUchar_pos_error@json@boost@@"

	.section	.rdata,"dr",discard,"??_R3char_pos_error@json@boost@@8"
	.globl	"??_R3char_pos_error@json@boost@@8" # @"??_R3char_pos_error@json@boost@@8"
	.p2align	3
"??_R3char_pos_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2char_pos_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2char_pos_error@json@boost@@8"
	.globl	"??_R2char_pos_error@json@boost@@8" # @"??_R2char_pos_error@json@boost@@8"
	.p2align	4
"??_R2char_pos_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@char_pos_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@out_of_range@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@char_pos_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@char_pos_error@json@boost@@8" # @"??_R1A@?0A@EA@char_pos_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@char_pos_error@json@boost@@8":
	.long	"??_R0?AUchar_pos_error@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3char_pos_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4double_required_error@json@boost@@6B@"
	.globl	"??_R4double_required_error@json@boost@@6B@" # @"??_R4double_required_error@json@boost@@6B@"
	.p2align	4
"??_R4double_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUdouble_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3double_required_error@json@boost@@8"@IMGREL
	.long	"??_R4double_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUdouble_required_error@json@boost@@@8"
	.globl	"??_R0?AUdouble_required_error@json@boost@@@8" # @"??_R0?AUdouble_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUdouble_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUdouble_required_error@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3double_required_error@json@boost@@8"
	.globl	"??_R3double_required_error@json@boost@@8" # @"??_R3double_required_error@json@boost@@8"
	.p2align	3
"??_R3double_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	6                       # 0x6
	.long	"??_R2double_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2double_required_error@json@boost@@8"
	.globl	"??_R2double_required_error@json@boost@@8" # @"??_R2double_required_error@json@boost@@8"
	.p2align	4
"??_R2double_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@double_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@double_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@double_required_error@json@boost@@8" # @"??_R1A@?0A@EA@double_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@double_required_error@json@boost@@8":
	.long	"??_R0?AUdouble_required_error@json@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3double_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4int64_required_error@json@boost@@6B@"
	.globl	"??_R4int64_required_error@json@boost@@6B@" # @"??_R4int64_required_error@json@boost@@6B@"
	.p2align	4
"??_R4int64_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUint64_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3int64_required_error@json@boost@@8"@IMGREL
	.long	"??_R4int64_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUint64_required_error@json@boost@@@8"
	.globl	"??_R0?AUint64_required_error@json@boost@@@8" # @"??_R0?AUint64_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUint64_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUint64_required_error@json@boost@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3int64_required_error@json@boost@@8"
	.globl	"??_R3int64_required_error@json@boost@@8" # @"??_R3int64_required_error@json@boost@@8"
	.p2align	3
"??_R3int64_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	6                       # 0x6
	.long	"??_R2int64_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2int64_required_error@json@boost@@8"
	.globl	"??_R2int64_required_error@json@boost@@8" # @"??_R2int64_required_error@json@boost@@8"
	.p2align	4
"??_R2int64_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@int64_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@int64_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@int64_required_error@json@boost@@8" # @"??_R1A@?0A@EA@int64_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@int64_required_error@json@boost@@8":
	.long	"??_R0?AUint64_required_error@json@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3int64_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4key_not_found@json@boost@@6B@"
	.globl	"??_R4key_not_found@json@boost@@6B@" # @"??_R4key_not_found@json@boost@@6B@"
	.p2align	4
"??_R4key_not_found@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUkey_not_found@json@boost@@@8"@IMGREL
	.long	"??_R3key_not_found@json@boost@@8"@IMGREL
	.long	"??_R4key_not_found@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUkey_not_found@json@boost@@@8"
	.globl	"??_R0?AUkey_not_found@json@boost@@@8" # @"??_R0?AUkey_not_found@json@boost@@@8"
	.p2align	4
"??_R0?AUkey_not_found@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUkey_not_found@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3key_not_found@json@boost@@8"
	.globl	"??_R3key_not_found@json@boost@@8" # @"??_R3key_not_found@json@boost@@8"
	.p2align	3
"??_R3key_not_found@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2key_not_found@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2key_not_found@json@boost@@8"
	.globl	"??_R2key_not_found@json@boost@@8" # @"??_R2key_not_found@json@boost@@8"
	.p2align	4
"??_R2key_not_found@json@boost@@8":
	.long	"??_R1A@?0A@EA@key_not_found@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@key_not_found@json@boost@@8"
	.globl	"??_R1A@?0A@EA@key_not_found@json@boost@@8" # @"??_R1A@?0A@EA@key_not_found@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@key_not_found@json@boost@@8":
	.long	"??_R0?AUkey_not_found@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3key_not_found@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4key_too_large@json@boost@@6B@"
	.globl	"??_R4key_too_large@json@boost@@6B@" # @"??_R4key_too_large@json@boost@@6B@"
	.p2align	4
"??_R4key_too_large@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUkey_too_large@json@boost@@@8"@IMGREL
	.long	"??_R3key_too_large@json@boost@@8"@IMGREL
	.long	"??_R4key_too_large@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUkey_too_large@json@boost@@@8"
	.globl	"??_R0?AUkey_too_large@json@boost@@@8" # @"??_R0?AUkey_too_large@json@boost@@@8"
	.p2align	4
"??_R0?AUkey_too_large@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUkey_too_large@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3key_too_large@json@boost@@8"
	.globl	"??_R3key_too_large@json@boost@@8" # @"??_R3key_too_large@json@boost@@8"
	.p2align	3
"??_R3key_too_large@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2key_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2key_too_large@json@boost@@8"
	.globl	"??_R2key_too_large@json@boost@@8" # @"??_R2key_too_large@json@boost@@8"
	.p2align	4
"??_R2key_too_large@json@boost@@8":
	.long	"??_R1A@?0A@EA@key_too_large@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@key_too_large@json@boost@@8"
	.globl	"??_R1A@?0A@EA@key_too_large@json@boost@@8" # @"??_R1A@?0A@EA@key_too_large@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@key_too_large@json@boost@@8":
	.long	"??_R0?AUkey_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3key_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4object_required_error@json@boost@@6B@"
	.globl	"??_R4object_required_error@json@boost@@6B@" # @"??_R4object_required_error@json@boost@@6B@"
	.p2align	4
"??_R4object_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUobject_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3object_required_error@json@boost@@8"@IMGREL
	.long	"??_R4object_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUobject_required_error@json@boost@@@8"
	.globl	"??_R0?AUobject_required_error@json@boost@@@8" # @"??_R0?AUobject_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUobject_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUobject_required_error@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3object_required_error@json@boost@@8"
	.globl	"??_R3object_required_error@json@boost@@8" # @"??_R3object_required_error@json@boost@@8"
	.p2align	3
"??_R3object_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	"??_R2object_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2object_required_error@json@boost@@8"
	.globl	"??_R2object_required_error@json@boost@@8" # @"??_R2object_required_error@json@boost@@8"
	.p2align	4
"??_R2object_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@object_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@object_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@object_required_error@json@boost@@8" # @"??_R1A@?0A@EA@object_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@object_required_error@json@boost@@8":
	.long	"??_R0?AUobject_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3object_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4object_too_large@json@boost@@6B@"
	.globl	"??_R4object_too_large@json@boost@@6B@" # @"??_R4object_too_large@json@boost@@6B@"
	.p2align	4
"??_R4object_too_large@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUobject_too_large@json@boost@@@8"@IMGREL
	.long	"??_R3object_too_large@json@boost@@8"@IMGREL
	.long	"??_R4object_too_large@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUobject_too_large@json@boost@@@8"
	.globl	"??_R0?AUobject_too_large@json@boost@@@8" # @"??_R0?AUobject_too_large@json@boost@@@8"
	.p2align	4
"??_R0?AUobject_too_large@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUobject_too_large@json@boost@@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3object_too_large@json@boost@@8"
	.globl	"??_R3object_too_large@json@boost@@8" # @"??_R3object_too_large@json@boost@@8"
	.p2align	3
"??_R3object_too_large@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2object_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2object_too_large@json@boost@@8"
	.globl	"??_R2object_too_large@json@boost@@8" # @"??_R2object_too_large@json@boost@@8"
	.p2align	4
"??_R2object_too_large@json@boost@@8":
	.long	"??_R1A@?0A@EA@object_too_large@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@object_too_large@json@boost@@8"
	.globl	"??_R1A@?0A@EA@object_too_large@json@boost@@8" # @"??_R1A@?0A@EA@object_too_large@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@object_too_large@json@boost@@8":
	.long	"??_R0?AUobject_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3object_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4stack_overflow@json@boost@@6B@"
	.globl	"??_R4stack_overflow@json@boost@@6B@" # @"??_R4stack_overflow@json@boost@@6B@"
	.p2align	4
"??_R4stack_overflow@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUstack_overflow@json@boost@@@8"@IMGREL
	.long	"??_R3stack_overflow@json@boost@@8"@IMGREL
	.long	"??_R4stack_overflow@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUstack_overflow@json@boost@@@8"
	.globl	"??_R0?AUstack_overflow@json@boost@@@8" # @"??_R0?AUstack_overflow@json@boost@@@8"
	.p2align	4
"??_R0?AUstack_overflow@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUstack_overflow@json@boost@@"

	.section	.rdata,"dr",discard,"??_R3stack_overflow@json@boost@@8"
	.globl	"??_R3stack_overflow@json@boost@@8" # @"??_R3stack_overflow@json@boost@@8"
	.p2align	3
"??_R3stack_overflow@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2stack_overflow@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2stack_overflow@json@boost@@8"
	.globl	"??_R2stack_overflow@json@boost@@8" # @"??_R2stack_overflow@json@boost@@8"
	.p2align	2
"??_R2stack_overflow@json@boost@@8":
	.long	"??_R1A@?0A@EA@stack_overflow@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@stack_overflow@json@boost@@8"
	.globl	"??_R1A@?0A@EA@stack_overflow@json@boost@@8" # @"??_R1A@?0A@EA@stack_overflow@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@stack_overflow@json@boost@@8":
	.long	"??_R0?AUstack_overflow@json@boost@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3stack_overflow@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@runtime_error@std@@8"
	.globl	"??_R1A@?0A@EA@runtime_error@std@@8" # @"??_R1A@?0A@EA@runtime_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@runtime_error@std@@8":
	.long	"??_R0?AVruntime_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3runtime_error@std@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVruntime_error@std@@@8"
	.globl	"??_R0?AVruntime_error@std@@@8" # @"??_R0?AVruntime_error@std@@@8"
	.p2align	4
"??_R0?AVruntime_error@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVruntime_error@std@@"

	.section	.rdata,"dr",discard,"??_R3runtime_error@std@@8"
	.globl	"??_R3runtime_error@std@@8" # @"??_R3runtime_error@std@@8"
	.p2align	3
"??_R3runtime_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2runtime_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2runtime_error@std@@8"
	.globl	"??_R2runtime_error@std@@8" # @"??_R2runtime_error@std@@8"
	.p2align	2
"??_R2runtime_error@std@@8":
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R4string_required_error@json@boost@@6B@"
	.globl	"??_R4string_required_error@json@boost@@6B@" # @"??_R4string_required_error@json@boost@@6B@"
	.p2align	4
"??_R4string_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUstring_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3string_required_error@json@boost@@8"@IMGREL
	.long	"??_R4string_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUstring_required_error@json@boost@@@8"
	.globl	"??_R0?AUstring_required_error@json@boost@@@8" # @"??_R0?AUstring_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUstring_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUstring_required_error@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3string_required_error@json@boost@@8"
	.globl	"??_R3string_required_error@json@boost@@8" # @"??_R3string_required_error@json@boost@@8"
	.p2align	3
"??_R3string_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	5                       # 0x5
	.long	"??_R2string_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2string_required_error@json@boost@@8"
	.globl	"??_R2string_required_error@json@boost@@8" # @"??_R2string_required_error@json@boost@@8"
	.p2align	4
"??_R2string_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@string_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@string_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@string_required_error@json@boost@@8" # @"??_R1A@?0A@EA@string_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@string_required_error@json@boost@@8":
	.long	"??_R0?AUstring_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3string_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4string_too_large@json@boost@@6B@"
	.globl	"??_R4string_too_large@json@boost@@6B@" # @"??_R4string_too_large@json@boost@@6B@"
	.p2align	4
"??_R4string_too_large@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUstring_too_large@json@boost@@@8"@IMGREL
	.long	"??_R3string_too_large@json@boost@@8"@IMGREL
	.long	"??_R4string_too_large@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUstring_too_large@json@boost@@@8"
	.globl	"??_R0?AUstring_too_large@json@boost@@@8" # @"??_R0?AUstring_too_large@json@boost@@@8"
	.p2align	4
"??_R0?AUstring_too_large@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUstring_too_large@json@boost@@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3string_too_large@json@boost@@8"
	.globl	"??_R3string_too_large@json@boost@@8" # @"??_R3string_too_large@json@boost@@8"
	.p2align	3
"??_R3string_too_large@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	"??_R2string_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2string_too_large@json@boost@@8"
	.globl	"??_R2string_too_large@json@boost@@8" # @"??_R2string_too_large@json@boost@@8"
	.p2align	4
"??_R2string_too_large@json@boost@@8":
	.long	"??_R1A@?0A@EA@string_too_large@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@string_too_large@json@boost@@8"
	.globl	"??_R1A@?0A@EA@string_too_large@json@boost@@8" # @"??_R1A@?0A@EA@string_too_large@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@string_too_large@json@boost@@8":
	.long	"??_R0?AUstring_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3string_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4uint64_required_error@json@boost@@6B@"
	.globl	"??_R4uint64_required_error@json@boost@@6B@" # @"??_R4uint64_required_error@json@boost@@6B@"
	.p2align	4
"??_R4uint64_required_error@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUuint64_required_error@json@boost@@@8"@IMGREL
	.long	"??_R3uint64_required_error@json@boost@@8"@IMGREL
	.long	"??_R4uint64_required_error@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUuint64_required_error@json@boost@@@8"
	.globl	"??_R0?AUuint64_required_error@json@boost@@@8" # @"??_R0?AUuint64_required_error@json@boost@@@8"
	.p2align	4
"??_R0?AUuint64_required_error@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUuint64_required_error@json@boost@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3uint64_required_error@json@boost@@8"
	.globl	"??_R3uint64_required_error@json@boost@@8" # @"??_R3uint64_required_error@json@boost@@8"
	.p2align	3
"??_R3uint64_required_error@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	6                       # 0x6
	.long	"??_R2uint64_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2uint64_required_error@json@boost@@8"
	.globl	"??_R2uint64_required_error@json@boost@@8" # @"??_R2uint64_required_error@json@boost@@8"
	.p2align	4
"??_R2uint64_required_error@json@boost@@8":
	.long	"??_R1A@?0A@EA@uint64_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@uint64_required_error@json@boost@@8"
	.globl	"??_R1A@?0A@EA@uint64_required_error@json@boost@@8" # @"??_R1A@?0A@EA@uint64_required_error@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@uint64_required_error@json@boost@@8":
	.long	"??_R0?AUuint64_required_error@json@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3uint64_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4monotonic_resource@json@boost@@6B@"
	.globl	"??_R4monotonic_resource@json@boost@@6B@" # @"??_R4monotonic_resource@json@boost@@6B@"
	.p2align	4
"??_R4monotonic_resource@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVmonotonic_resource@json@boost@@@8"@IMGREL
	.long	"??_R3monotonic_resource@json@boost@@8"@IMGREL
	.long	"??_R4monotonic_resource@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVmonotonic_resource@json@boost@@@8"
	.globl	"??_R0?AVmonotonic_resource@json@boost@@@8" # @"??_R0?AVmonotonic_resource@json@boost@@@8"
	.p2align	4
"??_R0?AVmonotonic_resource@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVmonotonic_resource@json@boost@@"
	.zero	4

	.section	.rdata,"dr",discard,"??_R3monotonic_resource@json@boost@@8"
	.globl	"??_R3monotonic_resource@json@boost@@8" # @"??_R3monotonic_resource@json@boost@@8"
	.p2align	3
"??_R3monotonic_resource@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2monotonic_resource@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2monotonic_resource@json@boost@@8"
	.globl	"??_R2monotonic_resource@json@boost@@8" # @"??_R2monotonic_resource@json@boost@@8"
	.p2align	2
"??_R2monotonic_resource@json@boost@@8":
	.long	"??_R1A@?0A@EA@monotonic_resource@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@monotonic_resource@json@boost@@8"
	.globl	"??_R1A@?0A@EA@monotonic_resource@json@boost@@8" # @"??_R1A@?0A@EA@monotonic_resource@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@monotonic_resource@json@boost@@8":
	.long	"??_R0?AVmonotonic_resource@json@boost@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3monotonic_resource@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"
	.globl	"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8" # @"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8":
	.long	"??_R0?AVmemory_resource@pmr@container@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3memory_resource@pmr@container@boost@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVmemory_resource@pmr@container@boost@@@8"
	.globl	"??_R0?AVmemory_resource@pmr@container@boost@@@8" # @"??_R0?AVmemory_resource@pmr@container@boost@@@8"
	.p2align	4
"??_R0?AVmemory_resource@pmr@container@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVmemory_resource@pmr@container@boost@@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3memory_resource@pmr@container@boost@@8"
	.globl	"??_R3memory_resource@pmr@container@boost@@8" # @"??_R3memory_resource@pmr@container@boost@@8"
	.p2align	3
"??_R3memory_resource@pmr@container@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2memory_resource@pmr@container@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2memory_resource@pmr@container@boost@@8"
	.globl	"??_R2memory_resource@pmr@container@boost@@8" # @"??_R2memory_resource@pmr@container@boost@@8"
	.p2align	2
"??_R2memory_resource@pmr@container@boost@@8":
	.long	"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R4static_resource@json@boost@@6B@"
	.globl	"??_R4static_resource@json@boost@@6B@" # @"??_R4static_resource@json@boost@@6B@"
	.p2align	4
"??_R4static_resource@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVstatic_resource@json@boost@@@8"@IMGREL
	.long	"??_R3static_resource@json@boost@@8"@IMGREL
	.long	"??_R4static_resource@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVstatic_resource@json@boost@@@8"
	.globl	"??_R0?AVstatic_resource@json@boost@@@8" # @"??_R0?AVstatic_resource@json@boost@@@8"
	.p2align	4
"??_R0?AVstatic_resource@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVstatic_resource@json@boost@@"
	.zero	7

	.section	.rdata,"dr",discard,"??_R3static_resource@json@boost@@8"
	.globl	"??_R3static_resource@json@boost@@8" # @"??_R3static_resource@json@boost@@8"
	.p2align	3
"??_R3static_resource@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2static_resource@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2static_resource@json@boost@@8"
	.globl	"??_R2static_resource@json@boost@@8" # @"??_R2static_resource@json@boost@@8"
	.p2align	2
"??_R2static_resource@json@boost@@8":
	.long	"??_R1A@?0A@EA@static_resource@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@static_resource@json@boost@@8"
	.globl	"??_R1A@?0A@EA@static_resource@json@boost@@8" # @"??_R1A@?0A@EA@static_resource@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@static_resource@json@boost@@8":
	.long	"??_R0?AVstatic_resource@json@boost@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3static_resource@json@boost@@8"@IMGREL

	.section	.data,"dw",discard,"?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"
	.globl	"?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A" # @"?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"
	.p2align	3
"?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A":
	.quad	"??_7default_resource@detail@json@boost@@6B@"

	.section	.rdata,"dr",largest,"??_7default_resource@detail@json@boost@@6B@"
	.p2align	4               # @21
.L__unnamed_22:
	.quad	"??_R4default_resource@detail@json@boost@@6B@"
	.quad	"??_Gdefault_resource@detail@json@boost@@UEAAPEAXI@Z"
	.quad	"?do_allocate@default_resource@detail@json@boost@@UEAAPEAX_K0@Z"
	.quad	"?do_deallocate@default_resource@detail@json@boost@@UEAAXPEAX_K1@Z"
	.quad	"?do_is_equal@default_resource@detail@json@boost@@UEBA_NAEBVmemory_resource@pmr@container@4@@Z"

	.section	.bss,"bw",discard,"?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"
	.globl	"?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA" # @"?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"
	.p2align	2
"?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA":
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R4default_resource@detail@json@boost@@6B@"
	.globl	"??_R4default_resource@detail@json@boost@@6B@" # @"??_R4default_resource@detail@json@boost@@6B@"
	.p2align	4
"??_R4default_resource@detail@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVdefault_resource@detail@json@boost@@@8"@IMGREL
	.long	"??_R3default_resource@detail@json@boost@@8"@IMGREL
	.long	"??_R4default_resource@detail@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVdefault_resource@detail@json@boost@@@8"
	.globl	"??_R0?AVdefault_resource@detail@json@boost@@@8" # @"??_R0?AVdefault_resource@detail@json@boost@@@8"
	.p2align	4
"??_R0?AVdefault_resource@detail@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVdefault_resource@detail@json@boost@@"
	.zero	7

	.section	.rdata,"dr",discard,"??_R3default_resource@detail@json@boost@@8"
	.globl	"??_R3default_resource@detail@json@boost@@8" # @"??_R3default_resource@detail@json@boost@@8"
	.p2align	3
"??_R3default_resource@detail@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2default_resource@detail@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2default_resource@detail@json@boost@@8"
	.globl	"??_R2default_resource@detail@json@boost@@8" # @"??_R2default_resource@detail@json@boost@@8"
	.p2align	2
"??_R2default_resource@detail@json@boost@@8":
	.long	"??_R1A@?0A@EA@default_resource@detail@json@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@default_resource@detail@json@boost@@8"
	.globl	"??_R1A@?0A@EA@default_resource@detail@json@boost@@8" # @"??_R1A@?0A@EA@default_resource@detail@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@default_resource@detail@json@boost@@8":
	.long	"??_R0?AVdefault_resource@detail@json@boost@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3default_resource@detail@json@boost@@8"@IMGREL

	.section	.rdata,"dr",largest,"??_7system_error_category@detail@system@boost@@6B@"
	.p2align	4               # @22
.L__unnamed_23:
	.quad	"??_R4system_error_category@detail@system@boost@@6B@"
	.quad	"?name@system_error_category@detail@system@boost@@UEBAPEBDXZ"
	.quad	"?default_error_condition@system_error_category@detail@system@boost@@UEBA?AVerror_condition@34@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
	.quad	"?message@system_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.quad	"?message@system_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.quad	"?failed@error_category@system@boost@@UEBA_NH@Z"

	.section	.rdata,"dr",discard,"?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"
	.globl	"?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B" # @"?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"
	.p2align	3
"?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B":
	.quad	"??_7system_error_category@detail@system@boost@@6B@"
	.quad	-8093018978436915045    # 0x8fafd21e25c5e09b

	.section	.rdata,"dr",discard,"??_R4system_error_category@detail@system@boost@@6B@"
	.globl	"??_R4system_error_category@detail@system@boost@@6B@" # @"??_R4system_error_category@detail@system@boost@@6B@"
	.p2align	4
"??_R4system_error_category@detail@system@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVsystem_error_category@detail@system@boost@@@8"@IMGREL
	.long	"??_R3system_error_category@detail@system@boost@@8"@IMGREL
	.long	"??_R4system_error_category@detail@system@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVsystem_error_category@detail@system@boost@@@8"
	.globl	"??_R0?AVsystem_error_category@detail@system@boost@@@8" # @"??_R0?AVsystem_error_category@detail@system@boost@@@8"
	.p2align	4
"??_R0?AVsystem_error_category@detail@system@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVsystem_error_category@detail@system@boost@@"

	.section	.rdata,"dr",discard,"??_R3system_error_category@detail@system@boost@@8"
	.globl	"??_R3system_error_category@detail@system@boost@@8" # @"??_R3system_error_category@detail@system@boost@@8"
	.p2align	3
"??_R3system_error_category@detail@system@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2system_error_category@detail@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2system_error_category@detail@system@boost@@8"
	.globl	"??_R2system_error_category@detail@system@boost@@8" # @"??_R2system_error_category@detail@system@boost@@8"
	.p2align	2
"??_R2system_error_category@detail@system@boost@@8":
	.long	"??_R1A@?0A@EA@system_error_category@detail@system@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@error_category@system@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@system_error_category@detail@system@boost@@8"
	.globl	"??_R1A@?0A@EA@system_error_category@detail@system@boost@@8" # @"??_R1A@?0A@EA@system_error_category@detail@system@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@system_error_category@detail@system@boost@@8":
	.long	"??_R0?AVsystem_error_category@detail@system@boost@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3system_error_category@detail@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_06FHFOAHML@system?$AA@"
	.globl	"??_C@_06FHFOAHML@system?$AA@" # @"??_C@_06FHFOAHML@system?$AA@"
"??_C@_06FHFOAHML@system?$AA@":
	.asciz	"system"

	.section	.rdata,"dr",discard,"??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@"
	.globl	"??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@" # @"??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@"
"??_C@_0BD@EHCCJHF@Unknown?5error?5?$CI?$CFd?$CJ?$AA@":
	.asciz	"Unknown error (%d)"

	.section	.bss,"bw",discard,"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.globl	"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA" # @"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.p2align	3
"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA":
	.quad	0                       # 0x0

	.section	.rdata,"dr",discard,"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
	.globl	"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@" # @"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@":
	.asciz	"string too long"

	.section	.data,"dw",discard,"??_R0?AVbad_array_new_length@std@@@8"
	.globl	"??_R0?AVbad_array_new_length@std@@@8" # @"??_R0?AVbad_array_new_length@std@@@8"
	.p2align	4
"??_R0?AVbad_array_new_length@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVbad_array_new_length@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24"
	.globl	"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24"
	.p2align	4
"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24":
	.long	0                       # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVbad_alloc@std@@@8"
	.globl	"??_R0?AVbad_alloc@std@@@8" # @"??_R0?AVbad_alloc@std@@@8"
	.p2align	4
"??_R0?AVbad_alloc@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVbad_alloc@std@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24"
	.globl	"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24"
	.p2align	4
"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24":
	.long	16                      # 0x10
	.long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0bad_alloc@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA3?AVbad_array_new_length@std@@"
	.globl	"_CTA3?AVbad_array_new_length@std@@" # @"_CTA3?AVbad_array_new_length@std@@"
	.p2align	3
"_CTA3?AVbad_array_new_length@std@@":
	.long	3                       # 0x3
	.long	"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24"@IMGREL
	.long	"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"@IMGREL

	.section	.xdata,"dr",discard,"_TI3?AVbad_array_new_length@std@@"
	.globl	"_TI3?AVbad_array_new_length@std@@" # @"_TI3?AVbad_array_new_length@std@@"
	.p2align	3
"_TI3?AVbad_array_new_length@std@@":
	.long	0                       # 0x0
	.long	"??1exception@std@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA3?AVbad_array_new_length@std@@"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	.globl	"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@" # @"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@":
	.asciz	"bad array new length"

	.section	.rdata,"dr",largest,"??_7bad_array_new_length@std@@6B@"
	.p2align	4               # @23
.L__unnamed_24:
	.quad	"??_R4bad_array_new_length@std@@6B@"
	.quad	"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_array_new_length@std@@6B@"
	.globl	"??_R4bad_array_new_length@std@@6B@" # @"??_R4bad_array_new_length@std@@6B@"
	.p2align	4
"??_R4bad_array_new_length@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"@IMGREL
	.long	"??_R3bad_array_new_length@std@@8"@IMGREL
	.long	"??_R4bad_array_new_length@std@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3bad_array_new_length@std@@8"
	.globl	"??_R3bad_array_new_length@std@@8" # @"??_R3bad_array_new_length@std@@8"
	.p2align	3
"??_R3bad_array_new_length@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2bad_array_new_length@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2bad_array_new_length@std@@8"
	.globl	"??_R2bad_array_new_length@std@@8" # @"??_R2bad_array_new_length@std@@8"
	.p2align	2
"??_R2bad_array_new_length@std@@8":
	.long	"??_R1A@?0A@EA@bad_array_new_length@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.globl	"??_R1A@?0A@EA@bad_array_new_length@std@@8" # @"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_array_new_length@std@@8":
	.long	"??_R0?AVbad_array_new_length@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3bad_array_new_length@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_alloc@std@@8"
	.globl	"??_R1A@?0A@EA@bad_alloc@std@@8" # @"??_R1A@?0A@EA@bad_alloc@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_alloc@std@@8":
	.long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3bad_alloc@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3bad_alloc@std@@8"
	.globl	"??_R3bad_alloc@std@@8" # @"??_R3bad_alloc@std@@8"
	.p2align	3
"??_R3bad_alloc@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2bad_alloc@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2bad_alloc@std@@8"
	.globl	"??_R2bad_alloc@std@@8" # @"??_R2bad_alloc@std@@8"
	.p2align	2
"??_R2bad_alloc@std@@8":
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",largest,"??_7bad_alloc@std@@6B@"
	.p2align	4               # @24
.L__unnamed_25:
	.quad	"??_R4bad_alloc@std@@6B@"
	.quad	"??_Gbad_alloc@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_alloc@std@@6B@"
	.globl	"??_R4bad_alloc@std@@6B@" # @"??_R4bad_alloc@std@@6B@"
	.p2align	4
"??_R4bad_alloc@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
	.long	"??_R3bad_alloc@std@@8"@IMGREL
	.long	"??_R4bad_alloc@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	4               # @25
.L__unnamed_26:
	.quad	"??_R4exception@std@@6B@"
	.quad	"??_Gexception@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@" # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	"??_R3exception@std@@8"@IMGREL
	.long	"??_R4exception@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7generic_error_category@detail@system@boost@@6B@"
	.p2align	4               # @26
.L__unnamed_27:
	.quad	"??_R4generic_error_category@detail@system@boost@@6B@"
	.quad	"?name@generic_error_category@detail@system@boost@@UEBAPEBDXZ"
	.quad	"?default_error_condition@error_category@system@boost@@UEBA?AVerror_condition@23@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NAEBVerror_code@23@H@Z"
	.quad	"?equivalent@error_category@system@boost@@UEBA_NHAEBVerror_condition@23@@Z"
	.quad	"?message@generic_error_category@detail@system@boost@@UEBAPEBDHPEAD_K@Z"
	.quad	"?message@generic_error_category@detail@system@boost@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z"
	.quad	"?failed@error_category@system@boost@@UEBA_NH@Z"

	.section	.rdata,"dr",discard,"?generic_category_instance@?$cat_holder@X@detail@system@boost@@2Vgeneric_error_category@234@B"
	.globl	"?generic_category_instance@?$cat_holder@X@detail@system@boost@@2Vgeneric_error_category@234@B" # @"?generic_category_instance@?$cat_holder@X@detail@system@boost@@2Vgeneric_error_category@234@B"
	.p2align	3
"?generic_category_instance@?$cat_holder@X@detail@system@boost@@2Vgeneric_error_category@234@B":
	.quad	"??_7generic_error_category@detail@system@boost@@6B@"
	.quad	-5572340897628102899    # 0xb2ab117a257edf0d

	.section	.rdata,"dr",discard,"??_R4generic_error_category@detail@system@boost@@6B@"
	.globl	"??_R4generic_error_category@detail@system@boost@@6B@" # @"??_R4generic_error_category@detail@system@boost@@6B@"
	.p2align	4
"??_R4generic_error_category@detail@system@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVgeneric_error_category@detail@system@boost@@@8"@IMGREL
	.long	"??_R3generic_error_category@detail@system@boost@@8"@IMGREL
	.long	"??_R4generic_error_category@detail@system@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVgeneric_error_category@detail@system@boost@@@8"
	.globl	"??_R0?AVgeneric_error_category@detail@system@boost@@@8" # @"??_R0?AVgeneric_error_category@detail@system@boost@@@8"
	.p2align	4
"??_R0?AVgeneric_error_category@detail@system@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVgeneric_error_category@detail@system@boost@@"
	.zero	7

	.section	.rdata,"dr",discard,"??_R3generic_error_category@detail@system@boost@@8"
	.globl	"??_R3generic_error_category@detail@system@boost@@8" # @"??_R3generic_error_category@detail@system@boost@@8"
	.p2align	3
"??_R3generic_error_category@detail@system@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2generic_error_category@detail@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2generic_error_category@detail@system@boost@@8"
	.globl	"??_R2generic_error_category@detail@system@boost@@8" # @"??_R2generic_error_category@detail@system@boost@@8"
	.p2align	2
"??_R2generic_error_category@detail@system@boost@@8":
	.long	"??_R1A@?0A@EA@generic_error_category@detail@system@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@error_category@system@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@generic_error_category@detail@system@boost@@8"
	.globl	"??_R1A@?0A@EA@generic_error_category@detail@system@boost@@8" # @"??_R1A@?0A@EA@generic_error_category@detail@system@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@generic_error_category@detail@system@boost@@8":
	.long	"??_R0?AVgeneric_error_category@detail@system@boost@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3generic_error_category@detail@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_07DCLBNMLN@generic?$AA@"
	.globl	"??_C@_07DCLBNMLN@generic?$AA@" # @"??_C@_07DCLBNMLN@generic?$AA@"
"??_C@_07DCLBNMLN@generic?$AA@":
	.asciz	"generic"

	.section	.rdata,"dr",discard,"??_C@_0O@NIPGCINC@Unknown?5error?$AA@"
	.globl	"??_C@_0O@NIPGCINC@Unknown?5error?$AA@" # @"??_C@_0O@NIPGCINC@Unknown?5error?$AA@"
"??_C@_0O@NIPGCINC@Unknown?5error?$AA@":
	.asciz	"Unknown error"

	.section	.rdata,"dr",largest,"??_7invalid_argument@std@@6B@"
	.p2align	4               # @27
.L__unnamed_28:
	.quad	"??_R4invalid_argument@std@@6B@"
	.quad	"??_Ginvalid_argument@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4invalid_argument@std@@6B@"
	.globl	"??_R4invalid_argument@std@@6B@" # @"??_R4invalid_argument@std@@6B@"
	.p2align	4
"??_R4invalid_argument@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVinvalid_argument@std@@@8"@IMGREL
	.long	"??_R3invalid_argument@std@@8"@IMGREL
	.long	"??_R4invalid_argument@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7out_of_range@std@@6B@"
	.p2align	4               # @28
.L__unnamed_29:
	.quad	"??_R4out_of_range@std@@6B@"
	.quad	"??_Gout_of_range@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4out_of_range@std@@6B@"
	.globl	"??_R4out_of_range@std@@6B@" # @"??_R4out_of_range@std@@6B@"
	.p2align	4
"??_R4out_of_range@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVout_of_range@std@@@8"@IMGREL
	.long	"??_R3out_of_range@std@@8"@IMGREL
	.long	"??_R4out_of_range@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7length_error@std@@6B@"
	.p2align	4               # @29
.L__unnamed_30:
	.quad	"??_R4length_error@std@@6B@"
	.quad	"??_Glength_error@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4length_error@std@@6B@"
	.globl	"??_R4length_error@std@@6B@" # @"??_R4length_error@std@@6B@"
	.p2align	4
"??_R4length_error@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVlength_error@std@@@8"@IMGREL
	.long	"??_R3length_error@std@@8"@IMGREL
	.long	"??_R4length_error@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7runtime_error@std@@6B@"
	.p2align	4               # @30
.L__unnamed_31:
	.quad	"??_R4runtime_error@std@@6B@"
	.quad	"??_Gruntime_error@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4runtime_error@std@@6B@"
	.globl	"??_R4runtime_error@std@@6B@" # @"??_R4runtime_error@std@@6B@"
	.p2align	4
"??_R4runtime_error@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVruntime_error@std@@@8"@IMGREL
	.long	"??_R3runtime_error@std@@8"@IMGREL
	.long	"??_R4runtime_error@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7memory_resource@pmr@container@boost@@6B@"
	.p2align	4               # @31
.L__unnamed_32:
	.quad	"??_R4memory_resource@pmr@container@boost@@6B@"
	.quad	"??_Gmemory_resource@pmr@container@boost@@UEAAPEAXI@Z"
	.quad	_purecall
	.quad	_purecall
	.quad	_purecall

	.section	.rdata,"dr",discard,"??_R4memory_resource@pmr@container@boost@@6B@"
	.globl	"??_R4memory_resource@pmr@container@boost@@6B@" # @"??_R4memory_resource@pmr@container@boost@@6B@"
	.p2align	4
"??_R4memory_resource@pmr@container@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVmemory_resource@pmr@container@boost@@@8"@IMGREL
	.long	"??_R3memory_resource@pmr@container@boost@@8"@IMGREL
	.long	"??_R4memory_resource@pmr@container@boost@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_7place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@"
	.p2align	3               # @32
.L__unnamed_33:
	.quad	"??_R4place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@"
	.quad	"??Rplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@UEAA_NPEAX@Z"

	.section	.rdata,"dr"
	.p2align	4               # @"??_R4place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@"
"??_R4place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@@8"@IMGREL
	.long	"??_R3place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"@IMGREL
	.long	"??_R4place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@"@IMGREL

	.data
	.p2align	4               # @"??_R0?AUplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@@8"
"??_R0?AUplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@"
	.zero	7

	.section	.rdata,"dr"
	.p2align	3               # @"??_R3place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"
"??_R3place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"@IMGREL

	.p2align	2               # @"??_R2place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"
"??_R2place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8":
	.long	"??_R1A@?0A@EA@place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@place_range@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.p2align	4               # @"??_R1A@?0A@EA@place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"
"??_R1A@?0A@EA@place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8":
	.long	"??_R0?AUplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"@IMGREL

	.p2align	4               # @"??_R1A@?0A@EA@place_range@object@json@boost@@8"
"??_R1A@?0A@EA@place_range@object@json@boost@@8":
	.long	"??_R0?AUplace_range@object@json@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_range@object@json@boost@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUplace_range@object@json@boost@@@8"
	.globl	"??_R0?AUplace_range@object@json@boost@@@8" # @"??_R0?AUplace_range@object@json@boost@@@8"
	.p2align	4
"??_R0?AUplace_range@object@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_range@object@json@boost@@"
	.zero	4

	.section	.rdata,"dr",discard,"??_R3place_range@object@json@boost@@8"
	.globl	"??_R3place_range@object@json@boost@@8" # @"??_R3place_range@object@json@boost@@8"
	.p2align	3
"??_R3place_range@object@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2place_range@object@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2place_range@object@json@boost@@8"
	.globl	"??_R2place_range@object@json@boost@@8" # @"??_R2place_range@object@json@boost@@8"
	.p2align	2
"??_R2place_range@object@json@boost@@8":
	.long	"??_R1A@?0A@EA@place_range@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",largest,"??_7place_range@object@json@boost@@6B@"
	.p2align	3               # @33
.L__unnamed_34:
	.quad	"??_R4place_range@object@json@boost@@6B@"
	.quad	_purecall

	.section	.rdata,"dr",discard,"??_R4place_range@object@json@boost@@6B@"
	.globl	"??_R4place_range@object@json@boost@@6B@" # @"??_R4place_range@object@json@boost@@6B@"
	.p2align	4
"??_R4place_range@object@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_range@object@json@boost@@@8"@IMGREL
	.long	"??_R3place_range@object@json@boost@@8"@IMGREL
	.long	"??_R4place_range@object@json@boost@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_7place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@"
	.p2align	3               # @34
.L__unnamed_35:
	.quad	"??_R4place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@"
	.quad	"??Rplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@UEAA_NPEAX@Z"

	.section	.rdata,"dr"
	.p2align	4               # @"??_R4place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@"
"??_R4place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@@8"@IMGREL
	.long	"??_R3place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"@IMGREL
	.long	"??_R4place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@"@IMGREL

	.data
	.p2align	4               # @"??_R0?AUplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@@8"
"??_R0?AUplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@"
	.zero	4

	.section	.rdata,"dr"
	.p2align	3               # @"??_R3place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"
"??_R3place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"@IMGREL

	.p2align	2               # @"??_R2place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"
"??_R2place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8":
	.long	"??_R1A@?0A@EA@place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@place_range@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.p2align	4               # @"??_R1A@?0A@EA@place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"
"??_R1A@?0A@EA@place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8":
	.long	"??_R0?AUplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB"
	.globl	"?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB" # @"?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB"
	.p2align	4
"?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB":
	.quad	0                       # 0x0
	.quad	3                       # 0x3
	.quad	7                       # 0x7
	.quad	11                      # 0xb
	.quad	17                      # 0x11
	.quad	29                      # 0x1d
	.quad	53                      # 0x35
	.quad	97                      # 0x61
	.quad	193                     # 0xc1
	.quad	389                     # 0x185
	.quad	769                     # 0x301
	.quad	1543                    # 0x607
	.quad	3079                    # 0xc07
	.quad	6151                    # 0x1807
	.quad	12289                   # 0x3001
	.quad	24593                   # 0x6011
	.quad	49157                   # 0xc005
	.quad	98317                   # 0x1800d
	.quad	196613                  # 0x30005
	.quad	393241                  # 0x60019
	.quad	786433                  # 0xc0001
	.quad	1572869                 # 0x180005
	.quad	3145739                 # 0x30000b
	.quad	6291469                 # 0x60000d
	.quad	12582917                # 0xc00005
	.quad	25165843                # 0x1800013
	.quad	50331653                # 0x3000005
	.quad	100663319               # 0x6000017
	.quad	201326611               # 0xc000013
	.quad	402653189               # 0x18000005
	.quad	805306457               # 0x30000059
	.quad	1610612741              # 0x60000005
	.quad	3221225473              # 0xc0000001
	.quad	6442450939              # 0x17ffffffb
	.quad	12884901893             # 0x300000005
	.quad	25769803751             # 0x5ffffffe7
	.quad	51539607551             # 0xbffffffff
	.quad	103079215111            # 0x1800000007
	.quad	206158430209            # 0x3000000001
	.quad	412316860441            # 0x6000000019
	.quad	824633720831            # 0xbfffffffff
	.quad	1649267441651           # 0x17ffffffff3
	.quad	3298534883309           # 0x2ffffffffed
	.quad	6597069766657           # 0x60000000001
	.quad	13194139533299          # 0xbfffffffff3
	.quad	26388279066623          # 0x17ffffffffff
	.quad	52776558133303          # 0x300000000037
	.quad	105553116266489         # 0x5ffffffffff9
	.quad	211106232532969         # 0xbfffffffffe9
	.quad	422212465066001         # 0x1800000000011
	.quad	844424930131963         # 0x2fffffffffffb
	.quad	1688849860263953        # 0x6000000000011
	.quad	3377699720527861        # 0xbfffffffffff5
	.quad	6755399441055731        # 0x17fffffffffff3
	.quad	13510798882111483       # 0x2ffffffffffffb
	.quad	27021597764222939       # 0x5fffffffffffdb
	.quad	54043195528445957       # 0xc0000000000005
	.quad	108086391056891903      # 0x17fffffffffffff
	.quad	216172782113783843      # 0x300000000000023
	.quad	432345564227567621      # 0x600000000000005
	.quad	864691128455135207      # 0xbffffffffffffe7
	.quad	1729382256910270481     # 0x1800000000000011
	.quad	3458764513820540933     # 0x3000000000000005
	.quad	6917529027641081903     # 0x600000000000002f
	.quad	-4611686018427387887    # 0xc000000000000011
	.quad	-59                     # 0xffffffffffffffc5
	.quad	-1                      # 0xffffffffffffffff

	.section	.rdata,"dr",discard,"??_C@_00CNPNBAHC@?$AA@"
	.globl	"??_C@_00CNPNBAHC@?$AA@" # @"??_C@_00CNPNBAHC@?$AA@"
"??_C@_00CNPNBAHC@?$AA@":
	.zero	1

	.section	.rdata,"dr",largest,"??_7system_error@system@boost@@6B@"
	.p2align	4               # @35
.L__unnamed_36:
	.quad	"??_R4system_error@system@boost@@6B@"
	.quad	"??_Gsystem_error@system@boost@@UEAAPEAXI@Z"
	.quad	"?what@system_error@system@boost@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4system_error@system@boost@@6B@"
	.globl	"??_R4system_error@system@boost@@6B@" # @"??_R4system_error@system@boost@@6B@"
	.p2align	4
"??_R4system_error@system@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVsystem_error@system@boost@@@8"@IMGREL
	.long	"??_R3system_error@system@boost@@8"@IMGREL
	.long	"??_R4system_error@system@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVsystem_error@system@boost@@@8"
	.globl	"??_R0?AVsystem_error@system@boost@@@8" # @"??_R0?AVsystem_error@system@boost@@@8"
	.p2align	4
"??_R0?AVsystem_error@system@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVsystem_error@system@boost@@"

	.section	.rdata,"dr",discard,"??_R3system_error@system@boost@@8"
	.globl	"??_R3system_error@system@boost@@8" # @"??_R3system_error@system@boost@@8"
	.p2align	3
"??_R3system_error@system@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2system_error@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2system_error@system@boost@@8"
	.globl	"??_R2system_error@system@boost@@8" # @"??_R2system_error@system@boost@@8"
	.p2align	2
"??_R2system_error@system@boost@@8":
	.long	"??_R1A@?0A@EA@system_error@system@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@system_error@system@boost@@8"
	.globl	"??_R1A@?0A@EA@system_error@system@boost@@8" # @"??_R1A@?0A@EA@system_error@system@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@system_error@system@boost@@8":
	.long	"??_R0?AVsystem_error@system@boost@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3system_error@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_02LMMGGCAJ@?3?5?$AA@"
	.globl	"??_C@_02LMMGGCAJ@?3?5?$AA@" # @"??_C@_02LMMGGCAJ@?3?5?$AA@"
"??_C@_02LMMGGCAJ@?3?5?$AA@":
	.asciz	": "

	.section	.rdata,"dr",discard,"??_C@_0EF@LAFOMEEF@std?3?3size_t?5boost?3?3json?3?3seriali@"
	.globl	"??_C@_0EF@LAFOMEEF@std?3?3size_t?5boost?3?3json?3?3seriali@" # @"??_C@_0EF@LAFOMEEF@std?3?3size_t?5boost?3?3json?3?3seriali@"
"??_C@_0EF@LAFOMEEF@std?3?3size_t?5boost?3?3json?3?3seriali@":
	.asciz	"std::size_t boost::json::serializer::write_some(char *, std::size_t)"

	.section	.rdata,"dr",discard,"??_C@_0CF@IIBKNCCP@?4?4?2?4?4?2boost?1json?1impl?1serializer@"
	.globl	"??_C@_0CF@IIBKNCCP@?4?4?2?4?4?2boost?1json?1impl?1serializer@" # @"??_C@_0CF@IIBKNCCP@?4?4?2?4?4?2boost?1json?1impl?1serializer@"
"??_C@_0CF@IIBKNCCP@?4?4?2?4?4?2boost?1json?1impl?1serializer@":
	.asciz	"..\\..\\boost/json/impl/serializer.ipp"

	.section	.rdata,"dr",discard,"??_C@_0BH@CHOIELIB@no?5value?5in?5serializer?$AA@"
	.globl	"??_C@_0BH@CHOIELIB@no?5value?5in?5serializer?$AA@" # @"??_C@_0BH@CHOIELIB@no?5value?5in?5serializer?$AA@"
"??_C@_0BH@CHOIELIB@no?5value?5in?5serializer?$AA@":
	.asciz	"no value in serializer"

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Vlogic_error@std@@@boost@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVclone_base@exception_detail@boost@@@8"
	.globl	"??_R0?AVclone_base@exception_detail@boost@@@8" # @"??_R0?AVclone_base@exception_detail@boost@@@8"
	.p2align	4
"??_R0?AVclone_base@exception_detail@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVclone_base@exception_detail@boost@@"

	.section	.xdata,"dr",discard,"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"
	.globl	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8" # @"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"
	.p2align	4
"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8":
	.long	0                       # 0x0
	.long	"??_R0?AVclone_base@exception_detail@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	"??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0logic_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0exception@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVexception@boost@@@8"
	.globl	"??_R0?AVexception@boost@@@8" # @"??_R0?AVexception@boost@@@8"
	.p2align	4
"??_R0?AVexception@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVexception@boost@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"
	.globl	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032" # @"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"
	.p2align	4
"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@boost@@@8"@IMGREL
	.long	32                      # 0x20
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	"??0exception@boost@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"
	.globl	"_CTA5?AU?$wrapexcept@Vlogic_error@std@@@boost@@" # @"_CTA5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"
	.p2align	4
"_CTA5?AU?$wrapexcept@Vlogic_error@std@@@boost@@":
	.long	5                       # 0x5
	.long	"_CT??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8??0?$wrapexcept@Vlogic_error@std@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"
	.globl	"_TI5?AU?$wrapexcept@Vlogic_error@std@@@boost@@" # @"_TI5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"
	.p2align	3
"_TI5?AU?$wrapexcept@Vlogic_error@std@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Vlogic_error@std@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA5?AU?$wrapexcept@Vlogic_error@std@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @36
.L__unnamed_37:
	.quad	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Vlogic_error@std@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Vlogic_error@std@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"
	.p2align	4               # @37
.L__unnamed_38:
	.quad	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"
	.quad	"??_E?$wrapexcept@Vlogic_error@std@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"
	.p2align	3               # @38
.L__unnamed_39:
	.quad	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Vlogic_error@std@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8" # @"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	5                       # 0x5
	.long	"??_R2?$wrapexcept@Vlogic_error@std@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Vlogic_error@std@@@boost@@8" # @"??_R2?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Vlogic_error@std@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Vlogic_error@std@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Vlogic_error@std@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Vlogic_error@std@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"
	.globl	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8" # @"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8":
	.long	"??_R0?AVclone_base@exception_detail@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3clone_base@exception_detail@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3clone_base@exception_detail@boost@@8"
	.globl	"??_R3clone_base@exception_detail@boost@@8" # @"??_R3clone_base@exception_detail@boost@@8"
	.p2align	3
"??_R3clone_base@exception_detail@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2clone_base@exception_detail@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2clone_base@exception_detail@boost@@8"
	.globl	"??_R2clone_base@exception_detail@boost@@8" # @"??_R2clone_base@exception_detail@boost@@8"
	.p2align	2
"??_R2clone_base@exception_detail@boost@@8":
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R17?0A@EA@logic_error@std@@8"
	.globl	"??_R17?0A@EA@logic_error@std@@8" # @"??_R17?0A@EA@logic_error@std@@8"
	.p2align	4
"??_R17?0A@EA@logic_error@std@@8":
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@exception@std@@8"
	.globl	"??_R17?0A@EA@exception@std@@8" # @"??_R17?0A@EA@exception@std@@8"
	.p2align	4
"??_R17?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1CA@?0A@EA@exception@boost@@8"
	.globl	"??_R1CA@?0A@EA@exception@boost@@8" # @"??_R1CA@?0A@EA@exception@boost@@8"
	.p2align	4
"??_R1CA@?0A@EA@exception@boost@@8":
	.long	"??_R0?AVexception@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	32                      # 0x20
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3exception@boost@@8"
	.globl	"??_R3exception@boost@@8" # @"??_R3exception@boost@@8"
	.p2align	3
"??_R3exception@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2exception@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2exception@boost@@8"
	.globl	"??_R2exception@boost@@8" # @"??_R2exception@boost@@8"
	.p2align	2
"??_R2exception@boost@@8":
	.long	"??_R1A@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@boost@@8"
	.globl	"??_R1A@?0A@EA@exception@boost@@8" # @"??_R1A@?0A@EA@exception@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@boost@@8":
	.long	"??_R0?AVexception@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"
	.globl	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@" # @"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"
	.p2align	4
"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7clone_base@exception_detail@boost@@6B@"
	.p2align	4               # @39
.L__unnamed_40:
	.quad	"??_R4clone_base@exception_detail@boost@@6B@"
	.quad	_purecall
	.quad	_purecall
	.quad	"??_Gclone_base@exception_detail@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4clone_base@exception_detail@boost@@6B@"
	.globl	"??_R4clone_base@exception_detail@boost@@6B@" # @"??_R4clone_base@exception_detail@boost@@6B@"
	.p2align	4
"??_R4clone_base@exception_detail@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVclone_base@exception_detail@boost@@@8"@IMGREL
	.long	"??_R3clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R4clone_base@exception_detail@boost@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7exception@boost@@6B@"
	.p2align	3               # @40
.L__unnamed_41:
	.quad	"??_R4exception@boost@@6B@"
	.quad	_purecall

	.section	.rdata,"dr",discard,"??_R4exception@boost@@6B@"
	.globl	"??_R4exception@boost@@6B@" # @"??_R4exception@boost@@6B@"
	.p2align	4
"??_R4exception@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVexception@boost@@@8"@IMGREL
	.long	"??_R3exception@boost@@8"@IMGREL
	.long	"??_R4exception@boost@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_04LOAJBDKD@true?$AA@"
	.globl	"??_C@_04LOAJBDKD@true?$AA@" # @"??_C@_04LOAJBDKD@true?$AA@"
"??_C@_04LOAJBDKD@true?$AA@":
	.asciz	"true"

	.section	.rdata,"dr",discard,"??_C@_05LAPONLG@false?$AA@"
	.globl	"??_C@_05LAPONLG@false?$AA@" # @"??_C@_05LAPONLG@false?$AA@"
"??_C@_05LAPONLG@false?$AA@":
	.asciz	"false"

	.section	.rdata,"dr",discard,"??_C@_04MLLLIHIP@null?$AA@"
	.globl	"??_C@_04MLLLIHIP@null?$AA@" # @"??_C@_04MLLLIHIP@null?$AA@"
"??_C@_04MLLLIHIP@null?$AA@":
	.asciz	"null"

	.section	.rdata,"dr",discard,"?hex@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.globl	"?hex@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB" # @"?hex@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.p2align	4
"?hex@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB":
	.asciz	"0123456789abcdef"

	.section	.rdata,"dr",discard,"?esc@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.globl	"?esc@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB" # @"?esc@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.p2align	4
"?esc@?1???$write_string@$00@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB":
	.ascii	"uuuuuuuubtnufruuuuuuuuuuuuuuuuuu\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\"
	.zero	164

	.section	.rdata,"dr",discard,"?hex@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.globl	"?hex@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB" # @"?hex@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.p2align	4
"?hex@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB":
	.asciz	"0123456789abcdef"

	.section	.rdata,"dr",discard,"?esc@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.globl	"?esc@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB" # @"?esc@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB"
	.p2align	4
"?esc@?1???$write_string@$0A@@serializer@json@boost@@AEAA_NAEAVstream@detail@23@@Z@4QBDB":
	.ascii	"uuuuuuuubtnufruuuuuuuuuuuuuuuuuu\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\"
	.zero	164

	.section	.rdata,"dr",discard,"??_C@_0P@GHFPNOJB@bad?5allocation?$AA@"
	.globl	"??_C@_0P@GHFPNOJB@bad?5allocation?$AA@" # @"??_C@_0P@GHFPNOJB@bad?5allocation?$AA@"
"??_C@_0P@GHFPNOJB@bad?5allocation?$AA@":
	.asciz	"bad allocation"

	.section	.rdata,"dr",largest,"??_7logic_error@std@@6B@"
	.p2align	4               # @41
.L__unnamed_42:
	.quad	"??_R4logic_error@std@@6B@"
	.quad	"??_Glogic_error@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4logic_error@std@@6B@"
	.globl	"??_R4logic_error@std@@6B@" # @"??_R4logic_error@std@@6B@"
	.p2align	4
"??_R4logic_error@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	"??_R3logic_error@std@@8"@IMGREL
	.long	"??_R4logic_error@std@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"
	.globl	"??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@" # @"??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@"
"??_C@_0MJ@HFBCCPGP@00010203040506070809101112131415@":
	.asciz	"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"

	.section	.rdata,"dr",discard,"??_C@_03ICJPMMHB@NaN?$AA@"
	.globl	"??_C@_03ICJPMMHB@NaN?$AA@" # @"??_C@_03ICJPMMHB@NaN?$AA@"
"??_C@_03ICJPMMHB@NaN?$AA@":
	.asciz	"NaN"

	.section	.rdata,"dr",discard,"??_C@_03IHIHKBJK@0E0?$AA@"
	.globl	"??_C@_03IHIHKBJK@0E0?$AA@" # @"??_C@_03IHIHKBJK@0E0?$AA@"
"??_C@_03IHIHKBJK@0E0?$AA@":
	.asciz	"0E0"

	.section	.rdata,"dr",discard,"?arr@?1??DOUBLE_POW5_INV_SPLIT@ryu@detail@json@boost@@YAAEAY1BCE@1$$CB_KXZ@4QAY01$$CB_KA"
	.globl	"?arr@?1??DOUBLE_POW5_INV_SPLIT@ryu@detail@json@boost@@YAAEAY1BCE@1$$CB_KXZ@4QAY01$$CB_KA" # @"?arr@?1??DOUBLE_POW5_INV_SPLIT@ryu@detail@json@boost@@YAAEAY1BCE@1$$CB_KXZ@4QAY01$$CB_KA"
	.p2align	4
"?arr@?1??DOUBLE_POW5_INV_SPLIT@ryu@detail@json@boost@@YAAEAY1BCE@1$$CB_KXZ@4QAY01$$CB_KA":
	.quad	1                       # 0x1
	.quad	288230376151711744      # 0x400000000000000
	.quad	3689348814741910324     # 0x3333333333333334
	.quad	230584300921369395      # 0x333333333333333
	.quad	2951479051793528259     # 0x28f5c28f5c28f5c3
	.quad	184467440737095516      # 0x28f5c28f5c28f5c
	.quad	-1328165573307087716    # 0xed916872b020c49c
	.quad	147573952589676412      # 0x20c49ba5e353f7c
	.quad	-5814413732033250669    # 0xaf4f0d844d013a93
	.quad	236118324143482260      # 0x346dc5d63886594
	.quad	-8340879800368510858    # 0x8c3f3e0370cdc876
	.quad	188894659314785808      # 0x29f16b11c6d1e10
	.quad	-2983355025552898363    # 0xd698fe69270b06c5
	.quad	151115727451828646      # 0x218def416bdb1a6
	.quad	-1084019226142727058    # 0xf0f4ca41d811a46e
	.quad	241785163922925834      # 0x35afe535795e90a
	.quad	-867215380914181647     # 0xf3f70834acdae9f1
	.quad	193428131138340667      # 0x2af31dc4611873b
	.quad	6684925324752475329     # 0x5cc5a02a23e254c1
	.quad	154742504910672534      # 0x225c17d04dad296
	.quad	-372165924621770443     # 0xfad5cd10396a2135
	.quad	247588007857076054      # 0x36f9bfb3af7b756
	.quad	-297732739697416354     # 0xfbde3da69454e75e
	.quad	198070406285660843      # 0x2bfaffc2f2c92ab
	.quad	3451162622983977240     # 0x2fe4fe1edd10b918
	.quad	158456325028528675      # 0x232f33025bd4223
	.quad	5521860196774363583     # 0x4ca19697c81ac1bf
	.quad	253530120045645880      # 0x384b84d092ed038
	.quad	4417488157419490867     # 0x3d4e1213067bce33
	.quad	202824096036516704      # 0x2d09370d4257360
	.quad	7223339340677503017     # 0x643e74dc052fd829
	.quad	162259276829213363      # 0x24075f3dceac2b3
	.quad	7867994130342094503     # 0x6d30baf9a1e626a7
	.quad	259614842926741381      # 0x39a5652fb113785
	.quad	2605046489531765280     # 0x2426fbfae7eb5220
	.quad	207691874341393105      # 0x2e1dea8c8da92d1
	.quad	2084037191625412224     # 0x1cebfcc8b9890e80
	.quad	166153499473114484      # 0x24e4bba3a487574
	.quad	-7733586937625071412    # 0x94acc7a78f41b0cc
	.quad	265845599156983174      # 0x3b07929f6da5586
	.quad	-6186869550100057129    # 0xaa23d2ec729af3d7
	.quad	212676479325586539      # 0x2f394219248446b
	.quad	-4949495640080045703    # 0xbb4fdbf05baf2979
	.quad	170141183460469231      # 0x25c768141d369ef
	.quad	-4229844209386162803    # 0xc54c931a2c4b758d
	.quad	272225893536750770      # 0x3c7240202ebdcb2
	.quad	-7073224182250840565    # 0x9dd6dc14f03c5e0b
	.quad	217780714829400616      # 0x305b66802564a28
	.quad	5409467098425058518     # 0x4b1249aa59c9e4d6
	.quad	174224571863520493      # 0x26af8533511d4ed
	.quad	4965798542738183305     # 0x44ea0f76f60fd489
	.quad	278759314981632789      # 0x3de5a1ebb4fbb15
	.quad	7661987648932456967     # 0x6a54d92bf80caa07
	.quad	223007451985306231      # 0x318481895d96277
	.quad	2440241304404055250     # 0x21dd7a89933d54d2
	.quad	178405961588244985      # 0x279d346de4781f9
	.quad	3904386087046488400     # 0x362f2a75b8622150
	.quad	285449538541191976      # 0x3f61ed7ca0c0328
	.quad	-565839945104719603     # 0xf825bb91604e810d
	.quad	228359630832953580      # 0x32b4bdfd4d668ec
	.quad	-4142020770825686005    # 0xc684960de6a5340b
	.quad	182687704666362864      # 0x289097fdd7853f0
	.quad	-3313616616660548804    # 0xd203ab3e521dc33c
	.quad	146150163733090291      # 0x2073accb12d0ff3
	.quad	-1612437771914967764    # 0xe99f7863b696052c
	.quad	233840261972944466      # 0x33ec47ab514e652
	.quad	-8668647847015794857    # 0x87b2c6b62bab3757
	.quad	187072209578355573      # 0x2989d2ef743eb75
	.quad	-3245569462870725563    # 0xd2f56bc4efbc2c45
	.quad	149657767662684458      # 0x213b0f25f69892a
	.quad	2185786488890659746     # 0x1e55793b192d13a2
	.quad	239452428260295134      # 0x352b4b6ff0f41de
	.quad	5437978005854438120     # 0x4b77942f475742e8
	.quad	191561942608236107      # 0x2a8909265a5ce4b
	.quad	-3028315224800270150    # 0xd5f9435905df68ba
	.quad	153249554086588885      # 0x22073a8515171d5
	.quad	6222742084545298729     # 0x565b9ef4d6324129
	.quad	245199286538542217      # 0x3671f73b54f1c89
	.quad	-2400503961847581663    # 0xdeafb25d78283421
	.quad	196159429230833773      # 0x2b8e5f62aa5b06d
	.quad	1768945645263844993     # 0x188c8eb12cecf681
	.quad	156927543384667019      # 0x22d84c4eeeaf38b
	.quad	-8237733411803578981    # 0x8dadb11b7b14bd9b
	.quad	251084069415467230      # 0x37c07a17e44b8de
	.quad	8167208529524778108     # 0x7157c0e2c8dd647c
	.quad	200867255532373784      # 0x2c99fb46503c718
	.quad	-8223628435347818806    # 0x8ddfcd823a4ab6ca
	.quad	160693804425899027      # 0x23ae629ea696c13
	.quad	1599589762411131202     # 0x1632e269f6ddf142
	.quad	257110087081438444      # 0x391704310a8acec
	.quad	4969020624670815285     # 0x44f581ee5f17f435
	.quad	205688069665150755      # 0x2dac035a6ed5723
	.quad	3975216499736652228     # 0x372ace584c1329c4
	.quad	164550455732120604      # 0x24899c4858aac1c
	.quad	-4707700044647087405    # 0xbeaae3c079b842d3
	.quad	263280729171392966      # 0x3a75c6da27779c6
	.quad	7301886408508061046     # 0x6555830061603576
	.quad	210624583337114373      # 0x2ec49f14ec5fb05
	.quad	-5226537317419282133    # 0xb7779c004de6912b
	.quad	168499666669691498      # 0x256a18dd89e626a
	.quad	-983762078387030766     # 0xf258f99a163db512
	.quad	269599466671506397      # 0x3bdcf495a9703dd
	.quad	6591687966774196033     # 0x5b7a614811caf741
	.quad	215679573337205118      # 0x2fe3f6de212697e
	.quad	-5794696070806374143    # 0xaf951aa00e3bf901
	.quad	172543658669764094      # 0x264ff8b1b41edfe
	.quad	9175230360419352987     # 0x7f54f7667d2cc19b
	.quad	276069853871622551      # 0x3d4cc11c5364997
	.quad	3650835473593572067     # 0x32aa5f8530f09ae3
	.quad	220855883097298041      # 0x310a3416a91d479
	.quad	-768680435867052670     # 0xf55519375a5a1582
	.quad	176684706477838432      # 0x273b5cdeedb1060
	.quad	-4919237512129194595    # 0xbbbb5b8bc3c3559d
	.quad	282695530364541492      # 0x3ec56164af81a34
	.quad	3443307619780464970     # 0x2fc916096969114a
	.quad	226156424291633194      # 0x3237811d593482a
	.quad	6443994910566282300     # 0x596dab3ababa743c
	.quad	180925139433306555      # 0x282c674aadc39bb
	.quad	5155195928453025840     # 0x478aef622efb9030
	.quad	144740111546645244      # 0x202385d557cfafc
	.quad	-2819732958700889626    # 0xd8de4bd04b2c19e6
	.quad	231584178474632390      # 0x336c0955594c4c6
	.quad	-5945135181702622024    # 0xad7ea30d08f014b8
	.quad	185267342779705912      # 0x29233aaaadd6a38
	.quad	2622589484121723027     # 0x24654f3da0c01093
	.quad	148213874223764730      # 0x20e8fbbbbe454fa
	.quad	4196143174594756843     # 0x3a3bb1fc346680eb
	.quad	237142198758023568      # 0x34a7f92c63a2190
	.quad	-7711131904549925495    # 0x94fc8e635d1ecd89
	.quad	189713759006418854      # 0x2a1ffa89e94e7a6
	.quad	-6168905523639940396    # 0xaa63a51c4a7f0ad4
	.quad	151771007205135083      # 0x21b32ed4baa52eb
	.quad	-2491551208340083987    # 0xdd6c3b607731aaed
	.quad	242833611528216133      # 0x35eb7e212aa1e45
	.quad	1696107848069843133     # 0x1789c919f8f488bd
	.quad	194266889222572907      # 0x2b22cb4dbbb4b6b
	.quad	-6021811351027946140    # 0xac6e3a7b2d906d64
	.quad	155413511378058325      # 0x22823c3e2fc3c55
	.quad	1433148282581017146     # 0x13e390c515b3e23a
	.quad	248661618204893321      # 0x3736c6c9e606089
	.quad	-2542830188677096606    # 0xdcb60d6a77c31b62
	.quad	198929294563914656      # 0x2c2bd23b1e6b3a0
	.quad	9033782293284053685     # 0x7d5e7121f968e2b5
	.quad	159143435651131725      # 0x235641c8e52294d
	.quad	-3992692404455065721    # 0xc8971b698f0e3787
	.quad	254629497041810760      # 0x388a02db0837548
	.quad	-6883502738305962900    # 0xa078e2bad8d82c6c
	.quad	203703597633448608      # 0x2d3b357c0692aa0
	.quad	-1817453375902859996    # 0xe6c71bc8ad79bd24
	.quad	162962878106758886      # 0x242f5dfcd20eee6
	.quad	781423413297334329      # 0xad82c7448c2c839
	.quad	260740604970814219      # 0x39e5632e1ce4b0b
	.quad	4314487545379777786     # 0x3be023903a356cfa
	.quad	208592483976651375      # 0x2e511c24e3ea26f
	.quad	3451590036303822229     # 0x2fe682d9c82abd95
	.quad	166873987181321100      # 0x250db01d8321b8c
	.quad	5522544058086115566     # 0x4ca4048fa6aac8ee
	.quad	266998379490113760      # 0x3b4919c8d1cf8e0
	.quad	4418035246468892453     # 0x3d5003a61eef0725
	.quad	213598703592091008      # 0x2f6dae3a4172d80
	.quad	-7533618247050617007    # 0x9773361e7f259f51
	.quad	170878962873672806      # 0x25f1582e9ac2466
	.quad	-8364440380539076888    # 0x8beb89ca6508fee8
	.quad	273406340597876490      # 0x3cb559e42ad070a
	.quad	8065842954536379782     # 0x6fefa16eb73a6586
	.quad	218725072478301192      # 0x309114b688a6c08
	.quad	-926023265854716821     # 0xf3261abef8fb846b
	.quad	174980057982640953      # 0x26da76f86d52339
	.quad	5897060404116273733     # 0x51d691318e5f3a45
	.quad	279968092772225526      # 0x3e2a57f3e21d1f6
	.quad	1028299508551108663     # 0xe4540f471e5c837
	.quad	223974474217780421      # 0x31bb798fe8174c5
	.quad	-2866709207901023392    # 0xd8376729f4b7d360
	.quad	179179579374224336      # 0x27c92e0cb9ac3d0
	.quad	-897385917899727105     # 0xf38bd84321261eff
	.quad	286687326998758938      # 0x3fa849adf5e061a
	.quad	2971440080422128639     # 0x293cad0280eb4bff
	.quad	229349861599007151      # 0x32ed07be5e4d1af
	.quad	-1312196750404207412    # 0xedca240200bc3ccc
	.quad	183479889279205720      # 0x28bd9fcb7ea4158
	.quad	-4739106215065276252    # 0xbe3b50019a3030a4
	.quad	146783911423364576      # 0x2097b309321cde0
	.quad	-3893221129362531681    # 0xc9f88002904d1a9f
	.quad	234854258277383322      # 0x3425eb41e9c7c9a
	.quad	4264120725993795302     # 0x3b2d3335403daee6
	.quad	187883406621906658      # 0x29b7ef67ee396e2
	.quad	-7656749863430694728    # 0x95bdc291003158b8
	.quad	150306725297525326      # 0x215ff2b98b6124e
	.quad	-8561450966747201242    # 0x892f9db4cd1bc126
	.quad	240490760476040522      # 0x35665128df01d4a
	.quad	529536856086059653      # 0x7594af70a7c9a85
	.quad	192392608380832418      # 0x2ab840ed7f34aa2
	.quad	7802327114352668369     # 0x6c476f2c0863aed1
	.quad	153914086704665934      # 0x222d00bdff5d54e
	.quad	1415676938738538420     # 0x13a57eacda3917b4
	.quad	246262538727465495      # 0x36ae67966562217
	.quad	1132541550990830736     # 0xfb7988a482dac90
	.quad	197010030981972396      # 0x2bbeb9451de81ac
	.quad	-2783315573949245734    # 0xd95fad3b6cf156da
	.quad	157608024785577916      # 0x22fefa9db1867bc
	.quad	-763956103576882852     # 0xf565e1f8ae4ef15c
	.quad	252172839656924666      # 0x37fe5dc91c0a5fa
	.quad	-7989862512345326928    # 0x911e4e608b725ab0
	.quad	201738271725539733      # 0x2ccb7e3a7cd5195
	.quad	-2702541195134351219    # 0xda7ea51a0928488d
	.quad	161390617380431786      # 0x23d5fe9530aa7aa
	.quad	-634717097473051627     # 0xf7310829a8407415
	.quad	258224987808690858      # 0x39566421e7772aa
	.quad	3181575136763469022     # 0x2c2739baed005cde
	.quad	206579990246952687      # 0x2ddeb68185f8eef
	.quad	-4833437520073045429    # 0xbcec2e2f24004a4b
	.quad	165263992197562149      # 0x24b22b9ad193f25
	.quad	-7733500032116872687    # 0x94ad16b1d333aa11
	.quad	264422387516099439      # 0x3ab6ac2ae8ecb6f
	.quad	-6186800025693498149    # 0xaa241227dc2954db
	.quad	211537910012879551      # 0x2ef889bbed8a2bf
	.quad	6118606423670932450     # 0x54e9a81fe35443e2
	.quad	169230328010303641      # 0x2593a163246e899
	.quad	2411072648389671274     # 0x2175d9cc9eed396a
	.quad	270768524816485826      # 0x3c1f689ea0b0dc2
	.quad	-1760490696030173304    # 0xe7917b0a18bdc788
	.quad	216614819853188660      # 0x3019207ee6f3e34
	.quad	-5097741371566048966    # 0xb9412f3b46fe393a
	.quad	173291855882550928      # 0x267a8065858fe90
	.quad	-777688565021857700     # 0xf535185ed7fd285c
	.quad	277266969412081485      # 0x3d90cd6f3c1974d
	.quad	-4311499666759396483    # 0xc42a79e57997537d
	.quad	221813575529665188      # 0x3140a458fce12a4
	.quad	240149081334393137      # 0x3552e512e12a931
	.quad	177450860423732151      # 0x2766e9e0ca4dbb7
	.quad	-6994459099348791628    # 0x9eeeb081e3510eb4
	.quad	283921376677971441      # 0x3f0b0fce107c5f1
	.quad	5472479164746697667     # 0x4bf226ce4f740bc3
	.quad	227137101342377153      # 0x326f3fd80d304c1
	.quad	-6690063112428372836    # 0xa3281f0b72c33c9c
	.quad	181709681073901722      # 0x2858ffe00a8d09a
	.quad	2026647139541122378     # 0x1c2018d5f568fd4a
	.quad	145367744859121378      # 0x20473319a20a6e2
	.quad	-446713391476114519     # 0xf9ccf48988a7fba9
	.quad	232588391774594204      # 0x33a51e8f69aa49c
	.quad	-357370713180891615     # 0xfb0a5d3ad3b99621
	.quad	186070713419675363      # 0x2950e53f87bb6e3
	.quad	3403452244197197031     # 0x2f3b7dc8a96144e7
	.quad	148856570735740291      # 0x210d8432d2fc583
	.quad	-1933174038768305396    # 0xe52bfc7442353b0c
	.quad	238170513177184465      # 0x34e26d1e1e608d1
	.quad	-5235888045756554640    # 0xb756639034f76270
	.quad	190536410541747572      # 0x2a4ebdb1b1e6d74
	.quad	3189987192878576934     # 0x2c451c735d92b526
	.quad	152429128433398058      # 0x21d897c15b1f12a
	.quad	1414630693863812771     # 0x13a1c71efc1deea3
	.quad	243886605493436893      # 0x362759355e981dd
	.quad	8510402184574870864     # 0x761b05b2634b2550
	.quad	195109284394749514      # 0x2b52adc44bace4a
	.quad	-7949073511307744602    # 0x91af37c1e908eaa6
	.quad	156087427515799611      # 0x22a88b036fbd83b
	.quad	-9029168803350481040    # 0x82b1f2cfdb417770
	.quad	249739884025279378      # 0x3774119f192f392
	.quad	-3533986227938474509    # 0xcef4c23fe29ac5f3
	.quad	199791907220223502      # 0x2c5cdae5adbf60e
	.quad	4551508647133041040     # 0x3f2a34ffe87bd190
	.quad	159833525776178802      # 0x237d7beaf165e72
	.quad	-7474981423554775630    # 0x984387ffda5fb5b2
	.quad	255733641241886083      # 0x38c8c644b56fd83
	.quad	-2290636324101910181    # 0xe0360666484c915b
	.quad	204586912993508866      # 0x2d6d6b6a2abfe02
	.quad	-9211206688765348791    # 0x802b3851d3707449
	.quad	163669530394807093      # 0x24578921bbccb35
	.quad	-7359233072540737419    # 0x99dec082ebe72075
	.quad	261871248631691349      # 0x3a25a835f947855
	.quad	-5887386458032589935    # 0xae4bcd358985b391
	.quad	209496998905353079      # 0x2e8486919439377
	.quad	-4709909166426071948    # 0xbea30a913ad15c74
	.quad	167597599124282463      # 0x2536d20e102dc5f
	.quad	-157157036797894471     # 0xfdd1aa81f7b560b9
	.quad	268156158598851941      # 0x3b8ae9b019e2d65
	.quad	-7504423258922136223    # 0x97daeece5fc44d61
	.quad	214524926879081553      # 0x2fa2548ce182451
	.quad	-2314189792395798655    # 0xdfe258a51969d781
	.quad	171619941503265242      # 0x261b76d71ace9da
	.quad	-7392052482575188172    # 0x996a276e8f0fbf34
	.quad	274591906405224388      # 0x3cf8be24f7b0fc4
	.quad	-2224293171318240214    # 0xe121b9253f3fcc2a
	.quad	219673525124179510      # 0x30c6fe83f95a636
	.quad	-5468783351796502494    # 0xb41afa8432997022
	.quad	175738820099343608      # 0x2705986994484f8
	.quad	-1371355733390583345    # 0xecf7f739ea8f19cf
	.quad	281182112158949773      # 0x3e6f5a4286da18d
	.quad	2592264228029443648     # 0x23f99294bba5ae40
	.quad	224945689727159819      # 0x31f2ae9b9f14e0b
	.quad	5763160197165465241     # 0x4ffadbaa2fb7be99
	.quad	179956551781727855      # 0x27f5587c7f43e6f
	.quad	9221056315464744386     # 0x7ff7c5dd1925fdc2
	.quad	287930482850764568      # 0x3feef3fa6539718
	.quad	-3691201391853935461    # 0xccc637e4141e649b
	.quad	230344386280611654      # 0x33258ffb842df46
	.quad	-2952961113483148369    # 0xd704f983434b83af
	.quad	184275509024489323      # 0x28ead9960357f6b
	.quad	1326979923955391628     # 0x126a6135cf6f9c8c
	.quad	147420407219591459      # 0x20bbe144cf79923
	.quad	-8944878565897104364    # 0x83dd685618b29414
	.quad	235872651551346334      # 0x345fced47f28e9e
	.quad	-7155902852717683491    # 0x9cb12044e08edcdd
	.quad	188698121241077067      # 0x29e63f1065ba54b
	.quad	1653975347309673853     # 0x16f419d0b3a57d7d
	.quad	150958496992861654      # 0x2184ff405161dd6
	.quad	-8421685888530252805    # 0x8b20294dec3bfbfb
	.quad	241533595188578646      # 0x35a19866e89c956
	.quad	4330697733401528726     # 0x3c19baa4bcfcc996
	.quad	193226876150862917      # 0x2ae7ad1f207d445
	.quad	-3914139442762597665    # 0xc9ae2eea30ca3adf
	.quad	154581500920690333      # 0x2252f0e5b39769d
	.quad	1116074521063664381     # 0xf7d17dd1add2afd
	.quad	247330401473104534      # 0x36eb1b091f58a96
	.quad	4582208431592841828     # 0x3f97464a7be42264
	.quad	197864321178483627      # 0x2bef48d41913bab
	.quad	-3712930884209547184    # 0xcc790508631ce850
	.quad	158291456942786901      # 0x2325d3dce0dc955
	.quad	-2251340599993365171    # 0xe0c1a1a704fb0d4d
	.quad	253266331108459042      # 0x383c862e3494222
	.quad	5577625149489128510     # 0x4d67b4859d95a43e
	.quad	202613064886767234      # 0x2cfd3824f6dce82
	.quad	8151448934333213131     # 0x711fc39e17aae9cb
	.quad	162090451909413787      # 0x23fdc683f8b0b9b
	.quad	-1715076964034500283    # 0xe832d2968c44a945
	.quad	259344723055062059      # 0x39960a6cc11ac2b
	.quad	-1372061571227600226    # 0xecf575453d03ba9e
	.quad	207475778444049647      # 0x2e11a1f09a7bcef
	.quad	6281048372501740465     # 0x572ac4376402fbb1
	.quad	165980622755239718      # 0x24dae7f3aec9726
	.quad	6360328581260874421     # 0x58446d256cd192b5
	.quad	265568996408383549      # 0x3af7d985e47583d
	.quad	8777611679750609860     # 0x79d0575123dadbc4
	.quad	212455197126706839      # 0x2f2cae04b6c4697
	.quad	-7735305915167153405    # 0x94a6ac40e97be303
	.quad	169964157701365471      # 0x25bd5803c569edf
	.quad	-8687140649525535124    # 0x8771139b0f2c9e6c
	.quad	271942652322184754      # 0x3c62266c6f0fe32
	.quad	-6949712519620428099    # 0x9f8da948d8f07ebd
	.quad	217554121857747803      # 0x304e85238c0cb5b
	.quad	-1870421200954432156    # 0xe60aedd3e0c06564
	.quad	174043297486198242      # 0x26a5374fa33d5e2
	.quad	-6682022736269001774    # 0xa344afb9679a3bd2
	.quad	278469275977917188      # 0x3dd5254c3862304
	.quad	-1656269374273291096    # 0xe903bfc78614fca8
	.quad	222775420782333750      # 0x31775109c6b4f36
	.quad	-5014364314160543200    # 0xba6966393810ca20
	.quad	178220336625867000      # 0x2792a73b055d8f8
	.quad	3045063541568861850     # 0x2a423d2859b4769a
	.quad	285152538601387201      # 0x3f510b91a22f4c1
	.quad	-1253297981486820843    # 0xee9b642047c39215
	.quad	228122030881109760      # 0x32a73c7481bf700
	.quad	-4691987199931366998    # 0xbee2b680396941aa
	.quad	182497624704887808      # 0x2885c9f6ce32c00
	.quad	-64240945203183275      # 0xff1bc53361210155
	.quad	145998099763910246      # 0x206b07f8a4f5666
	.quad	3586563302416817083     # 0x31c6085235019bbb
	.quad	233596959622256395      # 0x33de73276e5570b
	.quad	2869250641933453667     # 0x27d1a041c4014963
	.quad	186877567697805116      # 0x297ec285f1ddf3c
	.quad	-1393948301195147390    # 0xeca7b367d0010782
	.quad	149502054158244092      # 0x21323537f4b18fc
	.quad	-5919666096654146147    # 0xadd91f0c8001a59d
	.quad	239203286653190548      # 0x351d21f3211c194
	.quad	-1046384062581406594    # 0xf17a7f3d3334847e
	.quad	191362629322552438      # 0x2a7db4c280e3476
	.quad	2852241564676785048     # 0x279532975c2a0398
	.quad	153090103458041951      # 0x21fe2a3533e905f
	.quad	-2815111126000964570    # 0xd8eeb75893766c26
	.quad	244944165532867121      # 0x366376bb8641a31
	.quad	8815957543424959314     # 0x7a5892ad42c52352
	.quad	195955332426293697      # 0x2b82c562d1ce1c1
	.quad	-325931594743853195     # 0xfb7a0ef102374f75
	.quad	156764265941034957      # 0x22cf044f0e3e7cd
	.quad	-4210839366332075436    # 0xc59017e8038bb254
	.quad	250822825505655932      # 0x37b1a07e7d30c7c
	.quad	4010026136418160298     # 0x37a67986693c8eaa
	.quad	200658260404524746      # 0x2c8e19feca8d6ca
	.quad	-481327905607382085     # 0xf951fad1edca0bbb
	.quad	160526608323619796      # 0x23a4e198a20abd4
	.quad	2919224165770098987     # 0x28832ae97c76792b
	.quad	256842573317791675      # 0x3907cf5a9cddfbb
	.quad	2335379332616079190     # 0x2068ef21305ec756
	.quad	205474058654233340      # 0x2d9fd9154a4b2fc
	.quad	1868303466092863352     # 0x19ed8c1a8d189f78
	.quad	164379246923386672      # 0x247fe0ddd508f30
	.quad	6678634360490491686     # 0x5caf4690e1c0ff26
	.quad	263006795077418675      # 0x3a66349621a7eb3
	.quad	5342907488392393349     # 0x4a25d20d81673285
	.quad	210405436061934940      # 0x2eb82a11b48655c
	.quad	4274325990713914679     # 0x3b5174d79ab8f537
	.quad	168324348849547952      # 0x256021a7c39eab0
	.quad	-7918473673825377807    # 0x921bee25c45b21f1
	.quad	269318958159276723      # 0x3bcd02a605caab3
	.quad	-2645430124318391922    # 0xdb498b5169e2818e
	.quad	215455166527421378      # 0x2fd735519e3bbc2
	.quad	1573004715287196786     # 0x15d46f7454b53472
	.quad	172364133221937103      # 0x2645c4414b62fcf
	.quad	-1172541270282395466    # 0xefba4bed545520b6
	.quad	275782613155099364      # 0x3d3c6d35456b2e4
	.quad	-938033016225916373     # 0xf2fb6ff110441a2b
	.quad	220626090524079491      # 0x30fd242a9def583
	.quad	-8129124042464553745    # 0x8f2f8cc0d9d014ef
	.quad	176500872419263593      # 0x2730e9bbb18c469
	.quad	-5627900838459465345    # 0xb1e5ae015c80217f
	.quad	282401395870821749      # 0x3eb4a92c4f46d75
	.quad	-4502320670767572276    # 0xc1848b344a001acc
	.quad	225921116696657399      # 0x322a20f03f6bdf7
	.quad	-3601856536614057821    # 0xce03a2903b3348a3
	.quad	180736893357325919      # 0x2821b3f365efe5f
	.quad	-2881485229291246257    # 0xd802e873628f6d4f
	.quad	144589514685860735      # 0x201af65c518cb7f
	.quad	6457670077359736959     # 0x599e40b89db2487f
	.quad	231343223497377177      # 0x335e56fa1c14599
	.quad	-2212561567596031079    # 0xe14b66fa17c1d399
	.quad	185074578797901741      # 0x29184594e3437ad
	.quad	-9148746883560645510    # 0x81091f2e7967dc7a
	.quad	148059663038321393      # 0x20e037aa4f692f1
	.quad	-7259297384213212170    # 0x9b41cb7d8f0c93f6
	.quad	236895460861314229      # 0x3499f2aa18a84b5
	.quad	-5807437907370569736    # 0xaf67d5fe0c0a0ff8
	.quad	189516368689051383      # 0x2a14c221ad536f7
	.quad	-956601511154545465     # 0xf2b977fe70080cc7
	.quad	151613094951241106      # 0x21aa34e7bddc592
	.quad	2158786396894637579     # 0x1df58cca4cd9ae0b
	.quad	242580951921985771      # 0x35dd2172c9608eb
	.quad	-1962319697226200260    # 0xe4c470a1d7148b3c
	.quad	194064761537588616      # 0x2b174df56de6d88
	.quad	-8948553387264780854    # 0x83d05a1b1276d5ca
	.quad	155251809230070893      # 0x22790b2abe5246d
	.quad	-6938987790139828721    # 0x9fb3c35e83f1560f
	.quad	248402894768113429      # 0x372811ddfd50715
	.quad	-5551190232111862977    # 0xb2f635e5365aab3f
	.quad	198722315814490743      # 0x2c200e4b310d277
	.quad	-751603370947580058     # 0xf591c4b75eaeef66
	.quad	158977852651592594      # 0x234cd83c273db92
	.quad	-1202565393516128093    # 0xef4fa125644b18a3
	.quad	254364564242548151      # 0x387af39371fc5b7
	.quad	-8340749944296723121    # 0x8c3fb41de9d5ad4f
	.quad	203491651394038521      # 0x2d2f2942c196af9
	.quad	4395446488788352473     # 0x3cffc34b2177bdd9
	.quad	162793321115230817      # 0x2425ba9bce12261
	.quad	-7724680876906277336    # 0x94cc6bab68bf9628
	.quad	260469313784369307      # 0x39d5f75fb01d09b
	.quad	1198952927958798777     # 0x10a38955ed6611b9
	.quad	208375451027495446      # 0x2e44c5e6267da16
	.quad	-2730186472374871301    # 0xda1c6dde5784dafb
	.quad	166700360821996356      # 0x2503d184eb97b44
	.quad	-678949541057883759     # 0xf693e2fd58d49191
	.quad	266720577315194170      # 0x3b394f3b128c53a
	.quad	-4232508447588217330    # 0xc5431bfde0aa0e0e
	.quad	213376461852155336      # 0x2f610c2f4209dc8
	.quad	7682039686155157106     # 0x6a9c1664b3bb3e72
	.quad	170701169481724269      # 0x25e73cf29b3b16d
	.quad	1223217053622520399     # 0x10f9bd6dec5eca4f
	.quad	273121871170758831      # 0x3ca52e50f85e8af
	.quad	-2710775171843894004    # 0xda616457f04bd50c
	.quad	218497496936607064      # 0x3084250d937ed58
	.quad	-2168620137475115203    # 0xe1e783798d09773d
	.quad	174797997549285651      # 0x26d01da475ff113
	.quad	219556594781725998      # 0x30c058f480f252e
	.quad	279676796078857043      # 0x3e19c9072331b53
	.quad	7554342905309201445     # 0x68d66ad906728425
	.quad	223741436863085634      # 0x31ae3a6c1c27c42
	.quad	-8713920934720280137    # 0x8711ef14052869b7
	.quad	178993149490468507      # 0x27be952349b969b
	.quad	815121763415193074      # 0xb4fe4ecd50d75f2
	.quad	286389039184749612      # 0x3f97550542c242c
	.quad	-6726600218751666187    # 0xa2a650bd773df7f5
	.quad	229111231347799689      # 0x32df7737689b689
	.quad	-5381280175001332950    # 0xb551da312c31932a
	.quad	183288985078239751      # 0x28b2c5c5ed49207
	.quad	6763022304224664610     # 0x5ddb14f4235adc22
	.quad	146631188062591801      # 0x208f049e576db39
	.quad	3442138057275642729     # 0x2fc4ee536bc49369
	.quad	234609900900146882      # 0x34180763bf15ec2
	.quad	-4624987183663306463    # 0xbfd0bea92303a921
	.quad	187687920720117505      # 0x29acd2b63277f01
	.quad	-7389338561672555494    # 0x9973cbba8269541a
	.quad	150150336576094004      # 0x21570ef8285ff34
	.quad	6623802375033462826     # 0x5bec792a6a42202a
	.quad	240240538521750407      # 0x355817f373ccb87
	.quad	-2079655729457050385    # 0xe3239421ee9b4cef
	.quad	192192430817400325      # 0x2aacdff5f63d605
	.quad	-5353073398307550631    # 0xb5b6101b25490a59
	.quad	153753944653920260      # 0x2223e65e5e97804
	.quad	2503129006933649959     # 0x22bce691d541aa27
	.quad	246006311446272417      # 0x369fd6fd64259a1
	.quad	-5376194423936900679    # 0xb563eba7ddce21b9
	.quad	196805049157017933      # 0x2bb31264501e14d
	.quad	-611606724407610220     # 0xf78322ecb171b494
	.quad	157444039325614346      # 0x22f5a850401810a
	.quad	2710778055689733971     # 0x259e9e47824f8753
	.quad	251910462920982955      # 0x37ef73b399c01ab
	.quad	2168622444551787177     # 0x1e187e9f9b72d2a9
	.quad	201528370336786364      # 0x2cbf8fc2e1667bc
	.quad	5424246770383340065     # 0x4b46cbb2e2c24221
	.quad	161222696269429091      # 0x23cc73024deb963
	.quad	1300097203129523457     # 0x120adf849e039d01
	.quad	257956314031086546      # 0x39471e6a1645bd2
	.quad	-2649271052238291558    # 0xdb3be603b19c7d9a
	.quad	206365051224869236      # 0x2dd27ebb4504974
	.quad	8948629602435097724     # 0x7c2feb3627b0647c
	.quad	165092040979895389      # 0x24a865629d9d45d
	.quad	3249760919670425388     # 0x2d197856a5e7072c
	.quad	264147265567832623      # 0x3aa7089dc8fba2f
	.quad	-8468237708489390659    # 0x8a7ac6abb7ec05bd
	.quad	211317812454266098      # 0x2eec06e4a0c94f2
	.quad	-3085241352049602204    # 0xd52f05562cbcd164
	.quad	169054249963412878      # 0x25899f1d4d6dd8e
	.quad	2442311466204457120     # 0x21e4d556adfae8a0
	.quad	270486799941460606      # 0x3c0f64fbaf1627e
	.quad	-1735499641778344627    # 0xe7ea444557fbed4d
	.quad	216389439953168484      # 0x300c50c958de864
	.quad	-1388399713422675702    # 0xecbb69d1132ff10a
	.quad	173111551962534787      # 0x267040a113e5383
	.quad	-5910788356218191446    # 0xadf8a94e851981aa
	.quad	276978483140055660      # 0x3d8067681fd526c
	.quad	-8417979499716463480    # 0x8b2d543ed0e13488
	.quad	221582786512044528      # 0x313385ece6441f0
	.quad	-3045034785031260461    # 0xd5bddcff0d80f6d3
	.quad	177266229209635622      # 0x275c6b23eb69b26
	.quad	-8561404470791927061    # 0x892fc7fe7c018aeb
	.quad	283625966735416996      # 0x3efa45064575ea4
	.quad	4218922867592189321     # 0x3a8c9ffec99ad589
	.quad	226900773388333597      # 0x3261d0d1d12b21d
	.quad	-4003559335410069189    # 0xc8707fff07af113b
	.quad	181520618710666877      # 0x284e40a7da88e7d
	.quad	4175850161155765295     # 0x39f39998d2f2742f
	.quad	145216494968533502      # 0x203e9a1fe2071fe
	.quad	-8076035001118416821    # 0x8fec28f484b7204b
	.quad	232346391949653603      # 0x33975cffd00b663
	.quad	-2771479186152823134    # 0xd989ba5d36f8e6a2
	.quad	185877113559722882      # 0x2945e3ffd9a2b82
	.quad	5161514280561562140     # 0x47a161e42bfa521c
	.quad	148701690847778306      # 0x2104b66647b5602
	.quad	879725219414678777      # 0xc35696d132a1cf9
	.quad	237922705356445290      # 0x34d4570a0c5566a
	.quad	703780175531743021      # 0x9c454574288172d
	.quad	190338164285156232      # 0x2a4378d4d6aab88
	.quad	-6815673489058426229    # 0xa169dd129ba0128b
	.quad	152270531428124985      # 0x21cf93dd7888939
	.quad	162968861732249003      # 0x242fb50f9001dab
	.quad	243632850284999977      # 0x3618ec958da7529
	.quad	-7248322540098021444    # 0x9b68c90d940017bc
	.quad	194906280227999981      # 0x2b4723aad7b90ed
	.quad	5269388412147313814     # 0x4920a0d7a999ac96
	.quad	155925024182399985      # 0x229f4fbbdfc73f1
	.quad	8431021459435702103     # 0x750101590f5c4757
	.quad	249480038691839976      # 0x37654c5fcc71fe8
	.quad	3055468352806651359     # 0x2a6734473f7d05df
	.quad	199584030953471981      # 0x2c5109e63d27fed
	.quad	-1244974132496589236    # 0xeeb8f69f65fd9e4c
	.quad	159667224762777584      # 0x237407eb641fff0
	.quad	-1991958611994542778    # 0xe45b24323cc8fd46
	.quad	255467559620444135      # 0x38b9a6456cfffe7
	.quad	-5282915704337544545    # 0xb6af502830a0ca9f
	.quad	204374047696355308      # 0x2d6151d123fffec
	.quad	-536983748728125313     # 0xf88c402026e7087f
	.quad	163499238157084246      # 0x244ddb0db666656
	.quad	2830174816776909822     # 0x2746cd003e3e73fe
	.quad	261598781051334795      # 0x3a162b4923d708b
	.quad	2264139853421527858     # 0x1f6bd73364fec332
	.quad	209279024841067836      # 0x2e7822a0e978d3c
	.quad	-1878036932004688037    # 0xe5efdf5c50cbcf5b
	.quad	167423219872854268      # 0x252ce880bac70fc
	.quad	4373838538276319787     # 0x3cb2fefa1adfb22b
	.quad	267877151796566830      # 0x3b7b0d9ac471b2e
	.quad	3499070830621055830     # 0x308f3261af195b56
	.quad	214301721437253464      # 0x2f95a47bd05af58
	.quad	6488605479238754987     # 0x5a0c284e25ade2ab
	.quad	171441377149802771      # 0x261150630d15913
	.quad	3003071137298187333     # 0x29ad0d49d5e30445
	.quad	274306203439684434      # 0x3ce8809e7b55b52
	.quad	6091805724580460189     # 0x548a7107de4f369d
	.quad	219444962751747547      # 0x30ba007ec9115db
	.quad	-2505253049819452495    # 0xdd3b8d9fe50c2bb1
	.quad	175555970201398037      # 0x26fb3398a0dab15
	.quad	-7697753694453034315    # 0x952c15cca1ad12b5
	.quad	280889552322236860      # 0x3e5eb8f434911bc
	.quad	8599192303405213841     # 0x775677d6e7bda891
	.quad	224711641857789488      # 0x31e560c35d40e30
	.quad	-4188692601501559897    # 0xc5dec645863153a7
	.quad	179769313486231590      # 0x27eab3cf7dcd826

	.section	.rdata,"dr",discard,"?arr@?1??DOUBLE_POW5_SPLIT@ryu@detail@json@boost@@YAAEAY1BEG@1$$CB_KXZ@4QAY01$$CB_KA"
	.globl	"?arr@?1??DOUBLE_POW5_SPLIT@ryu@detail@json@boost@@YAAEAY1BEG@1$$CB_KXZ@4QAY01$$CB_KA" # @"?arr@?1??DOUBLE_POW5_SPLIT@ryu@detail@json@boost@@YAAEAY1BEG@1$$CB_KXZ@4QAY01$$CB_KA"
	.p2align	4
"?arr@?1??DOUBLE_POW5_SPLIT@ryu@detail@json@boost@@YAAEAY1BEG@1$$CB_KXZ@4QAY01$$CB_KA":
	.quad	0                       # 0x0
	.quad	72057594037927936       # 0x100000000000000
	.quad	0                       # 0x0
	.quad	90071992547409920       # 0x140000000000000
	.quad	0                       # 0x0
	.quad	112589990684262400      # 0x190000000000000
	.quad	0                       # 0x0
	.quad	140737488355328000      # 0x1f4000000000000
	.quad	0                       # 0x0
	.quad	87960930222080000       # 0x138800000000000
	.quad	0                       # 0x0
	.quad	109951162777600000      # 0x186a00000000000
	.quad	0                       # 0x0
	.quad	137438953472000000      # 0x1e8480000000000
	.quad	0                       # 0x0
	.quad	85899345920000000       # 0x1312d0000000000
	.quad	0                       # 0x0
	.quad	107374182400000000      # 0x17d784000000000
	.quad	0                       # 0x0
	.quad	134217728000000000      # 0x1dcd65000000000
	.quad	0                       # 0x0
	.quad	83886080000000000       # 0x12a05f200000000
	.quad	0                       # 0x0
	.quad	104857600000000000      # 0x174876e80000000
	.quad	0                       # 0x0
	.quad	131072000000000000      # 0x1d1a94a20000000
	.quad	0                       # 0x0
	.quad	81920000000000000       # 0x12309ce54000000
	.quad	0                       # 0x0
	.quad	102400000000000000      # 0x16bcc41e9000000
	.quad	0                       # 0x0
	.quad	128000000000000000      # 0x1c6bf5263400000
	.quad	0                       # 0x0
	.quad	80000000000000000       # 0x11c37937e080000
	.quad	0                       # 0x0
	.quad	100000000000000000      # 0x16345785d8a0000
	.quad	0                       # 0x0
	.quad	125000000000000000      # 0x1bc16d674ec8000
	.quad	0                       # 0x0
	.quad	78125000000000000       # 0x1158e460913d000
	.quad	0                       # 0x0
	.quad	97656250000000000       # 0x15af1d78b58c400
	.quad	0                       # 0x0
	.quad	122070312500000000      # 0x1b1ae4d6e2ef500
	.quad	0                       # 0x0
	.quad	76293945312500000       # 0x10f0cf064dd5920
	.quad	0                       # 0x0
	.quad	95367431640625000       # 0x152d02c7e14af68
	.quad	0                       # 0x0
	.quad	119209289550781250      # 0x1a784379d99db42
	.quad	4611686018427387904     # 0x4000000000000000
	.quad	74505805969238281       # 0x108b2a2c2802909
	.quad	-8070450532247928832    # 0x9000000000000000
	.quad	93132257461547851       # 0x14adf4b7320334b
	.quad	8358680908399640576     # 0x7400000000000000
	.quad	116415321826934814      # 0x19d971e4fe8401e
	.quad	612489549322387456      # 0x880000000000000
	.quad	72759576141834259       # 0x1027e72f1f12813
	.quad	-3846074081774403584    # 0xcaa0000000000000
	.quad	90949470177292823       # 0x1431e0fae6d7217
	.quad	-4807592602218004480    # 0xbd48000000000000
	.quad	113686837721616029      # 0x193e5939a08ce9d
	.quad	3213881284082270208     # 0x2c9a000000000000
	.quad	142108547152020037      # 0x1f8def8808b0245
	.quad	4314518811765112832     # 0x3be0400000000000
	.quad	88817841970012523       # 0x13b8b5b5056e16b
	.quad	781462496279003136      # 0xad8500000000000
	.quad	111022302462515654      # 0x18a6e32246c99c6
	.quad	-8246543916506021888    # 0x8d8e640000000000
	.quad	138777878078144567      # 0x1ed09bead87c037
	.quad	-5154089947816263680    # 0xb878fe8000000000
	.quad	86736173798840354       # 0x13426172c74d822
	.quad	7392445620511834112     # 0x66973e2000000000
	.quad	108420217248550443      # 0x1812f9cf7920e2b
	.quad	4628871007212404736     # 0x403d0da800000000
	.quad	135525271560688054      # 0x1e17b84357691b6
	.quad	-1718641638919634944    # 0xe826288900000000
	.quad	84703294725430033       # 0x12ced32a16a1b11
	.quad	7075069988205232128     # 0x622fb2ab40000000
	.quad	105879118406787542      # 0x178287f49c4a1d6
	.quad	-379534551598235648     # 0xfabb9f5610000000
	.quad	132348898008484427      # 0x1d6329f1c35ca4b
	.quad	8986162942105878528     # 0x7cb54395ca000000
	.quad	82718061255302767       # 0x125dfa371a19e6f
	.quad	6621017659204960256     # 0x5be2947b3c800000
	.quad	103397576569128459      # 0x16f578c4e0a060b
	.quad	3664586055578812416     # 0x32db399a0ba00000
	.quad	129246970711410574      # 0x1cb2d6f618c878e
	.quad	-2321319733690630144    # 0xdfc9040047440000
	.quad	80779356694631608       # 0x11efc659cf7d4b8
	.quad	1710036351314100224     # 0x17bb450059150000
	.quad	100974195868289511      # 0x166bb7f0435c9e7
	.quad	-2474140579284762624    # 0xddaa16406f5a4000
	.quad	126217744835361888      # 0x1c06a5ec5433c60
	.quad	-8463866889694058496    # 0x8a8a4de845986800
	.quad	78886090522101180       # 0x118427b3b4a05bc
	.quad	-5968147593690185216    # 0xad2ce16256fe8200
	.quad	98607613152626475       # 0x15e531a0a1c872b
	.quad	-7460184492112731520    # 0x987819baecbe2280
	.quad	123259516440783094      # 0x1b5e7e08ca3a8f6
	.quad	2254913720070624656     # 0x1f4b1014d3f6d590
	.quad	77037197775489434       # 0x111b0ec57e6499a
	.quad	-6404729886766494988    # 0xa71dd41a08f48af4
	.quad	96296497219361792       # 0x1561d276ddfdc00
	.quad	-3394226340030730831    # 0xd0e549208b31adb1
	.quad	120370621524202240      # 0x1aba4714957d300
	.quad	-9038920490160288626    # 0x828f4db456ff0c8e
	.quad	75231638452626400       # 0x10b46c6cdd6e3e0
	.quad	-6686964594272972878    # 0xa33321216cbecfb2
	.quad	94039548065783000       # 0x14e1878814c9cd8
	.quad	-3747019724413828194    # 0xcbffe969c7ee839e
	.quad	117549435082228750      # 0x1a19e96a19fc40e
	.quad	4575641699882439235     # 0x3f7ff1e21cf51243
	.quad	73468396926392969       # 0x105031e2503da89
	.quad	-8115505930429114668    # 0x8f5fee5aa43256d4
	.quad	91835496157991211       # 0x14643e5ae44d12b
	.quad	8302361660673158281     # 0x7337e9f14d3eec89
	.quad	114794370197489014      # 0x197d4df19d60576
	.quad	1154580038986672043     # 0x1005e46da08ea7ab
	.quad	143492962746861268      # 0x1fdca16e04b86d4
	.quad	-8501759512488105781    # 0x8a03aec4845928cb
	.quad	89683101716788292       # 0x13e9e4e4c2f3444
	.quad	-6015513372182744323    # 0xac849a75a56f72fd
	.quad	112103877145985365      # 0x18e45e1df3b0155
	.quad	1703980321626345405     # 0x17a5c1130ecb4fbd
	.quad	140129846432481707      # 0x1f1d75a5709c1ab
	.quad	-1240855308197228074    # 0xeec798abe93f11d6
	.quad	87581154020301066       # 0x13726987666190a
	.quad	-6162755153673922997    # 0xaa797ed6e38ed64b
	.quad	109476442525376333      # 0x184f03e93ff9f4d
	.quad	1519928094762372062     # 0x1517de8c9c728bde
	.quad	136845553156720417      # 0x1e62c4e38ff8721
	.quad	-5967573968414599317    # 0xad2eeb17e1c7976b
	.quad	85528470722950260       # 0x12fdbb0e39fb474
	.quad	-2847781442090861242    # 0xd87aa5ddda397d46
	.quad	106910588403687825      # 0x17bd29d1c87a191
	.quad	5663645234241199255     # 0x4e994f5550c7dc97
	.quad	133638235504609782      # 0x1dac74463a989f6
	.quad	-1071907747026638370    # 0xf11fd195527ce9de
	.quad	83523897190381113       # 0x128bc8abe49f639
	.quad	7883487353071477846     # 0x6d67c5faa71c2456
	.quad	104404871487976392      # 0x172ebad6ddc73c8
	.quad	-8592384882370204308    # 0x88c1b77950e32d6c
	.quad	130506089359970490      # 0x1cfa698c95390ba
	.quad	-7676083560695071645    # 0x957912abd28dfc63
	.quad	81566305849981556       # 0x121c81f7dd43a74
	.quad	-4983418432441451652    # 0xbad75756c7317b7c
	.quad	101957882312476945      # 0x16a3a275d494911
	.quad	2994098996302961243     # 0x298d2d2c78fdda5b
	.quad	127447352890596182      # 0x1c4c8b1349b9b56
	.quad	-2740374145738037127    # 0xd9f83c3bcb9ea879
	.quad	79654595556622613       # 0x11afd6ec0e14115
	.quad	5797904354682229399     # 0x50764b4abe865297
	.quad	99568244445778267       # 0x161bcca7119915b
	.quad	2635694424925398845     # 0x2493de1d6e27e73d
	.quad	124460305557222834      # 0x1ba2bfd0d5ff5b2
	.quad	6258995034005762182     # 0x56dc6ad264d8f086
	.quad	77787690973264271       # 0x1145b7e285bf98f
	.quad	3212057774079814824     # 0x2c938586fe0f2ca8
	.quad	97234613716580339       # 0x159725db272f7f3
	.quad	-596613800827619374     # 0xf7b866e8bd92f7d2
	.quad	121543267145725423      # 0x1afcef51f0fb5ef
	.quad	-372883625517262109     # 0xfad34051767bdae3
	.quad	75964541966078389       # 0x10de1593369d1b5
	.quad	8757267504958198172     # 0x79881065d41ad19c
	.quad	94955677457597987       # 0x15159af80444623
	.quad	6334898362770359811     # 0x57ea147f49218603
	.quad	118694596821997484      # 0x1a5b01b605557ac
	.quad	-5264060560123300927    # 0xb6f24ccf8db4f3c1
	.quad	74184123013748427       # 0x1078e111c3556cb
	.quad	-6580075700154126158    # 0xa4aee003712230b2
	.quad	92730153767185534       # 0x14971956342ac7e
	.quad	5609963430089506015     # 0x4dda98044d6abcdf
	.quad	115912692208981918      # 0x19bcdfabc13579e
	.quad	-1105458874621446645    # 0xf0a89f02b062b60b
	.quad	72445432630613698       # 0x10160bcb58c16c2
	.quad	-5993509611704196210    # 0xacd2c6c35c7b638e
	.quad	90556790788267123       # 0x141b8ebe2ef1c73
	.quad	-7491887014630245263    # 0x98077874339a3c71
	.quad	113195988485333904      # 0x1922726dbaae390
	.quad	-4753172749860418674    # 0xbe0956914080cb8e
	.quad	141494985606667380      # 0x1f6b0f092959c74
	.quad	-664889959449067720     # 0xf6c5d61ac8507f38
	.quad	88434366004167112       # 0x13a2e965b9d81c8
	.quad	3780573569116053255     # 0x34774ba17a649f07
	.quad	110542957505208891      # 0x188ba3bf284e23b
	.quad	114030942967678664      # 0x1951e89d8fdc6c8
	.quad	138178696881511114      # 0x1eae8caef261aca
	.quad	4682955357782187069     # 0x40fd3316279e9c3d
	.quad	86361685550944446       # 0x132d17ed577d0be
	.quad	-3369677839627041972    # 0xd13c7fdbb186434c
	.quad	107952106938680557      # 0x17f85de8ad5c4ed
	.quad	5011274737320973344     # 0x458b9fd29de7d420
	.quad	134940133673350697      # 0x1df67562d8b3629
	.quad	-3785482316815473516    # 0xcb7743e3a2b0e494
	.quad	84337583545844185       # 0x12ba095dc7701d9
	.quad	4491519140835433913     # 0x3e5514dc8b5d1db9
	.quad	105421979432305232      # 0x17688bb5394c250
	.quad	5614398926044292391     # 0x4dea5a13ae346527
	.quad	131777474290381540      # 0x1d42aea2879f2e4
	.quad	-5714372708077093064    # 0xb0b2784c4ce0bf38
	.quad	82360921431488462       # 0x1249ad2594c37ce
	.quad	6692092170185797382     # 0x5cdf165f6018ef06
	.quad	102951151789360578      # 0x16dc186ef9f45c2
	.quad	-858256824122529080     # 0xf416dbf7381f2ac8
	.quad	128688939736700722      # 0x1c931e8ab871732
	.quad	-2842253524290274627    # 0xd88e497a83137abd
	.quad	80430587335437951       # 0x11dbf316b346e7f
	.quad	-3552816905362843284    # 0xceb1dbd923d8596c
	.quad	100538234169297439      # 0x1652efdc6018a1f
	.quad	-4441021131703554105    # 0xc25e52cf6cce6fc7
	.quad	125672792711621799      # 0x1be7abd3781eca7
	.quad	-2775638207314721316    # 0xd97af3c1a40105dc
	.quad	78545495444763624       # 0x1170cb642b133e8
	.quad	1142138259283986260     # 0xfd9b0b20d014754
	.quad	98181869305954531       # 0x15ccfe3d35d80e3
	.quad	-3184013194322405079    # 0xd3d01cde90419929
	.quad	122727336632443163      # 0x1b403dcc834e11b
	.quad	7233363790403272633     # 0x6462120b1a28ffb9
	.quad	76704585395276977       # 0x1108269fd210cb1
	.quad	-4793353317278072920    # 0xbd7a968de0b33fa8
	.quad	95880731744096221       # 0x154a3047c694fdd
	.quad	3231680390257184658     # 0x2cd93c3158e00f92
	.quad	119850914680120277      # 0x1a9cbc59b83a3d5
	.quad	4325643253124434363     # 0x3c07c59ed78c09bb
	.quad	74906821675075173       # 0x10a1f5b81324665
	.quad	-8428003988876620758    # 0x8b09b7068d6f0c2a
	.quad	93633527093843966       # 0x14ca732617ed7fe
	.quad	3300053069186387764     # 0x2dcc24c830cacf34
	.quad	117041908867304958      # 0x19fd0fef9de8dfe
	.quad	-2549152850185895552    # 0xdc9f96fd1e7ec180
	.quad	73151193042065598       # 0x103e29f5c2b18be
	.quad	-7798127081159757343    # 0x93c77cbc661e71e1
	.quad	91438991302581998       # 0x144db473335deee
	.quad	4087399203832467033     # 0x38b95beb7fa60e59
	.quad	114298739128227498      # 0x1961219000356aa
	.quad	-4114123032064192017    # 0xc6e7b2e65f8f91ef
	.quad	142873423910284372      # 0x1fb969f40042c54
	.quad	-265483885826426059     # 0xfc50cfcffbb9bb35
	.quad	89295889943927732       # 0x13d3e2388029bb4
	.quad	4279831161144355331     # 0x3b6503c3faa82a03
	.quad	111619862429909666      # 0x18c8dac6a0342a2
	.quad	-3873583085424331644    # 0xca3e44b4f9523484
	.quad	139524828037387082      # 0x1efb1178484134a
	.quad	-4726832437603901230    # 0xbe66eaf11bd360d2
	.quad	87203017523366926       # 0x135ceaeb2d28c0e
	.quad	7926517508277287175     # 0x6e00a5ad62c83907
	.quad	109003771904208658      # 0x183425a5f872f12
	.quad	684774848491833161      # 0x980cf18bb7a4749
	.quad	136254714880260823      # 0x1e412f0f768fad7
	.quad	7345513307948477581     # 0x65f0816f752c6c8d
	.quad	85159196800163014       # 0x12e8bd69aa19cc6
	.quad	-41480401919178831      # 0xff6ca1cb527787b1
	.quad	106448996000203767      # 0x17a2ecc414a03f7
	.quad	-51850502398973539      # 0xff47ca3e2715699d
	.quad	133061245000254709      # 0x1d8ba7f519c84f5
	.quad	-4644092582426746366    # 0xbf8cde66d86d6202
	.quad	83163278125159193       # 0x127748f9301d319
	.quad	3418256308821342851     # 0x2f7016008e88ba83
	.quad	103954097656448992      # 0x17151b377c247e0
	.quad	4272820386026678563     # 0x3b4c1b80b22ae923
	.quad	129942622070561240      # 0x1cda62055b2d9d8
	.quad	2670512741266674102     # 0x250f91306f5ad1b6
	.quad	81214138794100775       # 0x12087d4358fc827
	.quad	-1273545091844045277    # 0xee53757c8b318623
	.quad	101517673492625968      # 0x168a9c942f3ba30
	.quad	3019754653622331308     # 0x29e852dbadfde7ac
	.quad	126897091865782461      # 0x1c2d43b93b0a8bd
	.quad	4193189667727651020     # 0x3a3133c94cbeb0cc
	.quad	79310682416114038       # 0x119c4a53c4e6976
	.quad	-3981884952195212033    # 0xc8bd80bb9fee5cff
	.quad	99138353020142547       # 0x16035ce8b6203d3
	.quad	-4977356190244015042    # 0xbaece0ea87e9f43e
	.quad	123922941275178184      # 0x1b843422e3a84c8
	.quad	8418367427165960359     # 0x74d40c9294f238a7
	.quad	77451838296986365       # 0x1132a095ce492fd
	.quad	-3312098771324713263    # 0xd2090fb73a2ec6d1
	.quad	96814797871232956       # 0x157f48bb41db7bc
	.quad	471562554271496325      # 0x68b53a508ba7885
	.quad	121018497339041196      # 0x1adf1aea12525ac
	.quad	-8928645440435090605    # 0x8417144725748b53
	.quad	75636560836900747       # 0x10cb70d24b7378b
	.quad	7285937273165688360     # 0x651cd958eed1ae28
	.quad	94545701046125934       # 0x14fe4d06de5056e
	.quad	-115950445397665358     # 0xfe640faf2a8619b2
	.quad	118182126307657417      # 0x1a3de04895e46c9
	.quad	4539216990053847055     # 0x3efe89cd7a93d00f
	.quad	73863828942285886       # 0x1066ac2d5daec3e
	.quad	-3549350799287466989    # 0xcebe2c40d938c413
	.quad	92329786177857357       # 0x14805738b51a74d
	.quad	4786683537745442072     # 0x426db7510f86f518
	.quad	115412232722321697      # 0x19a06d06e261121
	.quad	-3925851816550180561    # 0xc9849292a9b4592f
	.quad	72132645451451060       # 0x100444244d7cab4
	.quad	-295628752260337798     # 0xfbe5b73754216f7a
	.quad	90165806814313825       # 0x1405552d60dbd61
	.quad	8853836096529353561     # 0x7adf25052929cb59
	.quad	112707258517892282      # 0x1906aa78b912cba
	.quad	1843923083806916143     # 0x1996ee4673743e2f
	.quad	140884073147365353      # 0x1f485516e7577e9
	.quad	-5765077100261759267    # 0xaffe54ec0828a6dd
	.quad	88052545717103345       # 0x138d352e5096af1
	.quad	2017025661527576725     # 0x1bfdea270a32d095
	.quad	110065682146379182      # 0x18708279e4bc5ae
	.quad	-6702089959945304902    # 0xa2fd64b0ccbf84ba
	.quad	137582102682973977      # 0x1e8ca3185deb719
	.quad	422879793461572340      # 0x5de5eee7ff7b2f4
	.quad	85988814176858736       # 0x1317e5ef3ab3270
	.quad	528599741826965425      # 0x755f6aa1ff59fb1
	.quad	107486017721073420      # 0x17dddf6b095ff0c
	.quad	660749677283706782      # 0x92b7454a7f3079e
	.quad	134357522151341775      # 0x1dd55745cbb7ecf
	.quad	7330497575943398595     # 0x65bb28b4e8f7e4c3
	.quad	83973451344588609       # 0x12a5568b9f52f41
	.quad	-4671936085352915469    # 0xbf29f2e22335ddf3
	.quad	104966814180735761      # 0x174eac2e8727b11
	.quad	3383451930163631472     # 0x2ef46f9aac035570
	.quad	131208517725919702      # 0x1d22573a28f19d6
	.quad	-2497028562075118234    # 0xdd58c5c0ab821566
	.quad	82005323578699813       # 0x123576845997025
	.quad	6102086334260878016     # 0x54aef730d6629ac0
	.quad	102506654473374767      # 0x16c2d4256ffcc2f
	.quad	3015921899398709616     # 0x29dab4fd0bfb4170
	.quad	128133318091718459      # 0x1c73892ecbfbf3b
	.quad	-420891822089500442     # 0xfa28b11e277d08e6
	.quad	80083323807324036       # 0x11c835bd3f7d784
	.quad	4085571240815512351     # 0x38b2dd65b15c4b1f
	.quad	100104154759155046      # 0x163a432c8f5cd66
	.quad	-4116407985835385369    # 0xc6df94bf1db35de7
	.quad	125130193448943807      # 0x1bc8d3f7b3340bf
	.quad	-2572754991147115856    # 0xdc4bbcf772901ab0
	.quad	78206370905589879       # 0x115d847ad000877
	.quad	-3215943738933894820    # 0xd35eac354f34215c
	.quad	97757963631987349       # 0x15b4e5998400a95
	.quad	5203442363187407284     # 0x48365742a30129b4
	.quad	122197454539984187      # 0x1b221effe500d3b
	.quad	946308467778435600      # 0xd21f689a5e0ba10
	.quad	76373409087490117       # 0x10f5535fef20845
	.quad	5794571603150432404     # 0x506a742c0f58e894
	.quad	95466761359362646       # 0x1532a837eae8a56
	.quad	-1980157532916735303    # 0xe4851137132f22b9
	.quad	119333451699203307      # 0x1a7f5245e5a2ceb
	.quad	7985773578781816244     # 0x6ed32ac26bfd75b4
	.quad	74583407312002067       # 0x108f936baf85c13
	.quad	5370530955049882401     # 0x4a87f57306fcd321
	.quad	93229259140002584       # 0x14b378469b67318
	.quad	6713163693812353001     # 0x5d29f2cfc8bc07e9
	.quad	116536573925003230      # 0x19e056584240fde
	.quad	-415958709794667279     # 0xfa3a37c1dd7584f1
	.quad	72835358703127018       # 0x102c35f729689ea
	.quad	-5131634405670722002    # 0xb8c8c5b254d2e62e
	.quad	91044198378908773       # 0x14374374f3c2c65
	.quad	2808829029766373305     # 0x26faf71eea079fb9
	.quad	113805247973635967      # 0x1945145230b377f
	.quad	-1100649731219421272    # 0xf0b9b4e6a48987a8
	.quad	142256559967044958      # 0x1f965966bce055e
	.quad	6229622945628943561     # 0x5674111026d5f4c9
	.quad	88910349979403099       # 0x13bdf7e0360c35b
	.quad	3175342663608791547     # 0x2c111554308b71fb
	.quad	111137937474253874      # 0x18ad75d8438f432
	.quad	-5254193707343786374    # 0xb7155aa93cae4e7a
	.quad	138922421842817342      # 0x1ed8d34e547313e
	.quad	3633657960551215372     # 0x326d58a9c5ecf10c
	.quad	86826513651760839       # 0x13478410f4c7ec7
	.quad	-69613567738368689      # 0xff08aed437682d4f
	.quad	108533142064701048      # 0x1819651531f9e78
	.quad	4524669058754427043     # 0x3ecada89454238a3
	.quad	135666427580876311      # 0x1e1fbe5a7e78617
	.quad	-8701296884346952858    # 0x873ec895cb496366
	.quad	84791517238047694       # 0x12d3d6f88f0b3ce
	.quad	2958436949848472639     # 0x290e7abb3e1bbc3f
	.quad	105989396547559618      # 0x1788ccb6b2ce0c2
	.quad	-5525325849544185009    # 0xb352196a0da2ab4f
	.quad	132486745684449522      # 0x1d6affe45f818f2
	.quad	-5759171665178809583    # 0xb0134fe24885ab11
	.quad	82804216052780951       # 0x1262dfeebbb0f97
	.quad	-7198964581473511978    # 0x9c1823dadaa715d6
	.quad	103505270065976189      # 0x16fb97ea6a9d37d
	.quad	224666310012885835      # 0x31e2cd19150db4b
	.quad	129381587582470237      # 0x1cba7de5054485d
	.quad	2446259452971747599     # 0x21f2dc02fad2890f
	.quad	80863492239043898       # 0x11f48eaf234ad3a
	.quad	-6165547720640091309    # 0xaa6f9303b9872b53
	.quad	101079365298804872      # 0x1671b25aec1d888
	.quad	-3095248632372726232    # 0xd50b77c4a7e8f628
	.quad	126349206623506090      # 0x1c0e1ef1a724eaa
	.quad	-4240373404446647847    # 0xc5272adae8f199d9
	.quad	78968254139691306       # 0x1188d357087712a
	.quad	8534591299723853903     # 0x7670f591a32e004f
	.quad	98710317674614133       # 0x15eb082cca94d75
	.quad	-3166818930627346333    # 0xd40d32f60bf98063
	.quad	123387897093267666      # 0x1b65ca37fd3a0d2
	.quad	-4285104840855785410    # 0xc4883fd9c77bf03e
	.quad	77117435683292291       # 0x111f9e62fe44483
	.quad	-5356381051069731763    # 0xb5aa4fd0395aec4d
	.quad	96396794604115364       # 0x156785fbbdd55a4
	.quad	-2083790295409776800    # 0xe314e3c447b1a760
	.quad	120495993255144205      # 0x1ac1677aad4ab0d
	.quad	-5914054953058498404    # 0xaded0e5aaccf089c
	.quad	75309995784465128       # 0x10b8e0acac4eae8
	.quad	-2780882672895735101    # 0xd96851f15802cac3
	.quad	94137494730581410       # 0x14e718d7d7625a2
	.quad	-8087789359547056780    # 0x8fc2666dae037d74
	.quad	117671868413226763      # 0x1a20df0dcd3af0b
	.quad	4168503687137865320     # 0x39d980048cc22e68
	.quad	73544917758266727       # 0x10548b68a044d67
	.quad	598943590494943747      # 0x84fe005aff2ba03
	.quad	91931147197833409       # 0x1469ae42c8560c1
	.quad	5360365506546067587     # 0x4a63d8071bef6883
	.quad	114913933997291761      # 0x198419d37a6b8f1
	.quad	-7134601172099579228    # 0x9cfcce08e2eb42a4
	.quad	143642417496614701      # 0x1fe52048590672d
	.quad	-9070811750989624921    # 0x821e00c58dd309a7
	.quad	89776510935384188       # 0x13ef342d37a407c
	.quad	-6726828670309643248    # 0xa2a580f6f147cc10
	.quad	112220638669230235      # 0x18eb0138858d09b
	.quad	-8408535837887054059    # 0x8b4ee134ad99bf15
	.quad	140275798336537794      # 0x1f25c186a6f04c2
	.quad	-7561177907893102739    # 0x97114cc0ec80176d
	.quad	87672373960336121       # 0x137798f428562f9
	.quad	-228100348011602616     # 0xfcd59ff127a01d48
	.quad	109590467450420151      # 0x18557f31326bbb7
	.quad	-285125435014503270     # 0xfc0b07ed7188249a
	.quad	136988084313025189      # 0x1e6adefd7f06aa5
	.quad	-4789889415311452448    # 0xbd86e4f466f516e0
	.quad	85617552695640743       # 0x1302cb5e6f642a7
	.quad	-5987361769139315560    # 0xace89e3180b25c98
	.quad	107021940869550929      # 0x17c37e360b3d351
	.quad	1739169825430631358     # 0x1822c5bde0def3be
	.quad	133777426086938662      # 0x1db45dc38e0c826
	.quad	-3524704877533243305    # 0xcf15bb96ac8b5857
	.quad	83610891304336663       # 0x1290ba9a38c7d17
	.quad	-4405881096916554131    # 0xc2db2a7c57ae2e6d
	.quad	104513614130420829      # 0x1734e940c6f9c5d
	.quad	3716020665709083144     # 0x3391f51b6d99ba08
	.quad	130642017663026037      # 0x1d022390f8b8375
	.quad	4628355925281870917     # 0x403b393124801445
	.quad	81651261039391273       # 0x1221563a9b73229
	.quad	-8049613148679825066    # 0x904a077d6da01956
	.quad	102064076299239091      # 0x16a9abc9424feb3
	.quad	8384727637859770284     # 0x745c895cc9081fac
	.quad	127580095374048864      # 0x1c5416bb92e3e60
	.quad	5240454773662356427     # 0x48b9d5d9fda513cb
	.quad	79737559608780540       # 0x11b48e353bce6fc
	.quad	6550568467077945534     # 0x5ae84b507d0e58be
	.quad	99671949510975675       # 0x1621b1c28ac20bb
	.quad	3576524565420044014     # 0x31a25e249c51eeee
	.quad	124589936888719594      # 0x1baa1e332d728ea
	.quad	6847013871814915412     # 0x5f057ad6e1b33554
	.quad	77868710555449746       # 0x114a52dffc67992
	.quad	-664604697086131542     # 0xf6c6d98c9a2002aa
	.quad	97335888194312182       # 0x159ce797fb817f6
	.quad	-5442441889785052332    # 0xb4788fefc0a80354
	.quad	121669860242890228      # 0x1b04217dfa61df4
	.quad	-1095683171901963756    # 0xf0cb59f5d8690214
	.quad	76043662651806392       # 0x10e294eebc7d2b8
	.quad	3242082053549933210     # 0x2cfe30734e83429a
	.quad	95054578314757991       # 0x151b3a2a6b9c767
	.quad	-559083451489971392     # 0xf83dbc9022241340
	.quad	118818222893447488      # 0x1a6208b50683940
	.quad	-7266956184822313976    # 0x9b2695da15568c08
	.quad	74261389308404680       # 0x107d457124123c8
	.quad	-4472009212600504566    # 0xc1f03b509aac2f0a
	.quad	92826736635505850       # 0x149c96cd6d16cba
	.quad	8245046539531533005     # 0x726c4a24c1573acd
	.quad	116033420794382313      # 0x19c3bc80c85c7e9
	.quad	-1764374940433873728    # 0xe783ae56f8d684c0
	.quad	72520887996488945       # 0x101a55d07d39cf1
	.quad	7017903361312433648     # 0x616499ecb70c25f0
	.quad	90651109995611182       # 0x1420eb449c8842e
	.quad	-450992835214233748     # 0xf9bdc067e4cf2f6c
	.quad	113313887494513977      # 0x19292615c3aa539
	.quad	8659630992836983623     # 0x782d3081de02fb47
	.quad	141642359368142472      # 0x1f736f9b3494e88
	.quad	5412269370523114764     # 0x4b1c3e512ac1dd0c
	.quad	88526474605089045       # 0x13a825c100dd115
	.quad	-7069721342128270257    # 0x9de34de57572544f
	.quad	110658093256361306      # 0x18922f31411455a
	.quad	4997906377621825891     # 0x455c215ed2cee963
	.quad	138322616570451633      # 0x1eb6bafd91596b1
	.quad	-3793837541627440674    # 0xcb5994db43c151de
	.quad	86451635356532270       # 0x133234de7ad7e2e
	.quad	9092761128247862869     # 0x7e2ffa1214b1a655
	.quad	108064544195665338      # 0x17fec216198ddba
	.quad	2142579373455052779     # 0x1dbbf89699de0feb
	.quad	135080680244581673      # 0x1dfe729b9ff1529
	.quad	-5578416919231673869    # 0xb2957b5e202ac9f3
	.quad	84425425152863545       # 0x12bf07a143f6d39
	.quad	2250350887815183471     # 0x1f3ada35a8357c6f
	.quad	105531781441079432      # 0x176ec98994f4888
	.quad	2812938609768979339     # 0x270990c31242db8b
	.quad	131914726801349290      # 0x1d4a7bebfa31aaa
	.quad	6369772649532999991     # 0x5865fa79eb69c937
	.quad	82446704250843306       # 0x124e8d737c5f0aa
	.quad	-1261156224938525819    # 0xee7f791866443b85
	.quad	103058380313554132      # 0x16e230d05b76cd4
	.quad	3035240737254230630     # 0x2a1f575e7fd54a66
	.quad	128822975391942666      # 0x1c9abd04725480a
	.quad	6508711479211282048     # 0x5a53969b0fe54e80
	.quad	80514359619964166       # 0x11e0b622c774d06
	.quad	-1087482687840673248    # 0xf0e87c41d3dea220
	.quad	100642949524955207      # 0x1658e3ab7952047
	.quad	-1359353359800841560    # 0xed229b5248d64aa8
	.quad	125803686906194009      # 0x1bef1c9657a6859
	.quad	3762090168551861929     # 0x3435a1136d85eea9
	.quad	78627304316371256       # 0x117571ddf6c8138
	.quad	4702612710689827411     # 0x4143095848e76a53
	.quad	98284130395464070       # 0x15d2ce55747a186
	.quad	-3345106148492491544    # 0xd193cbae5b2144e8
	.quad	122855162994330087      # 0x1b4781ead1989e7
	.quad	-2090691342807807215    # 0xe2fc5f4cf8f4cb11
	.quad	76784476871456304       # 0x110cb132c2ff630
	.quad	1998321839917628885     # 0x1bbb77203731fdd5
	.quad	95980596089320381       # 0x154fdd7f73bf3bd
	.quad	7109588318324424010     # 0x62aa54e844fe7d4a
	.quad	119975745111650476      # 0x1aa3d4df50af0ac
	.quad	-4779879337902010802    # 0xbdaa75112b1f0e4e
	.quad	74984840694781547       # 0x10a6650b926d66b
	.quad	-5974849172377513502    # 0xad15125575e6d1e2
	.quad	93731050868476934       # 0x14cffe4e7708c06
	.quad	6366496589810271835     # 0x585a56ead360865b
	.quad	117163813585596168      # 0x1a03fde214caf08
	.quad	3979060368631419896     # 0x37387652c41c53f8
	.quad	73227383490997605       # 0x10427ead4cfed65
	.quad	-8861232594492888841    # 0x850693e7752368f7
	.quad	91534229363747006       # 0x14531e58a03e8be
	.quad	2758517312166052660     # 0x264838e1526c4334
	.quad	114417786704683758      # 0x1967e5eec84e2ee
	.quad	-5775225396647209982    # 0xafda4719a7075402
	.quad	143022233380854697      # 0x1fc1df6a7a61ba9
	.quad	1002170145522881665     # 0xde86c7008649481
	.quad	89388895863034186       # 0x13d92ba28c7d14a
	.quad	-7970659354951173727    # 0x9162878c0a7db9a1
	.quad	111736119828792732      # 0x18cf768b2f9c59c
	.quad	-5351638175261579254    # 0xb5bb296f0d1d280a
	.quad	139670149785990915      # 0x1f03542dfb83703
	.quad	5878598177316288774     # 0x5194f9e568323906
	.quad	87293843616244322       # 0x1362149cbd32262
	.quad	-1875124315209414841    # 0xe5fa385ec23ec747
	.quad	109117304520305402      # 0x183a99c3ec7eafa
	.quad	-6955591412439156455    # 0x9f78c67672ce7919
	.quad	136396630650381753      # 0x1e494034e79e5b9
	.quad	264441385652915120      # 0x3ab7c0a07c10bb0
	.quad	85247894156488596       # 0x12edc82110c2f94
	.quad	330551732066143900      # 0x4965b0c89b14e9c
	.quad	106559867695610745      # 0x17a93a2954f3b79
	.quad	5024875683510067779     # 0x45bbf1cfac1da243
	.quad	133199834619513431      # 0x1d9388b3aa30a57
	.quad	-8388667743874677398    # 0x8b957721cb92856a
	.quad	83249896637195894       # 0x127c35704a5e676
	.quad	3349223375438816964     # 0x2e7ad4ea3e7726c4
	.quad	104062370796494868      # 0x171b42cc5cf6014
	.quad	4186529219298521205     # 0x3a198a24ce14f075
	.quad	130077963495618585      # 0x1ce2137f7433819
	.quad	-4300948265579506103    # 0xc44ff65700cd1649
	.quad	81298727184761615       # 0x120d4c2fa8a030f
	.quad	-5376185331974382629    # 0xb563f3ecc1005bdb
	.quad	101623408980952019      # 0x16909f3b92c83d3
	.quad	-6720231664967978286    # 0xa2bcf0e7f14072d2
	.quad	127029261226190024      # 0x1c34c70a777a4c8
	.quad	7329070255463483331     # 0x65b61690f6c847c3
	.quad	79393288266368765       # 0x11a0fc668aac6fd
	.quad	-4673720235952809548    # 0xbf239c35347a59b4
	.quad	99241610332960956       # 0x16093b802d578bc
	.quad	-1230464276513624031    # 0xeeec83428198f021
	.quad	124052012916201195      # 0x1b8b8a6038ad6eb
	.quad	8454331864033760789     # 0x7553d20990ff9615
	.quad	77532508072625747       # 0x1137367c236c653
	.quad	5956228811614813082     # 0x52a8c68bf53f7b9a
	.quad	96915635090782184       # 0x1585041b2c477e8
	.quad	7445286014518516353     # 0x6752f82ef28f5a81
	.quad	121144543863477730      # 0x1ae64521f7595e2
	.quad	-9181754296208090992    # 0x8093db1d57999890
	.quad	75715339914673581       # 0x10cfeb353a97dad
	.quad	-2253820833405337932    # 0xe0b8d1e4ad7ffeb4
	.quad	94644174893341976       # 0x1503e602893dd18
	.quad	1794409976670715490     # 0x18e7065dd8dffe62
	.quad	118305218616677471      # 0x1a44df832b8d45f
	.quad	8039035263060279037     # 0x6f9063faa78bfefd
	.quad	73940761635423419       # 0x106b0bb1fb384bb
	.quad	5437108060397960892     # 0x4b747cf9516efebc
	.quad	92425952044279274       # 0x1485ce9e7a065ea
	.quad	-2426986961357324693    # 0xde519c37a5cabe6b
	.quad	115532440055349092      # 0x19a742461887f64
	.quad	788976158365366019      # 0xaf301a2c79eb703
	.quad	72207775034593183       # 0x1008896bcf54f9f
	.quad	-3625465820470680380    # 0xcdafc20b798664c4
	.quad	90259718793241478       # 0x140aabc6c32a386
	.quad	-9143518294015738379    # 0x811bb28e57e7fdf5
	.quad	112824648491551848      # 0x190d56b873f4c68
	.quad	-6817711849092285070    # 0xa1629f31ede1fd72
	.quad	141030810614439810      # 0x1f50ac6690f1f82
	.quad	-6566912914896372121    # 0xa4dda37f34ad3e67
	.quad	88144256634024881       # 0x13926bc01a973b1
	.quad	1014730893234310657     # 0xe150c5f01d88e01
	.quad	110180320792531102      # 0x187706b0213d09e
	.quad	-7954958420311887487    # 0x919a4f76c24eb181
	.quad	137725400990663877      # 0x1e94c85c298c4c5
	.quad	8863209042587234033     # 0x7b0071aa39712ef1
	.quad	86078375619164923       # 0x131cfd3999f7afb
	.quad	6467325284806654637     # 0x59c08e14c7cd7aad
	.quad	107597969523956154      # 0x17e43c8800759ba
	.quad	-1139215430846457512    # 0xf030b199f9c0d958
	.quad	134497461904945192      # 0x1ddd4baa0093028
	.quad	-7629538671920117801    # 0x961e6f003c1887d7
	.quad	84060913690590745       # 0x12aa4f4a405be19
	.quad	-313551303045371443     # 0xfba60ac04b1ea9cd
	.quad	105076142113238431      # 0x1754e31cd072d9f
	.quad	-391939128806714304     # 0xfa8f8d705de65440
	.quad	131345177641548039      # 0x1d2a1be4048f907
	.quad	-244961955504196440     # 0xfc99b8663aaff4a8
	.quad	82090736025967524       # 0x123a516e82d9ba4
	.quad	4305483574047142354     # 0x3bc0267fc95bf1d2
	.quad	102613420032459406      # 0x16c8e5ca239028e
	.quad	-3841517569295847865    # 0xcab0301fbbb2ee47
	.quad	128266775040574257      # 0x1c7b1f3cac74331
	.quad	2210737537617482988     # 0x1eae1e13d54fd4ec
	.quad	80166734400358911       # 0x11ccf385ebc89ff
	.quad	-1848264096405534169    # 0xe659a598caa3ca27
	.quad	100208418000448638      # 0x1640306766bac7e
	.quad	-6922016138934305615    # 0x9ff00efefd4cbcb1
	.quad	125260522500560798      # 0x1bd03c81406979e
	.quad	2591268940807140847     # 0x23f6095f5e4ff5ef
	.quad	78287826562850499       # 0x116225d0c841ec3
	.quad	-1372599842418461846    # 0xecf38bb735e3f36a
	.quad	97859783203563123       # 0x15baaf44fa52673
	.quad	-1715749803023077307    # 0xe8306ea5035cf045
	.quad	122324729004453904      # 0x1b295b1638e7010
	.quad	-7989872654530505173    # 0x911e4527221a162b
	.quad	76452955627783690       # 0x10f9d8ede39060a
	.quad	3847717237119032246     # 0x3565d670eaa09bb6
	.quad	95566194534729613       # 0x15384f295c7478d
	.quad	-9025411508883373405    # 0x82bf4c0d2548c2a3
	.quad	119457743168412016      # 0x1a8662f3b391970
	.quad	5888332853016361382     # 0x51b78f88374d79a6
	.quad	74661089480257510       # 0x1093fdd8503afe6
	.quad	-1862955970584324080    # 0xe625736a4520d810
	.quad	93326361850321887       # 0x14b8fd4e6449bdf
	.quad	-2328694963230405100    # 0xdfaed044d6690e14
	.quad	116657952312902359      # 0x19e73ca1fd5c2d7
	.quad	-1455434352019003188    # 0xebcd422b0601a8cc
	.quad	72911220195563974       # 0x103085e53e599c6
	.quad	-6430978958451141889    # 0xa6c092b5c78212ff
	.quad	91139025244454968       # 0x143ca75e8df0038
	.quad	-3427037679636539457    # 0xd070b763396297bf
	.quad	113923781555568710      # 0x194bd136316c046
	.quad	-8895483117973062225    # 0x848ce53c07bb3daf
	.quad	142404726944460888      # 0x1f9ec583bdc7058
	.quad	5969538097335305869     # 0x52d80f4584d5068d
	.quad	89002954340288055       # 0x13c33b72569c637
	.quad	2850236603241744433     # 0x278e1316e60a4831
	.quad	111253692925360069      # 0x18b40a4eec437c5

	.section	.rdata,"dr",discard,"?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"
	.globl	"?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB" # @"?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB"
	.p2align	4
"?arr@?1??DIGIT_TABLE@detail@ryu@2json@boost@@YAAEAY0MI@$$CBDXZ@4QBDB":
	.ascii	"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"
	.zero	7

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUarray_index_error@json@boost@@@8??0array_index_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUarray_index_error@json@boost@@@8??0array_index_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUarray_index_error@json@boost@@@8??0array_index_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUarray_index_error@json@boost@@@8??0array_index_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUarray_index_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0array_index_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QEAA@AEBV01@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AVout_of_range@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0out_of_range@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_index_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUarray_index_error@json@boost@@@8??0array_index_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @42
.L__unnamed_43:
	.quad	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uarray_index_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"
	.p2align	4               # @43
.L__unnamed_44:
	.quad	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"
	.quad	"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @44
.L__unnamed_45:
	.quad	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uarray_index_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@array_index_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@out_of_range@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@array_index_error@json@boost@@8"
	.globl	"??_R17?0A@EA@array_index_error@json@boost@@8" # @"??_R17?0A@EA@array_index_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@array_index_error@json@boost@@8":
	.long	"??_R0?AUarray_index_error@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3array_index_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@out_of_range@std@@8"
	.globl	"??_R17?0A@EA@out_of_range@std@@8" # @"??_R17?0A@EA@out_of_range@std@@8"
	.p2align	4
"??_R17?0A@EA@out_of_range@std@@8":
	.long	"??_R0?AVout_of_range@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3out_of_range@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@" # @"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUarray_required_error@json@boost@@@8??0array_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUarray_required_error@json@boost@@@8??0array_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUarray_required_error@json@boost@@@8??0array_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUarray_required_error@json@boost@@@8??0array_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUarray_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0array_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUtype_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0type_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AVinvalid_argument@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0invalid_argument@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"
	.globl	"_CTA8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@" # @"_CTA8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@":
	.long	8                       # 0x8
	.long	"_CT??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUarray_required_error@json@boost@@@8??0array_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"
	.globl	"_TI8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@" # @"_TI8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA8?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @45
.L__unnamed_46:
	.quad	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uarray_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"
	.p2align	4               # @46
.L__unnamed_47:
	.quad	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @47
.L__unnamed_48:
	.quad	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uarray_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	"??_R2?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@array_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@array_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@array_required_error@json@boost@@8" # @"??_R17?0A@EA@array_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@array_required_error@json@boost@@8":
	.long	"??_R0?AUarray_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3array_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@type_error@json@boost@@8"
	.globl	"??_R17?0A@EA@type_error@json@boost@@8" # @"??_R17?0A@EA@type_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@type_error@json@boost@@8":
	.long	"??_R0?AUtype_error@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3type_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@invalid_argument@std@@8"
	.globl	"??_R17?0A@EA@invalid_argument@std@@8" # @"??_R17?0A@EA@invalid_argument@std@@8"
	.p2align	4
"??_R17?0A@EA@invalid_argument@std@@8":
	.long	"??_R0?AVinvalid_argument@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3invalid_argument@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@" # @"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"
	.zero	1

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUarray_too_large@json@boost@@@8??0array_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUarray_too_large@json@boost@@@8??0array_too_large@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUarray_too_large@json@boost@@@8??0array_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUarray_too_large@json@boost@@@8??0array_too_large@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUarray_too_large@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0array_too_large@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AVlength_error@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0length_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uarray_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUarray_too_large@json@boost@@@8??0array_too_large@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @48
.L__unnamed_49:
	.quad	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uarray_too_large@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"
	.p2align	4               # @49
.L__unnamed_50:
	.quad	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"
	.quad	"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @50
.L__unnamed_51:
	.quad	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uarray_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@array_too_large@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@array_too_large@json@boost@@8"
	.globl	"??_R17?0A@EA@array_too_large@json@boost@@8" # @"??_R17?0A@EA@array_too_large@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@array_too_large@json@boost@@8":
	.long	"??_R0?AUarray_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3array_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@length_error@std@@8"
	.globl	"??_R17?0A@EA@length_error@std@@8" # @"??_R17?0A@EA@length_error@std@@8"
	.p2align	4
"??_R17?0A@EA@length_error@std@@8":
	.long	"??_R0?AVlength_error@std@@@8"@IMGREL
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3length_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@" # @"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"
	.zero	5

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUbool_required_error@json@boost@@@8??0bool_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUbool_required_error@json@boost@@@8??0bool_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUbool_required_error@json@boost@@@8??0bool_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUbool_required_error@json@boost@@@8??0bool_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUbool_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0bool_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"
	.globl	"_CTA8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@" # @"_CTA8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@":
	.long	8                       # 0x8
	.long	"_CT??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ubool_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUbool_required_error@json@boost@@@8??0bool_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"
	.globl	"_TI8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@" # @"_TI8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA8?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @51
.L__unnamed_52:
	.quad	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Ubool_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"
	.p2align	4               # @52
.L__unnamed_53:
	.quad	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @53
.L__unnamed_54:
	.quad	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Ubool_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	"??_R2?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@bool_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@bool_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@bool_required_error@json@boost@@8" # @"??_R17?0A@EA@bool_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@bool_required_error@json@boost@@8":
	.long	"??_R0?AUbool_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3bool_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@" # @"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUchar_pos_error@json@boost@@@8??0char_pos_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUchar_pos_error@json@boost@@@8??0char_pos_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUchar_pos_error@json@boost@@@8??0char_pos_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUchar_pos_error@json@boost@@@8??0char_pos_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUchar_pos_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0char_pos_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8??0?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUchar_pos_error@json@boost@@@8??0char_pos_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @54
.L__unnamed_55:
	.quad	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"
	.p2align	4               # @55
.L__unnamed_56:
	.quad	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"
	.quad	"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @56
.L__unnamed_57:
	.quad	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@char_pos_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@out_of_range@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@char_pos_error@json@boost@@8"
	.globl	"??_R17?0A@EA@char_pos_error@json@boost@@8" # @"??_R17?0A@EA@char_pos_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@char_pos_error@json@boost@@8":
	.long	"??_R0?AUchar_pos_error@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3char_pos_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@" # @"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"
	.zero	3

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUdouble_required_error@json@boost@@@8??0double_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUdouble_required_error@json@boost@@@8??0double_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUdouble_required_error@json@boost@@@8??0double_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUdouble_required_error@json@boost@@@8??0double_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUdouble_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0double_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUnumber_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0number_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"
	.globl	"_CTA9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@" # @"_CTA9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@":
	.long	9                       # 0x9
	.long	"_CT??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Udouble_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUdouble_required_error@json@boost@@@8??0double_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"
	.globl	"_TI9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@" # @"_TI9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA9?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @57
.L__unnamed_58:
	.quad	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Udouble_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"
	.p2align	4               # @58
.L__unnamed_59:
	.quad	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @59
.L__unnamed_60:
	.quad	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Udouble_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	"??_R2?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@double_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@double_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@double_required_error@json@boost@@8" # @"??_R17?0A@EA@double_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@double_required_error@json@boost@@8":
	.long	"??_R0?AUdouble_required_error@json@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3double_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@number_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@number_required_error@json@boost@@8" # @"??_R17?0A@EA@number_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@number_required_error@json@boost@@8":
	.long	"??_R0?AUnumber_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3number_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@" # @"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUint64_required_error@json@boost@@@8??0int64_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUint64_required_error@json@boost@@@8??0int64_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUint64_required_error@json@boost@@@8??0int64_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUint64_required_error@json@boost@@@8??0int64_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUint64_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0int64_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"
	.globl	"_CTA9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@" # @"_CTA9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@":
	.long	9                       # 0x9
	.long	"_CT??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUint64_required_error@json@boost@@@8??0int64_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"
	.globl	"_TI9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@" # @"_TI9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA9?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @60
.L__unnamed_61:
	.quad	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"
	.p2align	4               # @61
.L__unnamed_62:
	.quad	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @62
.L__unnamed_63:
	.quad	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	"??_R2?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@int64_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@int64_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@int64_required_error@json@boost@@8" # @"??_R17?0A@EA@int64_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@int64_required_error@json@boost@@8":
	.long	"??_R0?AUint64_required_error@json@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3int64_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@" # @"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"
	.zero	3

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUkey_not_found@json@boost@@@8??0key_not_found@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUkey_not_found@json@boost@@@8??0key_not_found@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUkey_not_found@json@boost@@@8??0key_not_found@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUkey_not_found@json@boost@@@8??0key_not_found@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUkey_not_found@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0key_not_found@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_not_found@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUkey_not_found@json@boost@@@8??0key_not_found@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @63
.L__unnamed_64:
	.quad	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Ukey_not_found@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"
	.p2align	4               # @64
.L__unnamed_65:
	.quad	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"
	.quad	"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @65
.L__unnamed_66:
	.quad	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Ukey_not_found@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@key_not_found@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@key_not_found@json@boost@@8"
	.globl	"??_R17?0A@EA@key_not_found@json@boost@@8" # @"??_R17?0A@EA@key_not_found@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@key_not_found@json@boost@@8":
	.long	"??_R0?AUkey_not_found@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3key_not_found@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"
	.globl	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@" # @"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"
	.zero	3

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUkey_too_large@json@boost@@@8??0key_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUkey_too_large@json@boost@@@8??0key_too_large@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUkey_too_large@json@boost@@@8??0key_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUkey_too_large@json@boost@@@8??0key_too_large@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUkey_too_large@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0key_too_large@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ukey_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUkey_too_large@json@boost@@@8??0key_too_large@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @66
.L__unnamed_67:
	.quad	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Ukey_too_large@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"
	.p2align	4               # @67
.L__unnamed_68:
	.quad	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"
	.quad	"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @68
.L__unnamed_69:
	.quad	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Ukey_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@key_too_large@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@key_too_large@json@boost@@8"
	.globl	"??_R17?0A@EA@key_too_large@json@boost@@8" # @"??_R17?0A@EA@key_too_large@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@key_too_large@json@boost@@8":
	.long	"??_R0?AUkey_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3key_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"
	.globl	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@" # @"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"
	.zero	3

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUobject_required_error@json@boost@@@8??0object_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUobject_required_error@json@boost@@@8??0object_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUobject_required_error@json@boost@@@8??0object_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUobject_required_error@json@boost@@@8??0object_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUobject_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0object_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"
	.globl	"_CTA8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@" # @"_CTA8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@":
	.long	8                       # 0x8
	.long	"_CT??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUobject_required_error@json@boost@@@8??0object_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"
	.globl	"_TI8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@" # @"_TI8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA8?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @69
.L__unnamed_70:
	.quad	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uobject_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"
	.p2align	4               # @70
.L__unnamed_71:
	.quad	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @71
.L__unnamed_72:
	.quad	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uobject_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	"??_R2?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@object_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@object_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@object_required_error@json@boost@@8" # @"??_R17?0A@EA@object_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@object_required_error@json@boost@@8":
	.long	"??_R0?AUobject_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3object_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@" # @"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUobject_too_large@json@boost@@@8??0object_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUobject_too_large@json@boost@@@8??0object_too_large@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUobject_too_large@json@boost@@@8??0object_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUobject_too_large@json@boost@@@8??0object_too_large@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUobject_too_large@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0object_too_large@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Uobject_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUobject_too_large@json@boost@@@8??0object_too_large@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @72
.L__unnamed_73:
	.quad	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uobject_too_large@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"
	.p2align	4               # @73
.L__unnamed_74:
	.quad	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"
	.quad	"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @74
.L__unnamed_75:
	.quad	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uobject_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@object_too_large@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@object_too_large@json@boost@@8"
	.globl	"??_R17?0A@EA@object_too_large@json@boost@@8" # @"??_R17?0A@EA@object_too_large@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@object_too_large@json@boost@@8":
	.long	"??_R0?AUobject_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3object_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"
	.globl	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@" # @"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUstack_overflow@json@boost@@@8??0stack_overflow@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUstack_overflow@json@boost@@@8??0stack_overflow@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUstack_overflow@json@boost@@@8??0stack_overflow@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUstack_overflow@json@boost@@@8??0stack_overflow@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUstack_overflow@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0stack_overflow@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AVruntime_error@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0runtime_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"
	.globl	"_CTA6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@" # @"_CTA6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"
	.p2align	4
"_CTA6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@":
	.long	6                       # 0x6
	.long	"_CT??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8??0?$wrapexcept@Ustack_overflow@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUstack_overflow@json@boost@@@8??0stack_overflow@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"
	.globl	"_TI6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@" # @"_TI6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"
	.p2align	3
"_TI6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA6?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @75
.L__unnamed_76:
	.quad	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Ustack_overflow@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"
	.p2align	4               # @76
.L__unnamed_77:
	.quad	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"
	.quad	"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @77
.L__unnamed_78:
	.quad	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Ustack_overflow@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	6                       # 0x6
	.long	"??_R2?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@stack_overflow@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@runtime_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@stack_overflow@json@boost@@8"
	.globl	"??_R17?0A@EA@stack_overflow@json@boost@@8" # @"??_R17?0A@EA@stack_overflow@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@stack_overflow@json@boost@@8":
	.long	"??_R0?AUstack_overflow@json@boost@@@8"@IMGREL
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3stack_overflow@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@runtime_error@std@@8"
	.globl	"??_R17?0A@EA@runtime_error@std@@8" # @"??_R17?0A@EA@runtime_error@std@@8"
	.p2align	4
"??_R17?0A@EA@runtime_error@std@@8":
	.long	"??_R0?AVruntime_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3runtime_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"
	.globl	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@" # @"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"
	.zero	3

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUstring_required_error@json@boost@@@8??0string_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUstring_required_error@json@boost@@@8??0string_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUstring_required_error@json@boost@@@8??0string_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUstring_required_error@json@boost@@@8??0string_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUstring_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0string_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"
	.globl	"_CTA8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@" # @"_CTA8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@":
	.long	8                       # 0x8
	.long	"_CT??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUstring_required_error@json@boost@@@8??0string_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"
	.globl	"_TI8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@" # @"_TI8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA8?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @78
.L__unnamed_79:
	.quad	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Ustring_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"
	.p2align	4               # @79
.L__unnamed_80:
	.quad	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @80
.L__unnamed_81:
	.quad	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Ustring_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	"??_R2?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@string_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@string_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@string_required_error@json@boost@@8" # @"??_R17?0A@EA@string_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@string_required_error@json@boost@@8":
	.long	"??_R0?AUstring_required_error@json@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3string_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@" # @"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUstring_too_large@json@boost@@@8??0string_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUstring_too_large@json@boost@@@8??0string_too_large@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUstring_too_large@json@boost@@@8??0string_too_large@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUstring_too_large@json@boost@@@8??0string_too_large@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUstring_too_large@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0string_too_large@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"
	.globl	"_CTA7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@" # @"_CTA7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"
	.p2align	4
"_CTA7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@":
	.long	7                       # 0x7
	.long	"_CT??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8??0?$wrapexcept@Ustring_too_large@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUstring_too_large@json@boost@@@8??0string_too_large@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVlength_error@std@@@8??0length_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"
	.globl	"_TI7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@" # @"_TI7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"
	.p2align	3
"_TI7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA7?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @81
.L__unnamed_82:
	.quad	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Ustring_too_large@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"
	.p2align	4               # @82
.L__unnamed_83:
	.quad	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"
	.quad	"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @83
.L__unnamed_84:
	.quad	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Ustring_too_large@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	"??_R2?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@string_too_large@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@length_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@string_too_large@json@boost@@8"
	.globl	"??_R17?0A@EA@string_too_large@json@boost@@8" # @"??_R17?0A@EA@string_too_large@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@string_too_large@json@boost@@8":
	.long	"??_R0?AUstring_too_large@json@boost@@@8"@IMGREL
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3string_too_large@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"
	.globl	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@" # @"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"
	.zero	3

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AUuint64_required_error@json@boost@@@8??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.globl	"_CT??_R0?AUuint64_required_error@json@boost@@@8??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z248" # @"_CT??_R0?AUuint64_required_error@json@boost@@@8??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z248"
	.p2align	4
"_CT??_R0?AUuint64_required_error@json@boost@@@8??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z248":
	.long	0                       # 0x0
	.long	"??_R0?AUuint64_required_error@json@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"
	.globl	"_CTA9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@" # @"_CTA9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"
	.p2align	4
"_CTA9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@":
	.long	9                       # 0x9
	.long	"_CT??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8??0?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AUuint64_required_error@json@boost@@@8??0uint64_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUnumber_required_error@json@boost@@@8??0number_required_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AUtype_error@json@boost@@@8??0type_error@json@boost@@QEAA@AEBU012@@Z248"@IMGREL
	.long	"_CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"
	.globl	"_TI9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@" # @"_TI9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"
	.p2align	3
"_TI9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA9?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @84
.L__unnamed_85:
	.quad	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"
	.p2align	4               # @85
.L__unnamed_86:
	.quad	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"
	.quad	"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @86
.L__unnamed_87:
	.quad	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8" # @"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	"??_R2?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8" # @"??_R2?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@uint64_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@number_required_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@type_error@json@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@invalid_argument@std@@8"@IMGREL
	.long	"??_R17?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@uint64_required_error@json@boost@@8"
	.globl	"??_R17?0A@EA@uint64_required_error@json@boost@@8" # @"??_R17?0A@EA@uint64_required_error@json@boost@@8"
	.p2align	4
"??_R17?0A@EA@uint64_required_error@json@boost@@8":
	.long	"??_R0?AUuint64_required_error@json@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3uint64_required_error@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"
	.globl	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@" # @"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.p2align	3               # @87
.L__unnamed_88:
	.quad	"??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.quad	"??Rplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"

	.section	.rdata,"dr",discard,"??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.globl	"??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@" # @"??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.p2align	4
"??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"@IMGREL
	.long	"??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL
	.long	"??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"
	.globl	"??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8" # @"??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"
	.p2align	4
"??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.globl	"??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8" # @"??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.p2align	3
"??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.globl	"??_R2place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8" # @"??_R2place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.p2align	2
"??_R2place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8":
	.long	"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@place_range@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.globl	"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8" # @"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.p2align	4
"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8":
	.long	"??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL

	.section	.rdata,"dr",largest,"??_7place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.p2align	3               # @88
.L__unnamed_89:
	.quad	"??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.quad	"??Rplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@UEAA_NPEAX@Z"

	.section	.rdata,"dr",discard,"??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.globl	"??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@" # @"??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.p2align	4
"??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"@IMGREL
	.long	"??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL
	.long	"??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"
	.globl	"??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8" # @"??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"
	.p2align	4
"??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.globl	"??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8" # @"??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.p2align	3
"??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.globl	"??_R2place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8" # @"??_R2place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.p2align	2
"??_R2place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8":
	.long	"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@place_range@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.globl	"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8" # @"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.p2align	4
"??_R1A@?0A@EA@place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8":
	.long	"??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"@IMGREL

	.section	.rdata,"dr",largest,"??_7place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"
	.p2align	3               # @89
.L__unnamed_90:
	.quad	"??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"
	.quad	"??Rplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@UEAAXPEAX@Z"

	.section	.rdata,"dr",discard,"??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"
	.globl	"??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@" # @"??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"
	.p2align	4
"??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8"@IMGREL
	.long	"??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"@IMGREL
	.long	"??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8"
	.globl	"??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8" # @"??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8"
	.p2align	4
"??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@"
	.zero	4

	.section	.rdata,"dr",discard,"??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.globl	"??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8" # @"??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.p2align	3
"??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.globl	"??_R2place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8" # @"??_R2place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.p2align	2
"??_R2place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8":
	.long	"??_R1A@?0A@EA@place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@place_one@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.globl	"??_R1A@?0A@EA@place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8" # @"??_R1A@?0A@EA@place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.p2align	4
"??_R1A@?0A@EA@place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8":
	.long	"??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@place_one@object@json@boost@@8"
	.globl	"??_R1A@?0A@EA@place_one@object@json@boost@@8" # @"??_R1A@?0A@EA@place_one@object@json@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@place_one@object@json@boost@@8":
	.long	"??_R0?AUplace_one@object@json@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_one@object@json@boost@@8"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUplace_one@object@json@boost@@@8"
	.globl	"??_R0?AUplace_one@object@json@boost@@@8" # @"??_R0?AUplace_one@object@json@boost@@@8"
	.p2align	4
"??_R0?AUplace_one@object@json@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_one@object@json@boost@@"
	.zero	6

	.section	.rdata,"dr",discard,"??_R3place_one@object@json@boost@@8"
	.globl	"??_R3place_one@object@json@boost@@8" # @"??_R3place_one@object@json@boost@@8"
	.p2align	3
"??_R3place_one@object@json@boost@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2place_one@object@json@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2place_one@object@json@boost@@8"
	.globl	"??_R2place_one@object@json@boost@@8" # @"??_R2place_one@object@json@boost@@8"
	.p2align	2
"??_R2place_one@object@json@boost@@8":
	.long	"??_R1A@?0A@EA@place_one@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",largest,"??_7place_one@object@json@boost@@6B@"
	.p2align	3               # @90
.L__unnamed_91:
	.quad	"??_R4place_one@object@json@boost@@6B@"
	.quad	_purecall

	.section	.rdata,"dr",discard,"??_R4place_one@object@json@boost@@6B@"
	.globl	"??_R4place_one@object@json@boost@@6B@" # @"??_R4place_one@object@json@boost@@6B@"
	.p2align	4
"??_R4place_one@object@json@boost@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_one@object@json@boost@@@8"@IMGREL
	.long	"??_R3place_one@object@json@boost@@8"@IMGREL
	.long	"??_R4place_one@object@json@boost@@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z120"
	.globl	"_CT??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z120" # @"_CT??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z120"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z120":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	120                     # 0x78
	.long	"??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVsystem_error@system@boost@@@8??0system_error@system@boost@@QEAA@AEBV012@@Z728"
	.globl	"_CT??_R0?AVsystem_error@system@boost@@@8??0system_error@system@boost@@QEAA@AEBV012@@Z728" # @"_CT??_R0?AVsystem_error@system@boost@@@8??0system_error@system@boost@@QEAA@AEBV012@@Z728"
	.p2align	4
"_CT??_R0?AVsystem_error@system@boost@@@8??0system_error@system@boost@@QEAA@AEBV012@@Z728":
	.long	0                       # 0x0
	.long	"??_R0?AVsystem_error@system@boost@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0system_error@system@boost@@QEAA@AEBV012@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4080"
	.globl	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4080" # @"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4080"
	.p2align	4
"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4080":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@boost@@@8"@IMGREL
	.long	80                      # 0x50
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	"??0exception@boost@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"
	.globl	"_CTA6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@" # @"_CTA6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"
	.p2align	4
"_CTA6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@":
	.long	6                       # 0x6
	.long	"_CT??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8??0?$wrapexcept@Vsystem_error@system@boost@@@boost@@QEAA@AEBU01@@Z120"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AVsystem_error@system@boost@@@8??0system_error@system@boost@@QEAA@AEBV012@@Z728"@IMGREL
	.long	"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4080"@IMGREL

	.section	.xdata,"dr",discard,"_TI6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"
	.globl	"_TI6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@" # @"_TI6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"
	.p2align	3
"_TI6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA6?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @91
.L__unnamed_92:
	.quad	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Vsystem_error@system@boost@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"
	.p2align	4               # @92
.L__unnamed_93:
	.quad	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"
	.quad	"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@system_error@system@boost@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"
	.p2align	3               # @93
.L__unnamed_94:
	.quad	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Vsystem_error@system@boost@@@boost@@WFA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8" # @"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	6                       # 0x6
	.long	"??_R2?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Vsystem_error@system@boost@@@boost@@8" # @"??_R2?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Vsystem_error@system@boost@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@system_error@system@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@runtime_error@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1FA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Vsystem_error@system@boost@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Vsystem_error@system@boost@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"@IMGREL
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@system_error@system@boost@@8"
	.globl	"??_R17?0A@EA@system_error@system@boost@@8" # @"??_R17?0A@EA@system_error@system@boost@@8"
	.p2align	4
"??_R17?0A@EA@system_error@system@boost@@8":
	.long	"??_R0?AVsystem_error@system@boost@@@8"@IMGREL
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3system_error@system@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1FA@?0A@EA@exception@boost@@8"
	.globl	"??_R1FA@?0A@EA@exception@boost@@8" # @"??_R1FA@?0A@EA@exception@boost@@8"
	.p2align	4
"??_R1FA@?0A@EA@exception@boost@@8":
	.long	"??_R0?AVexception@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"
	.globl	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@" # @"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"@IMGREL

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"
	.globl	"?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB" # @"?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB"
	.p2align	4
"?tab@?1??pow10@detail@json@boost@@YANH@Z@4QBNB":
	.quad	2024022533073106        # double 9.999999999999999E-309
	.quad	14067255587423757       # double 9.999999999999999E-308
	.quad	28843068552705937       # double 1.0E-306
	.quad	43935135038780789       # double 1.0E-305
	.quad	58984656790831465       # double 9.9999999999999997E-305
	.quad	73730820988539331       # double 9.9999999999999993E-304
	.quad	88785826515146292       # double 9.9999999999999996E-303
	.quad	103904837566199265      # double 1.0000000000000001E-301
	.quad	118622047889322841      # double 1.0E-300
	.quad	133640861072699439      # double 9.9999999999999999E-300
	.quad	148827732767309341      # double 9.9999999999999991E-299
	.quad	163516667822284197      # double 1.0E-297
	.quad	178500136920474894      # double 1.0E-296
	.quad	193753278774808361      # double 1.0000000000000001E-295
	.quad	208414601263231731      # double 1.0E-294
	.quad	223363554653233072      # double 1.0000000000000001E-293
	.quad	238672046670206876      # double 1.0000000000000001E-292
	.quad	253315770551822017      # double 9.9999999999999996E-292
	.quad	268231017195544690      # double 1.0000000000000001E-290
	.quad	283497375779670158      # double 1.0E-289
	.quad	298220099847875929      # double 1.0000000000000001E-288
	.quad	313102429747185839      # double 1.0E-287
	.quad	328327642400795355      # double 1.0000000000000001E-286
	.quad	343127515088718537      # double 1.0000000000000001E-285
	.quad	357977699729812859      # double 1.0E-284
	.quad	373162730810652889      # double 9.9999999999999995E-284
	.quad	388037943947518856      # double 1.0E-282
	.quad	402856736734887018      # double 1.0E-281
	.quad	418002527998569348      # double 9.9999999999999996E-281
	.quad	432951315792606003      # double 1.0000000000000001E-279
	.quad	447739452472819711      # double 9.9999999999999994E-279
	.quad	462846923602558975      # double 9.9999999999999996E-278
	.quad	477867561647738880      # double 1.0000000000000001E-276
	.quad	492625760723309567      # double 9.9999999999999993E-276
	.quad	507695809847245055      # double 9.9999999999999997E-275
	.quad	522786614153307040      # double 1.0000000000000001E-273
	.quad	537515577286843527      # double 9.9999999999999993E-273
	.quad	552549081483236265      # double 9.9999999999999996E-272
	.quad	567708407528440906      # double 1.0E-270
	.quad	582408819937334620      # double 9.9999999999999995E-270
	.quad	597406635727923891      # double 9.9999999999999995E-269
	.quad	612632877534010032      # double 9.9999999999999998E-268
	.quad	627305408375869788      # double 9.9999999999999998E-267
	.quad	642268372207666611      # double 9.9999999999999998E-266
	.quad	657559961436488592      # double 1.0E-264
	.quad	672205264185541748      # double 1.0E-263
	.quad	687134192901330321      # double 1.0E-262
	.quad	702417654075538165      # double 9.9999999999999998E-262
	.quad	717108310787339481      # double 9.9999999999999996E-261
	.quad	732004002085151248      # double 1.0000000000000001E-259
	.quad	747245916486888083      # double 9.9999999999999995E-259
	.quad	762014473397072540      # double 9.9999999999999997E-258
	.quad	776877706278891331      # double 9.9999999999999997E-257
	.quad	792079047660636948      # double 1.0E-255
	.quad	806923678983304940      # double 9.9999999999999991E-255
	.quad	821755214193255592      # double 1.0000000000000001E-253
	.quad	836916933485166033      # double 9.9999999999999994E-253
	.quad	851835856226274979      # double 1.0E-251
	.quad	866636436678541900      # double 1.0000000000000001E-250
	.quad	881759462523347679      # double 1.0000000000000001E-249
	.quad	896750935477777867      # double 9.9999999999999997E-249
	.quad	911521286674494270      # double 1.0E-247
	.quad	926606525949861901      # double 9.9999999999999996E-247
	.quad	941668848721988616      # double 9.9999999999999993E-246
	.quad	956409679161331466      # double 9.9999999999999993E-245
	.quad	971458017489982157      # double 1.0E-243
	.quad	986589529537203136      # double 9.9999999999999997E-243
	.quad	1001301531111923376     # double 9.9999999999999997E-242
	.quad	1016313833359795804     # double 9.9999999999999997E-241
	.quad	1031512913058476026     # double 1.0000000000000001E-239
	.quad	1046196761445088248     # double 9.9999999999999999E-239
	.quad	1061173872207825654     # double 9.9999999999999999E-238
	.quad	1076438935941134042     # double 1.0E-236
	.quad	1091095290979984528     # double 9.9999999999999995E-236
	.quad	1106038035058019764     # double 9.9999999999999995E-235
	.quad	1121338765435035937     # double 9.9999999999999995E-234
	.quad	1135997042391571637     # double 1.0E-232
	.quad	1150906225254077410     # double 9.9999999999999998E-232
	.quad	1166165004111681755     # double 1.0E-230
	.quad	1180901940167114633     # double 1.0000000000000001E-229
	.quad	1195778348405079915     # double 1.0E-228
	.quad	1210996158982008645     # double 9.9999999999999994E-228
	.quad	1225809910563708299     # double 9.9999999999999992E-227
	.quad	1240654312332395758     # double 9.9999999999999996E-226
	.quad	1255832114822727210     # double 1.0E-224
	.quad	1270720881566796762     # double 9.9999999999999997E-224
	.quad	1285534027017830097     # double 1.0E-222
	.quad	1300672759111093893     # double 1.0E-221
	.quad	1315634782849665299     # double 9.9999999999999999E-221
	.quad	1330417404552989528     # double 1.0E-219
	.quad	1345517981961616942     # double 1.0E-218
	.quad	1360551545733881565     # double 1.0000000000000001E-217
	.quad	1375304359089833620     # double 1.0E-216
	.quad	1390367676064245817     # double 1.0E-215
	.quad	1405471103150663971     # double 9.9999999999999991E-215
	.quad	1420194806792385388     # double 9.9999999999999995E-214
	.quad	1435221736624009287     # double 9.9999999999999995E-213
	.quad	1450393389603155501     # double 1.0000000000000001E-211
	.quad	1465088665789573560     # double 1.0E-210
	.quad	1480080061302068262     # double 1.0E-209
	.quad	1495318341129581720     # double 1.0000000000000001E-208
	.quad	1509985856129180093     # double 9.9999999999999993E-208
	.quad	1524942550158150189     # double 1.0E-206
	.quad	1540245895267272284     # double 1.0E-205
	.quad	1554886299732867059     # double 1.0E-204
	.quad	1569809105594332656     # double 1.0E-203
	.quad	1585084913200636780     # double 1.0E-202
	.quad	1599789920352257571     # double 9.9999999999999994E-202
	.quad	1614679632300144556     # double 9.9999999999999998E-201
	.quad	1629914072514475415     # double 9.9999999999999998E-200
	.quad	1644696643526046078     # double 9.9999999999999991E-199
	.quad	1659554037198953950     # double 9.9999999999999999E-198
	.quad	1674748079569560918     # double 1.0E-196
	.quad	1689606396538113878     # double 1.0000000000000001E-195
	.quad	1704432229395612459     # double 1.0E-194
	.quad	1719586820746957814     # double 1.0E-193
	.quad	1734519108376626298     # double 1.0000000000000001E-192
	.quad	1749314120125326744     # double 1.0E-191
	.quad	1764430185090674430     # double 1.0E-190
	.quad	1779434709694088543     # double 1.0000000000000001E-189
	.quad	1794199622703728310     # double 9.9999999999999994E-189
	.quad	1809278064245250148     # double 1.0E-187
	.quad	1824353132768337726     # double 9.9999999999999991E-187
	.quad	1839088652478113550     # double 9.9999999999999999E-186
	.quad	1854130352394805458     # double 1.0000000000000001E-184
	.quad	1869274311464449155     # double 1.0E-183
	.quad	1883981126779826596     # double 1.0E-182
	.quad	1898986946203520525     # double 1.0E-181
	.quad	1914198181197535432     # double 1.0E-180
	.quad	1928876964877758202     # double 1.0E-179
	.quad	1943847744757508792     # double 9.9999999999999995E-179
	.quad	1959124678896417459     # double 9.9999999999999995E-178
	.quad	1973776087932934496     # double 1.0E-176
	.quad	1988712649508052920     # double 1.0E-175
	.quad	2004005651756423078     # double 1.0E-174
	.quad	2018678418954170056     # double 1.0E-173
	.quad	2033581564216171130     # double 1.0E-172
	.quad	2048832796073144600     # double 9.9999999999999998E-172
	.quad	2063583882754760367     # double 9.9999999999999998E-171
	.quad	2078454394898482779     # double 1.0E-169
	.quad	2093664835357607922     # double 1.0E-168
	.quad	2108492405910189303     # double 1.0E-167
	.quad	2123331049774342709     # double 1.0E-166
	.quad	2138501654884006594     # double 1.0E-165
	.quad	2153403916716827833     # double 9.9999999999999996E-165
	.quad	2168211439214214631     # double 9.9999999999999992E-164
	.quad	2183343142615420257     # double 9.9999999999999995E-163
	.quad	2198318345151600733     # double 1.0E-161
	.quad	2213095475689254516     # double 9.9999999999999999E-161
	.quad	2228189189140793873     # double 9.9999999999999999E-160
	.quad	2243235622832598603     # double 1.0000000000000001E-158
	.quad	2257983073722075613     # double 9.9999999999999994E-158
	.quad	2273039687613394005     # double 1.0E-156
	.quad	2288155682980613045     # double 1.0E-155
	.quad	2302874149838667426     # double 9.9999999999999997E-155
	.quad	2317894533690707531     # double 1.0E-153
	.quad	2333078460381573359     # double 1.0000000000000001E-152
	.quad	2347768622521441578     # double 9.9999999999999993E-152
	.quad	2362753625475748981     # double 1.0E-150
	.quad	2378003891349863625     # double 9.9999999999999997E-150
	.quad	2392666412163378171     # double 9.9999999999999994E-149
	.quad	2407616863459743482     # double 9.9999999999999997E-148
	.quad	2422927227859672249     # double 1.0E-146
	.quad	2437567441023246835     # double 9.9999999999999991E-146
	.quad	2452484150466153072     # double 9.9999999999999995E-145
	.quad	2467752337549257996     # double 9.9999999999999995E-144
	.quad	2482471633181877288     # double 1.0E-142
	.quad	2497355391596014898     # double 1.0E-141
	.quad	2512582389893159038     # double 9.9999999999999998E-141
	.quad	2527378914499454799     # double 1.0E-139
	.quad	2542230494174560547     # double 1.0000000000000001E-138
	.quad	2557417269047914859     # double 9.9999999999999997E-138
	.quad	2572289212573816547     # double 1.0E-136
	.quad	2587109367699086492     # double 1.0E-135
	.quad	2602256861885146051     # double 1.0E-134
	.quad	2617202456699725402     # double 1.0000000000000001E-133
	.quad	2631991923788046320     # double 9.9999999999999998E-133
	.quad	2647101057927919596     # double 9.9999999999999998E-132
	.quad	2662118577829098228     # double 1.0000000000000001E-130
	.quad	2676878076131336112     # double 9.9999999999999992E-130
	.quad	2691949749288605597     # double 1.0000000000000001E-128
	.quad	2707037508532166338     # double 1.0E-127
	.quad	2721767740441745010     # double 9.9999999999999995E-127
	.quad	2736802830608190479     # double 1.0E-125
	.quad	2751959182959546249     # double 9.9999999999999993E-125
	.quad	2766660834407543660     # double 1.0000000000000001E-123
	.quad	2781660198997012551     # double 1.0000000000000001E-122
	.quad	2796883536805199404     # double 9.9999999999999998E-122
	.quad	2811557277646183863     # double 9.9999999999999998E-121
	.quad	2826521753976886565     # double 1.0E-119
	.quad	2841810507270260023     # double 9.9999999999999999E-119
	.quad	2856456991659083397     # double 1.0E-117
	.quad	2871387397424584742     # double 9.9999999999999999E-117
	.quad	2886672704910933552     # double 1.0000000000000001E-115
	.quad	2901359899787470558     # double 1.0000000000000001E-114
	.quad	2916257033516642453     # double 9.9999999999999997E-114
	.quad	2931500750957579450     # double 9.9999999999999994E-113
	.quad	2946265927169263605     # double 1.0000000000000001E-111
	.quad	2961130568675457522     # double 1.0000000000000001E-110
	.quad	2976333670837672046     # double 9.9999999999999999E-110
	.quad	2991175000696960837     # double 1.0E-108
	.quad	3006007911516652822     # double 1.0E-107
	.quad	3021171350320739931     # double 9.9999999999999994E-107
	.quad	3036087048976517625     # double 9.9999999999999996E-106
	.quad	3050888972797672567     # double 9.9999999999999993E-105
	.quad	3066013677853588373     # double 9.9999999999999995E-104
	.quad	3081002002287187261     # double 9.9999999999999993E-103
	.quad	3095773665367583373     # double 1.0000000000000001E-101
	.quad	3110860544497550640     # double 1.0E-100
	.quad	3125919792542303038     # double 1.0E-99
	.quad	3140661904118051853     # double 9.9999999999999993E-99
	.quad	3155711843867210001     # double 1.0E-97
	.quad	3170840353250979498     # double 9.999999999999999E-97
	.quad	3185553605935471189     # double 9.9999999999999999E-96
	.quad	3200567472070557930     # double 9.9999999999999996E-95
	.quad	3215763619480711314     # double 9.999999999999999E-94
	.quad	3230448689654209719     # double 9.9999999999999999E-93
	.quad	3245427327650554853     # double 1.0E-91
	.quad	3260689527820848751     # double 9.9999999999999999E-91
	.quad	3275347076010955275     # double 1.0E-89
	.quad	3290291311528060557     # double 9.9999999999999993E-89
	.quad	3305593906203914289     # double 1.0E-87
	.quad	3320248687600129567     # double 1.0000000000000001E-86
	.quad	3335159326946102182     # double 9.9999999999999997E-86
	.quad	3350419926408040080     # double 1.0E-84
	.quad	3365153448830347546     # double 1.0E-83
	.quad	3380031279415448416     # double 9.9999999999999996E-83
	.quad	3395250867926296632     # double 9.9999999999999996E-82
	.quad	3410061285881897251     # double 9.9999999999999996E-81
	.quad	3424907076661459308     # double 9.9999999999999999E-80
	.quad	3440086615415384007     # double 9.9999999999999999E-79
	.quad	3454972126665216220     # double 9.9999999999999993E-78
	.quad	3469786628572181779     # double 9.9999999999999993E-77
	.quad	3484927056235360856     # double 9.9999999999999995E-76
	.quad	3499885900780341111     # double 9.9999999999999995E-75
	.quad	3514669847147661653     # double 1.0E-73
	.quad	3529772080386284458     # double 9.9999999999999997E-73
	.quad	3544802539477307722     # double 9.9999999999999992E-72
	.quad	3559556646450443677     # double 9.9999999999999999E-71
	.quad	3574621580446335748     # double 9.9999999999999996E-70
	.quad	3589721975617479139     # double 1.0000000000000001E-68
	.quad	3604446942557231707     # double 9.9999999999999994E-68
	.quad	3619475451511394546     # double 9.9999999999999998E-67
	.quad	3634644143635780247     # double 9.9999999999999992E-66
	.quad	3649340653511681853     # double 9.9999999999999997E-65
	.quad	3664333591136030989     # double 1.0000000000000001E-63
	.quad	3679568979503817384     # double 1.0E-62
	.quad	3694237699278302034     # double 1.0E-61
	.quad	3709195899275879974     # double 9.9999999999999997E-61
	.quad	3724496420693862360     # double 1.0E-59
	.quad	3739138001697432014     # double 1.0E-58
	.quad	3754062278231366209     # double 9.9999999999999995E-58
	.quad	3769339924178256082     # double 1.0E-56
	.quad	3784041484441278595     # double 9.9999999999999999E-56
	.quad	3798932632592748196     # double 1.0E-54
	.quad	3814168868061557325     # double 1.0E-53
	.quad	3828948072970981232     # double 1.0E-52
	.quad	3843806869186450252     # double 1.0E-51
	.quad	3859002664735258655     # double 1.0E-50
	.quad	3873857694494683923     # double 9.9999999999999993E-50
	.quad	3888684897022652376     # double 9.9999999999999997E-49
	.quad	3903841200462085070     # double 9.9999999999999997E-48
	.quad	3918770277926589793     # double 1.0E-46
	.quad	3933566627244108473     # double 9.9999999999999998E-46
	.quad	3948684364170478951     # double 9.9999999999999995E-45
	.quad	3963685753846975329     # double 1.0000000000000001E-43
	.quad	3978451973076164153     # double 1.0E-42
	.quad	3993532047392122311     # double 1.0E-41
	.quad	4008604054463141788     # double 9.9999999999999992E-41
	.quad	4023340849777945987     # double 9.9999999999999992E-40
	.quad	4038384144200923364     # double 9.9999999999999996E-39
	.quad	4053525113571281807     # double 1.0000000000000001E-37
	.quad	4068233174594694770     # double 9.9999999999999994E-37
	.quad	4083240551153433103     # double 1.0E-35
	.quad	4098448866519239753     # double 9.9999999999999992E-35
	.quad	4113128866711215964     # double 1.0000000000000001E-33
	.quad	4128101167230658355     # double 1.0000000000000001E-32
	.quad	4143375250170144896     # double 1.0000000000000001E-31
	.quad	4158027847206421152     # double 1.0000000000000001E-30
	.quad	4172965893781238599     # double 9.9999999999999994E-30
	.quad	4188260752279232537     # double 9.9999999999999997E-29
	.quad	4202930039008934928     # double 1.0E-27
	.quad	4217834634465954580     # double 1.0E-26
	.quad	4233087679066701273     # double 1.0E-25
	.quad	4247835366853742247     # double 9.9999999999999992E-25
	.quad	4262707295203537489     # double 9.9999999999999996E-24
	.quad	4277919505920253670     # double 1.0E-22
	.quad	4292743757239851855     # double 9.9999999999999991E-22
	.quad	4307583784117748259     # double 9.9999999999999995E-21
	.quad	4322756117994590892     # double 9.9999999999999998E-20
	.quad	4337655138388951980     # double 1.0000000000000001E-18
	.quad	4352464011485697175     # double 1.0000000000000001E-17
	.quad	4367597403136100796     # double 9.9999999999999997E-17
	.quad	4382569440205035030     # double 1.0000000000000001E-15
	.quad	4397347889687374747     # double 9.9999999999999999E-15
	.quad	4412443251819771522     # double 1.0E-13
	.quad	4427486594234968593     # double 9.9999999999999998E-13
	.quad	4442235333156365461     # double 9.9999999999999993E-12
	.quad	4457293557087583675     # double 1.0E-10
	.quad	4472406533629990549     # double 1.0000000000000001E-9
	.quad	4487126258331716666     # double 1.0E-8
	.quad	4502148214488346440     # double 9.9999999999999995E-8
	.quad	4517329193108106637     # double 9.9999999999999995E-7
	.quad	4532020583610935537     # double 1.0000000000000001E-5
	.quad	4547007122018943789     # double 1.0E-4
	.quad	4562254508917369340     # double 0.001
	.quad	4576918229304087675     # double 0.01
	.quad	4591870180066957722     # double 0.10000000000000001
	.quad	4607182418800017408     # double 1
	.quad	4621819117588971520     # double 10
	.quad	4636737291354636288     # double 100
	.quad	4652007308841189376     # double 1000
	.quad	4666723172467343360     # double 1.0E+4
	.quad	4681608360884174848     # double 1.0E+5
	.quad	4696837146684686336     # double 1.0E+6
	.quad	4711630319722168320     # double 1.0E+7
	.quad	4726483295884279808     # double 1.0E+8
	.quad	4741671816366391296     # double 1.0E+9
	.quad	4756540486875873280     # double 1.0E+10
	.quad	4771362005757984768     # double 1.0E+11
	.quad	4786511204640096256     # double 1.0E+12
	.quad	4801453603149578240     # double 1.0E+13
	.quad	4816244402031689728     # double 1.0E+14
	.quad	4831355200913801216     # double 1.0E+15
	.quad	4846369599423283200     # double 1.0E+16
	.quad	4861130398305394688     # double 1.0E+17
	.quad	4876203697187506176     # double 1.0E+18
	.quad	4891288408196988160     # double 1.0E+19
	.quad	4906019910204099648     # double 1.0E+20
	.quad	4921056587992461136     # double 1.0E+21
	.quad	4936209963552724370     # double 1.0E+22
	.quad	4950912855330343670     # double 9.9999999999999991E+22
	.quad	4965913770331839924     # double 9.9999999999999998E+23
	.quad	4981134201117475473     # double 1.0000000000000001E+25
	.quad	4995809153217856309     # double 1.0E+26
	.quad	5010775143622804482     # double 1.0E+27
	.quad	5026061058026967681     # double 9.9999999999999995E+27
	.quad	5040708725286295329     # double 9.9999999999999991E+28
	.quad	5055640609639927018     # double 1.0E+30
	.quad	5070927765361438756     # double 9.9999999999999996E+30
	.quad	5085611494797045271     # double 1.0000000000000001E+32
	.quad	5100510072459938204     # double 9.9999999999999995E+32
	.quad	5115755594818026499     # double 9.9999999999999995E+33
	.quad	5130517386810051970     # double 9.9999999999999996E+34
	.quad	5145383438407770339     # double 1.0E+36
	.quad	5160588303184390427     # double 9.9999999999999995E+36
	.quad	5175426328141668785     # double 9.9999999999999997E+37
	.quad	5190260616003865117     # double 9.9999999999999994E+38
	.quad	5205425776111082661     # double 1.0E+40
	.quad	5220338247323490791     # double 1.0E+41
	.quad	5235141515912716385     # double 1.0E+42
	.quad	5250267901928720505     # double 1.0E+43
	.quad	5265253074562153804     # double 1.0000000000000001E+44
	.quad	5280026050892618910     # double 9.9999999999999993E+44
	.quad	5295114571585172422     # double 9.9999999999999999E+45
	.quad	5310170741700075612     # double 1.0E+47
	.quad	5324914135746594931     # double 1.0E+48
	.quad	5339965678584216207     # double 9.9999999999999995E+48
	.quad	5355091182177117338     # double 1.0000000000000001E+50
	.quad	5369805687274470848     # double 9.9999999999999999E+50
	.quad	5384821118925634864     # double 9.9999999999999999E+51
	.quad	5400014330993143358     # double 9.9999999999999999E+52
	.quad	5414700624226077134     # double 1.0000000000000001E+54
	.quad	5429680791046716481     # double 1.0E+55
	.quad	5444940124671458729     # double 1.0000000000000001E+56
	.quad	5459598867255545107     # double 1.0E+57
	.quad	5474544595765125207     # double 9.9999999999999994E+57
	.quad	5489849056681572461     # double 9.9999999999999997E+58
	.quad	5504500338876674884     # double 9.9999999999999994E+59
	.quad	5519412436223111189     # double 9.9999999999999995E+60
	.quad	5534674858185628699     # double 1.0E+62
	.quad	5549404963419349393     # double 1.0000000000000001E+63
	.quad	5564284217833028085     # double 1.0E+64
	.quad	5579505586129598578     # double 9.9999999999999999E+64
	.quad	5594312666986969927     # double 9.9999999999999994E+65
	.quad	5609159848224127513     # double 9.9999999999999998E+66
	.quad	5624341125050046623     # double 9.9999999999999995E+67
	.quad	5639223377414889316     # double 1.0000000000000001E+69
	.quad	5654039237190600509     # double 1.0000000000000001E+70
	.quad	5669181362189711628     # double 1.0E+71
	.quad	5684137024229819303     # double 9.9999999999999994E+71
	.quad	5698922296640836753     # double 9.9999999999999998E+72
	.quad	5714026187434080693     # double 9.9999999999999995E+73
	.quad	5729053538610189329     # double 9.9999999999999992E+74
	.quad	5743808940547873046     # double 1.0E+76
	.quad	5758875493249449819     # double 9.9999999999999998E+76
	.quad	5773972853347434393     # double 1.0E+78
	.quad	5788699084901003135     # double 9.9999999999999996E+78
	.quad	5803729174622436191     # double 1.0E+80
	.quad	5818894902808190235     # double 9.9999999999999992E+80
	.quad	5833592647658521698     # double 9.9999999999999996E+81
	.quad	5848587129000908155     # double 1.0E+83
	.quad	5863819622897374573     # double 1.0000000000000001E+84
	.quad	5878489548701575880     # double 1.0E+85
	.quad	5893449256236299642     # double 1.0E+86
	.quad	5908746951022133612     # double 9.9999999999999995E+86
	.quad	5923389709789098439     # double 9.9999999999999995E+87
	.quad	5938315458527276601     # double 9.9999999999999999E+88
	.quad	5953594944729471431     # double 9.9999999999999997E+89
	.quad	5968293054513797149     # double 1.0000000000000001E+91
	.quad	5983185640364723748     # double 1.0E+92
	.quad	5998423672957854125     # double 1.0E+93
	.quad	6013199508259175692     # double 1.0E+94
	.quad	6028059708478020687     # double 1.0E+95
	.quad	6043257259031049059     # double 1.0E+96
	.quad	6058108998157561886     # double 1.0000000000000001E+97
	.quad	6072937571782577189     # double 1.0E+98
	.quad	6088095589093318446     # double 9.9999999999999997E+98
	.quad	6103021453049119613     # double 1.0E+100
	.quad	6117819141328598108     # double 9.9999999999999998E+100
	.quad	6132938551957418355     # double 9.9999999999999998E+101
	.quad	6147936803441821416     # double 1.0E+103
	.quad	6162704330251049122     # double 1.0E+104
	.quad	6177786039042055882     # double 9.9999999999999994E+104
	.quad	6192854981472359231     # double 1.0000000000000001E+106
	.quad	6207593053720795150     # double 9.9999999999999996E+106
	.quad	6222637944310812178     # double 1.0E+108
	.quad	6237775920867971275     # double 9.9999999999999998E+108
	.quad	6252485228896883966     # double 1.0E+110
	.quad	6267494164212496957     # double 9.9999999999999996E+110
	.quad	6282699556909163622     # double 9.9999999999999993E+111
	.quad	6297380774879948160     # double 1.0E+113
	.quad	6312354597622900960     # double 1.0E+114
	.quad	6327625826393305484     # double 1.0E+115
	.quad	6342279612666699247     # double 1.0E+116
	.quad	6357219145787913579     # double 1.0000000000000001E+117
	.quad	6372515862468903621     # double 9.9999999999999997E+117
	.quad	6387181665105488315     # double 9.9999999999999994E+118
	.quad	6402087712267973674     # double 9.9999999999999998E+119
	.quad	6417342571500552501     # double 1.0E+121
	.quad	6432086856852908225     # double 1.0E+122
	.quad	6446960202883822321     # double 9.9999999999999998E+122
	.quad	6462174185701937069     # double 9.9999999999999995E+123
	.quad	6476995114331412940     # double 9.9999999999999992E+124
	.quad	6491836525663526975     # double 9.9999999999999992E+125
	.quad	6507010590108141647     # double 9.9999999999999995E+126
	.quad	6521906365687930162     # double 1.0000000000000001E+128
	.quad	6536716590790747262     # double 1.0E+129
	.quad	6551851672448740766     # double 1.0000000000000001E+130
	.quad	6566820540753443970     # double 9.9999999999999991E+130
	.quad	6581600310554213283     # double 9.9999999999999999E+131
	.quad	6596697323084647052     # double 1.0E+133
	.quad	6611737571003524759     # double 9.9999999999999992E+133
	.quad	6626487599298388029     # double 9.9999999999999996E+134
	.quad	6641547434946439245     # double 1.0000000000000001E+136
	.quad	6656657389519784240     # double 1.0E+137
	.quad	6671378373375286140     # double 1.0E+138
	.quad	6686401903474135643     # double 1.0E+139
	.quad	6701579930952233849     # double 1.0000000000000001E+140
	.quad	6716272551097421911     # double 1.0E+141
	.quad	6731260626558379117     # double 1.0000000000000001E+142
	.quad	6746505131482525380     # double 1.0E+143
	.quad	6761170052691860085     # double 1.0E+144
	.quad	6776123504483000594     # double 9.9999999999999999E+144
	.quad	6791432928788053163     # double 9.9999999999999993E+145
	.quad	6806070800255343574     # double 9.9999999999999997E+146
	.quad	6820990439868928716     # double 1.0E+148
	.quad	6836262289665382271     # double 1.0E+149
	.quad	6850974717710472879     # double 9.9999999999999998E+149
	.quad	6865861337619414107     # double 1.0E+151
	.quad	6881091912785062770     # double 1.0E+152
	.quad	6895881730762912551     # double 9.9999999999999999E+152
	.quad	6910736104866537457     # double 1.0E+154
	.quad	6925926372775540717     # double 1.0E+155
	.quad	6940791766859600628     # double 9.9999999999999998E+155
	.quad	6955614650918971313     # double 9.9999999999999998E+156
	.quad	6970765556272656797     # double 9.9999999999999995E+157
	.quad	6985704755147937538     # double 9.9999999999999992E+158
	.quad	7000496887210966211     # double 1.0E+160
	.quad	7015609352569224180     # double 1.0E+161
	.quad	7030620626435931512     # double 9.9999999999999993E+161
	.quad	7045382727252532438     # double 9.9999999999999994E+162
	.quad	7060457653552755724     # double 1.0E+164
	.quad	7075539313153278087     # double 9.9999999999999989E+164
	.quad	7090272086580789417     # double 9.9999999999999994E+165
	.quad	7105310353644650708     # double 1.0E+167
	.quad	7120460749313351812     # double 9.9999999999999993E+167
	.quad	7135164882712455333     # double 9.9999999999999993E+168
	.quad	7150167349740806863     # double 1.0E+170
	.quad	7165384870476088769     # double 9.9999999999999995E+170
	.quad	7180061035097450290     # double 1.0000000000000001E+172
	.quad	7195028541153624318     # double 1.0E+173
	.quad	7210311613711739039     # double 1.0000000000000001E+174
	.quad	7224960465073586886     # double 9.9999999999999993E+174
	.quad	7239893829555368824     # double 1.0E+176
	.quad	7255182835437068374     # double 1.0E+177
	.quad	7269863095822322742     # double 1.0000000000000001E+178
	.quad	7284763118922862403     # double 9.9999999999999998E+178
	.quad	7300010448078009108     # double 1.0E+180
	.quad	7314768852325550060     # double 9.9999999999999991E+180
	.quad	7329636315483470312     # double 1.0000000000000001E+182
	.quad	7344842944710342753     # double 9.9999999999999995E+182
	.quad	7359677661323397949     # double 1.0E+184
	.quad	7374513327662353932     # double 9.9999999999999998E+184
	.quad	7389680210865521039     # double 9.9999999999999998E+185
	.quad	7404589451273023737     # double 9.999999999999999E+186
	.quad	7419394066030959928     # double 1.0E+188
	.quad	7434522134757852294     # double 1.0E+189
	.quad	7449504152308370132     # double 1.0000000000000001E+190
	.quad	7464278443256716681     # double 1.0000000000000001E+191
	.quad	7479368607221621995     # double 1.0E+192
	.quad	7494421696200865555     # double 1.0000000000000001E+193
	.quad	7509166374053909719     # double 9.9999999999999994E+193
	.quad	7524219521649687053     # double 9.9999999999999998E+194
	.quad	7539342016321045576     # double 9.9999999999999995E+195
	.quad	7554057775135708506     # double 9.9999999999999995E+196
	.quad	7569074773933509297     # double 1.0E+198
	.quad	7584265047601073839     # double 1.0000000000000001E+199
	.quad	7598952565167317594     # double 9.9999999999999996E+199
	.quad	7613934262404594417     # double 1.0E+201
	.quad	7629190726498141398     # double 9.999999999999999E+201
	.quad	7643850664720225804     # double 9.9999999999999998E+202
	.quad	7658797887777303439     # double 9.9999999999999999E+203
	.quad	7674104216878122611     # double 1.0E+205
	.quad	7688751996227527688     # double 1.0E+206
	.quad	7703665553093004554     # double 1.0E+207
	.quad	7718929799454322764     # double 9.9999999999999998E+207
	.quad	7733656483940292144     # double 1.0000000000000001E+209
	.quad	7748537163665533883     # double 9.9999999999999993E+209
	.quad	7763760313601558186     # double 9.9999999999999996E+210
	.quad	7778564053884953642     # double 9.999999999999999E+211
	.quad	7793412627027934517     # double 9.9999999999999998E+212
	.quad	7808595643736132738     # double 9.9999999999999995E+213
	.quad	7823474633821702097     # double 9.999999999999999E+214
	.quad	7838291852880443846     # double 1.0E+216
	.quad	7853435676983343159     # double 9.9999999999999996E+216
	.quad	7868388153203847971     # double 1.0000000000000001E+218
	.quad	7883174753039699947     # double 9.9999999999999997E+218
	.quad	7898280303113987046     # double 1.0E+220
	.quad	7913304543138139760     # double 1.0E+221
	.quad	7928061241389138444     # double 1.0E+222
	.quad	7943129414482358927     # double 1.0E+223
	.quad	7958223736346011545     # double 9.9999999999999996E+223
	.quad	7972951233830551935     # double 9.9999999999999992E+224
	.quad	7987982905965699551     # double 9.9999999999999996E+225
	.quad	8003145667125738796     # double 1.0000000000000001E+227
	.quad	8017844648236784758     # double 9.9999999999999992E+227
	.quad	8032840674905064340     # double 9.9999999999999999E+228
	.quad	8048070271315481149     # double 1.0000000000000001E+230
	.quad	8062741404405536460     # double 1.0000000000000001E+231
	.quad	8077702621047577727     # double 1.0000000000000001E+232
	.quad	8092997486257191375     # double 9.9999999999999997E+232
	.quad	8107641424014248003     # double 1.0E+234
	.quad	8122568646490040916     # double 1.0000000000000001E+235
	.quad	8137849974864254185     # double 1.0000000000000001E+236
	.quad	8152544630576045329     # double 9.9999999999999994E+236
	.quad	8167438655623861334     # double 1.0E+238
	.quad	8182678487213103467     # double 9.9999999999999999E+238
	.quad	8197450949396715491     # double 1.0E+240
	.quad	8212312555081272796     # double 1.0000000000000001E+241
	.quad	8227511862466441555     # double 1.0000000000000001E+242
	.quad	8242360307532691156     # double 1.0000000000000001E+243
	.quad	8257190253682816137     # double 1.0000000000000001E+244
	.quad	8272349986649944491     # double 1.0E+245
	.quad	8287272633750019851     # double 1.0000000000000001E+246
	.quad	8302071662386050765     # double 9.9999999999999995E+246
	.quad	8317192748460561537     # double 1.0E+248
	.quad	8332187858484294864     # double 9.9999999999999992E+248
	.quad	8346956694235468292     # double 9.9999999999999992E+249
	.quad	8362040039203907206     # double 1.0E+251
	.quad	8377105913801525268     # double 1.0000000000000001E+252
	.quad	8391845264313580056     # double 9.9999999999999993E+252
	.quad	8406891752733120670     # double 9.9999999999999994E+253
	.quad	8422026733359923043     # double 9.9999999999999998E+254
	.quad	8436737289693151036     # double 1.0E+256
	.quad	8451747785389158155     # double 1.0E+257
	.quad	8466950252372585831     # double 1.0000000000000001E+258
	.quad	8481632689390553280     # double 9.9999999999999992E+258
	.quad	8496608035942484721     # double 1.0000000000000001E+260
	.quad	8511876407571054294     # double 9.9999999999999992E+260
	.quad	8526531384320212620     # double 1.0E+262
	.quad	8541472405536132655     # double 1.0E+263
	.quad	8556770982335504827     # double 1.0E+264
	.quad	8571433297250123029     # double 1.0000000000000001E+265
	.quad	8586340797630094426     # double 1.0E+266
	.quad	8601597473384530800     # double 9.9999999999999997E+266
	.quad	8616338352758403622     # double 9.9999999999999997E+267
	.quad	8631213117947018928     # double 1.0E+269
	.quad	8646428874712260188     # double 1.0E+270
	.quad	8661246477190873849     # double 9.9999999999999995E+270
	.quad	8676089274419180472     # double 1.0000000000000001E+272
	.quad	8691265071234035877     # double 9.9999999999999995E+272
	.quad	8706157598619623015     # double 9.9999999999999992E+273
	.quad	8720969177136690689     # double 9.9999999999999996E+274
	.quad	8736105950562497410     # double 1.0000000000000001E+276
	.quad	8751071646802550833     # double 1.0E+277
	.quad	8765852738296924221     # double 9.9999999999999996E+277
	.quad	8780951402944363085     # double 1.0000000000000001E+279
	.quad	8795988553143856240     # double 1.0E+280
	.quad	8810739872155129740     # double 1.0E+281
	.quad	8825801321198693743     # double 1.0E+282
	.quad	8840908250655452261     # double 9.9999999999999995E+282
	.quad	8855630494976198527     # double 1.0000000000000001E+284
	.quad	8870655600656603486     # double 9.9999999999999998E+284
	.quad	8885830673919285211     # double 1.0E+286
	.quad	8900524524987563474     # double 1.0000000000000001E+287
	.quad	8915514139102383430     # double 1.0E+288
	.quad	8930755759050537036     # double 1.0000000000000001E+289
	.quad	8945421882333202015     # double 1.0000000000000001E+290
	.quad	8960376836716005366     # double 9.9999999999999996E+290
	.quad	8975683443661690106     # double 1.0E+292
	.quad	8990322489028717112     # double 9.9999999999999992E+292
	.quad	9005243596016972999     # double 1.0000000000000001E+294
	.quad	9020517280031764984     # double 9.9999999999999998E+294
	.quad	9035226268917471035     # double 9.9999999999999998E+295
	.quad	9050114321809489162     # double 1.0E+297
	.quad	9065346688203983948     # double 9.9999999999999996E+297
	.quad	9080133147627747248     # double 1.0000000000000001E+299
	.quad	9094988921128908188     # double 1.0000000000000001E+300
	.quad	9110180938284831491     # double 1.0000000000000001E+301
	.quad	9125043052530916322     # double 1.0000000000000001E+302
	.quad	9139867303189443290     # double 1.0E+303
	.quad	9155019916792074128     # double 9.9999999999999994E+303
	.quad	9169955912700582330     # double 9.9999999999999993E+304
	.quad	9184749379333099561     # double 1.0E+306
	.quad	9199863512903218227     # double 9.9999999999999999E+306
	.quad	9214871658872686752     # double 1.0E+308
	.quad	0                       # double 0

	.section	.rdata,"dr",discard,"?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"
	.globl	"?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB" # @"?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB"
	.p2align	4
"?first@?1??classify_utf8@detail@json@boost@@YAGD@Z@4QBGB":
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	0                       # 0x0
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	258                     # 0x102
	.short	515                     # 0x203
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	1027                    # 0x403
	.short	771                     # 0x303
	.short	771                     # 0x303
	.short	1284                    # 0x504
	.short	1540                    # 0x604
	.short	1540                    # 0x604
	.short	1540                    # 0x604
	.short	1796                    # 0x704
	.zero	22

	.section	.rdata,"dr",discard,"??_C@_04KCECFHEP@alse?$AA@"
	.globl	"??_C@_04KCECFHEP@alse?$AA@" # @"??_C@_04KCECFHEP@alse?$AA@"
"??_C@_04KCECFHEP@alse?$AA@":
	.asciz	"alse"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.rdata,"dr",discard,"?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.globl	"?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB" # @"?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB"
	.p2align	4
"?jump_table@?4???$parse_value@$0A@$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z@4QBQ8123@EAAPEBD0@ZB":
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.quad	"?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"

	.section	.data,"dw",discard,"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"
	.globl	"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8" # @"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"
	.p2align	4
"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"
	.zero	6

	.section	.xdata,"dr",discard,"_CT??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z72"
	.globl	"_CT??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z72" # @"_CT??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z72"
	.p2align	4
"_CT??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z72":
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	"??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z248"
	.globl	"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z248" # @"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z248"
	.p2align	4
"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z248":
	.long	16                      # 0x10
	.long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0bad_alloc@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"
	.globl	"_CTA5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@" # @"_CTA5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"
	.p2align	4
"_CTA5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@":
	.long	5                       # 0x5
	.long	"_CT??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8??0?$wrapexcept@Vbad_alloc@std@@@boost@@QEAA@AEBU01@@Z72"@IMGREL
	.long	"_CT??_R0?AVclone_base@exception_detail@boost@@@8??0clone_base@exception_detail@boost@@QEAA@AEBV012@@Z8"@IMGREL
	.long	"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z248"@IMGREL
	.long	"_CT??_R0?AVexception@boost@@@8??0exception@boost@@QEAA@AEBV01@@Z4032"@IMGREL

	.section	.xdata,"dr",discard,"_TI5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"
	.globl	"_TI5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@" # @"_TI5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"
	.p2align	3
"_TI5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@":
	.long	0                       # 0x0
	.long	"??1?$wrapexcept@Vbad_alloc@std@@@boost@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA5?AU?$wrapexcept@Vbad_alloc@std@@@boost@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4               # @94
.L__unnamed_95:
	.quad	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.quad	"?clone@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAPEBVclone_base@exception_detail@2@XZ"
	.quad	"?rethrow@?$wrapexcept@Vbad_alloc@std@@@boost@@UEBAXXZ"
	.quad	"??_G?$wrapexcept@Vbad_alloc@std@@@boost@@UEAAPEAXI@Z"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"
	.p2align	4               # @95
.L__unnamed_96:
	.quad	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"
	.quad	"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@W7EAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",largest,"??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"
	.p2align	3               # @96
.L__unnamed_97:
	.quad	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"
	.quad	"??_E?$wrapexcept@Vbad_alloc@std@@@boost@@WCA@EAAPEAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.globl	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@" # @"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.globl	"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8" # @"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.p2align	3
"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8":
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	5                       # 0x5
	.long	"??_R2?$wrapexcept@Vbad_alloc@std@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.globl	"??_R2?$wrapexcept@Vbad_alloc@std@@@boost@@8" # @"??_R2?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.p2align	4
"??_R2?$wrapexcept@Vbad_alloc@std@@@boost@@8":
	.long	"??_R1A@?0A@EA@?$wrapexcept@Vbad_alloc@std@@@boost@@8"@IMGREL
	.long	"??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"@IMGREL
	.long	"??_R17?0A@EA@bad_alloc@std@@8"@IMGREL
	.long	"??_R17?0A@EA@exception@std@@8"@IMGREL
	.long	"??_R1CA@?0A@EA@exception@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.globl	"??_R1A@?0A@EA@?$wrapexcept@Vbad_alloc@std@@@boost@@8" # @"??_R1A@?0A@EA@?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.p2align	4
"??_R1A@?0A@EA@?$wrapexcept@Vbad_alloc@std@@@boost@@8":
	.long	"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"@IMGREL
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R17?0A@EA@bad_alloc@std@@8"
	.globl	"??_R17?0A@EA@bad_alloc@std@@8" # @"??_R17?0A@EA@bad_alloc@std@@8"
	.p2align	4
"??_R17?0A@EA@bad_alloc@std@@8":
	.long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3bad_alloc@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"
	.globl	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@" # @"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"
	.p2align	4
"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@":
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"@IMGREL

	.section	.rdata,"dr",discard,"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"
	.globl	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@" # @"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"
	.p2align	4
"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@":
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	"??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"@IMGREL
	.long	"??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"@IMGREL
	.long	"??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"
	.p2align	3               # @97
.L__unnamed_98:
	.quad	"??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"
	.quad	"??Rplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@UEAAXPEAX@Z"

	.section	.rdata,"dr",discard,"??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"
	.globl	"??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@" # @"??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"
	.p2align	4
"??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8"@IMGREL
	.long	"??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"@IMGREL
	.long	"??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"@IMGREL

	.section	.data,"dw",discard,"??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8"
	.globl	"??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8" # @"??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8"
	.p2align	4
"??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@"
	.zero	5

	.section	.rdata,"dr",discard,"??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.globl	"??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8" # @"??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.p2align	3
"??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.globl	"??_R2place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8" # @"??_R2place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.p2align	2
"??_R2place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8":
	.long	"??_R1A@?0A@EA@place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"@IMGREL
	.long	"??_R1A@?0A@EA@place_one@object@json@boost@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.globl	"??_R1A@?0A@EA@place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8" # @"??_R1A@?0A@EA@place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.p2align	4
"??_R1A@?0A@EA@place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8":
	.long	"??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0L@CKFFNMMF@boost?4json?$AA@"
	.globl	"??_C@_0L@CKFFNMMF@boost?4json?$AA@" # @"??_C@_0L@CKFFNMMF@boost?4json?$AA@"
"??_C@_0L@CKFFNMMF@boost?4json?$AA@":
	.asciz	"boost.json"

	.section	.rdata,"dr",discard,"??_C@_0BJ@LIGENOKI@Message?5text?5unavailable?$AA@"
	.globl	"??_C@_0BJ@LIGENOKI@Message?5text?5unavailable?$AA@" # @"??_C@_0BJ@LIGENOKI@Message?5text?5unavailable?$AA@"
"??_C@_0BJ@LIGENOKI@Message?5text?5unavailable?$AA@":
	.asciz	"Message text unavailable"

	.section	.rdata,"dr",discard,"??_C@_0N@MNJHOOI@syntax?5error?$AA@"
	.globl	"??_C@_0N@MNJHOOI@syntax?5error?$AA@" # @"??_C@_0N@MNJHOOI@syntax?5error?$AA@"
"??_C@_0N@MNJHOOI@syntax?5error?$AA@":
	.asciz	"syntax error"

	.section	.rdata,"dr",discard,"??_C@_0L@PJAECMNH@extra?5data?$AA@"
	.globl	"??_C@_0L@PJAECMNH@extra?5data?$AA@" # @"??_C@_0L@PJAECMNH@extra?5data?$AA@"
"??_C@_0L@PJAECMNH@extra?5data?$AA@":
	.asciz	"extra data"

	.section	.rdata,"dr",discard,"??_C@_0BA@DMADGBDA@incomplete?5JSON?$AA@"
	.globl	"??_C@_0BA@DMADGBDA@incomplete?5JSON?$AA@" # @"??_C@_0BA@DMADGBDA@incomplete?5JSON?$AA@"
"??_C@_0BA@DMADGBDA@incomplete?5JSON?$AA@":
	.asciz	"incomplete JSON"

	.section	.rdata,"dr",discard,"??_C@_0BC@HHLEKGDI@mantissa?5overflow?$AA@"
	.globl	"??_C@_0BC@HHLEKGDI@mantissa?5overflow?$AA@" # @"??_C@_0BC@HHLEKGDI@mantissa?5overflow?$AA@"
"??_C@_0BC@HHLEKGDI@mantissa?5overflow?$AA@":
	.asciz	"mantissa overflow"

	.section	.rdata,"dr",discard,"??_C@_0BC@HGAILDEM@exponent?5overflow?$AA@"
	.globl	"??_C@_0BC@HGAILDEM@exponent?5overflow?$AA@" # @"??_C@_0BC@HGAILDEM@exponent?5overflow?$AA@"
"??_C@_0BC@HGAILDEM@exponent?5overflow?$AA@":
	.asciz	"exponent overflow"

	.section	.rdata,"dr",discard,"??_C@_0BM@LNGFADPD@illegal?5character?5for?5value?$AA@"
	.globl	"??_C@_0BM@LNGFADPD@illegal?5character?5for?5value?$AA@" # @"??_C@_0BM@LNGFADPD@illegal?5character?5for?5value?$AA@"
"??_C@_0BM@LNGFADPD@illegal?5character?5for?5value?$AA@":
	.asciz	"illegal character for value"

	.section	.rdata,"dr",discard,"??_C@_0BK@DPPBFMOE@illegal?5control?5character?$AA@"
	.globl	"??_C@_0BK@DPPBFMOE@illegal?5control?5character?$AA@" # @"??_C@_0BK@DPPBFMOE@illegal?5control?5character?$AA@"
"??_C@_0BK@DPPBFMOE@illegal?5control?5character?$AA@":
	.asciz	"illegal control character"

	.section	.rdata,"dr",discard,"??_C@_0CF@OCDBBGPE@illegal?5character?5in?5escape?5sequ@"
	.globl	"??_C@_0CF@OCDBBGPE@illegal?5character?5in?5escape?5sequ@" # @"??_C@_0CF@OCDBBGPE@illegal?5character?5in?5escape?5sequ@"
"??_C@_0CF@OCDBBGPE@illegal?5character?5in?5escape?5sequ@":
	.asciz	"illegal character in escape sequence"

	.section	.rdata,"dr",discard,"??_C@_0BP@FDDBMGLG@illegal?5extra?5digits?5in?5number?$AA@"
	.globl	"??_C@_0BP@FDDBMGLG@illegal?5extra?5digits?5in?5number?$AA@" # @"??_C@_0BP@FDDBMGLG@illegal?5extra?5digits?5in?5number?$AA@"
"??_C@_0BP@FDDBMGLG@illegal?5extra?5digits?5in?5number?$AA@":
	.asciz	"illegal extra digits in number"

	.section	.rdata,"dr",discard,"??_C@_0BK@IMJLJKGA@illegal?5leading?5surrogate?$AA@"
	.globl	"??_C@_0BK@IMJLJKGA@illegal?5leading?5surrogate?$AA@" # @"??_C@_0BK@IMJLJKGA@illegal?5leading?5surrogate?$AA@"
"??_C@_0BK@IMJLJKGA@illegal?5leading?5surrogate?$AA@":
	.asciz	"illegal leading surrogate"

	.section	.rdata,"dr",discard,"??_C@_0BL@ILKOFFNE@illegal?5trailing?5surrogate?$AA@"
	.globl	"??_C@_0BL@ILKOFFNE@illegal?5trailing?5surrogate?$AA@" # @"??_C@_0BL@ILKOFFNE@illegal?5trailing?5surrogate?$AA@"
"??_C@_0BL@ILKOFFNE@illegal?5trailing?5surrogate?$AA@":
	.asciz	"illegal trailing surrogate"

	.section	.rdata,"dr",discard,"??_C@_0P@FBHNPLFB@expected?5comma?$AA@"
	.globl	"??_C@_0P@FBHNPLFB@expected?5comma?$AA@" # @"??_C@_0P@FBHNPLFB@expected?5comma?$AA@"
"??_C@_0P@FBHNPLFB@expected?5comma?$AA@":
	.asciz	"expected comma"

	.section	.rdata,"dr",discard,"??_C@_0P@GNNNFEJF@expected?5colon?$AA@"
	.globl	"??_C@_0P@GNNNFEJF@expected?5colon?$AA@" # @"??_C@_0P@GNNNFEJF@expected?5colon?$AA@"
"??_C@_0P@GNNNFEJF@expected?5colon?$AA@":
	.asciz	"expected colon"

	.section	.rdata,"dr",discard,"??_C@_0BA@BKPLHJBP@expected?5quotes?$AA@"
	.globl	"??_C@_0BA@BKPLHJBP@expected?5quotes?$AA@" # @"??_C@_0BA@BKPLHJBP@expected?5quotes?$AA@"
"??_C@_0BA@BKPLHJBP@expected?5quotes?$AA@":
	.asciz	"expected quotes"

	.section	.rdata,"dr",discard,"??_C@_0BD@FONPMPNI@expected?5hex?5digit?$AA@"
	.globl	"??_C@_0BD@FONPMPNI@expected?5hex?5digit?$AA@" # @"??_C@_0BD@FONPMPNI@expected?5hex?5digit?$AA@"
"??_C@_0BD@FONPMPNI@expected?5hex?5digit?$AA@":
	.asciz	"expected hex digit"

	.section	.rdata,"dr",discard,"??_C@_0BG@MLGLKOJK@expected?5utf16?5escape?$AA@"
	.globl	"??_C@_0BG@MLGLKOJK@expected?5utf16?5escape?$AA@" # @"??_C@_0BG@MLGLKOJK@expected?5utf16?5escape?$AA@"
"??_C@_0BG@MLGLKOJK@expected?5utf16?5escape?$AA@":
	.asciz	"expected utf16 escape"

	.section	.rdata,"dr",discard,"??_C@_0BC@BPFADJBD@expected?5mantissa?$AA@"
	.globl	"??_C@_0BC@BPFADJBD@expected?5mantissa?$AA@" # @"??_C@_0BC@BPFADJBD@expected?5mantissa?$AA@"
"??_C@_0BC@BPFADJBD@expected?5mantissa?$AA@":
	.asciz	"expected mantissa"

	.section	.rdata,"dr",discard,"??_C@_0BL@BODAMBP@expected?5mantissa?5fraction?$AA@"
	.globl	"??_C@_0BL@BODAMBP@expected?5mantissa?5fraction?$AA@" # @"??_C@_0BL@BODAMBP@expected?5mantissa?5fraction?$AA@"
"??_C@_0BL@BODAMBP@expected?5mantissa?5fraction?$AA@":
	.asciz	"expected mantissa fraction"

	.section	.rdata,"dr",discard,"??_C@_0BC@HNJFKGKE@expected?5exponent?$AA@"
	.globl	"??_C@_0BC@HNJFKGKE@expected?5exponent?$AA@" # @"??_C@_0BC@HNJFKGKE@expected?5exponent?$AA@"
"??_C@_0BC@HNJFKGKE@expected?5exponent?$AA@":
	.asciz	"expected exponent"

	.section	.rdata,"dr",discard,"??_C@_0BA@GPLJNKDB@expected?5?8true?8?$AA@"
	.globl	"??_C@_0BA@GPLJNKDB@expected?5?8true?8?$AA@" # @"??_C@_0BA@GPLJNKDB@expected?5?8true?8?$AA@"
"??_C@_0BA@GPLJNKDB@expected?5?8true?8?$AA@":
	.asciz	"expected 'true'"

	.section	.rdata,"dr",discard,"??_C@_0BB@JFOLFCEJ@expected?5?8false?8?$AA@"
	.globl	"??_C@_0BB@JFOLFCEJ@expected?5?8false?8?$AA@" # @"??_C@_0BB@JFOLFCEJ@expected?5?8false?8?$AA@"
"??_C@_0BB@JFOLFCEJ@expected?5?8false?8?$AA@":
	.asciz	"expected 'false'"

	.section	.rdata,"dr",discard,"??_C@_0BA@FNBEAEEG@expected?5?8null?8?$AA@"
	.globl	"??_C@_0BA@FNBEAEEG@expected?5?8null?8?$AA@" # @"??_C@_0BA@FNBEAEEG@expected?5?8null?8?$AA@"
"??_C@_0BA@FNBEAEEG@expected?5?8null?8?$AA@":
	.asciz	"expected 'null'"

	.section	.rdata,"dr",discard,"??_C@_0O@FENJACID@not?5an?5object?$AA@"
	.globl	"??_C@_0O@FENJACID@not?5an?5object?$AA@" # @"??_C@_0O@FENJACID@not?5an?5object?$AA@"
"??_C@_0O@FENJACID@not?5an?5object?$AA@":
	.asciz	"not an object"

	.section	.rdata,"dr",discard,"??_C@_0N@CIFOMEFG@not?5an?5array?$AA@"
	.globl	"??_C@_0N@CIFOMEFG@not?5an?5array?$AA@" # @"??_C@_0N@CIFOMEFG@not?5an?5array?$AA@"
"??_C@_0N@CIFOMEFG@not?5an?5array?$AA@":
	.asciz	"not an array"

	.section	.rdata,"dr",discard,"??_C@_0N@NGKNMPH@not?5a?5string?$AA@"
	.globl	"??_C@_0N@NGKNMPH@not?5a?5string?$AA@" # @"??_C@_0N@NGKNMPH@not?5a?5string?$AA@"
"??_C@_0N@NGKNMPH@not?5a?5string?$AA@":
	.asciz	"not a string"

	.section	.rdata,"dr",discard,"??_C@_0N@MOGOHMPL@not?5a?5number?$AA@"
	.globl	"??_C@_0N@MOGOHMPL@not?5a?5number?$AA@" # @"??_C@_0N@MOGOHMPL@not?5a?5number?$AA@"
"??_C@_0N@MOGOHMPL@not?5a?5number?$AA@":
	.asciz	"not a number"

	.section	.rdata,"dr",discard,"??_C@_0O@KJEGNHEN@not?5a?5boolean?$AA@"
	.globl	"??_C@_0O@KJEGNHEN@not?5a?5boolean?$AA@" # @"??_C@_0O@KJEGNHEN@not?5a?5boolean?$AA@"
"??_C@_0O@KJEGNHEN@not?5a?5boolean?$AA@":
	.asciz	"not a boolean"

	.section	.rdata,"dr",discard,"??_C@_0L@DKAEJBFF@not?5a?5null?$AA@"
	.globl	"??_C@_0L@DKAEJBFF@not?5a?5null?$AA@" # @"??_C@_0L@DKAEJBFF@not?5a?5null?$AA@"
"??_C@_0L@DKAEJBFF@not?5a?5null?$AA@":
	.asciz	"not a null"

	.section	.rdata,"dr",discard,"??_C@_0BD@NMAPEHAH@integer?5overflowed?$AA@"
	.globl	"??_C@_0BD@NMAPEHAH@integer?5overflowed?$AA@" # @"??_C@_0BD@NMAPEHAH@integer?5overflowed?$AA@"
"??_C@_0BD@NMAPEHAH@integer?5overflowed?$AA@":
	.asciz	"integer overflowed"

	.section	.rdata,"dr",discard,"??_C@_09KEOFCHMD@not?5exact?$AA@"
	.globl	"??_C@_09KEOFCHMD@not?5exact?$AA@" # @"??_C@_09KEOFCHMD@not?5exact?$AA@"
"??_C@_09KEOFCHMD@not?5exact?$AA@":
	.asciz	"not exact"

	.section	.rdata,"dr",discard,"??_C@_0N@HLMGHOAF@test?5failure?$AA@"
	.globl	"??_C@_0N@HLMGHOAF@test?5failure?$AA@" # @"??_C@_0N@HLMGHOAF@test?5failure?$AA@"
"??_C@_0N@HLMGHOAF@test?5failure?$AA@":
	.asciz	"test failure"

	.section	.rdata,"dr",discard,"??_C@_0BM@KHAALKKJ@A?5JSON?5parse?5error?5occurred?$AA@"
	.globl	"??_C@_0BM@KHAALKKJ@A?5JSON?5parse?5error?5occurred?$AA@" # @"??_C@_0BM@KHAALKKJ@A?5JSON?5parse?5error?5occurred?$AA@"
"??_C@_0BM@KHAALKKJ@A?5JSON?5parse?5error?5occurred?$AA@":
	.asciz	"A JSON parse error occurred"

	.section	.rdata,"dr",discard,"??_C@_0CE@INGBOAEG@An?5error?5occurred?5during?5assignm@"
	.globl	"??_C@_0CE@INGBOAEG@An?5error?5occurred?5during?5assignm@" # @"??_C@_0CE@INGBOAEG@An?5error?5occurred?5during?5assignm@"
"??_C@_0CE@INGBOAEG@An?5error?5occurred?5during?5assignm@":
	.asciz	"An error occurred during assignment"

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.drectve,"yn"
	.ascii	" /DEFAULTLIB:msvcrt.lib"
	.ascii	" /DEFAULTLIB:oldnames.lib"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=0\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MD_DynamicRelease\""
	.ascii	" /DEFAULTLIB:msvcprt.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
.set "??_7codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@", .L__unnamed_1+8
.set "??_7codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@", .L__unnamed_2+8
	.globl	"??_7type_error@json@boost@@6B@"
.set "??_7type_error@json@boost@@6B@", .L__unnamed_3+8
	.globl	"??_7number_required_error@json@boost@@6B@"
.set "??_7number_required_error@json@boost@@6B@", .L__unnamed_4+8
	.globl	"??_7array_index_error@json@boost@@6B@"
.set "??_7array_index_error@json@boost@@6B@", .L__unnamed_5+8
	.globl	"??_7array_required_error@json@boost@@6B@"
.set "??_7array_required_error@json@boost@@6B@", .L__unnamed_6+8
	.globl	"??_7array_too_large@json@boost@@6B@"
.set "??_7array_too_large@json@boost@@6B@", .L__unnamed_7+8
	.globl	"??_7bool_required_error@json@boost@@6B@"
.set "??_7bool_required_error@json@boost@@6B@", .L__unnamed_8+8
	.globl	"??_7char_pos_error@json@boost@@6B@"
.set "??_7char_pos_error@json@boost@@6B@", .L__unnamed_9+8
	.globl	"??_7double_required_error@json@boost@@6B@"
.set "??_7double_required_error@json@boost@@6B@", .L__unnamed_10+8
	.globl	"??_7int64_required_error@json@boost@@6B@"
.set "??_7int64_required_error@json@boost@@6B@", .L__unnamed_11+8
	.globl	"??_7key_not_found@json@boost@@6B@"
.set "??_7key_not_found@json@boost@@6B@", .L__unnamed_12+8
	.globl	"??_7key_too_large@json@boost@@6B@"
.set "??_7key_too_large@json@boost@@6B@", .L__unnamed_13+8
	.globl	"??_7object_required_error@json@boost@@6B@"
.set "??_7object_required_error@json@boost@@6B@", .L__unnamed_14+8
	.globl	"??_7object_too_large@json@boost@@6B@"
.set "??_7object_too_large@json@boost@@6B@", .L__unnamed_15+8
	.globl	"??_7stack_overflow@json@boost@@6B@"
.set "??_7stack_overflow@json@boost@@6B@", .L__unnamed_16+8
	.globl	"??_7string_required_error@json@boost@@6B@"
.set "??_7string_required_error@json@boost@@6B@", .L__unnamed_17+8
	.globl	"??_7string_too_large@json@boost@@6B@"
.set "??_7string_too_large@json@boost@@6B@", .L__unnamed_18+8
	.globl	"??_7uint64_required_error@json@boost@@6B@"
.set "??_7uint64_required_error@json@boost@@6B@", .L__unnamed_19+8
	.globl	"??_7monotonic_resource@json@boost@@6B@"
.set "??_7monotonic_resource@json@boost@@6B@", .L__unnamed_20+8
	.globl	"??_7static_resource@json@boost@@6B@"
.set "??_7static_resource@json@boost@@6B@", .L__unnamed_21+8
	.globl	"??_7default_resource@detail@json@boost@@6B@"
.set "??_7default_resource@detail@json@boost@@6B@", .L__unnamed_22+8
	.globl	"??_7system_error_category@detail@system@boost@@6B@"
.set "??_7system_error_category@detail@system@boost@@6B@", .L__unnamed_23+8
	.globl	"??_7bad_array_new_length@std@@6B@"
.set "??_7bad_array_new_length@std@@6B@", .L__unnamed_24+8
	.globl	"??_7bad_alloc@std@@6B@"
.set "??_7bad_alloc@std@@6B@", .L__unnamed_25+8
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", .L__unnamed_26+8
	.globl	"??_7generic_error_category@detail@system@boost@@6B@"
.set "??_7generic_error_category@detail@system@boost@@6B@", .L__unnamed_27+8
	.globl	"??_7invalid_argument@std@@6B@"
.set "??_7invalid_argument@std@@6B@", .L__unnamed_28+8
	.globl	"??_7out_of_range@std@@6B@"
.set "??_7out_of_range@std@@6B@", .L__unnamed_29+8
	.globl	"??_7length_error@std@@6B@"
.set "??_7length_error@std@@6B@", .L__unnamed_30+8
	.globl	"??_7runtime_error@std@@6B@"
.set "??_7runtime_error@std@@6B@", .L__unnamed_31+8
	.globl	"??_7memory_resource@pmr@container@boost@@6B@"
.set "??_7memory_resource@pmr@container@boost@@6B@", .L__unnamed_32+8
.set "??_7place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@", .L__unnamed_33+8
	.globl	"??_7place_range@object@json@boost@@6B@"
.set "??_7place_range@object@json@boost@@6B@", .L__unnamed_34+8
.set "??_7place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@", .L__unnamed_35+8
	.globl	"??_7system_error@system@boost@@6B@"
.set "??_7system_error@system@boost@@6B@", .L__unnamed_36+8
	.globl	"??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_37+8
	.globl	"??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"
.set "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@", .L__unnamed_38+8
	.globl	"??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@", .L__unnamed_39+8
	.globl	"??_7clone_base@exception_detail@boost@@6B@"
.set "??_7clone_base@exception_detail@boost@@6B@", .L__unnamed_40+8
	.globl	"??_7exception@boost@@6B@"
.set "??_7exception@boost@@6B@", .L__unnamed_41+8
	.globl	"??_7logic_error@std@@6B@"
.set "??_7logic_error@std@@6B@", .L__unnamed_42+8
	.globl	"??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_43+8
	.globl	"??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"
.set "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@", .L__unnamed_44+8
	.globl	"??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_45+8
	.globl	"??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_46+8
	.globl	"??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"
.set "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@", .L__unnamed_47+8
	.globl	"??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_48+8
	.globl	"??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_49+8
	.globl	"??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"
.set "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@", .L__unnamed_50+8
	.globl	"??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_51+8
	.globl	"??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_52+8
	.globl	"??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"
.set "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@", .L__unnamed_53+8
	.globl	"??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_54+8
	.globl	"??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_55+8
	.globl	"??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"
.set "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@", .L__unnamed_56+8
	.globl	"??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_57+8
	.globl	"??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_58+8
	.globl	"??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"
.set "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@", .L__unnamed_59+8
	.globl	"??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_60+8
	.globl	"??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_61+8
	.globl	"??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"
.set "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@", .L__unnamed_62+8
	.globl	"??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_63+8
	.globl	"??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_64+8
	.globl	"??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"
.set "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@", .L__unnamed_65+8
	.globl	"??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_66+8
	.globl	"??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_67+8
	.globl	"??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"
.set "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@", .L__unnamed_68+8
	.globl	"??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_69+8
	.globl	"??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_70+8
	.globl	"??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"
.set "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@", .L__unnamed_71+8
	.globl	"??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_72+8
	.globl	"??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_73+8
	.globl	"??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"
.set "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@", .L__unnamed_74+8
	.globl	"??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_75+8
	.globl	"??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_76+8
	.globl	"??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"
.set "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@", .L__unnamed_77+8
	.globl	"??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_78+8
	.globl	"??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_79+8
	.globl	"??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"
.set "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@", .L__unnamed_80+8
	.globl	"??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_81+8
	.globl	"??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_82+8
	.globl	"??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"
.set "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@", .L__unnamed_83+8
	.globl	"??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_84+8
	.globl	"??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_85+8
	.globl	"??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"
.set "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@", .L__unnamed_86+8
	.globl	"??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@", .L__unnamed_87+8
	.globl	"??_7place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
.set "??_7place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@", .L__unnamed_88+8
	.globl	"??_7place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
.set "??_7place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@", .L__unnamed_89+8
	.globl	"??_7place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"
.set "??_7place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@", .L__unnamed_90+8
	.globl	"??_7place_one@object@json@boost@@6B@"
.set "??_7place_one@object@json@boost@@6B@", .L__unnamed_91+8
	.globl	"??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_92+8
	.globl	"??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"
.set "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@", .L__unnamed_93+8
	.globl	"??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@", .L__unnamed_94+8
	.globl	"??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"
.set "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@", .L__unnamed_95+8
	.globl	"??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"
.set "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@", .L__unnamed_96+8
	.globl	"??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"
.set "??_7?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@", .L__unnamed_97+8
	.globl	"??_7place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"
.set "??_7place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@", .L__unnamed_98+8
	.addrsig
	.addrsig_sym __CxxFrameHandler3
	.addrsig_sym "??__Fimpl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@YAXXZ"
	.addrsig_sym "??$parse_number@$00$0CL@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "?syntax_error@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_unescaped@$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_number@$00$0CN@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_number@$00$0DA@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_false@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_null@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_true@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_comment@$00$00$0A@$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$00$0A@$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_comment@$00$00$0A@$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$00$00$0A@@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_unescaped@$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_comment@$00$00$0A@$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$00$0A@$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_comment@$00$00$0A@$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_array@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "??$parse_object@$00$00$00$00@?$basic_parser@Uhandler@parser@json@boost@@@json@boost@@AEAAPEBDPEBD@Z"
	.addrsig_sym "?cat@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"
	.addrsig_sym "?cat@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@4Ucodes@?1??123@YA?AV453@0@Z@B"
	.addrsig_sym "??_7type_info@@6B@"
	.addrsig_sym "??_R0?AVlogic_error@std@@@8"
	.addrsig_sym __ImageBase
	.addrsig_sym "??_R0?AVexception@std@@@8"
	.addrsig_sym "??_R4codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@6B@"
	.addrsig_sym "??_R0?AUcodes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@@8"
	.addrsig_sym "??_R3codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"
	.addrsig_sym "??_R2codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@codes@?1??make_error_code@json@boost@@YA?AVerror_code@system@3@W4error@23@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@error_category@system@boost@@8"
	.addrsig_sym "??_R0?AVerror_category@system@boost@@@8"
	.addrsig_sym "??_R3error_category@system@boost@@8"
	.addrsig_sym "??_R2error_category@system@boost@@8"
	.addrsig_sym "??_R4codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@6B@"
	.addrsig_sym "??_R0?AUcodes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@@8"
	.addrsig_sym "??_R3codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"
	.addrsig_sym "??_R2codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@codes@?1??make_error_condition@json@boost@@YA?AVerror_condition@system@3@W4condition@23@@Z@8"
	.addrsig_sym "??_R4type_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUtype_error@json@boost@@@8"
	.addrsig_sym "??_R3type_error@json@boost@@8"
	.addrsig_sym "??_R2type_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@type_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@invalid_argument@std@@8"
	.addrsig_sym "??_R0?AVinvalid_argument@std@@@8"
	.addrsig_sym "??_R3invalid_argument@std@@8"
	.addrsig_sym "??_R2invalid_argument@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@logic_error@std@@8"
	.addrsig_sym "??_R3logic_error@std@@8"
	.addrsig_sym "??_R2logic_error@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@exception@std@@8"
	.addrsig_sym "??_R3exception@std@@8"
	.addrsig_sym "??_R2exception@std@@8"
	.addrsig_sym "??_R4number_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUnumber_required_error@json@boost@@@8"
	.addrsig_sym "??_R3number_required_error@json@boost@@8"
	.addrsig_sym "??_R2number_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@number_required_error@json@boost@@8"
	.addrsig_sym "??_R4array_index_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUarray_index_error@json@boost@@@8"
	.addrsig_sym "??_R3array_index_error@json@boost@@8"
	.addrsig_sym "??_R2array_index_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@array_index_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@out_of_range@std@@8"
	.addrsig_sym "??_R0?AVout_of_range@std@@@8"
	.addrsig_sym "??_R3out_of_range@std@@8"
	.addrsig_sym "??_R2out_of_range@std@@8"
	.addrsig_sym "??_R4array_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUarray_required_error@json@boost@@@8"
	.addrsig_sym "??_R3array_required_error@json@boost@@8"
	.addrsig_sym "??_R2array_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@array_required_error@json@boost@@8"
	.addrsig_sym "??_R4array_too_large@json@boost@@6B@"
	.addrsig_sym "??_R0?AUarray_too_large@json@boost@@@8"
	.addrsig_sym "??_R3array_too_large@json@boost@@8"
	.addrsig_sym "??_R2array_too_large@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@array_too_large@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@length_error@std@@8"
	.addrsig_sym "??_R0?AVlength_error@std@@@8"
	.addrsig_sym "??_R3length_error@std@@8"
	.addrsig_sym "??_R2length_error@std@@8"
	.addrsig_sym "??_R4bool_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUbool_required_error@json@boost@@@8"
	.addrsig_sym "??_R3bool_required_error@json@boost@@8"
	.addrsig_sym "??_R2bool_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@bool_required_error@json@boost@@8"
	.addrsig_sym "??_R4char_pos_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUchar_pos_error@json@boost@@@8"
	.addrsig_sym "??_R3char_pos_error@json@boost@@8"
	.addrsig_sym "??_R2char_pos_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@char_pos_error@json@boost@@8"
	.addrsig_sym "??_R4double_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUdouble_required_error@json@boost@@@8"
	.addrsig_sym "??_R3double_required_error@json@boost@@8"
	.addrsig_sym "??_R2double_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@double_required_error@json@boost@@8"
	.addrsig_sym "??_R4int64_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUint64_required_error@json@boost@@@8"
	.addrsig_sym "??_R3int64_required_error@json@boost@@8"
	.addrsig_sym "??_R2int64_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@int64_required_error@json@boost@@8"
	.addrsig_sym "??_R4key_not_found@json@boost@@6B@"
	.addrsig_sym "??_R0?AUkey_not_found@json@boost@@@8"
	.addrsig_sym "??_R3key_not_found@json@boost@@8"
	.addrsig_sym "??_R2key_not_found@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@key_not_found@json@boost@@8"
	.addrsig_sym "??_R4key_too_large@json@boost@@6B@"
	.addrsig_sym "??_R0?AUkey_too_large@json@boost@@@8"
	.addrsig_sym "??_R3key_too_large@json@boost@@8"
	.addrsig_sym "??_R2key_too_large@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@key_too_large@json@boost@@8"
	.addrsig_sym "??_R4object_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUobject_required_error@json@boost@@@8"
	.addrsig_sym "??_R3object_required_error@json@boost@@8"
	.addrsig_sym "??_R2object_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@object_required_error@json@boost@@8"
	.addrsig_sym "??_R4object_too_large@json@boost@@6B@"
	.addrsig_sym "??_R0?AUobject_too_large@json@boost@@@8"
	.addrsig_sym "??_R3object_too_large@json@boost@@8"
	.addrsig_sym "??_R2object_too_large@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@object_too_large@json@boost@@8"
	.addrsig_sym "??_R4stack_overflow@json@boost@@6B@"
	.addrsig_sym "??_R0?AUstack_overflow@json@boost@@@8"
	.addrsig_sym "??_R3stack_overflow@json@boost@@8"
	.addrsig_sym "??_R2stack_overflow@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@stack_overflow@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@runtime_error@std@@8"
	.addrsig_sym "??_R0?AVruntime_error@std@@@8"
	.addrsig_sym "??_R3runtime_error@std@@8"
	.addrsig_sym "??_R2runtime_error@std@@8"
	.addrsig_sym "??_R4string_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUstring_required_error@json@boost@@@8"
	.addrsig_sym "??_R3string_required_error@json@boost@@8"
	.addrsig_sym "??_R2string_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@string_required_error@json@boost@@8"
	.addrsig_sym "??_R4string_too_large@json@boost@@6B@"
	.addrsig_sym "??_R0?AUstring_too_large@json@boost@@@8"
	.addrsig_sym "??_R3string_too_large@json@boost@@8"
	.addrsig_sym "??_R2string_too_large@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@string_too_large@json@boost@@8"
	.addrsig_sym "??_R4uint64_required_error@json@boost@@6B@"
	.addrsig_sym "??_R0?AUuint64_required_error@json@boost@@@8"
	.addrsig_sym "??_R3uint64_required_error@json@boost@@8"
	.addrsig_sym "??_R2uint64_required_error@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@uint64_required_error@json@boost@@8"
	.addrsig_sym "??_R4monotonic_resource@json@boost@@6B@"
	.addrsig_sym "??_R0?AVmonotonic_resource@json@boost@@@8"
	.addrsig_sym "??_R3monotonic_resource@json@boost@@8"
	.addrsig_sym "??_R2monotonic_resource@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@monotonic_resource@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@memory_resource@pmr@container@boost@@8"
	.addrsig_sym "??_R0?AVmemory_resource@pmr@container@boost@@@8"
	.addrsig_sym "??_R3memory_resource@pmr@container@boost@@8"
	.addrsig_sym "??_R2memory_resource@pmr@container@boost@@8"
	.addrsig_sym "??_R4static_resource@json@boost@@6B@"
	.addrsig_sym "??_R0?AVstatic_resource@json@boost@@@8"
	.addrsig_sym "??_R3static_resource@json@boost@@8"
	.addrsig_sym "??_R2static_resource@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@static_resource@json@boost@@8"
	.addrsig_sym "?impl@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@4@XZ@4Vdefault_resource@detail@34@A"
	.addrsig_sym "?$TSS0@?1??get_default@storage_ptr@json@boost@@CAPEAVmemory_resource@pmr@container@3@XZ@4HA"
	.addrsig_sym "??_R4default_resource@detail@json@boost@@6B@"
	.addrsig_sym "??_R0?AVdefault_resource@detail@json@boost@@@8"
	.addrsig_sym "??_R3default_resource@detail@json@boost@@8"
	.addrsig_sym "??_R2default_resource@detail@json@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@default_resource@detail@json@boost@@8"
	.addrsig_sym "?system_category_instance@?$cat_holder@X@detail@system@boost@@2Vsystem_error_category@234@B"
	.addrsig_sym "??_R4system_error_category@detail@system@boost@@6B@"
	.addrsig_sym "??_R0?AVsystem_error_category@detail@system@boost@@@8"
	.addrsig_sym "??_R3system_error_category@detail@system@boost@@8"
	.addrsig_sym "??_R2system_error_category@detail@system@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@system_error_category@detail@system@boost@@8"
	.addrsig_sym "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.addrsig_sym "??_R0?AVbad_array_new_length@std@@@8"
	.addrsig_sym "??_R0?AVbad_alloc@std@@@8"
	.addrsig_sym "??_R4bad_array_new_length@std@@6B@"
	.addrsig_sym "??_R3bad_array_new_length@std@@8"
	.addrsig_sym "??_R2bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_alloc@std@@8"
	.addrsig_sym "??_R3bad_alloc@std@@8"
	.addrsig_sym "??_R2bad_alloc@std@@8"
	.addrsig_sym "??_R4bad_alloc@std@@6B@"
	.addrsig_sym "??_R4exception@std@@6B@"
	.addrsig_sym "?generic_category_instance@?$cat_holder@X@detail@system@boost@@2Vgeneric_error_category@234@B"
	.addrsig_sym "??_R4generic_error_category@detail@system@boost@@6B@"
	.addrsig_sym "??_R0?AVgeneric_error_category@detail@system@boost@@@8"
	.addrsig_sym "??_R3generic_error_category@detail@system@boost@@8"
	.addrsig_sym "??_R2generic_error_category@detail@system@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@generic_error_category@detail@system@boost@@8"
	.addrsig_sym "??_R4invalid_argument@std@@6B@"
	.addrsig_sym "??_R4out_of_range@std@@6B@"
	.addrsig_sym "??_R4length_error@std@@6B@"
	.addrsig_sym "??_R4runtime_error@std@@6B@"
	.addrsig_sym "??_R4memory_resource@pmr@container@boost@@6B@"
	.addrsig_sym "??_R4place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@6B@"
	.addrsig_sym "??_R0?AUplace_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@@8"
	.addrsig_sym "??_R3place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"
	.addrsig_sym "??_R2place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_impl@?1???0object@json@boost@@QEAA@V?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@_KVstorage_ptr@23@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_range@object@json@boost@@8"
	.addrsig_sym "??_R0?AUplace_range@object@json@boost@@@8"
	.addrsig_sym "??_R3place_range@object@json@boost@@8"
	.addrsig_sym "??_R2place_range@object@json@boost@@8"
	.addrsig_sym "??_R4place_range@object@json@boost@@6B@"
	.addrsig_sym "??_R4place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@6B@"
	.addrsig_sym "??_R0?AUplace_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@@8"
	.addrsig_sym "??_R3place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"
	.addrsig_sym "??_R2place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_impl@?1??insert@object@json@boost@@QEAAXV?$initializer_list@U?$pair@V?$basic_string_view@DU?$char_traits@D@std@@@boost@@Vvalue_ref@json@2@@std@@@std@@@Z@8"
	.addrsig_sym "?list@?1??bucket_sizes@object_impl@detail@json@boost@@SAAEAY0ED@$$CB_KXZ@4QB_KB"
	.addrsig_sym "??_R4system_error@system@boost@@6B@"
	.addrsig_sym "??_R0?AVsystem_error@system@boost@@@8"
	.addrsig_sym "??_R3system_error@system@boost@@8"
	.addrsig_sym "??_R2system_error@system@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@system_error@system@boost@@8"
	.addrsig_sym "??_R0?AU?$wrapexcept@Vlogic_error@std@@@boost@@@8"
	.addrsig_sym "??_R0?AVclone_base@exception_detail@boost@@@8"
	.addrsig_sym "??_R0?AVexception@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Vlogic_error@std@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@clone_base@exception_detail@boost@@8"
	.addrsig_sym "??_R3clone_base@exception_detail@boost@@8"
	.addrsig_sym "??_R2clone_base@exception_detail@boost@@8"
	.addrsig_sym "??_R17?0A@EA@logic_error@std@@8"
	.addrsig_sym "??_R17?0A@EA@exception@std@@8"
	.addrsig_sym "??_R1CA@?0A@EA@exception@boost@@8"
	.addrsig_sym "??_R3exception@boost@@8"
	.addrsig_sym "??_R2exception@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@exception@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Blogic_error@std@@@"
	.addrsig_sym "??_R4?$wrapexcept@Vlogic_error@std@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R4clone_base@exception_detail@boost@@6B@"
	.addrsig_sym "??_R4exception@boost@@6B@"
	.addrsig_sym "??_R4logic_error@std@@6B@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uarray_index_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uarray_index_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@array_index_error@json@boost@@8"
	.addrsig_sym "??_R17?0A@EA@out_of_range@std@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Barray_index_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_index_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uarray_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uarray_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@array_required_error@json@boost@@8"
	.addrsig_sym "??_R17?0A@EA@type_error@json@boost@@8"
	.addrsig_sym "??_R17?0A@EA@invalid_argument@std@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Barray_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uarray_too_large@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uarray_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@array_too_large@json@boost@@8"
	.addrsig_sym "??_R17?0A@EA@length_error@std@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Barray_too_large@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uarray_too_large@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Ubool_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Ubool_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@bool_required_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bbool_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Ubool_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@char_pos_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bchar_pos_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uchar_pos_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Udouble_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Udouble_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@double_required_error@json@boost@@8"
	.addrsig_sym "??_R17?0A@EA@number_required_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bdouble_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Udouble_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uint64_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uint64_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@int64_required_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bint64_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Ukey_not_found@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Ukey_not_found@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@key_not_found@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bkey_not_found@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Ukey_not_found@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Ukey_too_large@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Ukey_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@key_too_large@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bkey_too_large@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Ukey_too_large@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uobject_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uobject_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@object_required_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bobject_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uobject_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uobject_too_large@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uobject_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@object_too_large@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bobject_too_large@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uobject_too_large@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Ustack_overflow@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Ustack_overflow@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@stack_overflow@json@boost@@8"
	.addrsig_sym "??_R17?0A@EA@runtime_error@std@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bstack_overflow@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Ustack_overflow@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Ustring_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Ustring_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@string_required_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bstring_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Ustring_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Ustring_too_large@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Ustring_too_large@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@string_too_large@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bstring_too_large@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Ustring_too_large@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@uint64_required_error@json@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Buint64_required_error@json@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Uuint64_required_error@json@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R4place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.addrsig_sym "??_R0?AUplace_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"
	.addrsig_sym "??_R3place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.addrsig_sym "??_R2place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_impl@?1???$insert_range@PEAVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEAVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.addrsig_sym "??_R4place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@6B@"
	.addrsig_sym "??_R0?AUplace_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@@8"
	.addrsig_sym "??_R3place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.addrsig_sym "??_R2place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_impl@?1???$insert_range@PEBVkey_value_pair@json@boost@@@object@json@boost@@AEAAXPEBVkey_value_pair@23@0_KUforward_iterator_tag@std@@@Z@8"
	.addrsig_sym "??_R4place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@6B@"
	.addrsig_sym "??_R0?AUplace_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@@8"
	.addrsig_sym "??_R3place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.addrsig_sym "??_R2place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_impl@?1???$emplace@$$T@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEA$$T@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_one@object@json@boost@@8"
	.addrsig_sym "??_R0?AUplace_one@object@json@boost@@@8"
	.addrsig_sym "??_R3place_one@object@json@boost@@8"
	.addrsig_sym "??_R2place_one@object@json@boost@@8"
	.addrsig_sym "??_R4place_one@object@json@boost@@6B@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Vsystem_error@system@boost@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Vsystem_error@system@boost@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@system_error@system@boost@@8"
	.addrsig_sym "??_R1FA@?0A@EA@exception@boost@@8"
	.addrsig_sym "??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bsystem_error@system@1@@"
	.addrsig_sym "??_R4?$wrapexcept@Vsystem_error@system@boost@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R0?AU?$wrapexcept@Vbad_alloc@std@@@boost@@@8"
	.addrsig_sym "??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bclone_base@exception_detail@1@@"
	.addrsig_sym "??_R3?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.addrsig_sym "??_R2?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$wrapexcept@Vbad_alloc@std@@@boost@@8"
	.addrsig_sym "??_R17?0A@EA@bad_alloc@std@@8"
	.addrsig_sym "??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bbad_alloc@std@@@"
	.addrsig_sym "??_R4?$wrapexcept@Vbad_alloc@std@@@boost@@6Bexception@1@@"
	.addrsig_sym "??_R4place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@6B@"
	.addrsig_sym "??_R0?AUplace_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@@8"
	.addrsig_sym "??_R3place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.addrsig_sym "??_R2place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.addrsig_sym "??_R1A@?0A@EA@place_impl@?1???$emplace@Vvalue@json@boost@@@object@json@boost@@QEAA?AU?$pair@PEAVkey_value_pair@json@boost@@_N@std@@V?$basic_string_view@DU?$char_traits@D@std@@@3@$$QEAVvalue@23@@Z@8"
	.globl	_fltused
