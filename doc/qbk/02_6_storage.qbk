[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/vinniefalco/json
]

[/-----------------------------------------------------------------------------]

[section Storage]

Instances of __value__, __object__, __array__, and __string__ all use
dynamically allocated memory. The library provides a mechanism similar
to the C++ standard's polymorphic allocator to allow callers to control
the strategy used to allocate and deallocate memory, with these additional
features:

* The lifetime of the storage can be reference-counted or scoped.

* Calculation of storage equality is fast, without requiring RTTI.

* An implementation can indicate to the library that deallocation
  is not necessary, improving the performance of destructors.

These types and functions are available:

[table Storage Functions and Types
[ [Name] [Description] ]
[
    [__block_storage__]
    [
        An implementation of ['Storage] using zero or more large, fixed-size
        blocks from which allocations are made. Allocated memory is not
        freed until ownership of the storage is released, which makes it
        fast for parsing but less well-suited for mutation.
    ]
][
    [__is_storage__]
    [
        Metafunction to determine if a type meets the requirements of
        ['Storage].
    ]
][
    [__make_storage__]
    [
        Function to create a new storage of the specified type and
        return it in a smart pointer container.
    ]
][
    [__scoped_storage__]
    [
        This wrapper creates a new, uncounted storage of the specified
        type whose lifetime is the same as the lifetime of the wrapper.
    ]
][
    [__storage__]
    [
        The abstract base class representing the storage object.
    ]
][
    [__storage_ptr__]
    [
        A smart pointer container through which an instance of a storage
        object is accessed.
    ]
]]

The library provides a ['default storage] object which wraps calls to the
`new` and `delete` global operators. This storage is not reference counted,
and requires calls to deallocate. A default constructed __storage_ptr__
always points to the default storage. When instances of library types are
constructed without specifying a storage pointer, they use the default
storage:

```
value jv;                                   // uses the default storage
storage_ptr sp;                             // uses the default storage
object obj( sp );                           // uses the default storage

assert( jv.storage().get() == sp.get() );   // same pointer
assert( *jv.storage() == *sp );             // deep equality

assert( jv.storage().get() ==
            obj.storage().get() );          // same pointer
```

The default storage is suited for general purpose operations. It allocates
only what is needed, and frees memory immediately when destructors run.
When making changes to a __value__ containing a JSON document, it is a
good choice.

[heading Block Storage]

The library provides another implementation called
__block_storage__ which is optimized for parsing without subsequent
modification. This implementation allocates large equal-sized blocks
and divides them up as needed to satisfy allocation requests, and only
deallocates when the lifetime of the storage ends. This example shows
how a function accepting a string can parse the string into a value
using a block storage and return the result:

```
value parse_fast( string_view s )
{
    return parse( s, make_storage<block_storage>() );
}
```

In the sample code above, ownership of the block storage instance
is shared by the returned value and all of its children. The block
storage is destroyed only when the last value referencing it goes
away. This is accomplished by using an atomic reference count,
incrementing and decrementing as appropriate, and destroying the
storage object when the count is decremented to zero.

Block storage is faster for parsing and insertion, but consumes
more memory than the default storage especially if elements are
added and removed over time, since no allocations are not freed
until the storage is destroyed.

[heading Scoped Storage]

Since atomic operations are relatively expensive compared to their
non-atomic counterparts, sometimes it is desirable to avoid these
operations when the lifetime of the JSON object can be bounded.
For example, consider a network server which receives a JSON
representing an RPC command. It parses the JSON, dispatches the
command, and then destroys the value. In this use-case, the
lifetime of the value is bounded by the function in which it
appears. To make this case more efficient, we can construct the
block storage using the __scoped_storage__ wrapper and use that
for the storage instead:

```
void do_rpc( string_view cmd )
{
    scoped_storage<block_storage> sp;

    auto jv = parse( cmd, sp );

    do_json( jv );
}
```

Scoped storage removes the cost of reference counting from operations
on the containers that use it.

[caution
    Care must be taken to ensure that any instances of __value__,
    __object__, __array__, or __string__ that use __scoped_storage__
    are not accessed after the storage is destroyed, otherwise the
    behavior is undefined.
]

[heading Custom Storage]

Users who need precise control over the allocation can implement
their own type which meets the ['Storage] named requirements. These
types will work with both __make_storage__ and __scoped_storage__.
The requirements are as follows:

[heading Requirements]

In this table:

* `S` denotes a type meeting the requirements of ['Storage].
* `n` and `a` are values of type `std::size_t`.
* `p` is a value of type `void*`.
* `t` is a value of type `S`.

[table Valid expressions
[[Expression] [Type] [Semantics, Pre/Post-conditions]]
[
    [`S::id`]
    [`std::uint64_t`]
    [
        An unsigned integer representing a possibly unique "type id."
        This value is used to determine if other instances of this
        type should compare equal. When zero, other instances never
        compare equal. If set, two instances of `storage` compare equal
        if their id is the same.

        To select an appropriate value for `id` which is non-zero, use
        a truly random number such as one generate from
        [@https://www.random.org/cgi-bin/randbyte?nbytes=8&format=h this generator].

    ]
][
    [`S::need_free`]
    [`bool`]
    [
        A boolean value indicating whether or not the library needs to call
        `deallocate` for every memory buffer obtained using a corresponding
        call to `allocate`. This is false for the default storage, which uses
        global operator `new` and `delete`. But it is true for __block_storage__,
        since it frees all the memory when it goes out of scope.

        Skipping calls to `deallocate` can have significant performance
        benefits, as destructors for library types may also be skipped
        if the storage is not reference-counted.
    ]
][
    [`t.allocate(n,a)`]
    [`void*`]
    [
        Allocate dynamic storage of at least `n` bytes. The returned
        storage is aligned to the specified alignment `a` if such
        alignment is supported, and to `alignof(std::max_align_t)`
        otherwise. If the requested storage cannot be allocated,
        throws an exception instead.
    ]
][
    [`t.deallocate(p,n,a)`]
    []
    [
        Deallocate the memory buffer pointed to by `p`, which was returned
        by a prior call to `t.allocate(n,a)`. This function shall not
        throw exceptions.
    ]
]
]

[heading Exemplar]

```
struct Storage
{
    static constexpr std::uint64_t id = 0;
    static_constexpr bool need_free = true;

    void* allocate( std::size_t bytes, std::size_t align );
    void deallocate( void* p, std::size_t bytes, std::size_t align );
};
```

[endsect]
