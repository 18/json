[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/vinniefalco/json
]

[/-----------------------------------------------------------------------------]

[section:conversion Value Conversion]

While the __value__ container makes it easy to create ad-hoc structures,
often it is necessary to convert between JSON and specific user-defined
types. The library provides a set of customization points to enable
conversions between objects of type `T` and a JSON value by:

* A specialization of __to_json_traits__ for `T` containing
  the public static member function
  `value to_json_traits<T>::construct( T const&, storage_ptr )`,

* A specialization of __value_cast_traits__ for `T` containing
  the public static member function
  `T value_cast_Traits<T>::construct( value const& )`,

* A public member function `value T::to_json( storage_ptr ) const`,

* A public constructor `T::T( value const& )`,

The library provides built-in support for converting between a __value__
and the type `T` when:

* `std::is_constructible< value, T, storage_ptr >::value == true`, or

* `T` is a container meeting generic requirements.

When more than one conversion is available for a given type, one
will be chosen according to a defined set of priorities.

[heading Member Functions]

The example code that follows uses the user-defined type `customer`,
declared thusly:

[snippet_exchange_1]

Since the author has control of the type, it uses member functions
to enable value exchange. An implementation of `to_json` may look
like this:

[snippet_exchange_2]

Turning a JSON value back into a customer is a bit more complicated,
as it must handle the case where the value does not have the necessary
keys, or if the values have the wrong kind. The implementation of
`from_json` throws an exception when the JSON value does not precisely
match the expected schema for customer:

[snippet_exchange_3]

Once value exchange is enabled for a type, it may be assigned and
stored:

[snippet_exchange_4]

[heading Trait Specialization]

Sometimes value exchange is needed, but the author cannot modify the
type in question to add member functions. One alternative is to
specialize __value_exchange__ for the type and provide the necessary
conversion functions. Here we enable value exchange for __std_complex__:

[snippet_exchange_5]

The implementation for `to_json` is straightforward:

[snippet_exchange_6]

As before, the implementation for `from_json` must use exceptions
to indicate that the value does not have the right schema:

[snippet_exchange_7]

Conversion to and from __std_complex__ is now possible:

[snippet_exchange_8]

[heading Free Functions]

[endsect]

