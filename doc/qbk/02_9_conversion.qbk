[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/vinniefalco/json
]

[/-----------------------------------------------------------------------------]

[section:conversion Value Conversion]

While the __value__ container makes it easy to create ad-hoc structures,
often it is necessary to convert between JSON and specific user-defined
types. The library provides a set of customization points to enable
conversions between objects of type `T` and a JSON value by:

* A specialization of __to_value_traits__ for `T` containing
  the public static member function
  `void to_json_traits<T>::assign( value&, T const& )`,

* A specialization of __value_cast_traits__ for `T` containing
  the public static member function
  `T value_cast_traits<T>::construct( value const& )`,

* A public non-static member function `void T::to_json( value& ) const`,

* A public constructor `T::T( value const& )`,

The library provides built-in support for converting between a __value__
and the type `T` when:

* `std::is_constructible< value, T, storage_ptr >::value == true`, or

* `T` is a container meeting a built-in list of supported generic requirements.

When more than one conversion is available for a given type, one
will be chosen according to a defined set of priorities.



[heading Member Functions]

The example code that follows uses the user-defined type `customer`,
declared thusly:

[snippet_exchange_1]

Since the author has control of the type, it uses member functions
to enable conversions with JSON. An implementation of `to_json` may
look like this:

[snippet_exchange_2]

Turning a JSON value back into a customer is a bit more complicated,
as it must handle the case where the value does not have the necessary
keys, or if the values have the wrong kind. The implementation of
`from_json` throws an exception when the JSON value does not precisely
match the expected schema for customer:

[snippet_exchange_3]

When conversion between `T` and __value__ is defined in both directions,
round trips are possible:

[snippet_exchange_4]



[heading Trait Specialization]

Sometimes it is desired to perform JSON conversion, but the type in
question cannot be modified. This can happen for `std` types, or
for types from other libraries. Or, because the user wants to make
keep the convertibility to and from JSON private and thus forgo
adding a public member function.
For these cases, it is possible to specialize the library class
templates __to_value_traits__ and __value_cast_traits__ for the
type and provide the necessary conversion functions. Here we
enable conversion in both directions for the type __std_complex__:

[snippet_exchange_5]

The implementation for `to_json` is straightforward:

[snippet_exchange_6]

As before, the implementation for `from_json` must use exceptions
to indicate that the value does not have the right schema:

[snippet_exchange_7]

Conversion to and from __std_complex__ is now possible:

[snippet_exchange_8]

Since the specializations of __to_value_traits__ and __value_cast_traits__
are class templates themselves, conversion to complex numbers using
different floating point representations are also possible:

[snippet_exchange_9]

[warning
    Users should not directly invoke any `to_json` member
    functions or the library class templates __to_value_traits__
    and __value_cast_traits__, otherwise the behavior may be undefined.
    Instead, callers should always use the functions __to_value__
    and __value_cast__, even in their implementation of the
    customization points for desired types.
]

[endsect]
