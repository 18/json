[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
    Copyright (c) 2020 Krystian Stasiowski (sdkrystian@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/cppalliance/json
]

[section Overview]
[block'''<?dbhtml stop-chunking?>''']

[/-----------------------------------------------------------------------------]

[section Introduction]

This library provides containers and algorithms which implement JSON
([@https://json.org/ "JavaScript Object Notation"]), a lightweight
data-interchange format. This format is easy for humans to read and
write, and easy for machines to parse and generate. It is based on a
subset of the JavaScript Programming Language,
[@https://www.ecma-international.org/ecma-262/10.0/index.html Standard ECMA-262].
JSON is a text format that is language-independent but uses conventions
that are familiar to programmers of the C-family of languages, including
C, C++, C#, Java, JavaScript, Perl, Python, and many others. These
properties make JSON an ideal data-interchange language.

[endsect]

[/-----------------------------------------------------------------------------]

[section Motivation]

Boost.JSON offers these features:

* Fast compilation
* Require only C++11
* Easy and safe API with allocator support
* Fast incremental parser and serializer
* Constant-time key lookup for objects
* Options to allow non-standard JSON
* Compile without Boost, define `BOOST_JSON_STANDALONE`
* Optional header-only, without linking to a library

This library focuses on a common and popular use-case for JSON:
parsing and serializing to and from a container called __value__
which holds JSON types. This container is designed to be well
suited as a vocabulary type appropriate for use in public interfaces
and libraries, allowing them to be composed. The parser and serializer
are both highly performant, meeting or exceeding the benchmark performance
of the best comparable libraries. Allocators are very well supported.
Code which uses Boost.JSON types will be easy to read, flexible, and
performant.

[endsect]

[/-----------------------------------------------------------------------------]

[section Requirements]

The library relies heavily on these well known C++ types in its interfaces
(henceforth termed ['standard types]):

* __string_view__
* __memory_resource__, __polymorphic_allocator__
* __error_category__, __error_code__, __error_condition__, __system_error__

The requirements for Boost.JSON depend on whether the library is used
as part of Boost, or in the standalone flavor (without Boost):

[heading Using Boost]

* Requires only C++11
* The default configuration
* Aliases for standard types use their Boost equivalents
* Link to a built static or dynamic Boost library, or use header-only (below)
* Supports -fno-exceptions, detected automatically

[heading Without Boost]

* Requires C++17
* Aliases for standard types use their `std` equivalents
* Obtained when defining the macro `BOOST_JSON_STANDALONE`
* Link to a built static or dynamic standalone library, or use header-only (below)
* Supports -fno-exceptions: define `BOOST_NO_EXCEPTIONS` and `boost::throw_exception` manually

[heading Header-Only]

To use Boost.JSON header-only; that is, to eliminate the requirement
to modify build scripts to link to a static or dynamic library, simply
place the following line in any new or existing translation unit in your
project.
```
#include <boost/json/src.hpp>
```

[note
    The library uses separate inline namespacing for the standalone
    flavor to allow libraries which use different flavors to compose
    without causing link errors. Linking to both flavors of Boost.JSON
    is possible, but not recommended.
]

[endsect]

[/-----------------------------------------------------------------------------]

[section Supported Compilers]

Boost.JSON has been tested with the following compilers:

* clang-3.8
* clang-4.0
* clang-5.0
* clang-6.0
* clang-6
* clang-7
* clang-8
* clang-9
* gcc-4.8
* gcc-4.9
* gcc-5
* gcc-6
* gcc-7
* gcc-8
* gcc-9
* msvc-14.1+

[heading Quality Assurance]

The development infrastructure for the library includes
these per-commit analyses:

* coverage reports
* benchmark performance comparisons
* compilation and tests on Travis, Azure Pipelines, Appveyor
* fuzzing using clang-llvm and machine learning

[endsect]

[/-----------------------------------------------------------------------------]

[heading Frequently Asked Questions]

[variablelist

[[
    "Isn't simdjson faster?"
][
    These libraries are not comparable.
    The output of the simdjson parser is a read-only structure. 
    In other words, it can't be changed, and the only way to create one is
    by parsing a JSON string. On the other hand, Boost.JSON allows you to
    modify the container holding the parsed JSON, or even build a JSON
    document from scratch through the container interface.
]]

[[
    "I want to parse directly into my own data structures"
][
    The purpose of this library is to enable algorithms which implement
    JSON functionality in their public interfaces to be interoperable,
    by providing a __value__ type that meets the bar for vocabulary
    type suitability. Parsing directly into a user defined type offers
    some advantages but is not the goal of the library. However, users
    who wish to parse directly into their own types may implement a
    custom handler for this purpose.
]]

[[
    "Why not use a standard __Allocator__?"
][
    Using standard allocators would require that __value__ be declared
    as a class template, which would impose an additional compilation
    burden. By avoiding the template, most of the function definitions
    in the library can be excluded from the headers and emitted in a
    separate static or dynamic library.
]]

[[
    "Why use __storage_ptr__ over __polymorphic_allocator__?
][
    __polymorphic_allocator__ treats the memory resource as a reference
    with respect to ownership. Boost.JSON uses a reference counted
    smart pointer container to simplify the lifetime management of
    memory resources. In addition to being reference counted,
    __storage_ptr__ can function as an uncounted reference wrapper
    around a __memory_resource__.
]]

[[
    "Why __string__ instead of __std_string__?"
][
    The string provided by the library uses the __storage_ptr__
    allocator model, has the same interface on all C++ versions,
    and has an optimized class layout to keep the size of JSON
    values small. __string__ also implements an improved interface
    that replaces extraneous overloads with ones that
    use __string_view__.
]]

]

[/-----------------------------------------------------------------------------]

[section Credits]

This library wouldn't be where it is today without the help of
[@https://github.com/pdimov Peter Dimov]
for design advice and optimization assistance.

[endsect]

[/-----------------------------------------------------------------------------]

[endsect]
